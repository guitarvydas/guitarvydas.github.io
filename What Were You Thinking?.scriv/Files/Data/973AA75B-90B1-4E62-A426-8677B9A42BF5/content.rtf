{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Multitasking is, fundamentally, a method of writing calculators enclosed in envelopes.  The envelopes can co-exist on a single computer.  \
\
When a calculator runs inside of an envelope, it gets the undivided attention of the computer.  \
\
When a calculator waits for something to {\field{\*\fldinst{HYPERLINK "scrivcmt://C23CF75E-7B94-41E8-B787-9E457595587A"}}{\fldrslt happen}}, its envelope "gives up" the computer power and allows another envelope to run its calculator.\
\
This envelope pattern is so common that it has been wrapped into a library.  The library is often called an 
\f1\i Operating
\f0\i0  
\f1\i System
\f0\i0 .\
\
As an analogy, imagine a very fast Ferrari automobile.  It can drive very quickly, but, it has to stop and idle its engine when it arrives at a red traffic light.  It would be nice to not "waste" the engine's power at a red light.  It would be nice to transfer that engine power to some other automobile.  We can't do that with a Ferrari, but we can do that kind of thing in a computer that is using a multitasking library.\
\
The problem with multitasking is its fundamental premise that the transfer of power can happen 
\f1\i at any time
\f0\i0 .  That's called "full preemption".\
\
A true concurrent application can transfer power in a predictable {\field{\*\fldinst{HYPERLINK "scrivcmt://779AF340-B9B9-4F33-9E20-26C324B0AD34"}}{\fldrslt manner}}, whereas multitasking assumes that power transer is unpredictable.\
\
This unpredictability has given multitasking a bad reputation.  This assumption has led to many accidental {\field{\*\fldinst{HYPERLINK "scrivcmt://A0C8D4ED-FF01-4E4D-ABB6-F595E85BA11A"}}{\fldrslt complexities.}}\
\
Multitasking is but a subset of true concurrency.  We can't control the power transfer, we must always assume that the transfer can happen at any time.  \
\
We can write calculator programs using this set of assumptions, but, these assumptions make it hard to write controller programs.\
\
We have been playing whack-a-mole" with this issue for decades.\
\
We see some light at the end of the tunnel creeping in with technologies such as callbacks and node.js.  These technologies are very low-level and are very hard-to-use, since they try to be the "best of both worlds", both calculator-like and controller-like operations, but deliver neither in a convenient form.\
}