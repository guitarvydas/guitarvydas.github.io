#!/bin/bash
#
## inputs:
## filename (fd 3)
## go (fd 4)
#
## outputs:
## prefix (fd 5) (YYYY-MM-DD)
## fullprefix (fd 6) (YYYY-MM-DD-HH-MM-SS)
#
./debug-entry "[$1] $0"

read filename </dev/fd/3
read go </dev/fd/4

if [ "go" == "${go}" ]
then
    prefix=`date "+%Y-%m-%d"`
    base=`basename "${filename}"`
    # error check needed here - filename should not be "" at this point
    creation_time=`grep "<meta name=\"CreationTime\"" "${filename}/${base}"`
    if [ ! -z "${creation_time}" ]
    then
	prefix=`echo "${creation_time}" | sed -e 's/<meta name="CreationTime" content="\(202.-..-..\)T..:..:..Z">/\1/'`
	fullprefix=`echo "${creation_time}" | sed -e 's/<meta name="CreationTime" content="\(202.-..-..\)T\(..\):\(..\):\(..\)Z">/\1-\2-\3-\4/'`
    else
	dt=`date "+%Y-%m-%d"`
	fdt=`date "+%Y-%m-%d-%H-%M-%S"`
	prefix=${dt}
	fullprefix=${fdt}
    fi
    echo "${prefix}" >/dev/fd/5 &
    echo "${fullprefix}" >/dev/fd/6 &
else
    # this is required because bash does not actually support concurrency 
    # bash imposes a rendezvous regimen on named pipes and blocks processes until all pipes have 2 ends
    # this causes deep dependency chains
    # (in true concurrency, we would be allowed to create pipes even when one end has not yet been created, and we would not need these two lines of code)
    # (rendezvous causes dependencies, which causes accidental complexity, which causes lots of head-scratching)
    # (rendezvous can be implemented using an ACK/NAK protocol)
    # (at the least, this pertains to bash under MacOSX Catalina, probably elsewhere, too)
    echo "???" >/dev/fd/5 &
    echo "???" >/dev/fd/6 &
fi
./debug-exit "[$1] $0"

