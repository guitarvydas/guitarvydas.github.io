{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid302\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid402\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid502\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid702\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}}
\deftab709
\pard\pardeftab709\sb240\sa120\qc\partightenfactor0

\f0\b\fs56 \cf0 Concurrency Is Not Parallelism\
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls1\ilvl1
\f1\b0\fs24 \cf0 	
\f0\b\fs32 Central Point\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f1\b0\fs24 \cf0 Concurrency is a programming 
\i paradigm
\i0 .\
Parallelism is an application problem, 
\i not
\i0  a paradigm.  Parallel programs must use the concurrent paradigm.  Concurrent programs, though, are not necessarily parallel.\
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls2\ilvl1\cf0 	
\f0\b\fs32 Rob Pike\'92s Talk\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f1\b0\fs24 \cf0 https://vimeo.com/49718712\
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls3\ilvl1\cf0 	
\f0\b\fs32 Conflating Concurrency and Parallelism\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f1\b0\fs24 \cf0 I used to conflate parallelism and concurrency until I watched Rob Pike\'92s talk.\
I used to try to convince people that they could write concurrent programs using something \'93better\'94 than Processes (Threads).  What I didn\'92t realize was that I was trying to explain the difference between the \ul \ulc0 paradigm\ulnone  called \'93concurrency\'94 and the application \ul \ulc0 problem\ulnone  called \'93parallelism\'94.\
A parallel program 
\i must
\i0  run on multiple processors.\
A program designed using the concurrent paradigm can run on a 
\i single
\i0  Processor or on multiple processors.  \
The advantages of using the concurrent paradigm can be seen even on a single processor system.\
One can write concurrent software that uses only a single Processor.  One cannot write parallel software that uses a single Processor.  One can 
\i simulate
\i0  parallel software on a single processor, but this is not necessary (although it might help debugging, while hindering debugging).  \
Multi-tasking \'96 as we know it today \'96 is a 
\i simulation
\i0  of parallelism.  Multi-tasking, as we know it today, tries valiantly to solve too many problems at once \'96 e.g. memory sharing, bandwidth optimization, time-sharing, etc.  Multi-tasking as we know it today, is a simulation of parallelism that attempts to optimize concurrency using multiple stacks (a form of memory sharing optimization + processor optimization and sharing).\
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls4\ilvl1\cf0 	
\f0\b\fs32 Implementing the Concurrent Paradigm\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f1\b0\fs24 \cf0 A concurrent system is composed of a number of 
\i closures
\i0 .  There is a single distinguished routine, called the Dispatcher().  The Distpacher() invokes closures, at random.\
That\'92s all there is.\
It is simple \'96 almost too simple \'96 to implement concurrency in any language that supports 
\i closures
\i0 .  It is possible to implement the concurrent paradigm in C or assembler, too, one just needs to pay more attention to details.\
As simple as this sounds, the concurrent paradigm forces one to program in a completely different manner.  The program cannot rely on synchrony.  The program \'96 composed of many communicating closures \'96 must be written in a way that acknowledges that 
\i any
\i0  closure might be awakened at 
\i any 
\i0 time (by the Dispatcher()).\
This seemingly simple requirement causes programmers to re-evaluate control-flow coupling.\
Operating system Processes and threading libraries are heavy-handed approaches to creating closures and a Dispatcher().  In some, 
\i but not most
\i0 , cases it is necessary to use hardware to protect one program from another (e.g. MMUs).  In some, 
\i but not most
\i0 , cases it is necessary to optimize memory usage using memory-sharing and stacks (stacks are just an optimized form of linked lists).  In some, 
\i but not most
\i0 , cases it is necessary to use time-sharing.  When you strip these features out of threading libraries, you get multi-tasking that is easy.  Closures have been around for a long time, and they don\'92t require MMUs, memory sharing, stacks and time-sharing.\
Closures are like GOTOs \'96 they 
\i can
\i0  be misused.  Organizing closures in a hierarchical manner (see my other essays on this subject) is one way to tame their use.  We have found that we need \'93languages\'94 that encourage certain usage patterns \'96 e.g. C vs. assembler programming (C encourages Structured control flow, through if-then-else statements, etc.) - e.g. OO encourages data encapsulation (but leaves control-flow encapsulation wide open, if not worse off).\
GOTOs are assembler-level details.  GOTOs must exist.  GOTOs must be tamed.  Likewise, Closures exist and must be tamed.\
Message-passing is another GOTO-like atomic element.  It must be tamed.  Message-passing enables the concurrent paradigm.  A component can send another component a message, but the receiving component is not constrained as to when it deals with the message.  Message-passing defeats rendezvous.  Message-passing allows asynchrony.  The concurrent paradigm requires asynchrony.   \
Backus asked \'93Can Programming Be Liberated From The von Neumann Style?\'94.  The question is a good one.  The answer that Backus proposed was insufficient, though.  Mathematics, as we know it today, implies synchronous evaluation.  We need to think of mathematics and synchrony being 
\i isolated
\i0  on asynchronous 
\i islands
\i0 .\
Computers are parallel by default.  Forcing synchrony onto every part of computing is contrary to the manner in which computers work.  For example, multi-tasking is considered to be a \'93hard\'94 problem mostly because multi-tasking is being solved using only one paradigm \'96 a paradigm that is not the best choice for every problem in a particular solution.  It is like trying to emulate C-like 
\i format
\i0  statements in PROLOG.  It can be done, but results in accidental complexity. \
\'93Yes\'94 to synchronous operations floating on asynchronous islands.\
\'93No\'94 to synchronous 
\i everything
\i0 .\
It is OK to use more than one paradigm at a time.  For example, again, PROLOG leads the way towards thinking in relational terms, but casting 
\i everything 
\i0 as a relation brings unnecessary difficulty.\
Paradigms are DSLs draped over full-featured {\field{\*\fldinst{HYPERLINK "scrivcmt://FAB76D30-EC1F-4DEF-B25A-5F4788F652AA"}}{\fldrslt assemblers.}}\
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls5\ilvl1\cf0 	
\f0\b\fs32 The Concurrent API\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f1\b0\fs24 \cf0 The API for the concurrent paradigm consists of one routine \'96 {\field{\*\fldinst{HYPERLINK "scrivcmt://FE525FBE-4084-4642-9DAA-AC50CCD0B1FC"}}{\fldrslt Send().}}\uc0\u8232 \
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls6\ilvl1\cf0 	
\f0\b\fs32 Examples of the Concurrent Paradigm\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f1\b0\fs24 \cf0 These are some examples of the concurrent paradigm:\
\pard\pardeftab709\li720\fi-360\sl276\slmult1\sa140\partightenfactor0
\ls7\ilvl0
\f0 \cf0 \'95	
\f1 UNIX\'ae shell pipelines\
\ls7\ilvl0
\f0 \'95	
\f1 closures using queues/mailboxes for inter-closure communication.\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0
\cf0 O/S threads, and threading libraries, are often conflated with the concurrent paradigm.  O/S threads \'96 and many threading libraries \'96 solve much greater {\field{\*\fldinst{HYPERLINK "scrivcmt://3BAB6F26-BE8E-42E2-9145-5AD55BAC49DD"}}{\fldrslt problems,}} and are poor examples of the concurrent paradigm.\
\pard\pardeftab709\sb200\sa120\partightenfactor0
\ls8\ilvl1\cf0 	
\f0\b\fs32 Advantages to Using the Concurrent Paradigm\
\pard\pardeftab709\li720\fi-360\sl276\slmult1\sa140\partightenfactor0
\ls9\ilvl0
\b0\fs24 \cf0 \'95	
\f1 Encourages the absence of dependencies\
\ls9\ilvl0
\f0 \'95	
\f1 Isolation.}