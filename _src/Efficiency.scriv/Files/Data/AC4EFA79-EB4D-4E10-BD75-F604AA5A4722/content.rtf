{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab709
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f0\fs24 \cf0 Using C++ will not automatically produce more efficient code.\
Using Rust will not automatically produce more efficient code.\
Using C will not automatically produce more efficient code.\
Learning to use a debugger is a step towards producing efficient code.\
Learning to use a profiler is a step toward producing efficient code.\
Rust\'92s Ownership concept has been tried before.  See {\field{\*\fldinst{HYPERLINK "scrivcmt://6F2A91DC-2DDF-44F8-81D7-F15F10867E40"}}{\fldrslt FBP.}}   \
I used ownership in the 1990\'92s, but called it \'93physical objects\'94.  I didn\'92t write about it.  Garbage Collection turned out to be more convenient.\
Lisp uses Garbage Collection, but it is possible to craft a Lisp program that doesn\'92t need Garbage Collection during its steady state.  Lisp allocates and GC\'92s memory when CONS is called.  It is possible to write Lisp code that doesn\'92t invoke CONS.\
Efficiency is a per-project concern and cannot, reasonably, be generalized.\
Efficiency is the concern of Efficiency Engineering.  Efficiency concerns should not pollute Architectural concerns.\
}