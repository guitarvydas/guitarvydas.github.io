{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs26 \cf0 {\listtext	1.	}Multitasking is easy, if you remove time-sharing and memory-sharing.\
{\listtext	2.	}Sequencing of programs is part of design.\
{\listtext	3.	}DI (Design Intent) is important.\
{\listtext	4.	}The word "Architecture" is diluted and has many meanings.\
{\listtext	5.	}Concurrency is not Parallelism.\
{\listtext	6.	}Diagrams should be considered part of {\field{\*\fldinst{HYPERLINK "scrivcmt://F71C86EF-7809-4E3E-9528-44A344A7811F"}}{\fldrslt PL}} syntax.  I call this {\field{\*\fldinst{HYPERLINK "scrivcmt://07412F5B-C7CF-45AE-91BF-6C9CAE886BE8"}}{\fldrslt DaS.}}\
{\listtext	7.	}Flat 
\f1\i <anything>
\f0\i0  will not {\field{\*\fldinst{HYPERLINK "scrivcmt://52F30467-542F-4FBF-BE97-4A24D51F477D"}}{\fldrslt scale.}}\
{\listtext	8.	}Text-only thinking has caused accidental complexity in the design of PLs, e.g. 
\f1\i exceptions 
\f0\i0 are not exceptional, 
\f1\i parameter lists
\f0\i0  are only one way to transfer data to a routine, 
\f1\i return
\f0\i0  values are only one way to transfer result data to the caller, etc.\
{\listtext	9.	}Loop is the exception, not the rule (this includes recursion).  Loop syntax limits our thinking about distributed system designs.\
{\listtext	10.	}Concerns for memory sharing, time-sharing, etc., have caused accidental complexity.  Newer computing hardware is no longer limited by concerns for memory recycling and processing power.  PL design has not kept up with such advances in computer abilities.\
{\listtext	11.	}I believe that multiple paradigms should be used in practice when solving real problems.\
{\listtext	12.	}I highly endorse the use of multiple DSLs to solve real problems.\
{\listtext	13.	}Engineering is not coding.  Coding is not Engineering.  \
{\listtext	14.	}Certain languages have a plethora of features.  We should treat these languages as 
\f1\i assembly languages
\f0\i0  and build new-breed "HLLs" with them.\
{\listtext	15.	}The Divide and Conquer paradigm is under-used.\
{\listtext	16.	}Simplicity is {\field{\*\fldinst{HYPERLINK "scrivcmt://4D02DCB8-9AC4-444B-9334-C8A4DEF2D7A1"}}{\fldrslt hard.}}\
{\listtext	17.	}Systems built on a single paradigm are bound to {\field{\*\fldinst{HYPERLINK "scrivcmt://F5800E3B-044C-4A0C-B414-482C36727ED1"}}{\fldrslt fail.}}\
	}