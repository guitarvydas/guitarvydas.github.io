{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 The script, z.bash takes input from two pipes, pipe1 and pipe2.\
\
Bash, on MacOSX (Catalina), does not let z.bash run until both pipes are "instantiated" by having 2 ends.\
\
If we use the first script, 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 z.bash 
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26 runs and blocks until its pipes are instantiated.  This means that the first script blocks on the call to
\f1\fs24 <$Scr_Cs::0>
\f2\fs22  z.bash
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26  and never succeeds in running the 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 echo
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26  lines.  Both 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 echoes
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26  are needed before 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 z.bash 
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26 can be instantiated.\
\
The second script suffers the same fate, even though we've spawned the echos as separate processes.\
\
The third script doesn't hang, because 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 z.bash
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26  is spawned - asynchronously - and the script is allowed to continue.  In fact, 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 z.bash
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26  does hang until its pipes have been instantiated, but that happens in another process which doesn't affect the operation of the third script.}