{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 If this sounds confusing, it's because it is confusing.\
\
The semantics of 
\f1\i bash
\f0\i0  fit someone elses' problem, just not this above - very simple - problem.  
\f1\i [Actually, I haven't dug too deeply into this problem - I'm blaming bash, but maybe I should blame UNIX, or just the combination of bash + MacOSX, or \'85 TC;DB (too complicated, didn't bother)].\

\f0\i0 \
AFAICT, something is causing
\f2\fs24 <$Scr_Cs::0>
\f3\fs22  z.bash
\f2\fs24 <!$Scr_Cs::0>
\f0\fs26  to wait until both ends of all of its pipes had been instantiated.  This smacks of 
\f1\i rendezvous
\f0\i0  semantics.\
\
}