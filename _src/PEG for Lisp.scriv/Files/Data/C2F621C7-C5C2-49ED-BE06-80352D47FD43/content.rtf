{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;\red71\green71\blue71;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c34902\c34902\c34902;\cssrgb\c0\c0\c0;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 PEGs define a parser in \'93top down\'94 manner\
\cf3 \strokec3 \
\cf2 \strokec2 YACC (LR) defines a 
\f1\i language
\f0\i0  in \'93bottom up\'94 manner\cf3 \strokec3 \
\cf2 \strokec2 \
LR can be more rigorous but, also, harder to use\cf3 \strokec3 \
\cf2 \strokec2 \
 PEG (and Recursive Descent) can parse matching parentheses, YACC cannot\cf3 \strokec3 \
\cf2 \strokec2 \
PEG does (some) backtracking, resulting in \'93more natural\'94 feeling for programmers\'a0 (PROLOG & TXL do full backtracking, more than PEG).\cf3 \strokec3 \
\cf2 \strokec2 \
PEG (packrat) memoizes some sequences, making backtracking tractable.\cf3 \strokec3 \
}