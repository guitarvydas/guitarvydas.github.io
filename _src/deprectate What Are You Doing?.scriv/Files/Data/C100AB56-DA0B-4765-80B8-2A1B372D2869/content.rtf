{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Concurrency is a paradigm that allows a programmer to write code to coordinate many asynchronous operations.\
\
Many calculator-languages provide something called threads and multitasking.  This is not the same as concurrency.\
\
Concurrency is not {\field{\*\fldinst{HYPERLINK "scrivcmt://30E5F628-BC24-4A99-A8B5-BDCB60C7CDBC"}}{\fldrslt parallelism.}}\
\
Concurrency is not multitasking.\
\
Concurrency, fundamentally, means that data transfer happens in two stages.  (1) Send the data and (2) receive the data.\
\
In calculator-like languages, data transfer happens all-at-once.  When a function is called, the function receives all of its parameters all-at-once.  When a function 
\f1\fs24 <$Scr_Cs::0>
\f2\fs22 return
\f1\fs24 <!$Scr_Cs::0>
\f0\fs26 s all the returned data is returned all-at-once.  When a function aborts, it returns data via syntactic sugar called 
\f3\i exception handling
\f0\i0 .\
\
[
\f3\i Note that exception handling is just a symptom of trying to use the calculator paradigm for a concurrent operation
\f0\i0 . 
\f3\i  A true concurrent operation would consist of 
\f1\i0\fs24 <$Scr_Cs::0>
\f2\fs22 send
\f1\fs24 <!$Scr_Cs::0>
\f3\i\fs26 ing one of two results - success or failure.  In true concurrency, the results could be sent to two completely different agents.
\f0\i0 ]}