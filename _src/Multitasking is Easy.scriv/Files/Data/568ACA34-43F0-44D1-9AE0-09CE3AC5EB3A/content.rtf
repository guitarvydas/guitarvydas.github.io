{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\froman\fcharset0 Times-Roman;
\f3\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$ScrKeepWithNext><$Scr_H::1><$Scr_Ps::0>
\f1\b\fs36 Multi-Tasking is Easy\
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f0\b0\fs24 \cf0 <!$Scr_H::1><!$Scr_Ps::0>
\f2 \
Multi-tasking is easy.\
Multi-tasking has been conflated with the harder problems of 
\f3\i time-sharing
\f2\i0  and 
\f3\i memory-management
\f2\i0 .\
Time-sharing is useful to only a small set of domains \'96 sharing a computer between multiple users.  \
This used to be an important consideration when CPUs were expensive (and not well-understood) and when memory was expensive.\
Conflating multi-tasking with time-sharing and memory-sharing has caused large amounts of accidental complexity.\
When cost and time-sharing and memory-sharing are dropped from the equation, we are left with the bare essentials of multi-tasking \'96 a number of distributed {\field{\*\fldinst{HYPERLINK "scrivcmt://28E3D3D3-0AEB-47BE-B8D8-B86BB0805976"}}{\fldrslt processor}} nodes communicating with one another across wires.\
I know of no popular programming languages that target the design of such simple distributed systems.  Most common programming languages target the design of single nodes within such a simple network.\
There are some languages that target this domain, like 
\f3\i bash
\f2\i0 , {\field{\*\fldinst{HYPERLINK "scrivcmt://394D796B-4B02-45A8-A85E-FA1E06C4B66F"}}{\fldrslt FBP,}} and coordination languages, but they are not very popular.  
\f3\i Bash
\f2\i0  is relatively popular, but it is not recognized as a bona-fide programming language.\

\f3\i Concurrency
\f2\i0  is a design paradigm.  
\f3\i Parallelism 
\f2\i0 is a design issue and should not be conflated with {\field{\*\fldinst{HYPERLINK "scrivcmt://7D9BBE4F-C17A-441C-B8E7-F0973D59A8ED"}}{\fldrslt 
\f3\i concurrency
\f2\i0 .}}  A parallel solution requires the use of the concurrent paradigm, but, the concurrent paradigm does not imply parallelism.  
\f3\i Time-sharing
\f2\i0  has been conflated with 
\f3\i parallelism
\f2\i0  which has been conflated with 
\f3\i concurrency
\f2\i0 .  This conflation has caused much confusion and has caused much accidental complexity.  
\f3\i Parallelism
\f2\i0  has, further, been conflated with 
\f3\i memory-sharing
\f2\i0 .  A further complication is the use of a text-only syntax to describe 
\f3\i time-shared, parallel
\f2\i0  solutions.  This text-only fixation, has led to complicated concepts like 
\f3\i futures
\f2\i0 , 
\f3\i promises, exceptions, etc., 
\f2\i0 all of which can be more simply described in a concurrent paradigm.}