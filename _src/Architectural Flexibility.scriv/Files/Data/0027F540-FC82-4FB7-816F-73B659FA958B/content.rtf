{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 To achieve flexibility, we require:\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul dependencies\ulnone  - components have no dependencies (or very few and very explicit)\
{\listtext	\uc0\u8226 	}\ul isolation\ulnone  - components are isolated from one another, in memory, control flow, namespaces, etc.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
Present technologies encourage the use of dependencies.  Tools, such as 
\f1\i make
\f0\i0 , 
\f1\i npm
\f0\i0 , 
\f1\i etc.
\f0\i0  are provided to manage dependencies.  The goal of zero-dependencies means that 
\f1\i make, npm, etc. 
\f0\i0 must not be used during construction of a software system.\
\
OO provides encapsulation of data, but does not provide encapsulation of control flow.  In fact, OO creates spaghetti control flow paths by allowing method overriding.\
\
Operating system processes provide encapsulation of control flow and namespace isolation.\
\
Present languages allow naming of targets.  For example, to call a function, one must specify the name of the called function.\
\
DLLs - dynamic link libraries, place a layer of indirection between callers and callees.\
\
Calling a function usually involves pushing a 
\f1\i breadcrumb
\f0\i0  onto a stack. Often, the 
\f1\i breadcrumb
\f0\i0  is hidden from programmers' view. This creates  dynamic dependency chains which are often expressed as backtraces when problems occur.\
\
Present-day function syntax requires syntactic sugaring to express data delivered as parameters, a different syntactic sugaring for data delivered as return values and yet another syntactic sugaring for data delivered as exceptions. }