{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 The system in this simple example consists of an HTML 
\f1\i input file
\f0\i0  component and an HTML 
\f1\i paragraph
\f0\i0  component that displays the contents of the file.\
\
Obviously, such a system can be directly implemented - and easily understood - as HTML + JavaScript.  The intention here, though, is to show the \ul fundamentals\ulnone  of creating large systems using pluggable components.\
\
In essence, what we want is:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs18 <input type="file" id="part1" onchange="sendMessageToPart2(\'85)>\'85</input>\
<p id="part2"></p>\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\fs22 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 Further, we want a top-level component that "owns" these two components.\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\fs18 \cf0 <div id="topLevel">\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs18 <input type="file" id="part1" onchange="sendMessageToPart2(\'85)>\'85</input>\
<p id="part2"></p>\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs18 </div>\

\fs26 \
We want the top-level component to route messages between its children.  \
\
The children cannot send messages directly to one another.  \
\
Routing of messages is done only by parent components.\
\
The routing is represented as an Nx2 table in the parent part (in this case "topLevel"). \
\
I use the name "wire" to refer to each row in the table.  \
\
Each wire contains one sender and 0-or-more receivers.  \
\
Every reference to a part consists of two parts - the id of the part and a {\field{\*\fldinst{HYPERLINK "scrivcmt://33C7F176-1212-457E-94BC-4CDB02A6E069"}}{\fldrslt string}} which I call a {\field{\*\fldinst{HYPERLINK "scrivcmt://457351C0-D2D6-4376-876C-EF55A87E3226"}}{\fldrslt 
\f1\i pin}}
\f1\i .
\f0\i0 \
\
The 
\f1\i pin
\f0\i0  is merely a selector which can be used to subdivide messages.\
\
So, the above is embellished as:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs18 <div id="topLevel">\
  <input type="file" id="part1" onchange="sendMessageToPart2(\'85)>\'85</input>\
  <p id="part2"></p>\
  <wire> \
    <sender ref="[part1,'fileObject']" />\
    <receiver ref="[part2,'displayText']" />\
  </wire>\
</div>\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 \
Note that a wire can have zero (0) receivers.  This is named {\field{\*\fldinst{HYPERLINK "scrivcmt://5F23FA22-8701-4ED3-8BBE-B5BBD21ADC9B"}}{\fldrslt NC}} (for No Connection).  An event that arrives at an NC is simply {\field{\*\fldinst{HYPERLINK "scrivcmt://E75261C4-A492-4B2F-8DA0-E15CDA67AD1E"}}{\fldrslt ignored (dropped)}}.\
\
Note, also, that the wiring table (routing table) is stored in the 
\f1\i parent
\f0\i0  {\field{\*\fldinst{HYPERLINK "scrivcmt://55960C7C-F2DF-47EA-AD70-7CFE665F7EB4"}}{\fldrslt 
\f1\i schematic}} (div) and not in the children.  The children \ul must\ulnone  not communicate directly with one {\field{\*\fldinst{HYPERLINK "scrivcmt://2386B120-CC6A-4E0C-B125-7B49C42B7680"}}{\fldrslt another.}}  This is an important design principle for maintaining architectural flexibility, e.g. an architecture can be 
\f1\i reused
\f0\i0  by simply changing the wiring table.  \
\
The pseudo-code above shows "sendMessageToPart2" which directly names "part2".  This, in my opinion, is bad {\field{\*\fldinst{HYPERLINK "scrivcmt://89DFB343-42D0-4FB8-962A-3F3D4FBC2630"}}{\fldrslt practice}}.  The above example is only meant as a stepping-stone between current practices and better componentization.  A further rewrite that avoids this problem is:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs20 <div id="topLevel">\
  <input type="file" id="part1" onchange="sendChanged()">\'85</input>\
  <p id="part2" onreact="display()"></p>\
  <wire> \
    <sender ref="[part1,'changed']" />\
    <receiver ref="[part2,'displayText']" />\
  </wire>\
</div>\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 \
where "sendChanged()" is a JavaScript routine, associated with the 
\f1\i input file
\f0\i0  component, that sends the File {\field{\*\fldinst{HYPERLINK "scrivcmt://599935E5-520C-4CF2-8545-51F100F4C869"}}{\fldrslt object}} to its own "changed" 
\f1\i pin. 
\f0\i0 Note that, in this case, the 
\f1\i input file
\f0\i0  component doesn't know, nor need to know, where its output message will be routed, it simply 
\f1\i send()s
\f0\i0  a message to one of its own 
\f1\i pins
\f0\i0 .  The data (the File object) will arrive at part2 with the 
\f1\i pin
\f0\i0  tag 'displayText'.  This is specified by the 
\f1\i wire
\f0\i0  in the routing table of "topLevel".  All messages to "part2" will invoke the JavaScript routine "display(\'85)" using events of the form \{pin, data\}, which in this case will be \{'displayText',
\f1\i  fileObject
\f0\i0 \}.\
\
My working example1.html has the form:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs18 <div id="topLevel">\
    <script>\
        ... 
\f4\i details
\f3\i0  ...\
    </script>\
      \
      \
    <input type="file" id="part1" onchange="sendChanged()"></input>\
    <script>\
        ...  
\f4\i details
\f3\i0  ...\
    </script>\
      \
\
    <p id="part2"></p>\
    <script>\
        ... 
\f4\i details
\f3\i0  ...\
    </script>\
\
    <script>\
       // initialization of topLevel part\
       ... 
\f4\i details
\f3\i0  ...\
       /* map each output pin \{part,pin\} to an array of  \
          receivers [\{part,pin\},...] */\
          topLevel.initializeWires ( [ ... 
\f4\i details
\f3\i0  ... ] ); \
       </script>\
\
       <script>\
         var kernel = new Kernel (topLevel);\
       </script>\
    </script>\
</div>\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\fs22 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 \
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\i \cf0 Detail: [skip on first reading] - the 
\f2\i0\fs24 <$Scr_Cs::1>
\f3\fs22 onchange
\f2\fs24 <!$Scr_Cs::1>
\f1\i\fs26  event is defined by HTML.  
\f2\i0\fs24 <$Scr_Cs::1>
\f3\fs22 Onreact
\f2\fs24 <!$Scr_Cs::1>
\f1\i\fs26 , though, is a custom event.  In fact, I defined my own events - AGevents - in raw JavaScript, instead of relying on CustomEvent()s.  In this set of examples, I choose to use JavaScript's 
\f2\i0\fs24 <$Scr_Cs::1>
\f3\fs22 \{\'85\}
\f2\fs24 <!$Scr_Cs::1>
\f1\i\fs26  operator to define events on the spot, instead of defining a "class" for Events.  This is a design choice and nothing more.  The reader will note that 
\f2\i0\fs24 <$Scr_Cs::1>
\f3\fs22 Onreact
\f2\fs24 <!$Scr_Cs::1>
\f0\fs26  
\f1\i does not even appear in my code.}