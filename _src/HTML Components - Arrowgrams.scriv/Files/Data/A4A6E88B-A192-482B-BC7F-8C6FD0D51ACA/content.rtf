{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Line 20 of example1.html defines a standard HTML file input element.\
\
Lines 21-29 define the programmer-supplied JavaScript for this file selector element, namely the function 
\f1\i sendChanged()
\f0\i0 .\
\
When the user pushes the button and selects a file, the 
\f1\i sendChanged()
\f0\i0  function is called.  \
\
This function grabs the appropriate data from the part1 HTML element and 
\f1\i send()
\f0\i0 s it out the output pin of part1.  The output pin is called 'changed'.\
\
After the 
\f1\i send()
\f0\i0 , we call {\field{\*\fldinst{HYPERLINK "http://kernel.io"}}{\fldrslt 
\f1\i kernel.io}}
\f1\i ()
\f0\i0  to run the kernel dispatcher.  This is a detail that will, later, be performed automatically by the transpiler.  Only in this early example1.html, do we show the gory details of what is going on under the hood.\
\
In fact, {\field{\*\fldinst{HYPERLINK "http://kernel.io"}}{\fldrslt 
\f1\i kernel.io}}
\f1\i ()
\f0\i0  is an {\field{\*\fldinst{HYPERLINK "scrivcmt://2D404835-97FD-42AA-9278-EFC8DC453353"}}{\fldrslt optimization.}}  The kernel's dispatcher could 
\f1\i loop
\f0\i0  forever, running parts that are 
\f2\fs24 <$Scr_Cs::0>
\f3\fs22 ready
\f2\fs24 <!$Scr_Cs::0>
\f0\fs26  and obviate the need for calling {\field{\*\fldinst{HYPERLINK "http://kernel.io"}}{\fldrslt 
\f1\i kernel.io}}
\f1\i ()
\f0\i0 .  {\field{\*\fldinst{HYPERLINK "scrivcmt://DFDE4A9A-B498-4C43-B6B0-0892AF1BACE2"}}{\fldrslt This}} is a technique I learned by building production kernels on bare {\field{\*\fldinst{HYPERLINK "scrivcmt://3220C4C9-317F-4060-B5D1-A97B6E194C76"}}{\fldrslt metal}} and is suitable for asynchronous operation, like node.js calls.}