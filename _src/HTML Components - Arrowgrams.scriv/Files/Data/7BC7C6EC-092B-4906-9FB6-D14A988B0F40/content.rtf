{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 This system employs mutual multitasking between components.\
\
Mutual Multitasking was discredited as a way of building operating systems in early versions of Windows\'ae.\
\
Mutual Multitasking is, indeed, not a suitable paradigm for building time-sharing operating systems, where the operating system must guarantee isolation between components, but, mutual multitasking can be used to compose a single App - application.\
\
In the case of an App, a "bug" is just a bug, and it is not {\field{\*\fldinst{HYPERLINK "scrivcmt://D2D505D5-ED1A-4387-8EBA-587CEEABCDE7"}}{\fldrslt reasonable}} to expect a system to protect parts of the App from bugs in other parts of the App.  Mutual Multitasking is suitable for this kind of design.\
\
Mutual multitasking is inherently more efficient than time-sharing multi-tasking which uses full {\field{\*\fldinst{HYPERLINK "scrivcmt://251C4772-B96A-4A2C-9C0E-73DFD1181194"}}{\fldrslt preemption}}  In fact, time-sharing brings a lot of baggage and bugs that are not needed by most {\field{\*\fldinst{HYPERLINK "scrivcmt://BE6423F0-5FBA-4197-8013-5B8CA92F60A9"}}{\fldrslt Apps}}.}