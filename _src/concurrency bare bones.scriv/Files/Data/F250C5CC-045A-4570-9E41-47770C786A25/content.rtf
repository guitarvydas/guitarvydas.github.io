{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 We can implement a simulation of concurrent
\f1\i  parts
\f0\i0  in any programming language.\
\
For this, we need some routines.\
\
We need a dispatcher.\
\
We need a way to transfer data between routines.\
\
That's about it.\
\
Present-day multitasking is inflicted with accidental {\field{\*\fldinst{HYPERLINK "scrivcmt://F0332BD7-DFF6-44EC-A0BF-5C63B42CD22F"}}{\fldrslt complexity.}}  Multitasking seems to be difficult.  I will describe something much simpler, but just as useful.\
\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}
\f1\i Actions
\f0\i0  are functions with no user-defined parameters, no return values, no exceptions and no way to call other routines.\
{\listtext	2.	}A dispatcher is the only routine that can call other routines.  Called routines 
\f1\i always
\f0\i0  return to the dispatcher.\
{\listtext	3.	}We will transfer data using queues.\
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
}