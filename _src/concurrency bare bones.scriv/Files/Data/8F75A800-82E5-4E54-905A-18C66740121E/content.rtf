{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 Helvetica;\f4\froman\fcharset0 Palatino-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 I wish to keep this essay very simple, so I will describe an example which contains only two components.  One component Sends a string to the other component - the usual "Hello World".\
\
I will name the components "sender()" and "receiver()".\
\
In JavaScript, a 
\f1\i part
\f0\i0  is a function that receives messages.  [
\f1\i The function can use a switch statement (or an if-then-else) to examine the message's pin field, and decide which action to invoke.  In this simple example, we won't bother with pins, we'll just assume that every part has one input pin and one output pin.  We'll hard-code the wiring table in the JavaScript function that I call Send() (see section {\field{\*\fldinst{HYPERLINK "scrivlnk://AC3E30F3-B6CE-40C3-861A-1F58E5162503"}}{\fldrslt Send - JavaScript}}). \

\f0\i0 \
The component producer(), is:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs22 \cf0 	function producer (message) \{\
        send ("sender", "Hello World");\
    \}\
\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 and the component consumer() is\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f3\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 function consumer (message) \{\
    console.log (message);\
\}\
\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f3\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 Points to note:\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}producer() does not call consumer() directly\
{\listtext	\uc0\u8226 	}the 
\f1\i action
\f0\i0  in the producer 
\f1\i part
\f0\i0  consists of one line of JavaScript code (send (\'85))\
{\listtext	\uc0\u8226 	}the 
\f1\i action 
\f0\i0 in the consumer 
\f1\i part
\f0\i0  consists of one line of JavaScript code (console.log (\'85))\
{\listtext	\uc0\u8226 	}the 
\f1\i action
\f0\i0  code in producer does not bother to check the message - it just fires its result "Hello World" out of its output 
\f1\i pin\
\ls1\ilvl0
\f0\i0 {\listtext	\uc0\u8226 	}the 
\f1\i action 
\f0\i0 code of consumer doesn't bother to look at the incoming message, it just logs it (console.log (message))\
{\listtext	\uc0\u8226 	}neither 
\f1\i part
\f0\i0 , producer nor consumer
\f1\i , 
\f0\i0 gets to define the parameter list, there is 
\f4\b always
\f0\b0  one 
\f1\i message
\f0\i0  parameter passed in to the action code.\
}