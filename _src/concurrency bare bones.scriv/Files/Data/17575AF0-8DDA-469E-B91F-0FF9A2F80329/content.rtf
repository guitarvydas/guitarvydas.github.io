{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 [
\i Not Recommended!
\i0 ]\
\
The common way to implement concurrency in today's programming languages is to 
\i avoid
\i0  concurrency and to use 
\i threads
\i0 .\
\
Threads (aka processes) implement concurrency, but, the code inside them tends not to use the concurrent paradigm.  Instead, threads allow programmers to avoid concurrency (almost) entirely and to program in a sequential - decidedly non-concurrent - fashion.\
\
This has a cost.\
\'97 Paradigm\
\'97 Cpu power\
\'97 Dyamic call chain\
\'97 Conflate with issues - memory-sharing and time-sharing - that are not related to the concurrent paradigm.  This conflation has caused many programmers to conclude that concurrency\
}