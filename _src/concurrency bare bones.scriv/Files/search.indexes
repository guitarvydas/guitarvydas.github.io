<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="8F75A800-82E5-4E54-905A-18C66740121E">
            <Title>Components - JavaScript</Title>
            <Text>I wish to keep this essay very simple, so I will describe an example which contains only two components. One component Sends a string to the other component - the usual "Hello World". I will name the components "sender()" and "receiver()". In JavaScript, a part is a function that receives messages. [The function can use a switch statement (or an if-then-else) to examine the message's pin field, and decide which action to invoke. In this simple example, we won't bother with pins, we'll just assume that every part has one input pin and one output pin. We'll hard-code the wiring table in the JavaScript function that I call Send() (see section Send - JavaScript). The component producer(), is: function producer (message) { send ("sender", "Hello World"); } and the component consumer() is function consumer (message) { console.log (message); } Points to note: • producer() does not call consumer() directly • the action in the producer part consists of one line of JavaScript code (send (…)) • the action in the consumer part consists of one line of JavaScript code (console.log (…)) • the action code in producer does not bother to check the message - it just fires its result "Hello World" out of its output pin • the action code of consumer doesn't bother to look at the incoming message, it just logs it (console.log (message)) • neither part, producer nor consumer, gets to define the parameter list, there is always one message parameter passed in to the action code.</Text>
        </Document>
        <Document ID="EAEEC503-FBD4-478A-B00C-AC0B7350A9A5">
            <Title>Implementing Concurrency</Title>
        </Document>
    </Documents>
</SearchIndexes>