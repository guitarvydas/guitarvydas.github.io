{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 The new grammars now handle all of prolog-6.scm.\
\
I view the JavaScript output using my favourite pretty-printer (emacs, JavaScript-mode, in my case).\
\
I am manually eyeing the output backwards - starting with the final call to prove6().\
\
I see something suspicious in the transpilation of the function "resolve".\
\
I have saved the output in prolog-6.js.  Running "{\field{\*\fldinst{HYPERLINK "scrivcmt://5B91D0F8-F2B6-42DD-9F22-DA352B2915AC"}}{\fldrslt node}}" on it shows an error at function "back5".\
\
That gives me at least two errors to look at.\
\
I will start debugging by looking at back5.  I start with cutting back5 out of the full test and making a test harness for it.\
\
Back5 transpiled and formated, is:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 function back5(l,g,r,e,n) \{\
    return (function()\{\
	if (\
	    (function()\{\
		ifpair_Q_(g) && pair_Q_(r) \{\
		    return true;\
		\} else \{\
		    return false;\
		\}))\
	    ()\
	) \{\
	    return prove5(l,g,cdr(r),e,n);\
	\} else \{\
	    return prove5(L_l(l),L_g(l),cdr(L_r(l)),L_e(l),L_n(l));\
	\}\
    \})\
    ();\
\};\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The first obvious problem is the ifpair_Q_. The branching AND (&&) needs to be wrapped in parentheses and, for readability, the "if" could use a space before the expression.  Both of these problems can be addressed by adjusting the code for && (and ||).\
\
Next, there is a problem with CondClauses - MoreCondClause is defined as CondClause*.  Instead it should be defined as a CondClause and the * repetition is moved up into CondExpressionWithElse and CondExpressionWithoutElse.  Now, each MoreCondClause will be prefixed with "\} else if " instead of only the first MoreCondClause having this prefix.  (See commit 49ee1506144edb8bbca68e796ad3b4a94cdcb318).\
\
Next, another named let, that I overlooked, is in "lookup".  I rewrote this manually, as before.\
\
It seems that the grammar does not handle LETs with no bindings.  This appears in my manual rewrite of  "print_frame_loop".  Putting in dummy bindings (_xx and _yy) solves the immediate problem.  Since this problem appears only in my rewrite, I choose not to repair the grammar (at this time).\
\
I created references to cd*r().\
}