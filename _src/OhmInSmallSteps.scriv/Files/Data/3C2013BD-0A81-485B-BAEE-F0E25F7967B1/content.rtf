{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 PEG (and ohm-js) uses 
\f1\i greedy 
\f0\i0 matching.  It matches the longest possible phrase and doesn't turn back.\
\
This means that I can write a rule, like:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22   CondExpressionWithElse = BEGIN lexical_COND FirstCondClause MoreCondClause CondElseClause END\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 but not a rule like:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22  StatementBlock = Statement* LastStatement \
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The first pattern matches one CondClause then matches more CondClauses.\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f0\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The second pattern matches a bunch of statements, greedily matching all statements, then I want it to back up and leave one Statement to match LastStatement.  This back up doesn't happen and the pattern match fails.\
\
The corrected version of the rule is\
\
 StatementBlock = Statement+ \
\
I can handle the "last" statement in the semantics, since ohm-js gives me an Iter node containing statements.\
\
I would 
\f1\i prefer
\f0\i0  to have the pattern matcher tell me which is the last statement, without having to write code to walk the Iter node chain.\
\
Can I rewrite this?  Maybe, using ohm-js' lookahead operation.\
\
Maybe I can say something like:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f0\fs26 \

\f3\fs22 StatementBlock = MidStatement* LastStatement\
MidStatement = Statement &Statement\
LastStatement = Statement ~Statement\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 ?\
I'll try it out in the editor using "(a) (b) (c)" as input and selecting (from the pull-down) the start rule as StatementBlock.\
\
Note that the editor shows the input string at the top of the tree output window.  For every &, it shows the input an extra time.  For example when the above rules are use to parse "(a) (b) (c)", the editor shows two "(c)" even though the input contains only one "(c)".}