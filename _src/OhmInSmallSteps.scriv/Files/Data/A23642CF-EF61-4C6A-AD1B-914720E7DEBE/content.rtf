{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Ideally, I would want a grammar that inputs a string and produces a token stream which I could then feed into other grammars in a pipeline fashion.\
\
OMeta is able to run grammar pattern matchers on arbitrary input (e.g. strings and tokens).\
\
Ohm-JS cannot do this and works only with input strings (of characters).\
\
I can compromise and produce strings.  I'll ignore low-level efficiency for the moment and see that our idea works.  Later, I can switch to OMeta if needed.  It might turn out that everything works "fast enough" so, I might not need to switch to OMeta and keep our "dumb" implementation.\
\
}