{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 The first step towards pipelining grammars is to create a unity parser. The Unity parser contains a grammar plus an unparser.  \
\
The grammar I need is the bare minimum to parse prolog-6.scm. \
\
The unparser simply walks the CST (Concrete Syntax Tree) and re-emits the sub-trees as needed.\
\
Spaces and comments are dumped by the parser, so they don't appear in the CST and are not re-emitted.\
\
\
This exercise showed a deficiency in the original Scm2JSBasic grammar.  The grammar, as written, was slurping adjacent symbols and making them into single symbols.  The original grammar ignored spaces, including those that separated adjacent symbols.\
\
The original grammar was written using syntactic rules everywhere.\
\
The fix was to rewrite the grammar using lexical rules for the low-level recognizers.\
\
I, also, switched from using node.js to using HTML for the grammar.\
\
The result is in index.html.  (See commit 2e40532e25e63f4d3be1f8f37b18d37df266970d).\
\
index.html: (less prolog-6.scm code):\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 <!doctype html>\
<html>\
  <head>\
    <title>ohm/js in small steps</title>\
    <meta charset=utf-8>\
    <script src="/Users/tarvydas/projects/ohm/examples/lib.js"></script>\
    <script src="/Users/tarvydas/projects/ohm/dist/ohm.js"></script>\
    <script type="text/ohm-js">\
\
      // An Ohm grammar for Scheme, step 1.\
Scm2JSBasic \{\
  Program = Form+\
  Form = SList | Atom\
  QuotedSexp = "'" Form\
  BackQuotedSexp = "`" Form\
  CommaSexp = "," Form\
  SList = DottedList | NullTerminatedList\
  DottedList = "(" ListItem+ "." ListItem ")"\
  NullTerminatedList =   "(" ListItem+ ")"\
  ListItem = (Atom | SList)\
  Atom = lexical_atom | Syntactic_Atom\
  Syntactic_Atom = QuotedSexp | BackQuotedSexp | CommaSexp\
\
  lexical_atom = lexical_integer | lexical_symbol | lexical_string | lexical_boolean | lexical_nullList\
  lexical_nullList = "(" ")"\
  lexical_boolean = "#f" | "#t"\
  lexical_integer = lexical_numchar+\
  lexical_numchar = "0".."9"\
  lexical_string = "\\"" (~"\\"" any)+ "\\""\
  lexical_symbol = lexical_letchar (lexical_letchar | lexical_numchar)*\
  lexical_letchar = lexical_lc | lexical_uc | "+" | "*" | "!" | "?"  | "_" | "-"\
  lexical_lc = "a".."z"\
  lexical_uc = "A".."Z"\
  semiColonComment = ";" (~"\\n" any)* "\\n"\
  space += semiColonComment\
\}\
    </script>\
\
    <script>\
      var g = ohm.grammarFromScriptElement();\
    </script>\
\
    <script type="text/test">\
      (#t #f)\
    </script>\
    \
    <script type="text/test">\
      ( #t #f . #t)\
    </script>\
    \
    <script type="text/test">\
      ( . #t)\
    </script>\
    \
    <script type="text/test">\
      asymbol\
    </script>\
    \
    <script type="text/test">\
      (asymbol)\
    </script>\
\
    <script type="text/test">\
      (asymbol1 asymbol2)\
    </script>\
\
    <script type="text/test">\
      (asymbol1 asymbol2)\
      (asymbol3 asymbol4)\
    </script>\
\
    <script type="text/test">\
\'85 code for prolog-6.scm \'85\
    </script>\
\
    <script>\
\
      var sem = g.createSemantics();\
      \
      function toListOfStrings(a) \{\
	  return a.join(' ');\
      \}\
      \
      function toPackedString(a) \{\
	  return a.join('');\
      \}\
      \
      sem.addOperation(\
	  'unity',\
	  \{\
	      Program: function(tree) \{return toListOfStrings(tree.unity())\},\
	      Form: function(item) \{return item.unity()\},\
	      QuotedSexp: function(_, form) \{return "'" + form.unity()\},\
	      BackQuotedSexp: function(_, form) \{return "`" + form.unity()\},\
	      CommaSexp: function(_, form) \{return "," + form.unity()\},\
	      SList: function(lis) \{return lis.unity()\},\
	      DottedList: function(_lp, items, _dot, lastItem, _rp) \{\
		  return "(" + toListOfStrings(items.unity()) + " . " + lastItem.unity() + ")"\},\
	      NullTerminatedList: function(_lp, items, _rp) \{\
		  return "(" + toListOfStrings(items.unity()) + ")"\},\
	      ListItem: function(item) \{return item.unity()\},\
	      Atom: function(a) \{return a.unity()\},\
	      lexical_integer: function(ns) \{return toPackedString(ns.unity());\},\
	      lexical_symbol: function(c, cs) \{return c.unity() + toPackedString(cs.unity());\},\
	      lexical_string: function(_q1, chars, _q2) \{return "\\"" + toPackedString(chars.unity()) + "\\""\},\
	      lexical_letchar: function(c) \{return c.unity()\},\
	      lexical_numchar: function(c) \{return c.unity()\},\
	      lexical_lc: function(c) \{return c.unity()\},\
	      lexical_uc: function(c) \{return c.unity()\},\
\
	      lexical_nullList: function(_lp,_rp) \{return "()"\},\
	      lexical_boolean: function(b) \{return this.sourceString\},\
	      _terminal: function() \{ return this.primitiveValue; \}\
	  \}\
      );\
      \
    </script>\
\
\
\
    <script>\
      var tests = document.querySelectorAll('script[type="text/test"]');\
    </script>\
\
  </head>\
  <body>\
    <button onclick="ohmtest()">Click me</button>\
    <p id="timestamp"></p>\
    <p id="input"></p>\
    <p id="output"></p>\
    <script>\
      var resultsString = '';\
      \
      function displayDate () \{\
	  document.getElementById('timestamp').innerHTML = Date();\
      \}\
      function do1Test(testElement) \{\
	  var testString = testElement.innerHTML;\
	  var r = g.match(testString);\
	  var tail = "...";\
	  var charsToDisplay = 40;\
	  if (testString.length < charsToDisplay) \{\
	      tail = "";\
	  \}\
	  resultsString = resultsString + "<br>" + r.toString() + " " + testString.substring(0,charsToDisplay) + tail + (r.succeeded() ? (" <--- " + sem(r).unity()) : '');\
      \}\
      function displayTestResults(s) \{\
	  document.getElementById('input').innerHTML = s;\
      \}\
      function ohmtest () \{\
	  resultsString = '';\
	  console.log(tests);\
	  console.log(tests[0]);\
	  tests.forEach(do1Test);\
	  displayTestResults(resultsString);\
	  displayDate();\
      \}\
      ohmtest();\
    </script>\
  </body>\
</html>\
\

\f1\fs24 <!$Scr_Ps::0>}