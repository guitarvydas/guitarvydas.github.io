{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Ohm can parse matching pairs of delimiters.  This can't be done easily with YACC or REGEX.\
\
Ohm, PEG and recursive-descent parsers in general can include rules that call themselves.\
\
A very simple example is shown below\'85\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \
Program \{\
  code = matchingBraces+ eol\
  matchingBraces =    "\{" matchingBraces "\}" -- {\field{\*\fldinst{HYPERLINK "scrivcmt://012742B3-DC44-435B-A4B9-A4B00A19E951"}}{\fldrslt braces}}\
                    | innards\
  innards = "inside"\
  eol = "\\n"\
\}\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The "magic" happens in the "matchingBraces" rule.  It consumes an opening brace "\{", calls itself, then consumes a closing brace "\}".\
\
This grammar can parse nested sets of pairs, e.g. "\{\{inside\}\}".\
\
Pairtest.js:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \
\{\{inside\}\}\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 Pairs.js:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 // usage:\
// npm install ohm-js\
// node pairs.js\
\
\
const fs = require ('fs')\
const ohm = require ('ohm-js')\
const grammarData = fs.readFileSync('pairs.ohm')\
const grammar = ohm.grammar(grammarData)\
\
const input = fs.readFileSync('pairtest.js')\
\
const result = grammar.match(input)\
//console.log(grammar.trace(input).toString())\
\
if (result.succeeded()) \{\
    console.log("Matching Succeeded")\
\} else \{\
    console.log("Matching Failed")\
\}\
\
const semantics = grammar.createSemantics()\
\
// recursive function to get the source of a non-terminal node\
// from https://repl.it/talk/learn/Making-your-own-programming-language-with-NodeJS/45779\
const node_to_source = node => \{\
    if (node.ctorName == "_terminal") \{\
        return node.primitiveValue\
    \} else \{\
        return node.children.map(n => node_to_source(n)).join('')\
    \}\
\}\
\
semantics.addOperation(\
    'dump',\
    \{\
        code: (braced,eol) => \{\
	    return "matching pairs of braces=/" +  node_to_source(braced) + "/"\
        \}\
    \}\
)\
\
console.log(semantics(result).dump())\

\f1\fs24 <!$Scr_Ps::0>}