{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Lisp - and Scheme - does not have 
\f1\i statements
\f0\i0 .  Lisp only has expressions (called s-exprs) and special forms\
\
Every expression returns a value.  Always.\
\
To stay true to the semantics of Scheme, I must emit JS code that is expression-based.  This is possible in JS using 
\f1\i anonymous functions
\f0\i0 .  The emitted code is going to look horrible, but it will be a true representation of the original Scheme program.  Later, after I see things work and can regression test, I can try to "optimize" some of the sequences, so that they don't look as ugly.\
\
For example, whenever the parser sees an atom, we emit a function.\
\
If the atom is a number N, then the parser emits \
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 (function()\{return N;\})\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 If the atom is a string, say "abc", then the parser needs to emit:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 (function()\{return "abc";\})\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 When the parser sees a function call (an s-expr, where the first item is a function and the rest of the items are arguments), it emits a function which evaluates the arguments and returns a function which calls the intended function, say (fn a b c) becomes:\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f3\fs22 \cf0  (function()\{return {\field{\*\fldinst{HYPERLINK "scrivcmt://A4DD8CF5-AC92-42CE-9FC2-A76CC8D6F7FE"}}{\fldrslt fn(a(),b(),c();\})}}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
Below, is a list of all transformations I think I need:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 atom x --> (function()\{return x;\})\
SList (a b c) --> (function()\{return a(fb(),fc());\}) [where fb and fc are functions]\
special (and b c) --> (function()\{return _and([b,c]);\})\
special (or b c) --> (function()\{return _or([b,c]);\})\
special (not b) --> (function()\{return (b() == false) ? true : false;\})\
special (if x y z) --> (function()\{return (x() != false) ? y() : z();\})\
special (if x y) --> (function()\{return (x() != false) ? y() : null;\})\
special (cond ((a b c) (d e f))) --> (function()\{return _cond([[a,b,c],[d,e,f]])\})\
special (let ((a b) (c d)) d e f) --> (function(a=b(),c=d())\{return d(),e(),f();\})\
special (quote symbol) \'97> (function()\{return "symbol";\}) [since JS doesn't have symbols per se]\
special (quote N) \'97> (function()\{return N;\}) [where N is a number]\
special (quote "abc") \'97> (function()\{return "abc";\})\
special (quote #f) \'97> (function()\{return false;\})\
special (quote #t) \'97> (function()\{return true;\})\
special (quote (\'85)) \'97> (function()\{return new List(\'85);\})\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 I'm expecting to supply a small runtime library that defines functions _and(), _or() and _cond().  In Lisp, these things work like && and || in JS.  Each item is evaluated and evaluation
\f1\i  stops 
\f0\i0 as soon as one item is {\field{\*\fldinst{HYPERLINK "scrivcmt://C9A01BDA-C0E4-49D5-8427-07E5B3ED0BC7"}}{\fldrslt non-false.}}  It is imperative that unneeded arguments not be evaluated.  In the JS version, I will pass an array of (unevaluated) functions to _and and _or.  This is like how Smalltalk implements control flow - it passes unevaluated blocks (anonymous functions) into branching code.  The code decides which branch to take and evaluates (runs) the {\field{\*\fldinst{HYPERLINK "scrivcmt://A32E91BE-C894-4D60-BE92-2BBA0ACEEA06"}}{\fldrslt block.}}  
\f1\i [breaking news: I will modify the above code templates later, before I finish].
\f0\i0 \
Most of the mystique of compiler-writing is the act of learning, and coming up with, patterns that make the emitted code suck less.  \
It used to be that "suck less" meant creating emitted patterns that ran faster than their unoptimized versions.  \
We have learned, over the years, how to build compilers that are hot and fast.\
Thankfully, I am just building a transpiler - I am going to let the JS compiler(s) worry about optimizing my emitted code.  I just want it to work, I don't need fast-ness.  If I do create some optimizations, it will probably have to do with making the emitted code more readable to {\field{\*\fldinst{HYPERLINK "scrivcmt://6BD067F1-BD24-4079-A4DE-F11A612B461A"}}{\fldrslt humans.}}  Fast-ness isn't my problem - it's the problem that competent Efficiency Engineers can tackle (once the transpiler is working).\
\
I'll try implementing the above table, then see what breaks.  Divide & Conquer\'85\
\
In the rule FunctionCall, the original grammar specifies that the arguments ("actuals") are parsed as ListItem.  In emitting this code, I want to append "()" to every argument (to effectively evaluate it), but only in function calls.  The easiest way that I could think of to do this was to create a new rule "Arg" and use it instead of ListItem when parsing the arguments to a function.  I am using the parser to tell me what the context is and, in the case of arguments to a function call (only) I append "()" to each list {\field{\*\fldinst{HYPERLINK "scrivcmt://13ACEA55-5F33-41F7-AB26-CF954063526E"}}{\fldrslt item.}}\
\
(See commit 9db14775d9acedfb187a33feaa8bf41b508e4617).}