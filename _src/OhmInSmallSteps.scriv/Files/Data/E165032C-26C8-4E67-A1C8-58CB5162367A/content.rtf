{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Grammars for Scm2JSListConstants and Scm2JSEmitter are rewritten to inherit from Scm2JSBasic.\
\
Note that this creates new "flat" grammars and does not, by itself, create new isolated passes.\
\
Note that Scm2JSEmitter inherits from Scm2JSBasic and not from its immediate predecessor Scm2JSListConstants (as would be done if I used only OO instead of a pass-based strategy).\
\
OO is essentially a fancy form of cut&paste - it creates new "flat" grammars by piling changes up on predecessor grammars.  This applies to all forms of OO, not just to grammars.  OO provides only 
\f1\i some
\f0\i0  encapsulation, not full encapsulation.\
\
Inheritance produces increasingly complicated software and does not provide a way to "freeze" changes.\
\
}