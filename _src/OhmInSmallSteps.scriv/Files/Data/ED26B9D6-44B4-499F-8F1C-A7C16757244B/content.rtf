{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\})}{\leveltext\leveltemplateid1\'02\'00);}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 The Copy() function is not being emitted correctly.\
\
The first clause returns "x" as an atom.  There is no "return" statement emitted.\
\
I will copy/paste it into my test-harness element and zero in on it.\
\
I pare the test case down to:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 (define (copy x n)\
  (cond\
    ((not (pair? x)) x)))\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 and look at "pass1 & listConstants & emitter tree".\
\
The parse tree is:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 (:Program \
 (:GlobalFunctionDefinition \
  (:Identifier \
   (:symbol [[copy]] )) \
  (:Identifier \
   (:symbol [[x]] )),\
  (:Identifier \
   (:symbol [[n]] )) \
  (:StatementBlock \
   (:SequentialStatement \
    (:LastStatement \
     (:Statement \
      (:Form \
       (:SList \
	(:SpecialForm \
	 (:CondExpression \
	  (:CondExpressionWithoutElse [toCL operation] )))))))))))\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 I see 2 potential problems: \
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1)	}there is a comma between the args "x" and "n" and \
{\listtext	2)	}the :CondExpressionWithoutElse is showing "[toCL operation]" instead of a value.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
It looks like (1) was intentional, so I will focus on (2).\
\
CondClauseWithoutElse was missing () after firstCondClause.toCL.  This is in the toCL operation, so the actual problem has not been repaired, but may become more visible.\
\
Now, the parse tree is appears as:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \
(:Program \
 (:GlobalFunctionDefinition \
  (:Identifier \
   (:symbol [[copy]] )) \
  (:Identifier \
   (:symbol [[x]] )),\
  (:Identifier \
   (:symbol [[n]] )) \
  (:StatementBlock \
   (:SequentialStatement \
    (:LastStatement \
     (:Statement \
      (:Form \
       (:SList \
        (:SpecialForm \
         (:CondExpression \
          (:CondExpressionWithoutElse \
           (:FirstCondClause \
            (:CondClause \
             (:CondTest \
              (:Form \
               (:SList \
                (:SpecialForm \
                 (:NotExpression \
                  (:Bool \
                   (:Form \
                    (:SList \
                     (:FunctionCall \
                      (:Identifier \
                       (:symbol [[pair_Q_]] ))\
                      (:Arg \
                       (:ListItem \
                        (:Atom \
                         (:atom \
                          (:symbol [[x]] )))))))))))))) \
             (:CondStatementBlock \
              (:StatementBlock \
               (:Atom \
                (:atom \
                 (:symbol [[x]] ))))))) )))))))))))\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 [^ I put the output into emacs .lisp mode and pretty-printed it.]\
\
The problem appears to be that the grammar looks for "StatementBlock = Atom | SequentialStatement".  The grammar is over-specified.  I simply remove Atom and leave "StatementBlock = SequentialStatement".  This now leaves Atom to be parsed by Statement and takes its rightful place as a MidStatement or a LastStatement.\
I've made the code simpler by removing code.  This is good.}