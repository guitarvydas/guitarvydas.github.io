{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;\f4\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 See {\field{\*\fldinst{HYPERLINK "https://github.com/harc/ohm/tree/master/examples/math"}}{\fldrslt 
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 https://github.com/harc/ohm/tree/master/examples/math}}
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 .\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 \kerning1\expnd0\expndtw0 \ulnone This example shows how to embed a grammar into a webpage and then process it using different sets of semantics.\
\
The grammar and semantics can be found in {\field{\*\fldinst{HYPERLINK "https://github.com/harc/ohm/blob/master/examples/math/index.html"}}{\fldrslt 
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 https://github.com/harc/ohm/blob/master/examples/math/index.html}}
\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 .\
\

\f0\fs26 \cf0 \kerning1\expnd0\expndtw0 \ulnone The grammar is embedded as a script with type="text/ohm-js".  This type distinguishes the Ohm-JS grammar from the other scripts and is read into variable "g" by line 63:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 var g = ohm.grammarFromScriptElement();\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 The actual matching (g.match(\'85)) of the grammar against some input (string) is done in input.oninput (line 456).\
\
A semantics dictionary is created in line 136:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 var s = g.createSemantics();\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 Semantic actions are created by the "s.addOperation" and "s.addAttribute" functions.\
\
AddOperation is called to create 3 sets of semantics: 'interpret', 'toTree' and 'toTwoD'.\
\
AddAttribute is called to create a 4
\fs18 \super th
\fs26 \nosupersub  semantics names 'asLisp'.\
\
AddOperation and addAttribute are almost the same, except that the latter (addAttribute) creates properties (not methods) and is memoized (an optimization that reduces the cost of backtracking during the pattern match).\
\
'Interpret' returns a JS value, 'asLisp' returns a JS list (arrays of arrays), 'toTree' and 'toTwoD' return trees of HTML {\field{\*\fldinst{HYPERLINK "scrivcmt://2E808A10-C99A-46C6-A7A7-CBC92E9CFA99"}}{\fldrslt elements.}}\
\
The function 'input.oninput' (line 456) calls "show" (../lib.js) for each of the semantics.   The 'interpret' semantics returns a JS value which creates a string 
\f4\i div. 
\f0\i0  The 'asLisp' semantics returns a JS tree which is processed by the stringifyLisp function and creates a string 
\f4\i div
\f0\i0 .  The semantic functions 'tree' and 'twoD' return trees of HTML elements.  The file math.css creates visualization styles for the elements which result in the final appearance of the elements as a parse tree and as 2D mathematical notation (factions shown as numerators and denominators).\
\
The "show()" function simply appends the elements to the various divs (value, lisp, tree, twoD) and the browser displays the divs.  The "show()" function also clears the top-level divs, allowing the display to be iterated.  The CSS file (math.css) does most of the real work - by arranging that #tree elements have a visible bottom border, etc. }