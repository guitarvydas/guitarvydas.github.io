{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\froman\fcharset0 Palatino-Italic;
\f3\fswiss\fcharset0 Helvetica;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 In Lisp, "quote" is used so often that it has been given a shortcut, consisting of a single quote.\
\
A quoted symbol,
\f1  'a
\f0  is internally expanded into 
\f1 (quote a)
\f0  and, 
\f1 ('(a b))
\f0  is internally expanded into 
\f1 ((quote (a b)))
\f0 .\
\
Unquote is simple to implement as a tweak of the Unity parser:\
(See commit f2105736ed1fb19b582986c4e8c2ba588c118eb8) 
\f2\i [this code has a bug - see later]
\f0\i0 \
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f3\fs24 \cf0 <$Scr_Ps::0>
\f4\fs22           sem.addOperation(\
	  'unquote',\
	  \{\
	      Program: function(tree) \{return toListOfStrings(tree.unquote())\},\
	      Form: function(item) \{return item.unquote()\},\
	      QuotedSexp: function(_, form) \{return "(quote " + form.unquote() + ")"\},\
	      BackQuotedSexp: function(_, form) \{return "`" + form.unquote()\},\
	      CommaSexp: function(_, form) \{return "," + form.unquote()\},\
	      SList: function(lis) \{return lis.unquote()\},\
	      DottedList: function(_lp, items, _dot, lastItem, _rp) \{\
		  return "(" + toListOfStrings(items.unquote()) + " . " + lastItem.unquote() + ")"\},\
	      NullTerminatedList: function(_lp, items, _rp) \{\
		  return "(" + toListOfStrings(items.unquote()) + ")"\},\
	      ListItem: function(item) \{return item.unquote()\},\
	      Atom: function(a) \{return a.unquote()\},\
	      lexical_integer: function(ns) \{return toPackedString(ns.unquote());\},\
	      lexical_symbol: function(c, cs) \{return c.unquote() + toPackedString(cs.unquote());\},\
	      lexical_string: function(_q1, chars, _q2) \{return "\\"" + toPackedString(chars.unquote()) + "\\""\},\
	      lexical_letchar: function(c) \{return c.unquote()\},\
	      lexical_numchar: function(c) \{return c.unquote()\},\
	      lexical_lc: function(c) \{return c.unquote()\},\
	      lexical_uc: function(c) \{return c.unquote()\},\
\
	      lexical_nullList: function(_lp,_rp) \{return "()"\},\
	      lexical_boolean: function(b) \{return this.sourceString\},\
	      _terminal: function() \{ return this.primitiveValue; \}\
	  \}\

\f3\fs24 <!$Scr_Ps::0>}