{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\ftech\fcharset77 Symbol;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\})}{\leveltext\leveltemplateid1\'02\'00);}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 In debugging support.js, I hit a variable scoping problem which looks like a JS problem\
\
The problem appears to go away if I use "let" instead of "var" in the transpiled code.\
\
This is one of the advantages of using the DSL approach.  This is a late change in strategy, but the fix is easy and all of the code is regenerated (transpiled).\
\
Now, node complains that "db" is defined more than one.  This is true - the original code in prolog-6.scm uses "db" as a global and relies on Lisp's ability to redefine variables as the code is loaded.  Possible solutions: \
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1)	}alter the .scm code to create multiple variables with different names, \
{\listtext	2)	}allow multiple (define x \'85) statements and transpile them into variable assignments if the variable has already been defined (this would require making a table of top-level variables (globals), and checking it before emitting a top-level "let" definition, or \
{\listtext	3)	}?.\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
First, it seems prudent to remove the global variable and turn it into a function parameter.  This means going back to Scheme, checking that prolog-6.scm still runs, making the change to original Scheme code and seeing that it still gives the same answers\'85\
\
Running Scheme (mit-scheme) on my macbook produces the output:\
\
> scheme\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 \
\
1 ]=> (load "prolog-6")\
\
;Loading "prolog-6.scm"...\
p = (a f)\
\
p = (a b c d h f)\
\
p = (a b d h f)\
\
p = (a g h f)\
\
p = (a f)\
\
p = (a b c d h f)\
\
p = (a b d h f)\
\
p = (a g h f)\
\
y = bar\
x = foo\
\
y = baz\
x = foo\
\
y = foo\
x = bar\
\
y = baz\
x = bar\
\
y = foo\
x = baz\
\
y = bar\
x = baz\
;... done\
;Value: #t\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 Next, I make a copy and remove the definitions for prove3 and prove5.  I remove the tests for prove3 and prove5.\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 1 ]=> (load "prolog-6a")\
\
;Loading "prolog-6a.scm"...\
y = bar\
x = foo\
\
y = baz\
x = foo\
\
y = foo\
x = bar\
\
y = baz\
x = bar\
\
y = foo\
x = baz\
\
y = bar\
x = baz\
;... done\
;Value: #t\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 That gets rid of the extra references to db.  Db is still a global and is used once in the "else" clause of prove6.  This use comes about because the pattern-matching "loop" needs to start from the beginning of the database.  The mutual recursion between loop6 and back6 is actually a nested set of loops and, deep in the nested loops, the algorithm needs to start matching rules against the whole database.  In this case, the recursion is a trick that covers up what is really going {\field{\*\fldinst{HYPERLINK "scrivcmt://C8920BA3-4FAB-4ECB-AE01-2CA28C29DD28"}}{\fldrslt on}} - loops nested in loops nested in loops  - recursion isn't actually needed, except to appease Scheme and allergy sufferers - those who think that "loop" is a four-letter word.  In mathematics(?) notation the algorithm would clearly show a nested set of {\field{\*\fldinst{HYPERLINK "scrivcmt://7A11AC9D-7296-4C53-BF9E-124836E32DBC"}}{\fldrslt for-all's}} (
\f3 \uc0\u8704 
\f0 ).  I'll rewrite the algorithm more clearly, later.  For now, I'll pass "db" in as a parameter ("whole-db") while ensuring that it gets copied without change in prove6 and back6.  See commit 42e75c5499e8e0df65d49ba0b52eb521fc15f1dd.}