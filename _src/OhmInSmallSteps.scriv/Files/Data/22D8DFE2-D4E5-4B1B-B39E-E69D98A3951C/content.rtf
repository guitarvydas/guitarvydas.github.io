{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 More JS cheeze.  I use the previously built code and JS's .replace() with REGEXs to edit the final result\'85\
\
Again, this toy example doesn't show the full power of this kind of parsing/editing.\
\
I suggest that this is a technique that needs to be stored one's toolbelt.\
\
FindAndReplace.js:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 <$Scr_Ps::0>
\f2\fs22 // usage:\
// npm install ohm-js\
// node flip.js\
\
\
const fs = require ('fs')\
const ohm = require ('ohm-js')\
const grammarData = fs.readFileSync('flip.ohm')\
const grammar = ohm.grammar(grammarData)\
\
const input = fs.readFileSync('fliptest.js')\
\
const result = grammar.match(input)\
\
if (result.succeeded()) \{\
    console.log("Matching Succeeded")\
\} else \{\
    console.log("Matching Failed")\
\}\
const semantics = grammar.createSemantics()\
\
// recursive function to get the source of a non-terminal node\
// from https://repl.it/talk/learn/Making-your-own-programming-language-with-NodeJS/45779\
const node_to_source = node => \{\
    if (node.ctorName == "_terminal") \{\
	if (node.primitiveValue.toString() == "\\n") \{\
	    return ''\
	\}\
	else\
            return node.primitiveValue\
    \} else \{\
        return node.children.map(n => node_to_source(n)).join('')\
    \}\
\}\
\
semantics.addOperation(\
    'dump',\
    \{\
        code: (a,b) => \{\
	    return node_to_source(b) + node_to_source(a).replace(/a/g, "ABC")\
        \}\
    \}\
)\
\
console.log(semantics(result).dump())\

\f1\fs24 <!$Scr_Ps::0>}