{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 I, finally, "do something".  \
\
The parser figures out "chunkA" and "chunkB" for me.\
\
Then, I use JS to construct a final string with chunkA and chunkB reversed.\
\
This is a cheesy solution, but hey, I believe in single-use DSLs, so it's open season.  Anything that will get me from Point a to Point b in a {\field{\*\fldinst{HYPERLINK "scrivcmt://E2CFEE84-1D32-4C98-AF6C-866F2F8792E4"}}{\fldrslt repeatable}} fashion is OK with me.\
\
This simple example 
\f1\i could
\f0\i0  have been done solely in JS using RegExps and .replace(), but, when the problem becomes larger, e.g. using a parser to refactor code, it is more easily handled with parsers than with REGEX.\
 \
flip.ohm:\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 Program \{\
  code = chunkA chunkB\
  chunkA = "aaa" eol*\
  chunkB = "bbb" eol*\
  eol = "\\n"\
\}\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 fliptest.js\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 aaa\
bbb\
\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 flip.js:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 \
// usage:\
// npm install ohm-js\
// node flip.js\
\
\
const fs = require ('fs')\
const ohm = require ('ohm-js')\
const grammarData = fs.readFileSync('flip.ohm')\
const grammar = ohm.grammar(grammarData)\
\
const input = fs.readFileSync('fliptest.js')\
\
const result = grammar.match(input)\
\
if (result.succeeded()) \{\
    console.log("Matching Succeeded")\
\} else \{\
    console.log("Matching Failed")\
\}\
const semantics = grammar.createSemantics()\
\
// recursive function to get the source of a non-terminal node\
// from https://repl.it/talk/learn/Making-your-own-programming-language-with-NodeJS/45779\
const node_to_source = node => \{\
    if (node.ctorName == "_terminal") \{\
	if (node.primitiveValue.toString() == "\\n") \{\
	    return ''\
	\}\
	else\
            return node.primitiveValue\
    \} else \{\
        return node.children.map(n => node_to_source(n)).join('')\
    \}\
\}\
\
semantics.addOperation(\
    'dump',\
    \{\
        code: (a,b) => \{\
	    return node_to_source(b) + node_to_source(a)\
        \}\
    \}\
)\
\
console.log(semantics(result).dump())\

\f2\fs24 <!$Scr_Ps::0>}