{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 PROLOG is just an exhaustive pattern matcher.\
\
PROLOG uses backtracking to exhaustively explore a search space.\
\
One could implement backtracking pattern matching with loops of loops, but the result quickly becomes unmaintainable and defies DI (expression of Design Intent), by overwhelming the code-reader with details.\
\
Once one splits the 
\f1\i expression
\f0\i0  of backtracking pattern matching away from the details, one can begin to 
\f1\i think
\f0\i0  in terms of relations.  PROLOG was an early attempt to make this {\field{\*\fldinst{HYPERLINK "scrivcmt://9E7D24C1-49F7-441B-828A-5BFC16921AC4"}}{\fldrslt split}}.\
\
I don't know of a PROLOG library for JS.  Maybe one {\field{\*\fldinst{HYPERLINK "scrivcmt://4DE692F0-6887-4F64-8F77-EBA900FDE4F6"}}{\fldrslt exists}}, but that's not my point, here.  My point is to show that one can bolt high-falutin' technologies into JS by using parsers.\
\
The easiest-to-understand description of PROLOG (IMO) is Nils {\field{\*\fldinst{HYPERLINK "scrivcmt://90ED8F95-8B02-4C3F-9A47-1E7293168D10"}}{\fldrslt Holm's}} PROLOG in Scheme.\
\
Can I steal that code?  It is written in Scheme and I want JS.  Oh wait, Scheme has a super-simple syntax.  Maybe I can use an Ohm-based parser to convert the Scheme code into JS, then build an Ohm-based parser that gives us PROLOG syntax? \
The experiment begins\'85\
}