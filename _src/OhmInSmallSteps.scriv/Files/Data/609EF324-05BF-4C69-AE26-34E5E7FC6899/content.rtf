{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Add ! as a valid identifier (first & follow) character.\
\
Add "-" as a valid identifier (follow) character.\
\
Move "-", "_", "!", "?" to first (& follow) character sets.\
\
Add Strings (stunted, no escapes yet).\
\
Add comments as whitespace.\
\
Add () as a valid atom (NullList) and make List use + instead of * (looking ahead to future conversion simplicity).\
\
Add ' recognizer.  (Single quote).  Single quote is a convenience operator that expands into a QUOTE form.  E.G. "'(a b c)" => "(quote (a b c))".  In this step, I deal only with the parse.   I will re-write QUOTE later\'85\
\
Scheme macros use "`" (back quote) to start a macro.  Inside a macro, quoting is "reversed" - everything is quoted unless it is preceded by a comma ",".  There are more features, but I am striving only to recognize prolog-6.scm\'85. {\field{\*\fldinst{HYPERLINK "scrivcmt://44F905F7-3A6D-4340-8BF8-F5CFB2A28179"}}{\fldrslt YAGNI}}.\
\
Add ` recognizer.  (Back quote, back tick)\
\
Add , recognizer.\
\
Allow for multiple lists in a file.\
\
Lists are made up of cons cells.  A cons cell is a 2-tuple: \{pointer to data, pointer to next cell\}.  In most "normal" lists, the final "pointer to the next cell" is NIL (i.e. no next cell).  As a convenience, the printer prints such lists in the most common notation - openParen, items, closeParen (e.g. "(a b c)").  In some cases, lists end with a datum instead of NIL, and, in those cases the list prints as: openParen, items, dot, last item, closeParen (e.g. "(a b . c)").  \ul All\ulnone  lists are the same - they are made up of cons cells - it is 
\f1\i only 
\f0\i0 the \ul printer\ulnone  that shows lists in shorthand notation, where the most common lists are null-terminated lists.\
\
sm2jstest2.scm (not a practical piece of code, just a test case):\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 \
(define (clear_r x)\
  (set-car! (cddr x) '(()))\
  (append (cdr a) `(r! ,l) (cdr g)))\
\
(define (clear_r x)\
  (set-car! (cddr x) '(()))\
  (append (cdr a) `(r! ,l) (cdr g)))\
\
(a b . c)\
((a b . c))\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 scm2jsbasic2.ohm:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 \
Scm2JSBasic \{\
  Program = Scm+\
  Scm = List | Atom |  Boolean\
  QuotedSexp = "'" Scm\
  BackQuotedSexp = "`" Scm\
  CommaSexp = "," Scm\
  List = DottedList | NullTerminatedList\
  DottedList = "(" ListItem+ "." ListItem ")"\
  NullTerminatedList =   "(" ListItem+ ")"\
  ListItem = (Atom | List)\
  Atom = Integer | Symbol | String | Boolean | NullList | QuotedSexp | BackQuotedSexp | CommaSexp\
  NullList = "(" ")"\
  Boolean = "#f" | "#t"\
  Integer = Numchar+\
  Numchar = "0".."9"\
  String = "\\"" (~"\\"" any)+ "\\""\
  Symbol = Letchar (Letchar | Numchar)*\
  Letchar = LC | UC | "+" | "*" | "!" | "?"  | "_" | "-"\
  LC = "a".."z"\
  UC = "A".."Z"\
  semiColonComment = ";" (~"\\n" any)* "\\n"\
  space += semiColonComment\
\}\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <!$Scr_Ps::0>
\f0\fs26 scm2jsbasic2.js:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f2\fs24 \cf0 <$Scr_Ps::0>
\f3\fs22 \
const fs = require ('fs')\
const ohm = require ('ohm-js')\
const grammarData = fs.readFileSync('scm2jsbasic2.ohm')\
const grammar = ohm.grammar(grammarData)\
\
const input = fs.readFileSync('scm2jstest2.scm')\
\
const result = grammar.match(input)\
// console.log(grammar.trace(input).toString())\
\
if (result.succeeded()) \{\
    console.log("Matching Succeeded")\
\} else \{\
    console.log("Matching Failed")\
\}\

\f2\fs24 <!$Scr_Ps::0>}