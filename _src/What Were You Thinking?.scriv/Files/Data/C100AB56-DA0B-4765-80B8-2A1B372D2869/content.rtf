{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Italic;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Concurrency is a paradigm that allows a programmer to write code to coordinate many asynchronous operations.\
\
Many calculator-languages provide something called threads and multitasking.  This is not the same as concurrency.\
\
Concurrency is not {\field{\*\fldinst{HYPERLINK "scrivcmt://30E5F628-BC24-4A99-A8B5-BDCB60C7CDBC"}}{\fldrslt parallelism.}}\
\
Concurrency is not multitasking.\
\
Concurrency, fundamentally, means that every part has its own CPU.\
\
Concurrency, also, means that 
\f1\i parts
\f0\i0  run forever (always-on).\
\
Concurrency, in general, means that 
\f1\i parts
\f0\i0  have their own 
\f1\i state
\f0\i0 .  
\f1\i Parts
\f0\i0  that have no state are call filters.  Filters are a sub-set of concurrency.  \
\
Concurrency also means that data transfer happens in two stages.  (1) Send the data and (2) receive the data.  Note that, unlike in popular calculator languages, transferring data to a part does not automatically start the 
\f1\i part
\f0\i0 .\
\
In calculator-like languages, data transfer happens all-at-once.  When a function is called, the function receives all of its parameters all-at-once, and the, the part runs.  When a filter function executes a 
\f2\fs24 <$Scr_Cs::0>
\f3\fs22 return
\f2\fs24 <!$Scr_Cs::0>
\f0\fs26 , all of the returned data is returned all-at-once.  When a function aborts, it returns data via syntactic sugar called 
\f1\i exception handling
\f0\i0 .\
\
[
\f1\i Note that exception handling is just a symptom of trying to use the calculator paradigm for a concurrent operation
\f0\i0 . 
\f1\i  A true concurrent operation would consist of 
\f2\i0\fs24 <$Scr_Cs::0>
\f3\fs22 send
\f2\fs24 <!$Scr_Cs::0>
\f1\i\fs26 ing one of two results - success or failure.  In true concurrency, the results could be sent to two completely different parts.
\f0\i0 ]}