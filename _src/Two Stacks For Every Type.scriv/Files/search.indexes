<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="4B45280A-D426-47F2-AC70-4DA51DFE8CE7">
            <Title>Two Stacks for Every Type</Title>
            <Text>I argue that every type should have its own stack(s).  [I find that two stacks - input stack and working stack - helps programming].</Text>
        </Document>
        <Document ID="E4B4DA8C-DB0E-4C85-AE9B-AF93017CEC46">
            <Title>Parameter Lists</Title>
            <Text>Presently, parameters are pushed onto a heterogenous stack.

The idea of parameter lists was borne out of:
	•	concern for memory conservation
	•	mathematical notation (which came from pen-and-paper-only thinking)
	•	strictly textual notations 
	•	"everything must be synchronous" thinking.</Text>
            <Comments>Parameters of all types share the same stack.</Comments>
        </Document>
        <Document ID="679909B0-21A0-40B1-A9D4-260340E89D72">
            <Title>Extra Work</Title>
            <Text>Using the current system, the compiler must do extra work:
	•	to determine type safety
	•	to determine alignment.</Text>
        </Document>
        <Document ID="8F0207BC-7D27-48F0-863D-499820E4BD22">
            <Title>Return Values</Title>
            <Text>Return values are placed on the stack.

The idea of return values was borne out of:
	•	concern for memory conservation
	•	mathematical notation
	•	strictly textual notations 
	•	"everything must be synchronous" thinking
	•	the idea of parameter lists (which cause accidental complexity in the design of return syntax).</Text>
        </Document>
        <Document ID="AAC0DD91-E1B2-4411-BAF1-30280F63B3BD">
            <Title>Two Stacks For Every Type</Title>
        </Document>
        <Document ID="366FC0C1-B9E1-4DD4-A91C-E9C3194E954C">
            <Title>Type Name Clashes</Title>
            <Text>What can we do if two parameters have the same type?

Presently, we use variables and assign a type to each.

Another solution might be to allow type synonyms, where each parameter gets a unique name, but the name is synonymed to be of a given type.

E.G.

fn(a : int, b : int)

becomes

fn(a,b)
a = int
b = int


The fact that a (and b) is an int, is an implementation detail, and should not appear in the Architecture.  The fact that we want to use automation to check such details implies that the semantic (i.e. architecture-related) and implementation details might need to appear in the same body of code.  A trade-off is to separate implementation details from architectural details, as above.  This allows the Architect to describe an architecture at the architectural level while pushing implementation details to more innocuous places (like the bottom of the file).  The Engineer(s) and Implementor(s) can later add such details without affecting the readability of the original architecture.  

At the architectural level, parameters to functions are not variables.  Variables and their types are implementation details.  The above arrangement suggests that we can expunge variables from parameter lists completely.  

The current style of assigning types to parameters in a function signature conflates two issues (1) architectural readability and, (2) implementation details.

In the above, every parameter, at the DI level, is a type. 

I have found that treating parameters as types to be defined later, reduces syntactic noise.  Code is shorter and not cluttered with detail.

[The notion of types associated with parameters was based on premature optimization - making it less expensive in memory and CPU time to define parameters and their implementations.  With "infinite" CPU power and "infinite" memory, there is no need to conflate types with their implementations in function signatures.  Types can be defined in a scoped manner - defined in terms of other types and, ultimately, as consisting of a small number of opaque types.  So-called system languages are concerned with implementation details.  Even programs written in such languages have distinct DI and implementation aspects.]

In the above notation, implementation of types is the exception, not the rule.</Text>
            <Comments>This idea, of separation, also appears in Ohm-JS, where the parse (grammar) is separated from the semantic details. 
DI mean Design Intent - an explicit description of architecture.</Comments>
        </Document>
        <Document ID="7B321EAC-B1DB-4C5D-A292-B8904CCA3650">
            <Title>A Stack is a (Degenerate) Collection</Title>
            <Text>A stack is just an optimization of a list.  

A list is a collection.

The concept of stack conflates several issues:
	•	scoping
	•	optimization.

Scoping is a semantic issue.

Optimization is an issue for optimization engineers.  Low-level optimization should not appear in an architecture. 
</Text>
        </Document>
        <Document ID="0C91FDBB-7F61-4911-BCEC-20676D841155">
            <Title>Exceptions</Title>
            <Text>The idea of exceptions was borne out of:
	•	strictly textual notations 
	•	synchronous-only thinking
	•	the idea of parameter lists (which cause accidental complexity in the design of exception syntax).</Text>
        </Document>
        <Document ID="47B90115-7A5B-4EC8-8ECE-75EC2FA3BD3B">
            <Title>PT Pascal and S/SL</Title>
            <Text>The PT Pascal compiler, written in the language S/SL, uses stacks for scoping and type checking.  The PT Pascal source code and S/SL source code can be found at https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/.

[A version of S/SL with input and output parameters was documented in a thesis - I can't find my copy of the thesis nor can I remember the author's name.]</Text>
        </Document>
        <Document ID="A0A8087F-9692-41C4-A2F3-E05627885318">
            <Title>Separate Collections</Title>
            <Text>Every type might be stored in a separate collection. 

The parameters to a routine might be a collection of typed collections.</Text>
        </Document>
        <Document ID="36D58A55-2B32-452F-9A36-8DE07621B2BB">
            <Title>Type Checking</Title>
            <Text>Assertion: if something is in a typed collection, then it has the correct type.

Type check is done at "push" time (where "push" means to add the item to its collection).</Text>
        </Document>
        <Document ID="5EB69661-CA46-4A75-9146-5342E2DB0A31">
            <Title>Out of Date Biases</Title>
        </Document>
        <Document ID="2B2C4568-C54E-4F8A-BDB7-BA5EEC5B9E40">
            <Title>Appendix A</Title>
        </Document>
        <Document ID="08A9B6E6-A5FE-4C89-B2D5-0D7F7FF6877A">
            <Title>Type Stack Operations</Title>
            <Text>TBD

I have implemented a version of the above ideas and will document the operations (about 5) that I use (push-and-check-type, pop, list-add, etc.).</Text>
        </Document>
    </Documents>
</SearchIndexes>