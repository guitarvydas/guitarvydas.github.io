{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 scanner\
 hs-vsh-drawio-to-fb test1 <test5.svg >...\
   Container\
   Translate\
   Path\
   Rect\
   Text\
   AbsM\
   AbsL\
   relM\
   RelL\
\
lib_insert_part_name svgc\
   (component <name>)\
   \
fb-to-prolog <temp2.lisp >temp3.pro\
  component('name').\
  line(new-id).\
  edge(edge-id).\
  node(begin-id).\
  source(edge-id,begin-id).\
  eltype(begin-id,'port').\
  bounding_box_left(begin-id,nnnn).\
  bounding_box_top(begin-id,nnnn).\
  bounding_box_right(begin-id,nnnn).\
  bounding_box_bottom(begin-id,nnnn).\
  node(end-id).\
  source(edge-id,end-id).\
  eltype(end-id,'port').\
  bounding_box_left(end-id,nnnn).\
  bounding_box_top(end-id,nnnn).\
  bounding_box_right(end-id,nnnn).\
  bounding_box_bottom(end-id,nnnn).\
\
  rect(rect-id,'').\
  eltype(rect-id,'box').\
  node(rect-id).\
  geometry_x(rect-id,nnnn).\
  geometry_y(rect-id,nnnn).\
  geometry_w(rect-id,nnnn).\
  geometry_h(rect-id,nnnn).\
  \
  text(text-id,nnnn). or text(text-id,'string').\
  geometry_x(text-id,nnnn).\
  geometry_y(text-id,nnnn).\
  geometry_w(text-id,nnnn).\
  geometry_h(text-id,nnnn).\
\
  arrow(arrow-id,'').\
  arrow_x(arrow-id,nnnn).\
  arrow_y(arrow-id,nnnn).\
  \
plsort <temp3.pro >temp4.pro\
check_input <temp4.pro >temp5.pro\
\
parser\
\
 calc_bounds\
  bounding_box_left(<id>,nnnn).\
  bounding_box_top(<id>,nnnn).\
  bounding_box_right(<id>,nnnn).\
  bounding_box_bottom(<id>,nnnn).\
\
 add_kinds\
  used(text-id).\
  kind(box-id,Str).\
\
 make-unknown_port_names\
  unassigned(text-id).\
  \
 create_centers\
  center_x(unassigned-text-id).\
  center_y(unassigned-text-id).\
\
 calculate_distance\
  join_distance(join-pair-id,text-id).\
  distance_xy(join-pair-id,nnnn).\
  join_centerPair(port-id,centerPair-id).\
\
 assign_portnames\
  portNameByID(port-id,text-id).\
  portName(port-id,string).\
  portIndexByID(port-id,num-id).\
  portIndex(port-id,num-id).\
\
 markIndexedPorts\
  indexedSink(port-id).\
  indexedSource(port-id).\
  \
 coincidentPorts\
  portIndex(unindexed-port,index).\
\
 mark_directions\
   # nothing - yEd and draw.io produce edges with direction\
\
 match_ports_to_components\
   parent(port-id,parent-id).\
   n_c(port-id).\
\
Semantic\
  sem_partsHaveSomePort\
  sem_allPortsHaveAnIndex\
\
emitter\
  assign_pipe_numbers_to_inputs\
    npipes(nnnn).\
    pipeNum(pin-id,nnnn).\
    \
  assign_pipe_numbers_to_outputs\
    pipeNum(pin-id,nnnn).\
\
  assign_fds\
    sourcefd(pin-id,nnnn).\
    sinkfd(pin-id,nnnn).\
\
  inOutPins\
    inputPin(part-id,pin-id).\
    inputPin(part-id,pin-id).\
    wireIndex(pin-id,wire-index).\
\
  plsort\
  emit-js\
  emit-js2\
  \
}