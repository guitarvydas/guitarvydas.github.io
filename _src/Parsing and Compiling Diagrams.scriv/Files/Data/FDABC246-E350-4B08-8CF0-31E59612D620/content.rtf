{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Palatino-Bold;\f2\froman\fcharset0 Palatino-Roman;
\f3\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$ScrKeepWithNext><$Scr_H::2><$Scr_Ps::0>
\f1\b\fs26 Parser\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
The job of a parser is to check that tokens are correctly placed / sequenced to fit the particular language being compiled and to signal errors if the tokens do not form well-formed phrases in the language.\
\
For example in C, the string \'93(x ==y)\'94,  might be represented by the sequence of tokens (represented by symbolic names):\
\
    tokLPar\
    tokIdent \{ref. to table entry for ident \'93x\'94\}\
    tokEqualsEquals\
    tokIdent \{ref. to table entry for ident \'93y\'94\}\
    tokRPar \
\
In this case, each token, 
\f3\i tokLPar
\f2\i0 , tokIdent, 
\f3\i tokEqualsEquals
\f2\i0  and, 
\f3\i tokRpar
\f2\i0  might be represented as Integers (scalars) and the extra information, enclosed in  braces (\{\}) would signal that 
\f3\i tokIdent
\f2\i0  has some kind of structured information following it.\
\
The string of five tokens, above, form a well-formed 
\f3\i Expression
\f2\i0  in C.\
\
The parser, also, has the job of discarding syntactic sugar and replacing token phrases with shorter token phrases which contain only the information necessary in subsequent passes. \
\
For example, the Parser might re-emit the tokens in an RPN stream as follows:\
\
    tokExpression\
    tokIdent \{ref. to table entry for ident \'93x\'94\}\
    tokIdent \{ref. to table entry for ident \'93y\'94\}\
    tokEqualsEquals\
\
}