{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Palatino-Bold;\f2\froman\fcharset0 Palatino-Roman;
\f3\froman\fcharset0 Palatino-Italic;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid201\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\sb260\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs24 \cf0 <$ScrKeepWithNext><$Scr_H::2><$Scr_Ps::0>
\f1\b\fs26 Scanner\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\b0\fs24 \cf0 <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 The purpose of this (Composite) Part, the \'93Scanner\'94, is to create a Prolog factbase from a .SVG file drawn in Draw.IO using the drawing conventions described earlier.\
\
Facts are written as Prolog 3-tuples, eg. \'93relation(id1,id2).\'94 or \'93relation(id1,data).\'94  These facts correspond to triplestore databases (e.g. semantic web).  The full capabilities of Prolog are not used e.g. no functors, and all facts consist of one relation, one subject and one object, e.g. \'93relation(subject, object).\'94.  The design hope is that other technologies (e.g. mini-Karen) could be used for inferencing and that the design of factbases not be tied to Prolog.\
\
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 The Parts within this compound Part are:\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls2\ilvl0
\f3\i \cf0  
\f2\i0 \
\'95	 \ul hs-vsh-drawio-to-fb\ulnone  test1 <test5.svg >...\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_Ps::1>
\f4\fs22    [Lisp output: Container, Translate, Path, Rect, Text, AbsM, AbsL, relM, RelL]\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::1>
\f2\fs26 This Part (phase) is written in Haskell.  \
\
It takes a .SVG file, removes the unneeded portions (most of it) and produces a file of Lisp tree (SEXPRs, aka Container) representing the most basic graphic operations needed by the rest of the compiler.\
\
The basic graphic operations are:\
\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u9702 	}rectangles\
{\listtext	\uc0\u9702 	}ellipses\
{\listtext	\uc0\u9702 	}line and arrow paths\
{\listtext	\uc0\u9702 	}text.\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_Ps::1>
\f4\fs22 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::1>
\f2\fs26 \
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul lib_insert_part_name \ulnone svgc\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_Ps::1>
\f4\fs22    [Lisp output: (component <name>)]\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::1>
\f2\fs26 This Part is used by the bootstrap compiler.  It takes a \'93name\'94 from the command line and produces one line of Lisp containing the name.\
\
This line is prepended to the output from above (hs-vsh-drawio-to-fb).\
   \
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul fb-to-prolog \
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \ulnone \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 Output 
\f3\i facts
\f2\i0  include:\
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_Ps::1>
\f4\fs22   component('name').\
  line(new-id).\
  edge(edge-id).\
  node(begin-id).\
  source(edge-id,begin-id).\
  eltype(begin-id,'port').\
  bounding_box_left(begin-id,nnnn).\
  bounding_box_top(begin-id,nnnn).\
  bounding_box_right(begin-id,nnnn).\
  bounding_box_bottom(begin-id,nnnn).\
  node(end-id).\
  sink(edge-id,end-id).\
  eltype(end-id,'port').\
  bounding_box_left/top/right/bottom(edge-id,nnnn).\
\
  rect(rect-id,'').\
  eltype(rect-id,'box').\
  node(rect-id).\
  geometry_x(rect-id,nnnn).\
  geometry_y(rect-id,nnnn).\
  geometry_w(rect-id,nnnn).\
  geometry_h(rect-id,nnnn).\
  \
  text(text-id,nnnn). or text(text-id,'string').\
  geometry_x/y/w/h(text-id,nnnn).\
  \
  arrow(arrow-id,'').\
  arrow_x(arrow-id,nnnn).\
  arrow_y(arrow-id,nnnn).\
  \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::1>
\f2\fs26 This Part is the main work-horse of the Scanner.  It takes the output of \'93lib_insert_part_name\'94 as a Lisp tree and converts it to Prolog.  It takes input on 
\f3\i stdin
\f2\i0  and outputs the Prolog fact base on 
\f3\i stdout.
\f2\i0 \
\
It creates unique 
\f3\i id\'92s
\f2\i0  for each main 
\f3\i fact
\f2\i0  and outputs relations between the 
\f3\i facts
\f2\i0  by referring to the 
\f3\i id\'92s
\f2\i0 .  For example, a 
\f3\i rect
\f2\i0  is declared by the \'93rect(id,\'92\'92).\'94 fact.  The coordinates of the 
\f3\i rect
\f2\i0  are given by four 
\f3\i geometry
\f2\i0  facts, referring to the particular 
\f3\i rect\'92s id
\f2\i0 .  The centre of the 
\f3\i rect
\f2\i0  is specified by two facts - 
\f3\i geometry_x
\f2\i0  and 
\f3\i geometry_y
\f2\i0 .  The width and height of the 
\f3\i rect
\f2\i0  are specified by two more facts - 
\f3\i geometry_w
\f2\i0  and 
\f3\i geometry_h
\f2\i0 , resp. \
\
The 
\f3\i node
\f2\i0  fact is obsolete - it is used to declare the presence of a new 
\f3\i id
\f2\i0  for some kind of graphical object. \
\
If a 
\f3\i text fact 
\f2\i0 contains its text in single-quotes [\'91].  If the text consists of only digits 0-9, it has no quotes.  Further down the pipeline, Prolog differentiates numeric 
\f3\i text facts
\f2\i0  from strings by the non-presence or presence of quotes, resp. (See <$n:chapter>.<$n#eg:Text>).  This differentiation is used by the bootstrap compiler to ensure that every port has a numeric index.  Only some ports have string names, but all ports have indices.\
\
Each line is described by a 
\f3\i path
\f2\i0 , a 
\f3\i begin
\f2\i0 ning coord and an 
\f3\i end
\f2\i0  coordinate.   All intermediate points on a line (the bends drawn in Draw.IO) are discarded.  The compiler needs only to know where the line begins and ends.  Draw.IO does some of the work for us by making all lines fully contiguous, even if the line contains intermediate points.  In other drawing editors, it might be necessary to draw a bent line using line segments.  In this {\field{\*\fldinst{HYPERLINK "scrivcmt://DCA975D5-CDB5-417F-A1C3-54BE7A5D037F"}}{\fldrslt case,}} a pass needs to be added to the compiler to infer which segments touch one another and to infer a contiguous line, its beginning and end points.\
\
Arrows are specified by an (
\f3\i x,y
\f2\i0 ) coordinate that corresponds to the tip of the arrow.  The tip coordinates must be near the end of a line (path).  The arrow tip is recognised as the 
\f3\i end
\f2\i0  of the line.  The 
\f3\i arrows
\f2\i0  give direction to lines and show which way the events flow.  In other versions of the compiler, one might choose to discard arrows and supply only output and input pins.  Compiler passes would be added to infer the direction of the lines (e.g. output pins imply 
\f3\i begin
\f2\i0 nings of lines and input pins imply 
\f3\i end
\f2\i0 ings of lines).\
\
All lines are assigned 
\f3\i begin
\f2\i0  and 
\f3\i end
\f2\i0  ports and these port facts are emitted to 
\f3\i stdout
\f2\i0 \
\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul plsort\ulnone  \
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 This Part is a no-op.  It performs a *nix sort on the 
\f3\i factbase.
\f2\i0   Prolog requires that all 
\f3\i facts
\f2\i0  of the same kind be grouped together.  All incoming 
\f3\i facts
\f2\i0  on 
\f3\i stdin
\f2\i0  are sorted then output on 
\f3\i stdout
\f2\i0 .  The factbase is not changed, just re-arranged.\
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 This Part is implemented as a *nix shell script using the 
\f3\i sort(1)
\f2\i0  command.\
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul check_input\ulnone \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
This Part is a place-holder that might be implemented in a non-POC / bootstrap version of the compiler.  Its purpose is to sanity-check the incoming (
\f3\i stdin
\f2\i0 ) factbase.  In the bootstrap, this Part does almost nothing - it loads the 
\f3\i factbase
\f2\i0  into Prolog, then spits it back out (
\f3\i stdout
\f2\i0 ).  If there are any problems on input, Prolog will throw an error.\
}