{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Palatino-Bold;\f2\froman\fcharset0 Palatino-Roman;
\f3\froman\fcharset0 Palatino-Italic;\f4\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$ScrKeepWithNext><$Scr_H::2><$Scr_Ps::0>
\f1\b\fs26 Backtracking\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
In the past, it was assumed that a single cpu was expensive and that it needed to be time-shared between users.\
\
In the past, machines were much slower than they are today.\
\
It was \'93determined\'94 that backtracking was not practical, hence, compilers were designed to conserve speed.\
\
Compiler technology was invented to accommodate speed and determinism.  
\f3\i YACC
\f2\i0  reduced the acceptable set of languages to LALR(1), so that it could implement parsers as NFDAs.\
\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f3\i \cf0 PEG
\f2\i0  [Bryan Ford, 
\f4\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 http://bford.info/pub/lang/peg.pdf
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \ulnone \outl0\strokewidth0 ], 
\f3\i TXL
\f2\i0  [Cordy, {\field{\*\fldinst{HYPERLINK "https://www.txl.ca/"}}{\fldrslt 
\f4\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://www.txl.ca/}}] and 
\f3\i Prolog 
\f2\i0 [Clocksin, Mellish, 
\f4\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://link.springer.com/book/10.1007/978-3-642-55481-0
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \ulnone \outl0\strokewidth0 ] show that backtracking is practical on modern computers.  A trend towards more flexible languages has not followed this trend in faster computers.\
}