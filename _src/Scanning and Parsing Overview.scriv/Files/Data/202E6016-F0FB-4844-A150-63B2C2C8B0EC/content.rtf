{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab709
\pard\pardeftab709\sl276\slmult1\sa140\partightenfactor0

\f0\fs24 \cf0 PROLOG is a language that expresses exhaustive pattern-matching using backtracking.\
As such, PROLOG should be ideal for building parsers (and, maybe, scanners).\
The early wisdom stated that backtracking was not a viable strategy for building parsers.  Early attempts to use backtracking in parsers was quashed after Early\'92s (a researcher\'92s name) Parsing technology.\
Now, with much faster computers, and almost-unlimited memory, this \'93wisdom\'94 could be re-investigated.  To my knowledge, this has not been done.\
PEG parsers use a limited form of backtracking.\
Searches for parsers built in PROLOG tend to turn up experimental research into natural language parsing (a superset of PEG based languages and LR languages).}