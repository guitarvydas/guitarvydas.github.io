I"™<h1 id="operating-system---windows-macos-linux-etc">Operating System - Windows, MacOS, Linux, etc.</h1>

<p>Most operating systems are composed of millions of lines of code.</p>

<p>How can the <em>essence</em> of each of these operating systems be captured in only one page of code?</p>

<h1 id="one-page">One Page</h1>
<h2 id="keeping-details">Keeping Details</h2>
<p>We want to keep <em>all</em> of the details.</p>

<p>But, <a href="https://guitarvydas.github.io/2021/03/17/Details-Kill.html">details kill</a>.</p>

<p>Q: How do we keep the details while minimizing the complexity?</p>

<p>(You already know the answer :-).</p>

<h2 id="decomposing-complexity">Decomposing Complexity</h2>
<p>We must <em>decompose</em> complexity.</p>

<p>We must <em>decompose</em> complexity into layers.</p>

<p>Using <em>hierarchy</em> allows us to show details in layers.</p>

<p>Using <em>components</em> allows us to show details in <code class="language-plaintext highlighter-rouge">hierarchical layers</code>.</p>

<p>The concept of components are already be familiar to most people.</p>

<p>The only <em>new</em> idea here is the obersavation of psychology and how it affects our designs.</p>

<p>If we use a PL[^pl] that gives us only one layer, then we will tend to design everything in one layer.</p>

<p>Most PLs <em>allow</em> hierarchical decomposition, but do not <em>encourage</em> it.</p>

<h3 id="components">Components</h3>

<p>What is a <code class="language-plaintext highlighter-rouge">Component</code>?</p>

<p>A Component is a black box.</p>

<p>We can characterize components as below:</p>
<ul>
  <li>input commands from parent</li>
  <li>input information from children</li>
  <li>filter information and <code class="language-plaintext highlighter-rouge">Send ()</code> filtered information to Parent</li>
</ul>

<p>The points of Components are:</p>
<ul>
  <li>no inter-component dependencies</li>
  <li>reducing information flow, instead of using an all-in-one mind-set.</li>
</ul>

<p>Well-designed Components use no side-channels.</p>

<p>Well-designed Components, make all dependencies explicit (e.g. Parent/Children relationships).</p>

<h2 id="concurrency">Concurrency</h2>
<p>Components are easier to design and use in the concurrent paradigm.</p>

<p>The <em>synchronous</em> paradigm makes it harder to think of components and to use them. We resort to complicated structures, like code libraries, dependency managers</p>

<p><em>Asynchrony</em> is easy - if you donâ€™t try to express it in the <em>synchronous</em> paradigm.</p>

<p>Multitasking, as we know it, is accidental complexity created by expressing <em>asynchrony</em> in a <em>synchronous</em> paradigm and on <em>synchronous</em> hardware<sup id="fnref:hw" role="doc-noteref"><a href="#fn:hw" class="footnote">1</a></sup>.</p>

<p><em>Synchronous</em> design is a good paradigm for designing calculators.</p>

<p><em>Synchronous</em> design is not a good paradigm for designing distributed systems<sup id="fnref:sync" role="doc-noteref"><a href="#fn:sync" class="footnote">2</a></sup>.</p>

<h2 id="dependencies">Dependencies</h2>
<p>We <em>want</em> software components that have <em>no</em> dependencies between them.</p>

<p>We canâ€™t scale systems that have inter-component depedencies.</p>

<p>Q: How can we build components that have no dependencies?</p>

<h3 id="docker">Docker</h3>

<p>Docker is a symptom of systems that have dependencies.</p>

<p>We use <em>docker</em> instead of fixing the problem - the Elephant in the Room.</p>

<h3 id="make">Make</h3>

<p><em>Make</em> allows us to cope with dependencies.</p>

<p>We use <em>make</em> instead of fixing the problem - the Elephant in the Room.</p>

<h3 id="package-managers">Package Managers</h3>

<p>Dependency Managers, like <em>npm</em>, allow us to cope with dependencies.</p>

<p>We use dependency managers instead of fixing the problem - the Elephant in the Room.</p>

<h2 id="can-types-be-componentized">Can Types be Componentized?</h2>

<p>Q: Can Types be Componentized?</p>

<p>A: Yes.</p>

<p>For example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bit -&gt; byte -&gt; word -&gt; ... -&gt; mid-level abstractions -&gt; high level abstractions
</code></pre></div></div>

<p>See <a href="https://guitarvydas.github.io/2020/12/09/Type-Stacks.html">type stacks</a>.</p>

<p>Q: How many levels of abstraction are there?</p>

<p>A: It depends.</p>

<p>We should build layers of abtraction that make sense for a given solution. Note the use of the word <code class="language-plaintext highlighter-rouge">solution</code>, and the avoidance on using the word PL.</p>

<h3 id="hierarchical-types">Hierarchical Types</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Decompose Types as Components 
bytes vs. high-level constructs ### Hierarchical Functions	 ### Hierarchical Variable Names ## Features ## File System ## Drivers ## Multitasking ### Time-Sharing ### Full Preemption ### Memory Sharing
</code></pre></div></div>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:hw" role="doc-endnote">
      <p>CPUs were OK until they added The Stack (a global variable).  IBM 360s did not have Stacks built into the hardware - programmers had to use BALR instructions if they really, really wanted control-flow stacks.  BALR did not constrain programmers to using a global variable, programmers could build stacks in the heap, if they wanted to.  Today, all stacks are in shared memory and we have to resort to accidental complexities like multitasking and full preemption.Â <a href="#fnref:hw" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:sync" role="doc-endnote">
      <p>Currently, we resort to using low-level concepts, like thread libraries, to implement distributed systems as multiple envelopes containing exactly one calculator each.  This is what assembler programmers did while resisting the use of HLLs.Â <a href="#fnref:sync" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET