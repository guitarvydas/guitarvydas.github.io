I"ô<p>bizarre observation #1: JavaScript prototype inheritance and Common Lisp specials are most similar to McCarthy‚Äôs original alists</p>

<p>bizarre observation #2: McCarthy‚Äôs Lisp is - wait for it - a DSL for List Processing.  As soon as we try to add mutation to that simple notation, we get epicycles.  By inference, Mathematics notation is a DSL for List Processing (invented for pen-and-paper).  Mathematics is 2 things: (1) a DSL, and, (2) hard-won knowledge (theorems/laws) about using that notation.</p>

<p>Example of simple notation:</p>
<ol>
  <li>x = [a]</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>x = [b</td>
          <td>x]</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>x = [c|x]<br />
In most GPLs, x is mutated, but in SL, x is augmented.  In SL, this is written as
    <ul>
      <li>(let ((x (cons ‚Äòa nil)))</li>
      <li>(let ((x-prime (cons ‚Äòb x))))</li>
      <li>(let ((x-prime-prime (cons ‚Äòc x))))</li>
      <li>‚Ä¶ do something with x-prime-prime ‚Ä¶</li>
      <li>(x and x-prime are shadowed by x-prime-prime ; in fact, we might call the value ‚Äúx‚Äù in all cases, dropping the -prime)</li>
    </ul>
  </li>
</ol>

<p>mutation is an optimization - instead of keeping &gt;1 copy of a named-value, we fold all copies into 1 ; McCarthy‚Äôs Lisp keeps a (dynamic) stack of values for every name ; (mutation is structure sharing in the small?)</p>

<p>cycle in data is an optimization and infinite-recursion preventer</p>

<p>cycle is the exception, not the rule, need syntax for @cycle() instead of hard-wiring mutation into every language? ; maybe separate language that allows @cycle()? ; it is easy to create languages (using Ohm-JS/PEG)</p>

<p>adding mutation, adding cycles, breaking strict stack-like ordering</p>

<p>create a ‚Äúshell‚Äù DSL that allows mutation, no need to hack on SL</p>

<hr />

<p>current pondering (for discussion):</p>

<p>code bloat comes from conflation of (a) mutation, with, (b) the idea of ‚Äúone language to rule them all‚Äù</p>

<p>mutation is /sometimes/ necessary, but, there is no reason to hack mutation into every existing language and to pay for epicycles everywhere</p>

<p>SL is a /notation/ for List Processing without mutation (=&gt; no cycles, alists).</p>

<p>If/when we need mutation, we should not insert it into SL.  We can use a different /notation/.  It used to be considered ‚Äúhard‚Äù to build languages, but, now it is easy to build /notations/ using PEG</p>

<p>remove mutation from OO, if you need mutable objects, use Actors</p>

<p>mutation is an optimization - structure sharing - thought to be needed in mid-1900s due to expensive CPUs and limited memory</p>

<p>(syn x y a) -&gt; (let ((x y)) a) ‚Äì&gt; editor(s) can elide to just ‚Äúa‚Äù and provide the synonym (syn) in a tooltip or keystroke to unelide whole buffer</p>

<p>need a syntax for object slots that doesn‚Äôt imply operation (not car/first, second, etc.), e.g. obj=(x . (y . z)) -&gt; (slot obj ‚Äòy) -&gt; obj.y (again, mutation has seeped into most languages - obj is most often represented as a cdr-less array, which is just any optimization of obj from list form to cdr-less form) ; compilers should not compile data to blocks but to lists, e.g. ‚Äúy‚Äù is not an offset, but a function (a list accessing function)</p>

<p>state for tracking history = alist (stack), optimization = mutation/overwrite<br />
state for iterator<br />
state for queue<br />
state for stack pointer<br />
StateChart<br />
Actor</p>

<hr />

<p>bizarre observation #3: The preferred way to build GUIs today is The Browser.  The API for Browsers is JavaScript.  AFAICT CLOG makes the browser a stand-alone GUI server that accepts GUI API commands and interprets them.</p>

<p>bizarre observation #4: In the back of my mind, I have felt that ‚Äúdata‚Äù should be active.  Data should be prefixed with a lump of code that executes and produces the data.  Data is an Actor.  Or, data is a lambda. BLC and SL invoke these thoughts again.</p>

<p>bizarre observation #5: Mutation is an optimization.  Instead of keeping a stack of values for every named ‚Äúvariable‚Äù, we save memory by overwriting (aka optimization).</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/12/10/Table-of-Contents-Dec-01-2021.html">Table of Contents</a><br />
<a href="https://guitarvydas.github.io">Blog</a><br />
<a href="https://www.youtube.com/channel/UC9EJr0nKHwadbHUtc5zHdmQ/videos">Videos</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET