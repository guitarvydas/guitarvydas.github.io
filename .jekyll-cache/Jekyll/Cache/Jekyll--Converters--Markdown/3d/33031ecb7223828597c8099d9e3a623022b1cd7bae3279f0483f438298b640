I",<h1 id="happy-path">Happy Path</h1>
<p>A <em>happy path</em> is defined as the control flow followed by a program to handle the backbone of an application.</p>

<p>The assumption is that there is only <em>one</em> backbone for an application, and other paths are exceptions, by definition.</p>

<p>The assumption is that the <em>Happy Path</em> is a first-class construct, while the rest of the paths are second-class constructs.</p>

<p>I disagree with the above assumption.</p>

<p>I believe that a program must handle <em>all</em> paths through an application and that <em>all</em> paths are first-class constructs.</p>

<p>With the rise of distributed programming[^distributed], it is important to consider <em>all</em> paths.</p>

<p>[^distributed:] For example, blockchain, p2p, internet, and HTML.</p>

<p>I think that Dave Ackley’s[^ackley] MFM and Robust Computing work also denies the existence of only a single path, although he may describe the problem differently.</p>

<p>[^ackley:] https://www.cs.unm.edu/~ackley/</p>

<p>I believe that most PLs (Programming Languages) emphasize the single-path perspective and relegate all other paths to a lesser status[^secondclass].</p>

<p>[^secondclass:] For example, JavaScript callbacks, and thread libraries.</p>

<p>I believe that notation influences thinking, and, therefore, we must begin using PLs that treat <em>all</em> programming paths as first-class constructs.</p>

<h2 id="wikipedia">Wikipedia</h2>
<p>The Wikipedia entry for “Happy Path” perpetuates this unfortunate perspective:</p>

<p>“… is a default scenario featuring no exceptional or error conditions. …”</p>

<p>[^wiki:] https://en.wikipedia.org/wiki/Happy_path</p>

<h2 id="pls-focus-on-the-happy-path">PLs Focus on The Happy Path</h2>

<h2 id="every-other-path-must-be-sad">Every Other Path Must Be Sad</h2>

<p>(tbd)</p>

<h2 id="abdication-of-error-handling">Abdication of Error Handling</h2>

<h2 id="elm">Elm</h2>
<h2 id="functional-programming-model">Functional Programming Model</h2>
<p>Functions are one-in-one-out constructs, everything else is an exception.</p>

<h1 id="drakon">Drakon</h1>

<p>http://drakon-editor.sourceforge.net</p>

<h1 id="railway-oriented-programming">Railway Oriented Programming</h1>

<p>https://vimeo.com/113707214</p>

<h1 id="diagrams">Diagrams</h1>
<p>Diagrams allow expression of multiple outcomes while retaining the essence of mathematical manipulation (aka copy/paste).</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET