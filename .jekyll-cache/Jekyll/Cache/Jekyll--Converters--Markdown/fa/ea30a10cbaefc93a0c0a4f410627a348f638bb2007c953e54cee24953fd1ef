I"@"<h1 id="software-ceilingkey">Software Ceiling.key</h1>

<h3 id="the-software-ceiling">The Software Ceiling</h3>

<p>(Paul Tarvydas, Jan 2021)</p>

<h3 id="who-uses-software">Who Uses Software?</h3>

<ul>
  <li>End users, non-programmers</li>
  <li>Domain experts, non-programmers</li>
  <li>Software Professionals, programmers</li>
</ul>

<h3 id="end-user-expectations">End User Expectations</h3>

<ul>
  <li>Apps</li>
  <li>Inexpensive</li>
  <li>All-in-one-device, instead of many devices</li>
</ul>

<h3 id="apps">Apps</h3>
<p>(End User Expectations)</p>

<ul>
  <li>Minecraft</li>
  <li>Weather</li>
</ul>

<h3 id="inexpensive">Inexpensive</h3>
<p>(End User Expectations)</p>

<ul>
  <li>Large volume, low price point</li>
</ul>

<h3 id="all-in-one-device">All in one device</h3>
<p>(End User Expectations)</p>

<ul>
  <li>All-in-one-device, instead of many devices<br />
e.g. loyalty cards, credit cards</li>
</ul>

<h3 id="simple-one-purpose-app">Simple One-Purpose App</h3>
<p>(End User Expectations)</p>

<ul>
  <li>Hand-held calculator</li>
  <li>Gameboy</li>
  <li>Editor’s choice, high SEO choice, TL;DR</li>
</ul>

<h3 id="end-user-expectations-more">End User Expectations (more)</h3>

<ul>
  <li>Hierarchy</li>
  <li>Sketch designs (pencil &amp; paper, whiteboard, etc.)</li>
  <li>Uninterested in detail</li>
  <li>Learn incrementally</li>
</ul>

<h3 id="hierarchy">Hierarchy</h3>
<p>(End User Expectations)</p>

<ul>
  <li>End users understand hierarchy</li>
  <li>e.g. org charts in business</li>
</ul>

<h3 id="sketch-designs">Sketch Designs</h3>
<p>(End User Expectations)</p>

<ul>
  <li>pencil &amp; paper, whiteboard, etc.</li>
</ul>

<h3 id="uninterested-in-details">Uninterested in Details</h3>
<p>(End User Expectations)</p>

<ul>
  <li>Options unwelcome</li>
  <li>Don’t welcome interruptions</li>
  <li>e.g. where to save file</li>
  <li>e.g. what kind of document to create</li>
  <li>e.g. update available</li>
</ul>

<h3 id="learn-incrementally">Learn Incrementally</h3>
<p>(End User Expectations)</p>

<ul>
  <li>Learn in a hierarchical / fractal manner</li>
  <li>Learn only a few things at a time</li>
</ul>

<h3 id="domain-user-expectations">Domain User Expectations</h3>

<ul>
  <li>Snap-together apps, palettes of functionality</li>
  <li>LEGO® Blocks</li>
  <li>Whiteboards</li>
  <li>Science &amp; Engineering</li>
  <li>To Remain Ignorant of Deeper Details</li>
</ul>

<h3 id="lego-blocks">LEGO® Blocks</h3>
<p>(Domain Expert Expectations)</p>

<ul>
  <li>Users expect to Snap S/W together like LEGO® blocks</li>
  <li>Choose functionality from a palette</li>
</ul>

<h3 id="whiteboards">Whiteboards</h3>
<p>(Domain Expert Expectations)</p>

<ul>
  <li>Users use whiteboards</li>
  <li>Q: Why?</li>
  <li>Whiteboards are an incremental improvement over pencil &amp; paper sketches</li>
  <li>Q: Why sketch?</li>
</ul>

<h3 id="eschew-software-expertise">Eschew Software Expertise</h3>
<p>(Domain Expert Expectations)</p>

<ul>
  <li>Domain experts do not want to become S/W experts</li>
  <li>Domain experts expect the benefits of S/W</li>
  <li>Flexibility</li>
  <li>Easily design solutions within their domains</li>
  <li>e.g. VisiCalc (spreadsheets)</li>
  <li>Simple things are simple to implement</li>
  <li>Call in S/W professionals to handle complexity</li>
</ul>

<h3 id="domain-expert-tools">Domain Expert Tools</h3>
<p>(Domain Expert Expectations)</p>

<ul>
  <li>Spreadsheets</li>
  <li>AppleScript</li>
  <li>Hypercard</li>
  <li>Sikuli</li>
</ul>

<h3 id="software-professionals">Software Professionals</h3>

<ul>
  <li>LEGO® blocks</li>
  <li>Whiteboards</li>
  <li>“Software is complicated” - essential complexity</li>
  <li>Hardware advanced faster than software</li>
</ul>

<h3 id="software-lego-blocks">Software LEGO® Blocks</h3>

<ul>
  <li>Professionals use:<br />
Git<br />
GitHub, etc.<br />
Libraries<br />
Result <br />
not LEGO® blocks <br />
growing complexity<br />
Decreasing reliability</li>
</ul>

<h3 id="whiteboards-1">Whiteboards</h3>

<ul>
  <li>S/W professionals sketch designs</li>
  <li>Then, transfer to code</li>
  <li>Why?</li>
  <li>Why not use code instead of sketches?</li>
</ul>

<h3 id="software-is-complicated">“Software is Complicated”</h3>

<ul>
  <li>Excuse or reality?</li>
</ul>

<h3 id="hardware-advanced-faster-than-software">Hardware Advanced Faster Than Software</h3>

<ul>
  <li>Why?<br />
** Glib answer: software is just more complicated<br />
** Possibility: inhibiting technology underlies all of S/W<br />
** Possibility: new technology?  Something more than “programming”?</li>
</ul>

<h3 id="new-technology">New Technology</h3>

<ul>
  <li>Is this just a different twist on existing S/W?</li>
  <li>Is this just the QWERTY effect?</li>
  <li>More than one technology?</li>
</ul>

<h3 id="qwerty-effect">QWERTY Effect</h3>

<ul>
  <li>Technology lock-in</li>
  <li>Incremental</li>
  <li>QWERTY vs. other keyboard layouts<br />
** VHS vs. Beta<br />
** 808x vs. other CPU designs</li>
  <li>Inhibiting Technology<br />
** Stops progress?</li>
  <li>Different category?</li>
</ul>

<h3 id="1-uses-of-computers">&gt;1 Uses of Computers</h3>

<ul>
  <li>Calculator<br />
Event-Driven Controllers</li>
</ul>

<h3 id="computers-as-calculators">Computers As Calculators</h3>

<ul>
  <li>Ballistics</li>
  <li>Cryptography (not Blockchain!)</li>
  <li>One-in-one-out</li>
  <li>Synchronous</li>
  <li>Hard to implement asynchronous paradigm</li>
  <li>Functions, FP</li>
</ul>

<h3 id="one-in-one-out">One-in One-out</h3>
<p>(Computers as Calculators)</p>

<ul>
  <li>One-in-one-out</li>
  <li>One input —&gt; One outcome</li>
  <li>Exceptions are a “special case” tacked onto the side</li>
</ul>

<h3 id="synchronous">Synchronous</h3>
<p>(Computers as Calculators)</p>

<ul>
  <li>Attempts to add async to calculator paradigm</li>
  <li>Accidental Complexity &lt;— using unsuitable paradigm<br />
** e.g. Mars Rover disaster</li>
  <li>Hard to implement asynchronous paradigm in synchronous paradigm</li>
  <li>Epicycles on top of epicycles<br />
** Threads, promises, various baubles, etc.)</li>
</ul>

<h3 id="functional-approach">Functional Approach</h3>
<p>(Computers as Calculators)</p>

<ul>
  <li>Ilya Prigogene (Nobel laureate) “Order Out Of Chaos”<br />
** [paraphrased] Functional thinking has set Physics back 100 years</li>
  <li>FP - Functional Programming</li>
  <li>Eschew time</li>
  <li>Eschew STATE</li>
</ul>

<h3 id="call-return">CALL RETURN</h3>
<p>(Computers as Calculators)</p>

<ul>
  <li>Implicitly uses The Stack</li>
  <li>Creates dynamic record of invocations —&gt; dependency</li>
  <li>Accidental complexity</li>
  <li>Useful only in calculator model of computing</li>
</ul>

<h3 id="global-variable-hidden">Global Variable (Hidden)</h3>
<p>(Computers as Calculators)</p>

<ul>
  <li>All PLs, incl. FP and Smalltalk, share a global variable</li>
  <li>The Stack</li>
  <li>CALL / RETURN manipulates this global variable</li>
</ul>

<h3 id="computers-for-event-driven-control">Computers for Event-Driven Control</h3>

<ul>
  <li>Asynchronous</li>
  <li>Multiple Outcomes</li>
  <li>Eschew Dependencies</li>
  <li>Implement synchronous paradigm</li>
  <li>Isolation</li>
  <li>Examples</li>
</ul>

<h3 id="asynchronous">Asynchronous</h3>
<p>(Event-Driven Control)</p>

<ul>
  <li>Events come at any time<br />
** e.g. GUI<br />
** e.g. Browser<br />
** e.g. mouse<br />
** e.g. keyboard</li>
</ul>

<h3 id="multiple-outcomes">Multiple Outcomes</h3>
<p>(Event-Driven Control)</p>

<ul>
  <li>Multiple Outcomes</li>
  <li>One input —&gt; multiple possible outcomes</li>
  <li>One input —&gt; no outcomes</li>
  <li>Example, javascript FileReader()</li>
</ul>

<h3 id="eschew-dependencies">Eschew Dependencies</h3>
<p>(Event-Driven Control)</p>

<ul>
  <li>Scalability requires lack of dependency</li>
</ul>

<h3 id="implement-synchronous-paradigm-using-asynchronous-paradigm">Implement Synchronous Paradigm Using Asynchronous Paradigm</h3>
<p>(Event-Driven Control)</p>

<ul>
  <li>Blocking &lt;— ACK/NAK</li>
  <li>Already explored</li>
  <li>Networking</li>
  <li>Electronics</li>
</ul>

<h3 id="isolation">Isolation</h3>
<p>(Event-Driven Control)</p>

<ul>
  <li>Isolation is more important than encapsulation</li>
  <li>Encapsulate data and control flow</li>
</ul>

<h3 id="examples">Examples</h3>
<p>(Event-Driven Control)</p>

<ul>
  <li>Statecharts<br />
https://computingsimplicity.neocities.org/blogs/StateCharts.pdf</li>
</ul>

<h3 id="blockchain">Blockchain</h3>

<ul>
  <li>Two paradigms (not one)</li>
  <li>
    <ol>
      <li>Calculation &lt;— cryptography</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>Event-driven &lt;— time-based obfuscation and p2p</li>
    </ol>
  </li>
</ul>

:ET