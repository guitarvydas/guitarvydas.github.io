I"›<p>I think that finding the atom of software is important.</p>

<p>If we find the Atom, then we can construct interesting ‚Äúmolecules‚Äù using it, like Programming Languages, IDEs, Programming Notations, etc.</p>

<h1 id="the-relation">The Relation</h1>

<p>I currently think that triples are The Atom.</p>

<p>I think that relations are triples.</p>

<p>Lisp sexps are triples - <code class="language-plaintext highlighter-rouge">(rel subject object)</code>.</p>

<p>Javascript Object are triples - <code class="language-plaintext highlighter-rouge">{relation: r, subject: s, object: o}</code>.</p>

<p>Curried functions are just triples in disguise - <code class="language-plaintext highlighter-rouge">(rel subject) x object</code>.</p>

<h2 id="more-of-the-same">More of the Same</h2>
<p>Everything else is just ‚Äúmore of the same‚Äù.</p>

<h3 id="more-is-better">More Is Better?</h3>
<p>More must be better, right?</p>

<p>Uh, not if <em>more</em> obscures the base truth.</p>

<h1 id="writing-code-that-writes-code">Writing Code That Writes Code</h1>
<p>‚ÄúGive a man a fish, he eats for a day. Teach a man to fish, he eats for a lifetime‚Äù.</p>

<p>Our ideal should be to write code that writes code.</p>

<p>Compilers write code.</p>

<p>As it happens, compilers were our ‚Äúway out‚Äù of writing assembler. Compilers write assembler for us. We don‚Äôt have to write assembler anymore.</p>

<h1 id="transpilers">Transpilers</h1>
<p>Okay, so we have all sorts of compilers.</p>

<p>What‚Äôs next in software evolution?</p>

<p>Code that writes code.</p>

<p>We need to write code that writes Python<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup> for us.</p>

<p>We need to write programs that write programs for us. These programs should produce any language we want.</p>

<p>In compiler-lore, that‚Äôs called <em>portability</em>. We need to write programs that write Python for us.</p>

<p>We already know how to build portable compilers (I‚Äôm familiar with Cordy‚Äôs OCG technology and with Fraser-Davidson‚Äôs RTL (used in gcc) (See the References section)).</p>

<p>We should be building compilers that create programs in any 3GL we want - transpilers.</p>

<p>We should just hit a switch and get Python code, or Javascript code, or HTML code or Haskell code, or ‚Ä¶</p>

<p>That‚Äôs called <em>portability</em>.</p>

<p>Have we seen this already?</p>

<p>We‚Äôve seen the buds of this concept in <code class="language-plaintext highlighter-rouge">*script</code> -&gt; Javascript. But, each <code class="language-plaintext highlighter-rouge">*script</code> is a separate program that is not very generalized.</p>

<p>We‚Äôve seen the buds of this concept in heavy-duty macro processing, like Lisp macros (compiler built into the compiler).</p>

<p>We‚Äôve seen the buds of this concept in UNIX command-line tools (they can manipulate text as long as the text is arranged in line-oriented format).</p>

<p>JSON, ASON, etc. are all barking up the right tree.</p>

<h1 id="normalization">Normalization</h1>
<p>Q: What happens if you know what a software Atom is and you normalize <em>all</em> software into Atoms?</p>
<h1 id="projectional-editing">Projectional Editing</h1>
<p>IMO, Projectional Editing is just more whack-a-mole.</p>

<p>If <em>all</em> software was expressed in terms of Atoms, then Projectional Editing would be a nothing-burger.</p>

<h1 id="peg">PEG</h1>

<p>PEG technology lets us convert notations into other notations easily.</p>

<p>PEG is kinda like REGEXs on steroids.</p>

<p>Q: What conversion would we want?</p>

<p>A: Any notation -&gt; Atoms.  Atoms -&gt; any notation.</p>

<h2 id="ohm-js">Ohm-JS</h2>

<p>Ohm-JS, and, especially the <a href="https://ohmlang.github.io/editor/">Ohm Editor</a> are currently my favourite form of PEG.</p>

<p>Ohm has warts, but then QWERTY has warts, too.</p>

<p>The Ohm Editor makes it <em>easy</em> to build notations (Languages, etc).</p>

<h1 id="toolbox-languages">Toolbox Languages</h1>

<p>Some languages are better targets for transpilation than others.</p>

<p>Good languages - I call them _Toolbox Languages - emphasize machine-readability over human-readability.</p>

<p>Harder-to-transpile-to languages emphasize human-readability.</p>

<p>I would position Lisp as a good toolbox language. Strip away the cruft and all that remains are <em>sexps</em> (which can be stripped down to triples).  Easy, eh?</p>

<p>I would position Python as a poor toolbox language.  It has too much syntax that gets in the way of automation.  Especially, the indentation stuff.</p>

<p>It‚Äôs not impossible to transpile to Python.  It‚Äôs just harder than, say transpiling to Lisp.</p>

<p>Javascript is a reasonable Toolbox language, but Lisp is better.</p>

<p>[All we really need are first-class functions and everything-is-an-expression].</p>

<p>Markdown is a possible toolbox language, but it has the same indentation problem that Python has. (I argue that software should be build as relative, asychronous components - Markdown makes it possible to write and elide relative blocks).</p>

<p>HTML is an interesting possibility. It has syntax that is <em>worse</em> than Lisp‚Äôs syntax (!), but we, already, transpile to it.</p>

<h1 id="see-also">See Also</h1>
<p><a href="https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html">Toolbox Languages</a><br />
<a href="https://guitarvydas.github.io/2021/04/28/Toolbox-Languages-(2).html">Toolbox Languages II</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Or, any language, like Javascript, HTML, Haskell, etc.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET