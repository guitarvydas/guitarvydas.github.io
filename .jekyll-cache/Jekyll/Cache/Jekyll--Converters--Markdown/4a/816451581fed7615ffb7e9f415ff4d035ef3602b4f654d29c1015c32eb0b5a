I"ˆ[<h1 id="synopsis">Synopsis</h1>
<p>Some GPLs (General purpose Programming Languages)<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>: have syntax that aids the automated syntax checker and some GPLs have syntax that aids the (human) maintainer of the code.</p>

<p>Most GPLs are constrained to using one or other of the syntactic choices, above, with attendant decrease in checkability and/or readability.</p>

<p>The advent of PEG parsing makes it possible to easily create more than one syntax for each GPL, allowing the ‚Äúbest of both worlds‚Äù - machine-checkability and human-readability.</p>

<p>To inspire development along these lines, I show a small snippet of a DSL and use <code class="language-plaintext highlighter-rouge">Ohm-JS</code> (and <code class="language-plaintext highlighter-rouge">sed</code>) to convert from the machine-checkable syntax to human-readable syntax as a simple batch-edit.</p>

<p>It is envisioned that both syntaxes might be presented to programmers in separate windows of their IDEs during program creation.</p>

<h1 id="syntax-checking">Syntax Checking</h1>
<p>The programming community learned early how to automatically check for a class of simple errors<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup> by using a technology called <em>parsers</em>.</p>

<p>Some GPLs aid parsers by insisting that programmers bracket their code with unique syntax, e.g. <code class="language-plaintext highlighter-rouge">if ... end if</code>.</p>

<p>Fully bracketed code tends to be verbose and conflicts with programming (maintenance, upgrading, etc.) activity after the programs have been certified by their parsers.</p>

<p>An example of bracketed style syntax would be the Algol/Pascal family of languages.</p>

<p>Other GPLs eschew verbosity and fold all end-brackets to the same, single, character.</p>

<p>This kind of syntax can be easier for humans to read, since more code first into a programming window.</p>

<p>An example of less verbose syntax would be the C family of languages, and, in the extreme, Lisp (expression) languages and raw assembly code.  For example, in C, all end-brackets are composed of the single right-brace character (<code class="language-plaintext highlighter-rouge">}</code>).</p>

<p>Using PEG parsing technology, it is possible to create syntaxes easily and quickly.</p>

<p>There is no reason for GPL designers to choose one kind of syntax over the other, as both syntax styles can be accomodated.</p>

<h1 id="sample">Sample</h1>
<p>I show a sample snippet of code written in parsability-style.</p>

<p>The code itself (nor its correctness) does not matter for the purposes of this article.</p>

<p>What is important is the contrast between the two syntaxes and the tools that were used<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote">3</a></sup>.</p>

<ol>
  <li>I chose to use Ohm-JS augmented by a simple <code class="language-plaintext highlighter-rouge">sed</code> script to create parsers, and,</li>
  <li>I chose to use <code class="language-plaintext highlighter-rouge">pfr</code><sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote">4</a></sup> to re-write the code from syntax-1 to syntax-2.</li>
</ol>

<h2 id="ohm2-syntax">Ohm2 Syntax</h2>

<p>Ohm-JS emphasizes keeping the DI<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote">5</a></sup> of the original grammar intact.</p>

<p>Most PEG parsers require the inclusion of ‚Äúnoise‚Äù in the parsing rules for parsing whitespace.</p>

<p>Ohm-JS <em>syntactic rules</em> allow programmers to skip whitespace and to produce grammars that are otherwise ‚Äúclean‚Äù.</p>

<p>Furthmore, Ohm-JS honors separation-of-concerns by separating the grammar rules from semantic rules.</p>

<p>I needed to keep whitespace intact for this project, in particular, I needed to implement the project using Ohm-JS <em>lexical rules</em>, which are essentially raw, ‚Äúnoisy‚Äù PEG, so that all incoming whitespace would be preserved.</p>

<p>A key observation is that whitespace-recognition appears in grammar rules around terminal constructs (like keywords) and very low-level rules such as <em>identifier</em> recognizers.</p>

<p>In Ohm-JS, terminal constructs are written as characters between double-quotes, e.g. <code class="language-plaintext highlighter-rouge">"end"</code>.</p>

<p>A new syntax was invented.  The new syntax uses single-quotes for whitespace-preserving terminals. A simple preprocessor maps single-quoted constructs to Ohm-compatible rules.  This new syntax is provisionally called <code class="language-plaintext highlighter-rouge">.ohm2</code>.</p>

<p>Each such single-quoted construct in Ohm2 syntax, is batch-edited and replaced by a <code class="language-plaintext highlighter-rouge">.ohm</code>-compatible parsing rule.</p>

<p>Additional parsing rules are written to support the use of single-quoted terminals, for example</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'end'
</code></pre></div></div>
<p>is mapped to</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kEnd = "end" ws
</code></pre></div></div>
<p>Currently, these additional rules are written manually.  The added rules are simple.  It is imaginable to generate these additional rules automatically.</p>

<p>Ohm2 syntax looks like Ohm syntax, except that</p>
<ul>
  <li>many terminals use single quotes, and,</li>
  <li>the syntax portion is followed by a <code class="language-plaintext highlighter-rouge">synonyms:</code><sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote">6</a></sup><sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote">7</a></sup> portion which is a simple table of mappings (from single-quote syntax to Ohm-compatible rule names).</li>
</ul>

<p>For example, the sample code parser contains a <code class="language-plaintext highlighter-rouge">synonyms:</code> section like,</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>synonyms:
...
'end'           kEnd
...
'('             kLpar
...
</code></pre></div></div>

<p>This mapping table was converted into a <code class="language-plaintext highlighter-rouge">sed</code> script.  The <code class="language-plaintext highlighter-rouge">sed</code> script was created manually in this case, but, might have been generated automatically.</p>

<p>The Ohm grammar contains full rules for the new rules, e.g. <code class="language-plaintext highlighter-rouge">kEnd</code> and <code class="language-plaintext highlighter-rouge">kLpar</code> in the above.</p>
<h4 id="outlier---identifier">Outlier - Identifier</h4>
<p>There is one non-terminal rule that needs to be manually augmented - the rule for matching identifiers (in this case called <code class="language-plaintext highlighter-rouge">name</code>).</p>

<p>The modification is the addition of whitespace-recognition suffix to the rule.</p>
<h1 id="syntaxes">Syntaxes</h1>
<p>Below, I list the code snippet and its transformed version.</p>

<p>The original, syntax-checkable syntax, appears as <code class="language-plaintext highlighter-rouge">syntax 1</code>.</p>

<p>The transformed, less-verbose syntax, appears as <code class="language-plaintext highlighter-rouge">syntax 2</code>.</p>

<p>When examining the two syntaxes, the reader should observe that <code class="language-plaintext highlighter-rouge">syntax 1</code> contains fairly verbose syntax, but should produce meaningful messages in the case of simple syntactic errors<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote">8</a></sup>, and, that <code class="language-plaintext highlighter-rouge">syntax 2</code> has much of the verbosity stripped away (esp. the <code class="language-plaintext highlighter-rouge">end ...</code> syntax).</p>

<p>Both syntaxes should be parsable with modern technology.  The difference is in <em>human readability</em> vs. <em>syntax error messages</em>.</p>

<p>Syntax errors arising out of the use of <code class="language-plaintext highlighter-rouge">syntax 1</code> should guide programmers to the source of the error(s) quickly, while <code class="language-plaintext highlighter-rouge">syntax 2</code> allows more code to fit inside a programming window.</p>

<p>Syntax errors arising out of the use of <code class="language-plaintext highlighter-rouge">syntax 2</code> might produce small mysteries for programmers, since indentation might not correspond to the DI in the presence of typos.</p>

<p>Programmers have learned to cope with such small, syntactic mysteries, <em>but</em>, errors that can be caught automatically, and, quickly, can free the programmers‚Äô minds to design at higher levels of abstraction.</p>

<h2 id="syntax-1">Syntax 1</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>object dispatcher
  function dispatch (self : dispatcher  top : asc-container )
    with top
      while ?some-asc-ready
        @transfer-sender-outputs-to-receivers
        with asc = @find-ready-asc
          let message = @pull-message-from-fifo
            @invoke-once-with-message (message)
          end let
        end with
      end while
    end with
  end function
end object

</code></pre></div></div>
<h2 id="syntax-2">Syntax 2</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>object dispatcher
  function dispatch (self : dispatcher  top : asc-container )
    with top
      while ?some-asc-ready
        @transfer-sender-outputs-to-receivers
        with asc = @find-ready-asc
          let message = @pull-message-from-fifo
            @invoke-once-with-message (message)
</code></pre></div></div>
<h1 id="appendix---sampleohm2">Appendix - Sample.ohm2</h1>
<p>This code snippet was chosen for its small size, for clarity in this article, and does not represent a full Notation, DSL or GPL.</p>

<p>It should be observed that, in accordance with Ohm‚Äôs design, the most ‚Äúinteresting‚Äù parsing rules are collected together and are not polluted with semantics-checking issues.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Notation {
  top = 'object' name
          function+ 
        'end' 'object'

  function = 'function' name '(' formalParameter+ ')'
               statement+
             'end' 'function'

  formalParameter = name ':' type

  statement = withStatement | whileStatement | letStatement | callStatement

  withStatement = 'with' name eqRHS?
                    statement+
                  'end' 'with'

  whileStatement = 'while' expression
                     statement+
                   'end' 'while' 

  letStatement = 'let' name '=' expression
                    statement+
                 'end' 'let' 

  callStatement =   callOperator name '(' actualParameter+ ')' -- withActuals
                  | callOperator name                          -- withoutActuals

  expression = callStatement

    type = name
    callOperator = '@' | '?' 
    actualParameter = name
    eqRHS = '=' expression    

      name = nameFirst nameRest* ws
      nameFirst = letter
      nameRest = alnum | "-"

        ws = whiteSpace*
        whiteSpace = " " | "\t" | "\n"

        kObject = "object" ws
        kEnd = "end" ws
        kFunction = "function" ws
        kColon = ":" ws
        kWith = "with" ws
        kWhile = "while" ws
        kLet = "let" ws
        kAt = "@" ws
        kQuestion = "?" ws
        kLpar = "(" ws  
        kRpar = ")" ws  
        kEq = "=" ws
}

// synonyms:
// 'object'        kObject
// 'end'           kEnd
// 'function'      kFunction
// ':'             kColon
// 'with'          kWith
// 'while'         kWhile
// 'let'           kLet
// '@'             kAt
// '?'             kQuestion
// '('             kLpar
// ')'             kRpar
// '='             kEq
</code></pre></div></div>
<h1 id="appendix---sed-script">Appendix - Sed Script</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s/'object'/kObject/g
s/'end'/kEnd/g
s/'function'/kFunction/g
s/':'/kColon/g
s/'with'/kWith/g
s/'while'/kWhile/g
s/'let'/kLet/g
s/'@'/kAt/g
s/'?'/kQuestion/g
s/'('/kLpar/g
s/')'/kRpar/g
s/'='/kEq/g
</code></pre></div></div>
<p>I chose to use <code class="language-plaintext highlighter-rouge">sed</code> in this project, but, the transformations (batch edits) are simple enough to be performed using any language that supports REGEXPs.</p>
<h1 id="appendix---identity-sampleglue">Appendix - Identity-Sample.glue</h1>
<p>In a transformation workflow, I find it easiest to create an identity transformer first, to design and debug the transformer machinery.</p>

<p>Later, the identity transformer is modified for its final use.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>top [kobject name @Functions kend kobject2] = [[${kobject}${name}${Functions}${kend}${kobject2}]]

function [kfunction name klp @FormalParameters krp @Statements kend kfunction2] =
  [[${kfunction}${name}${klp}${FormalParameters}${krp}${Statements}${kend}${kfunction2}]]

formalParameter [name kcolon Type] = [[${name}${kcolon}${Type} ]]

statement [s] = [[${s}]]

withStatement [kwith name @EqRHS @Statements kend kwith2] =
  [[${kwith}${name}${EqRHS}${Statements}${kend}${kwith2}]]

whileStatement [kwhile Expression @Statements kend kwhile2] =
  [[${kwhile}${Expression}${Statements}${kend}${kwhile2}]]

letStatement [klet name keq Expression @Statements kend klet2] =
  [[${klet}${name}${keq}${Expression}${Statements}${kend}${klet2}]]

callStatement_withActuals [callOperator name klp @ActualParameters krp] =
  [[${callOperator}${name}${klp}${ActualParameters}${krp}]]
callStatement_withoutActuals [callOperator name] =
  [[${callOperator}${name}]]

expression [CallStatement] = [[${CallStatement}]]

  type [name] = [[${name}]]
  callOperator [c] = [[${c}]]
  actualParameter [name] = [[${name}]]
  eqRHS [keq Expression] = [[${keq}${Expression}]]

    name [nameFirst @nameRest ws] = [[${nameFirst}${nameRest}${ws}]]
    nameFirst [c] = [[${c}]]
    nameRest [c] = [[${c}]]

ws [@cs] = [[${cs}]]
whiteSpace [c] = [[${c}]]

kObject [k ws] = [[${k}${ws}]]
kEnd [k ws] = [[${k}${ws}]]
kFunction [k ws] = [[${k}${ws}]]
kColon [k ws] = [[${k}${ws}]]
kWith [k ws] = [[${k}${ws}]]
kWhile [k ws] = [[${k}${ws}]]
kLet [k ws] = [[${k}${ws}]]
kAt [k ws] = [[${k}${ws}]]
kQuestion [k ws] = [[${k}${ws}]]
kLpar [k ws] = [[${k}${ws}]]
kRpar [k ws] = [[${k}${ws}]]
kEq [k ws] = [[${k}${ws}]]

</code></pre></div></div>
<h1 id="appendix---sampleglue">Appendix - Sample.glue</h1>
<p>This <em>glue</em> script is almost a direct duplicate of the identity transformer script.</p>

<p>Only the <code class="language-plaintext highlighter-rouge">${kEnd}${...}</code> transformers have been deleted, producing a second syntax on output.</p>

<p>N.B. re. <em>glue</em> syntax‚Ä¶</p>
<ul>
  <li>Each rule in the script corresponds 1:1 with a rule in the grammar (<code class="language-plaintext highlighter-rouge">sample.ohm</code>).</li>
  <li>Each <em>glue</em> rule contains a parameter list that corresponds 1:1 with sub-patterns in the original grammar.  Parameters that correspond with Ohm <em>iteratation</em> rules (<code class="language-plaintext highlighter-rouge">*</code>/<code class="language-plaintext highlighter-rouge">+</code>/<code class="language-plaintext highlighter-rouge">?</code>) must be prefixed by <code class="language-plaintext highlighter-rouge">@</code>.</li>
  <li>The RHS - right hand side - of each <em>glue</em> rule contains a JS <em>template string</em> enclosed in double-square brackets <code class="language-plaintext highlighter-rouge">[[...]]</code> (instead of back-ticks).  In particular, <code class="language-plaintext highlighter-rouge">${...}</code> syntax evaluates a JS variable (or function in more complicated use-cases) and all other characters are untouched<sup id="fnref:18" role="doc-noteref"><a href="#fn:18" class="footnote">9</a></sup>.  The resulting string is <code class="language-plaintext highlighter-rouge">returned</code> from the semantic function<sup id="fnref:19" role="doc-noteref"><a href="#fn:19" class="footnote">10</a></sup>.</li>
  <li>Parameter names used in the RHS are not prefixed (for example, as in the first line, <code class="language-plaintext highlighter-rouge">@Function</code> appears in the parameter list, but is used as <code class="language-plaintext highlighter-rouge">Function</code> on the RHS)</li>
  <li>Every <em>glue</em> rule creates and returns a single string, by using parameters and hard-coded characters</li>
  <li><em>Glue</em> generates JS code that is used as Ohm-JS <em>semantics</em> handling.  <em>Glue</em> code only generates and returns strings, which is a subset of the capabilities of general Ohm-JS semantics code.  See Ohm-JS documentation for further details<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" class="footnote">11</a></sup>.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>top [kobject name @Functions kend kobject2] = [[${kobject}${name}${Functions}]]

function [kfunction name klp @FormalParameters krp @Statements kend kfunction2] =
  [[${kfunction}${name}${klp}${FormalParameters}${krp}${Statements}]]

formalParameter [name kcolon Type] = [[${name}${kcolon}${Type} ]]

statement [s] = [[${s}]]

withStatement [kwith name @EqRHS @Statements kend kwith2] =
  [[${kwith}${name}${EqRHS}${Statements}]]

whileStatement [kwhile Expression @Statements kend kwhile2] =
  [[${kwhile}${Expression}${Statements}]]

letStatement [klet name keq Expression @Statements kend klet2] =
  [[${klet}${name}${keq}${Expression}${Statements}]]

callStatement_withActuals [callOperator name klp @ActualParameters krp] =
  [[${callOperator}${name}${klp}${ActualParameters}${krp}]]
callStatement_withoutActuals [callOperator name] =
  [[${callOperator}${name}]]

expression [CallStatement] = [[${CallStatement}]]

  type [name] = [[${name}]]
  callOperator [c] = [[${c}]]
  actualParameter [name] = [[${name}]]
  eqRHS [keq Expression] = [[${keq}${Expression}]]

    name [nameFirst @nameRest ws] = [[${nameFirst}${nameRest}${ws}]]
    nameFirst [c] = [[${c}]]
    nameRest [c] = [[${c}]]

ws [@cs] = [[${cs}]]
whiteSpace [c] = [[${c}]]

kObject [k ws] = [[${k}${ws}]]
kEnd [k ws] = [[${k}${ws}]]
kFunction [k ws] = [[${k}${ws}]]
kColon [k ws] = [[${k}${ws}]]
kWith [k ws] = [[${k}${ws}]]
kWhile [k ws] = [[${k}${ws}]]
kLet [k ws] = [[${k}${ws}]]
kAt [k ws] = [[${k}${ws}]]
kQuestion [k ws] = [[${k}${ws}]]
kLpar [k ws] = [[${k}${ws}]]
kRpar [k ws] = [[${k}${ws}]]
kEq [k ws] = [[${k}${ws}]]

</code></pre></div></div>
<h1 id="appendix---bash-script---runbash">Appendix - Bash Script - Run.bash</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
clear
./convert.bash
echo
echo syntax 1...
echo
pfr sample.ash sample.ohm identity-sample.glue
echo
echo syntax 2...
echo
pfr sample.ash sample.ohm sample.glue

</code></pre></div></div>
<h1 id="appendix---bash-script---convertbash">Appendix - Bash Script - Convert.bash</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
sed -f synonyms.sed &lt;sample.ohm2 &gt;sample.ohm
</code></pre></div></div>

<h1 id="appendix-github">Appendix Github</h1>
<p><a href="https://github.com/guitarvydas/twosyntaxes">Two Syntaxes Code</a></p>
<h1 id="appendix-ohm-js">Appendix Ohm-JS</h1>
<p><a href="https://github.com/harc/ohm">Ohm-JS</a></p>
<h1 id="appendix-glue---transforming-tool">Appendix Glue - Transforming Tool</h1>
<p><a href="https://guitarvydas.github.io/2021/04/11/Glue-Tool.html">Glue</a><br />
[<em>This work is fairly new and may contain errors.  The documentation might be incomplete.</em>]</p>
<h1 id="appendix-txl">Appendix TXL</h1>
<p><a href="http://txl.ca">TXL</a></p>
<h1 id="appendix-ssl">Appendix S/SL</h1>
<p><a href="https://archive.org/details/technicalreportc118univ">S/SL</a></p>
<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io">Blog</a><br />
<a href="https://guitarvydas.github.io/2021/09/21/Table-of-Contents-Sept-17-2021.html">Table of Contents as of Sept 17, 2021</a><br />
<a href="https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy5">Videos</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>GPL means General Purpose Programming Language.  Examples would be Python, JavaScript, C++, C, etc.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Simple syntactic errors are often called <em>typos</em>.¬†<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>This project was completed in less than one day, for both syntaxes and the writing of this article.¬†<a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>PFR (parsing find-and-replace) is a simplistic tool that uses Ohm-JS grammars and JavaScript template strings to parse and rewrite text.¬†<a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>DI means Design Intent¬†<a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>Inspired by the TXL language and S/SL.  S/SL preceded TXL.¬†<a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>Note that it should be possible to write a pre-pass in Ohm-JS to handle this new syntax and mapping table.¬†<a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>Errors in code structure should be more obvious when put in the context of bracketed syntax.¬†<a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:18" role="doc-endnote">
      <p>See JS template string documentation for more details.¬†<a href="#fnref:18" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:19" role="doc-endnote">
      <p>The Ohm-JS operation, generated by the <em>glue</em> tool is called <code class="language-plaintext highlighter-rouge">_glue()</code>.¬†<a href="#fnref:19" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:10" role="doc-endnote">
      <p>Semantics code and <code class="language-plaintext highlighter-rouge">return</code>s are created automatically. The programmer does not need to be concerned with these details.¬†<a href="#fnref:10" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET