I"<h1 id="short-version">Short Version</h1>

<p>Notation-building = Create Syntax as a skin. Let the Toolbox language handle the rest.</p>

<p>[Akin to using Regexps in JS vs. building a full-blown lexer].</p>

<h2 id="mindset">Mindset</h2>

<p>A Notation is a cheap-to-build little language.</p>

<p>Physicists use a trick: invent a notation to <em>describe</em> a problem, then, <em>solve</em> the problem in that notation.</p>

<p>Programmers do this backwards - they choose the notation first (e.g. FP, Python, etc.), and then force-fit the problem (and the solution) into the notation.</p>

<h1 id="syntax-is-cheap">Syntax is Cheap</h1>

<p>It <em>used to be</em> that creating little languages was expensive, e.g. years.  It is, now, possible to build little languages in an afternoon. (One secret is learning how to cheat).</p>

<h1 id="goal">Goal</h1>

<p>Goal: Allow for change. Write code that writes code.</p>

<h1 id="assembler-nouveau">Assembler Nouveau</h1>

<p>Treat existing languages as “assembler”.</p>

<h2 id="new-breed-notations">New-Breed Notations</h2>

<p>Python, JS, WASM, Lisp, etc. are but “assembly language” for new-breed Notations.</p>

<h1 id="example">Example</h1>
<p><a href="https://guitarvydas.github.io/2021/04/11/Glue-Tool.html">Glue</a></p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/04/26/What-If-Making-A-Compiler-Was-Easy.html">What If Making a Compiler Was Easy?</a></p>

<p>SCNs, PEG, Ohm-JS, Toolbox Languages, FDD (Failure-Driven Development), DaS (Diagrams as Syntax), and so on.</p>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<p>[search for: SCNs, PEG, Ohm-JS, Toolbox Languages, FDD (Failure-Driven Development), DaS (Diagrams as Syntax), and so on.]</p>

<p><a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET