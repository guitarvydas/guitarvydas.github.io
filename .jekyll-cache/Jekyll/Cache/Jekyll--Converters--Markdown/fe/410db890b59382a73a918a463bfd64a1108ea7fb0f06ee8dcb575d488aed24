I"õ<ul>
  <li>restricted interface between components</li>
</ul>

<h1 id="input-apis">Input APIs</h1>
<p>APIs usually specify only the input side of software components.</p>

<h1 id="output-apis">Output APIs</h1>
<p>Full APIs must include, both, input and output descriptions.</p>

<h1 id="dlls">DLLs</h1>
<p>DLLs - .dll, .so, .dylib files - are one form of output API (created using indirection which is resolved by the linker).</p>

<p>DLLs are not formalized to the point of having first-class output APIs.</p>

<h1 id="normalized-interfaces-apis">Normalized Interfaces, APIs</h1>

<p>Input APIs and output APIs should look the same.</p>

<p>Currently we specify output APIs using a mish-mosh of syntax, e.g. exceptions, synchronous return values, etc.</p>

<h1 id="components">Components</h1>

<p>A Component is described by</p>
<ul>
  <li>a name</li>
  <li>an input interface</li>
  <li>an output interface.</li>
</ul>

<p>[N.B. Currently, we specify APIs with too much detail, a result of flatness instead of layering.  Libraries are hard to use because of the fact that too much detail is exposed at the top levels].</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET