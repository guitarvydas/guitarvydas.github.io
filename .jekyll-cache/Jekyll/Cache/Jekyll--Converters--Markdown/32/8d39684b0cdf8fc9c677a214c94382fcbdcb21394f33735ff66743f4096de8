I" <p>Projects On The Go as of June 29, 2021:</p>

<h1 id="asc">ASC</h1>
<ul>
  <li>Asynchronous Software Components</li>
  <li>currently working on relative naming objects</li>
  <li>github: https://github.com/guitarvydas/asc-manually/tree/master/v2</li>
</ul>

<h2 id="done-scn-mini-dsl-for-writing-ascs">done: SCN (mini-DSL) for writing ASCs</h2>
<h3 id="identitybash">identity.bash</h3>
<p>consumes xxx.asc and emits same (identity)</p>

<h3 id="lispbash">lisp.bash</h3>
<p>consumes xxx.asc and emits Lisp</p>

<h3 id="rid-dsl">rid-dsl</h3>
<ul>
  <li>mockup of SCN for RID expander</li>
  <li>RID means relative-id</li>
  <li>SCN means Solution-Centric Language, e.g. a mini-DSL</li>
</ul>

<h1 id="type-scn">TYPE SCN</h1>
<ul>
  <li>github: https://github.com/guitarvydas/asc-manually/tree/master/v2/types</li>
  <li>SCN (mini-DSL) for minimal set of types for writing ASC engine</li>
  <li>on the order of 6 operations</li>
  <li>maybe will become a semantics-combinator, akin to existing parsing-combinators</li>
</ul>

<h2 id="tyenginelisp">tyengine.lisp</h2>
<p>spec for TYPE SCN</p>

<h2 id="asctypesty">asctypes.ty</h2>
<ul>
  <li>definition of types using TYPE SCN</li>
  <li>intended as type system for ASC engine</li>
</ul>

<h1 id="seml">SEML</h1>
<ul>
  <li>SCN (mini-DSL) for semantics portion of Ohm-JS</li>
  <li>IDE for developing semantics code when grammar already works (Ohm-JS)</li>
  <li>will use knowledge from GLUE and GRASEM (see below)</li>
</ul>

<h1 id="mkgluepy">mkglue.py</h1>
<h1 id="hello-world-asc">Hello World ASC</h1>
<ul>
  <li>convert drawings to <code class="language-plaintext highlighter-rouge">.md</code> (manually) as demonstration of basic ideas</li>
</ul>

<h1 id="essays">Essays</h1>
<ul>
  <li>https://guitarvydas.github.io</li>
</ul>

<h1 id="other-projects">Other Projects</h1>
<h2 id="arithmetic">Arithmetic</h2>

<h3 id="glue">GLUE</h3>
<h3 id="grasem">GRASEM</h3>
<h3 id="arrowgrams">ArrowGrams</h3>
<ul>
  <li>
    <p>full diagram-to-code transpiler (lisp + Haskell + prolog-ish)</p>
  </li>
  <li>
    <p>github: https://github.com/bmfbp/bmfbp (see svg/â€¦ and build_process/â€¦)</p>
  </li>
  <li>
    <p>probably could be re-expressed more cleanly using ASCs</p>
  </li>
</ul>

<h3 id="js-prolog">JS-PROLOG</h3>

<h3 id="ag-js">AG-JS</h3>

<h3 id="cl-event-processing">CL-EVENT-PROCESSING</h3>
<h3 id="pasm">PASM</h3>

<ul>
  <li>parser assembler-like primitives</li>
  <li>probably similar to parser combinators</li>
</ul>

<h3 id="scanner">Scanner</h3>

<ul>
  <li>tokenizer pipeline</li>
  <li>like scanner combinators, but fixed pipeline</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>tokenizer</td>
          <td>comments</td>
          <td>strings</td>
          <td>spaces</td>
          <td>symbols</td>
          <td>integers</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>github: https://github.com/guitarvydas/scanner</li>
  <li>see: README.org</li>
</ul>

<h3 id="sl">SL</h3>

<h3 id="esa--esa-transpiler">ESA + ESA-TRANSPILER</h3>

<h3 id="ason">ASON</h3>

<h3 id="cl-holm">CL-HOLM</h3>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET