I"‚<h1 id="goal-of-agile">Goal of Agile</h1>
<p>The goal of Agile is to deal with the uncertainty of the Design process.</p>

<p>Agile deals with design uncertainty by involving the stake holder(s) multiple times during the design process.</p>

<p>Most customers, stake-holders, cannot specify Requirements with enough grueling detail to allow implementation.  Most customers, stake-holders, do not <em>want</em> to deal with <em>all</em> of the details.</p>

<p>Agile is just a stop-gap measure applied to Design, until we find a better way to perform Design with less uncertainty.</p>

<h1 id="religion-of-agile">Religion of Agile</h1>
<p>Agile has become dogmatic - a religion.</p>

<p>Many programmers focus on the <em>rituals</em> of Agile, without addressing the <em>goals</em> of Agile.</p>
<h1 id="takeaways-from-agile">Takeaways from Agile</h1>
<ul>
  <li>Stake-holders cannot (will not) specify <em>all</em> of the details of a problem.
    <h1 id="anti-takeways-from-agile">Anti-Takeways from Agile</h1>
    <h2 id="sprints-are-too-long">Sprints Are Too Long</h2>
    <p>2/3-week sprints are too long.</p>
  </li>
</ul>

<p>We should be striving for continuous improvement in the process of gathering requirements.</p>
<h3 id="2-hour-sprints">2 Hour Sprints</h3>
<p>We should be striving for 2-hour sprints.</p>
<h3 id="redefining-sprints">Redefining Sprints</h3>
<p>We should be striving to change the concept of sprints into something even more productive.</p>
<h1 id="flexibility">Flexibility</h1>
<p>We want:</p>
<ul>
  <li>flexibility in the Design</li>
  <li>optimal behavior in the field.</li>
</ul>

<p>This suggests that we should break programming down into two major categories:</p>
<ol>
  <li>Flexible Design</li>
  <li>Optimization for Delivery.</li>
</ol>

<p>The categories have different goals.</p>

<p>We should treat each category differently.</p>

<p>We should not conflate both categories into the same activity, nor the same PL<sup id="fnref:pl" role="doc-noteref"><a href="#fn:pl" class="footnote">1</a></sup>.</p>

<h2 id="inflexibility">Inflexibility</h2>
<p>Optimization removes flexibility to achieve better performance.</p>

<p>Premature optimization is pervasive, yet hidden, in most apps written with current PLs.</p>

<h2 id="tell-choosing-programming-language-first">Tell: Choosing Programming Language First</h2>
<p>Choosing a PL before fully understanding a problem leads to later inflexibility.</p>

<p>The only ‚Äúgood‚Äù reason to hire programmers experienced in a certain language is to maintain and upgrade existing code.</p>
<h2 id="tell-choosing-only-one-programming-language">Tell: Choosing Only One Programming Language</h2>
<p>If the programming language does not fit the problem, aspects of the problem-solution must be force-fit into the programming language, e.g. Relational Programming languages do not fit output formattting (well).</p>

<p>The use of only one programming language is a <em>tell</em>.</p>

<p>All aspects of the solution might not suit themselves to a single, chosen language.</p>

<p>(Sometimes, all aspects of the solution do fit a given language. This is an exception, not the rule).</p>

<p>The use of a single programming language - for design - is indicative of the ‚Äúprogrammers are interchangeable‚Äù mind-set, instead of the ‚Äúbest-of‚Äù mind-set. For example, Apple Computers lets the cost of their computers be determined by a ‚Äúbest-of features‚Äù mind-set, instead of allowing cost to drive which features are included.</p>

<p>Note that I argue that PLs are cheap to build<sup id="fnref:cheap" role="doc-noteref"><a href="#fn:cheap" class="footnote">2</a></sup>, today.</p>

<h2 id="indirection">Indirection</h2>
<p>Indirection retains flexibility at the expense of optimization.</p>
<h2 id="multiple-syntaxes">Multiple Syntaxes</h2>
<p>Designs often have multiple facets.</p>

<p>Each facet might be best expressed in a different syntax.</p>

<p>Hence, an app should employ multiple syntaxes.</p>

<p>[I argue that SCNs - Solution Centric Notations - should be used. SCNs are cheap to build (hours instead of years).  Multiple SCNs can be tuned for a specific problem.  SCNs are so cheap, that one can build SCNs for a specific <em>problem</em> instead of resorting to one off-the-shelf PL].</p>

<h2 id="diagrammatic-syntaxes">Diagrammatic Syntaxes</h2>
<p>There is no reason to use only text-based notations for a given problem.</p>

<p>Diagrams can be transpiled to executable code. I detail how to do this in other essays.</p>

<p>Architects‚Äô toolbelts<sup id="fnref:paradigms" role="doc-noteref"><a href="#fn:paradigms" class="footnote">3</a></sup> should include many textual and diagrammatic PLs.</p>

<h2 id="whiteboards">Whiteboards</h2>
<p>Most stake-holders and most CTOs use whiteboards to present their ideas to implementors.</p>

<p>Q: Can we capture the whiteboard drawings?</p>

<p>A: Yes, using photos and drawing editors.</p>

<p>Q: Can we manually transpile drawings into working code?</p>

<p>A: Yes, I document how to do this in other essays.</p>

<p>Q: Can we automatically transpile drawings into working code? (I.E. can we build compilers for diagrammatic languages?)</p>

<p>A: Yes, I document how to do this in other essays<sup id="fnref:modern" role="doc-noteref"><a href="#fn:modern" class="footnote">4</a></sup>.</p>

<h1 id="reuse-in-the-large">Reuse In The Large</h1>
<p>It is not enough to reuse code.</p>

<p>It is not enough to reuse Architecture.</p>

<p>We should reuse organizational principles from other professions.</p>

<p>For example, Architecture/Engineering/Construction organizational structure could be borrowed from the construction industry.</p>

<p>Most software organizations don‚Äôt yet understand that Engineering is not Coding.</p>

<h1 id="code-is-cheap">Code is cheap.</h1>

<p>Code is cheap.</p>

<p>Thinking is hard.</p>

<h1 id="software-development-roles">Software Development Roles</h1>
<p>See <a href="https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html">Software Development Roles</a>.</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:pl" role="doc-endnote">
      <p>PL means Programming Language¬†<a href="#fnref:pl" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:cheap" role="doc-endnote">
      <p>‚ÄúCheap to build‚Äù means hours, not years, for implementation.¬†<a href="#fnref:cheap" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:paradigms" role="doc-endnote">
      <p>Paradigms are more important than syntax¬†<a href="#fnref:paradigms" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:modern" role="doc-endnote">
      <p>Modern hardware can run exhaustive-search languages, e.g. PROLOG and Relational Programming, which makes transpiling diagrams-to-code simple.¬†<a href="#fnref:modern" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET