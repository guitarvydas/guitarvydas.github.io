I"…<p>Re: ‚ÄúDesigning a DSL for accounting:‚Ä¶‚Äù (see appendix).</p>

<p>The article shows how to build a ‚Äúproject plan‚Äù for creating a new DSL.</p>

<p>I think that that is too formal and propagates the notion that DSLs are difficult to build.</p>

<p>Yet, many people build and use DSLs without realizing it. ¬†For example, by using REGEXP.</p>

<p>REGEXP is a DSL.</p>

<p>Regular expressions are often used to specify patterns that make up other (usually trivial) DSLs.</p>

<p>Programmers do not create project plans for using REGEXP.  They just use REGEXP.</p>

<p>At what point do you stop planning and Just Use the thing?</p>

<p>I don‚Äôt know, but I see a chasm between:</p>
<ol>
  <li>straight-forward programming to solve a problem (using REGEXPs as one tool, along with other tools)</li>
  <li>embarking on a mega-project to build apparently woo-woo scary apps like compilers<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>.</li>
</ol>

<p>Currently, PEG falls into the scary realm and REGEXP doesn‚Äôt.</p>

<p>I think that PEG should be non-scary, like REGEXP.</p>

<p>The differences between PEG and REGEXP are:</p>

<p>1) PEG needs many lines of code to describe a text-match and transformation</p>

<p>2) PEG is more powerful than REGEXP, because PEG provides subroutines and REGEXP doesn‚Äôt.</p>

<p>I think that the ideal situation for programming would be to use an IDE that works like a heads-up display.</p>

<p>One window for the grammar, another for the glue-ing (transforming the matching bits) and various other windows for things like debugging, etc.</p>

<p>When more than one DSL is used for one problem, the heads-up display would contain more windows.</p>

<h1 id="batch-edit">Batch Edit</h1>
<p>Thought: maybe I think of PEG in terms of ‚Äúbatch edit‚Äù.</p>

<h1 id="appendix">Appendix</h1>
<p><a href="https://click.convertkit-mail.com/e5u4m3mqx7u0u294r7f8/7qh7h8h4gg5knmbz/aHR0cHM6Ly90b21hc3NldHRpLm1lL2ZpbmFuY2lhbC1hY2NvdW50aW5nLWRzbC8_dXRtX3NvdXJjZT1uZXdzbGV0dGVyJnV0bV9tZWRpdW09ZW1haWwmdXRtX2NhbXBhaWduPW9uYm9hcmRpbmdzZXF1ZW5jZQ==,">Designing a DSL for accounting: ‚Ä¶</a></p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io">Blog</a><br />
<a href="https://guitarvydas.github.io/2021/09/21/Table-of-Contents-Sept-17-2021.html">Table of Contents as of Sept 17, 2021</a><br />
<a href="https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy5">Videos</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Compilers are not difficult to build.  They are simply big apps that contain lots of detail.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET