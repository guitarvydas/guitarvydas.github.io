I"Ñ<p>Programming languages and IDEs are stuck in the 1950â€™s.</p>

<p>In contrast, UXs for non-programmers have advanced into the 2020â€™s.</p>

<p>Non-programmers use <em>windows</em> embodied in operating systems like Windows, MacOS and Linux.</p>

<p>Programmers still use languages which are text-oriented, use simple bitmaps (aka <em>characters</em>) with cells arranged in a non-overlapping manner indexed by line and column numbers.</p>

<h1 id="diagrammatic-programming-is-not-visual-programming">Diagrammatic Programming is <em>Not</em> Visual Programming</h1>
<p>Visual programming has come to mean pixels.</p>

<p>Diagrammatic programming (DaS - Diagrams as Syntax) is based on a very few simple shapes, namely</p>
<ul>
  <li>rectangles</li>
  <li>ellipses</li>
  <li>lines</li>
  <li>text.</li>
</ul>

<p>Diagrammatic shapes can overlap and are indexed by (x,y) coordinates.</p>

<h1 id="svg">SVG</h1>

<p>SVG can represent the simple shapes required by diagrammatic programming.</p>

<p>SVG is a superset of what is needed for DaS.</p>

<h1 id="diagrammatic-programming-editors-and-ides">Diagrammatic Programming Editors and IDEs</h1>

<p>Currently, only [diagrams.net[(https://www.diagrams.net) (aka drawio) seems to under-utilize SVG and provide simple editing of compilable diagrams.</p>

<p>Diagrams.net, in fact, uses a data format - mxGraph - which is a per-cursor to SVG.</p>

<p>It is possible to parse mxGraph files.  This is shown in [langjam entry](https://github.com/guitarvydas/jam0001/tree/main/guitarvydas_ (see https://github.com/guitarvydas/jam0001/blob/main/guitarvydas/README.md)</p>

<h1 id="what-is-the-use-case-for-diagrammatic-programming">What is the Use-Case for Diagrammatic Programming?</h1>

<p>DaS - Diagrammatic Programming - is useful <em>only</em> if it can express programs which are not handled by existing textual languages<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>.</p>

<p>Existing textual languages are geared towards Implementation - implementation of code, implementation of data structures, syntax checking and type checking.</p>

<p>DaS can be used to express <em>software architecture</em>.</p>

<p>Diagrams lead to nested diagrams, which leads to <em>structured</em> software architecture (DI - Design Intent).</p>

<p>Diagrams show leakage and dependencies between software components.</p>

<p>In contrast, textual languages tend to elide details such as synchrony and CALL/RETURN (a form of synchrony).</p>

<p>Diagrams can make such details explicit - e.g. sequencing can be shown as arrows from one block to another and parallelism can be shown as arrows that branch from one component to more than one other component.</p>

<h2 id="synchronous-components">Synchronous Components</h2>

<p><img src="https://github.com/guitarvydas/guitarvydas.github.io/blob/master/assets/2021-08-28-Simple%20Diagrams-Synchronous.png?raw=true" alt="2021-08-28-Simple Diagrams-Synchronous.png" style="zoom:67%;" /></p>

<h2 id="asynchronous-components">Asynchronous Components</h2>

<p><img src="https://github.com/guitarvydas/guitarvydas.github.io/blob/master/assets/2021-08-28-Simple%20Diagrams-Asynchronous.png?raw=true" alt="2021-08-28-Simple Diagrams-Asynchronous.png" style="zoom:67%;" /></p>

<h2 id="nested-components">Nested Components</h2>

<p><img src="https://github.com/guitarvydas/guitarvydas.github.io/blob/master/assets/2021-08-28-Simple%20Diagrams-Nesting.png?raw=true" alt="2021-08-28-Simple Diagrams-Nesting.png" style="zoom:67%;" /></p>

<h2 id="ports">Ports</h2>

<p><img src="https://github.com/guitarvydas/guitarvydas.github.io/blob/master/assets/2021-08-28-Simple%20Diagrams-Ports.png?raw=true" alt="2021-08-28-Simple Diagrams-Ports.png" style="zoom:67%;" /></p>

<h1 id="locality-of-reference">Locality Of Reference</h1>

<p>Often, a major success factor in general programming language design, comes from localizing objects.</p>

<p>An example of locality of reference is the use of scoped variables in place of global variables.</p>

<p>An example of locality of reference is the use of structured programming in place of ad-hoc GOTO programming (if, while, etc., constructs constrain the use of GOTOs.).</p>

<p>Diagrammatic programming can have the same effect, but at the level of <em>software achitecture</em>.</p>

<h2 id="nesting">Nesting</h2>

<p>Nesting can show how software modules are constructed.</p>

<p>Nesting can show flows that break through the boundaries of components.  This is also known as <em>dependency</em>. Dependency affects scalability.</p>

<h2 id="ports-1">Ports</h2>

<p>Ports contstrain the flow of data between software components.</p>

<p>Data flow constraints improve the locality of reference for information.</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io">Blog</a><br />
<a href="https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy5">Videos</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>For example, <code class="language-plaintext highlighter-rouge">a = b + c</code> should never be expressed in diagrammatic form, since the textual form is already available and is convenient.Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET