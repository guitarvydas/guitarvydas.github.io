I"h<ul>
  <li>Nesting</li>
</ul>

<h1 id="scoping">Scoping</h1>

<p>Scoping is nesting.</p>

<p>Structured Programming suggested ways to scope control flow.</p>

<p>Control flow spaghetti was discarded in lieue of structured control-flow concepts such as <code class="language-plaintext highlighter-rouge">while loops</code>.</p>

<p>[N.B. The problem of Global Variables was, also, solved by using nesting (scoping), although this was not fundamentally a control-flow problem]</p>

<h1 id="what-is-not-nested-in-todays-pls">What is <em>not</em> nested in today’s PLs?</h1>
<ul>
  <li>functions</li>
  <li>types</li>
  <li>CPS</li>
  <li>environments</li>
  <li>…</li>
</ul>

<h1 id="package-managers">Package Managers</h1>

<p>Packaging, package managers, are attempts at providing nesting for symbols.</p>

<p>The fact that there is more than one kind of package manager implies that the concept has not been normalized, yet.</p>

<h1 id="docker">Docker</h1>
<p>Docker is an attempt at providing nesting and isolation.</p>

<h1 id="environments">Environments</h1>
<p>Environments and environment variables are just another use of flat global entities.</p>

<p>In this case, isolation is implicitly provided by the physical hardware.</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET