I"i<p>As it stands, the grammar works, but I keep running into trouble with the code outputter (aka code emission).</p>

<p>I‚Äôve gotten this far, without any real trouble, but, something isn‚Äôt working.</p>

<h2 id="the-problem">The Problem</h2>

<p>I want the code outputter to keep track of the object hierarchy and to output containment relations, e.g. <code class="language-plaintext highlighter-rouge">contains(id9,id28)</code>.</p>

<p>I‚Äôve roughed-in containment handling, but, it gives wrong answers - sometimes.</p>

<h2 id="complexity-tell">Complexity Tell</h2>
<p>The above is a red flag that tells me that I haven‚Äôt simplified enough.</p>

<p>I can play whack-a-mole and fix edge-cases as they come up, or, I can look for an overriding simplification.</p>

<h2 id="how-do-you-know-when-to-stop-simplifying">How Do you Know When To Stop Simplifying?</h2>
<p>Everything is a fractal.</p>

<p>Everything can be broken apart and simplified.</p>

<p>How do to you know when to stop simplifying?</p>

<p>You can‚Äôt know when to stop.</p>

<p>The only rule is: is it good enough to solve the problem-at-hand?</p>

<h2 id="what-is-needed-for-this-problem">What is Needed For This Problem</h2>

<p>We want to parse something like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a {
  b {
    c
  }
}
</code></pre></div></div>
<p>and we want to output <code class="language-plaintext highlighter-rouge">c</code> as <code class="language-plaintext highlighter-rouge">a.b.c</code>.</p>

<p>We need to remember that a contains b, and, that b contains c.</p>

<p>We want to create an ID for each of the objects, a, b, and, c.</p>

<p>We‚Äôll create those IDs dynamically and call the IDs <code class="language-plaintext highlighter-rouge">gobject</code> (for ‚Äúgraphical object‚Äù).</p>

<p>We, also, want to track that <code class="language-plaintext highlighter-rouge">container</code> for each object using a <code class="language-plaintext highlighter-rouge">contains</code> relationship.</p>

<p>We need:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>contains(b,c)
contains(a,b)
</code></pre></div></div>
<p>while noticing that <em>nothing</em> contains a.</p>

<p>Actually, the top-level drawing contains a, so we need to make a relation for that?</p>

<p>Do we want to make an ID for the drawing?.</p>

<p>If we don‚Äôt create an ID for the drawing, we create an edge-case for the top-level - nothing contains a, but a contains b, and so on.</p>

<p>The top-level becomes a special case.</p>

<p>Hmm, special cases lead to edge-cases and are a <em>tell</em> of insufficient simplicity.</p>

<p>Maybe that‚Äôs the answer - every drawing gets an ID and starts the containment hierarchy off.</p>

<p>Later, we‚Äôre going to want to join drawings to other drawings, but, we haven‚Äôt started to think about that problem, yet.  Keep things simple.</p>

<p>OTOH, making an ID for the top-level drawing will probably serve us when we need to start solving the problem of how to join drawings together.</p>

<p>Let‚Äôs do that for now - we can always change our mind.</p>

<p>If we keep the code simple and concise, changing our minds won‚Äôt cause many future problems.</p>

<p>We want to keep the <em>thinking</em> separate from the <em>coding</em>.</p>

<p>If we have to re-think a solution that is OK.</p>

<p>If we have to re-code a solution, then we will tend not to allow our re-thinking to change our solution.</p>

<p>Less code, more thinking.</p>

<p>We should strive to encode <em>all</em> of our thinking into one line of code.  That way, if we change our minds, all we have to do is to change one line of code.</p>

<p>I‚Äôve never achieved this ideal - only one line of code - but, I‚Äôve made many designs that have very few lines of ‚Äúcode‚Äù (about one page, or about one eye-full).</p>

<h2 id="back-to-the-drawing-board">Back To The Drawing Board</h2>

<p>We are at liberty to change the design completely.</p>

<p>We are always at liberty to make such sweeping changes, but, there things that discourage us from doing so.</p>

<p>Having written too much code discourages us from changing our designs.</p>

<p>The answer to this problem is simple: write less code.  D‚Äôoh.</p>

<p>Spend a disportionately huge amount of time on the design and very little time on creating code.</p>

<p>Throw code away and start again‚Ä¶</p>

<h3 id="how-to-write-less-code">How To Write Less Code?</h3>

<p>See my essays entitled ‚ÄúLess Code‚Äù and ‚ÄúWriting Code That Writes Code‚Äù.</p>

<p>Write down the DI (the Architecture), don‚Äôt spend much time writing down code that has the DI calcified into it.</p>

<p>Simplify the DI until it occupies only one eye-full (e.g. a page, a window).</p>

<p>No one wants to read your 200-page manual on how to use your DI notation, so keep it simple.  Goals: 1 page for the DI notation manual and 1 page of code in the DI notation<sup id="fnref:manual" role="doc-noteref"><a href="#fn:manual" class="footnote">1</a></sup>.</p>

<h2 id="tipping-point">Tipping Point</h2>

<p>I have found that there is a psychological tipping point that affects DI Refactoring<sup id="fnref:di" role="doc-noteref"><a href="#fn:di" class="footnote">2</a></sup>.</p>

<p>See my other essay called <code class="language-plaintext highlighter-rouge">DI Refactoring</code>.</p>

<h1 id="red-flag---whack-a-mole-tell">Red Flag - Whack-A-Mole Tell</h1>
<p>Playing whack-a-mole with edge cases is a red flag.</p>

<p>Something is not simple enough.</p>

<p>Ah - the diagrams are diagrams, but we‚Äôve tangled semantics into the diagrams.</p>

<h1 id="the-end---begin-again">The End - Begin Again</h1>
<p>Let‚Äôs start again, and make the diagrams simpler.</p>

<p>Plan:</p>
<ol>
  <li>convert the diagrams to markdown.</li>
  <li>convert the markdown into nested syntax (technical term: CFG)</li>
  <li>convert the nested syntax into factbases with inferred <code class="language-plaintext highlighter-rouge">contain</code> facts</li>
  <li>inference interesting information.</li>
</ol>

<p>See Part 11, where we start all over again.</p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:manual" role="doc-endnote">
      <p>Try to fractalize the DI manual.  1 page to get the basics, and a hierarchy of more detailed stuff (fractalized) that might be needed later.  Flat <em>anything</em> is bad.  Flat manuals are TL;DR.¬†<a href="#fnref:manual" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:di" role="doc-endnote">
      <p>DI means <em>Design Intent</em>.  Often, the term <em>Software Architecture</em> is overloaded to mean DI.¬†<a href="#fnref:di" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET