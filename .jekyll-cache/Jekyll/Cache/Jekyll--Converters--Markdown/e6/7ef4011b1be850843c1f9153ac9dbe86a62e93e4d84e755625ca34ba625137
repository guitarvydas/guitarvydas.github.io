I"Î#<hr />
<p>layout: post<br />
title:  ‚ÄúThe Software Ceiling‚Äù<br />
‚Äî</p>
<h1 id="the-software-ceiling">The Software Ceiling</h1>

<p>(Paul Tarvydas, Jan 2021)</p>

<h3 id="who-uses-software">Who Uses Software?</h3>

<h4 id="end-users-non-programmers">End users, non-programmers</h4>
<h4 id="domain-experts-non-programmers">Domain experts, non-programmers</h4>
<h4 id="software-professionals-programmers">Software Professionals, programmers</h4>

<h2 id="slide-3">Slide 3</h2>

<p>###End User Expectations</p>

<h4 id="body">Body</h4>

<p>Apps<br />
Inexpensive<br />
All-in-one-device, instead of many devices</p>

<h2 id="slide-4">Slide 4</h2>

<p>###Apps<br />
(End User Expectations)</p>

<h4 id="body-1">Body</h4>

<p>Minecraft<br />
Weather</p>

<h2 id="slide-5">Slide 5</h2>

<p>###Inexpensive<br />
(End User Expectations)</p>

<h4 id="body-2">Body</h4>

<p>Large volume, low price point</p>

<h2 id="slide-6">Slide 6</h2>

<p>###All in one device<br />
(End User Expectations)</p>

<h4 id="body-3">Body</h4>

<p>All-in-one-device, instead of many devices<br />
e.g. loyalty cards, credit cards</p>

<h2 id="slide-7">Slide 7</h2>

<p>###Simple One-Purpose App<br />
(End User Expectations)</p>

<h4 id="body-4">Body</h4>

<p>Hand-held calculator<br />
Gameboy<br />
Editor‚Äôs choice, high SEO choice, TL;DR</p>

<h2 id="slide-8">Slide 8</h2>

<p>###End User Expectations (more)</p>

<h4 id="body-5">Body</h4>

<p>Hierarchy<br />
Sketch designs (pencil &amp; paper, whiteboard, etc.)<br />
Uninterested in detail<br />
Learn incrementally</p>

<h2 id="slide-9">Slide 9</h2>

<p>###Hierarchy<br />
(End User Expectations)</p>

<h4 id="body-6">Body</h4>

<p>End users understand hierarchy<br />
e.g. org charts in business</p>

<h2 id="slide-10">Slide 10</h2>

<p>###Sketch Designs<br />
(End User Expectations)</p>

<h4 id="body-7">Body</h4>

<p>pencil &amp; paper, whiteboard, etc.</p>

<h2 id="slide-11">Slide 11</h2>

<p>###Uninterested in Details<br />
(End User Expectations)</p>

<h4 id="body-8">Body</h4>

<p>Options unwelcome<br />
Don‚Äôt welcome interruptions<br />
e.g. where to save file<br />
e.g. what kind of document to create<br />
e.g. update available</p>

<h2 id="slide-12">Slide 12</h2>

<p>###Learn Incrementally<br />
(End User Expectations)</p>

<h4 id="body-9">Body</h4>

<p>Learn in a hierarchical / fractal manner<br />
Learn only a few things at a time</p>

<h2 id="slide-13">Slide 13</h2>

<p>###Domain User Expectations</p>

<h4 id="body-10">Body</h4>

<p>Snap-together apps, palettes of functionality<br />
LEGO¬Æ Blocks<br />
Whiteboards<br />
Science &amp; Engineering<br />
To Remain Ignorant of Deeper Details</p>

<h2 id="slide-14">Slide 14</h2>

<p>###LEGO¬Æ Blocks<br />
(Domain Expert Expectations)</p>

<h4 id="body-11">Body</h4>

<p>Users expect to Snap S/W together like LEGO¬Æ blocks<br />
Choose functionality from a palette</p>

<h2 id="slide-15">Slide 15</h2>

<p>###Whiteboards<br />
(Domain Expert Expectations)</p>

<h4 id="body-12">Body</h4>

<p>Users use whiteboards<br />
Q: Why?<br />
Whiteboards are an incremental improvement over pencil &amp; paper sketches<br />
Q: Why sketch?</p>

<h2 id="slide-16">Slide 16</h2>

<p>###Eschew Software Expertise<br />
(Domain Expert Expectations)</p>

<h4 id="body-13">Body</h4>

<p>Domain experts do not want to become S/W experts<br />
Domain experts expect the benefits of S/W<br />
Flexibility<br />
Easily design solutions within their domains<br />
e.g. VisiCalc (spreadsheets)<br />
Simple things are simple to implement<br />
Call in S/W professionals to handle complexity</p>

<h2 id="slide-17">Slide 17</h2>

<p>###Domain Expert Tools<br />
(Domain Expert Expectations)</p>

<h4 id="body-14">Body</h4>

<p>Spreadsheets <br />
AppleScript<br />
Hypercard<br />
Sikuli</p>

<h2 id="slide-18">Slide 18</h2>

<p>###Software Professionals</p>

<h4 id="body-15">Body</h4>

<p>LEGO¬Æ blocks<br />
Whiteboards<br />
‚ÄúSoftware is complicated‚Äù - essential complexity<br />
Hardware advanced faster than software</p>

<h2 id="slide-19">Slide 19</h2>

<p>###Software LEGO¬Æ Blocks</p>

<h4 id="body-16">Body</h4>

<p>Professionals use:<br />
Git<br />
GitHub, etc.<br />
Libraries<br />
Result <br />
not LEGO¬Æ blocks <br />
growing complexity<br />
Decreasing reliability</p>

<h2 id="slide-20">Slide 20</h2>

<p>###Whiteboards</p>

<h4 id="body-17">Body</h4>

<p>S/W professionals sketch designs<br />
Then, transfer to code<br />
Why?<br />
Why not use code instead of sketches?</p>

<h2 id="slide-21">Slide 21</h2>

<p>###‚ÄúSoftware is Complicated‚Äù</p>

<h4 id="body-18">Body</h4>

<p>Excuse or reality?</p>

<h2 id="slide-22">Slide 22</h2>

<p>###Hardware Advanced Faster Than Software</p>

<h4 id="body-19">Body</h4>

<p>Why?<br />
Glib answer: software is just more complicated<br />
Possibility: inhibiting technology underlies all of S/W<br />
Possibility: new technology?  Something more than ‚Äúprogramming‚Äù?</p>

<h2 id="slide-23">Slide 23</h2>

<p>###New Technology</p>

<h4 id="body-20">Body</h4>

<p>Is this just a different twist on existing S/W?<br />
Is this just the QWERTY effect?<br />
More than one technology?</p>

<h2 id="slide-24">Slide 24</h2>

<p>###QWERTY Effect</p>

<h4 id="body-21">Body</h4>

<p>Technology lock-in<br />
Incremental<br />
QWERTY vs. other keyboard layouts<br />
VHS vs. Beta<br />
808x vs. other CPU designs<br />
Inhibiting Technology<br />
Stops progress?<br />
Different category?</p>

<h2 id="slide-25">Slide 25</h2>

<p>###&gt;1 Uses of Computers</p>

<h4 id="body-22">Body</h4>

<p>Calculator<br />
Event-Driven Controllers</p>

<h2 id="slide-26">Slide 26</h2>

<p>###Computers As Calculators</p>

<h4 id="body-23">Body</h4>

<p>Ballistics<br />
Cryptography (not Blockchain!)<br />
One-in-one-out<br />
Synchronous<br />
Hard to implement asynchronous paradigm <br />
Functions, FP</p>

<h2 id="slide-27">Slide 27</h2>

<p>###One-in One-out<br />
(Computers as Calculators)</p>

<h4 id="body-24">Body</h4>

<p>One-in-one-out<br />
One input ‚Äî&gt; One outcome<br />
Exceptions are a ‚Äúspecial case‚Äù tacked onto the side</p>

<h2 id="slide-28">Slide 28</h2>

<p>###Synchronous<br />
(Computers as Calculators)</p>

<h4 id="body-25">Body</h4>

<p>Attempts to add async to calculator paradigm<br />
Accidental Complexity &lt;‚Äî using unsuitable paradigm<br />
e.g. Mars Rover disaster<br />
Hard to implement asynchronous paradigm in synchronous paradigm<br />
Epicycles on top of epicycles<br />
Threads, promises, various baubles, etc.)</p>

<h2 id="slide-29">Slide 29</h2>

<p>###Functional Approach<br />
(Computers as Calculators)</p>

<h4 id="body-26">Body</h4>

<p>Ilya Prigogene (Nobel laureate) ‚ÄúOrder Out Of Chaos‚Äù<br />
[paraphrased] Functional thinking has set Physics back 100 years<br />
FP - Functional Programming<br />
Eschew time<br />
Eschew STATE</p>

<h2 id="slide-30">Slide 30</h2>

<p>###CALL RETURN<br />
(Computers as Calculators)</p>

<h4 id="body-27">Body</h4>

<p>Implicitly uses The Stack<br />
Creates dynamic record of invocations ‚Äî&gt; dependency<br />
Accidental complexity<br />
Useful only in calculator model of computing</p>

<h2 id="slide-31">Slide 31</h2>

<p>###Global Variable (Hidden)<br />
(Computers as Calculators)</p>

<h4 id="body-28">Body</h4>

<p>All PLs, incl. FP and Smalltalk, share a global variable<br />
The Stack<br />
CALL / RETURN manipulates this global variable</p>

<h2 id="slide-32">Slide 32</h2>

<p>###Computers for Event-Driven Control</p>

<h4 id="body-29">Body</h4>

<p>Asynchronous<br />
Multiple Outcomes<br />
Eschew Dependencies<br />
Implement synchronous paradigm<br />
Isolation<br />
Examples</p>

<h2 id="slide-33">Slide 33</h2>

<p>###Asynchronous<br />
(Event-Driven Control)</p>

<h4 id="body-30">Body</h4>

<p>Events come at any time<br />
e.g. GUI<br />
e.g. Browser<br />
e.g. mouse<br />
e.g. keyboard</p>

<h2 id="slide-34">Slide 34</h2>

<p>###Multiple Outcomes<br />
(Event-Driven Control)</p>

<h4 id="body-31">Body</h4>

<p>Multiple Outcomes<br />
One input ‚Äî&gt; multiple possible outcomes<br />
One input ‚Äî&gt; no outcomes<br />
Example, javascript FileReader()</p>

<h2 id="slide-35">Slide 35</h2>

<p>###Eschew Dependencies<br />
(Event-Driven Control)</p>

<h4 id="body-32">Body</h4>

<p>Scalability requires lack of dependency</p>

<h2 id="slide-36">Slide 36</h2>

<p>###Implement Synchronous Paradigm Using Asynchronous Paradigm<br />
(Event-Driven Control)</p>

<h4 id="body-33">Body</h4>

<p>Blocking &lt;‚Äî ACK/NAK<br />
Already explored<br />
Networking<br />
Electronics</p>

<h2 id="slide-37">Slide 37</h2>

<p>###Isolation<br />
(Event-Driven Control)</p>

<h4 id="body-34">Body</h4>

<p>Isolation is more important than encapsulation<br />
Encapsulate data and control flow</p>

<h2 id="slide-38">Slide 38</h2>

<p>###Examples<br />
(Event-Driven Control)</p>

<h4 id="body-35">Body</h4>

<p>Statecharts<br />
https://computingsimplicity.neocities.org/blogs/StateCharts.pdf</p>

<h2 id="slide-39">Slide 39</h2>

<p>###Blockchain</p>

<h4 id="body-36">Body</h4>

<p>Two paradigms (not one)</p>
<ol>
  <li>Calculation &lt;‚Äî cryptography</li>
  <li>Event-driven &lt;‚Äî time-based obfuscation and p2p</li>
</ol>

:ET