I"˜	<h2 id="apl">APL</h2>

<p>The shortest - in lines of code - significant program that I wrote was in APL.</p>

<p>That version of APL had a single purpose - manipulating matrices.</p>

<p>I wrote 2 lines of code and wrote about 80 lines of comments.</p>

<p>Clearly, I felt that the code was write-only and that English comments were needed to make the code and architecture readable by other programmers.</p>

<h2 id="terseness">Terseness</h2>

<p>A goal of architecting languages is to write very little code and to spend most of the time thinking about and solving the problem at hand.</p>

<p>There is a saw-off point where the code becomes so terse as to be write-only in nature.</p>

<p>In the APL code I wrote, every character, in the lines of code, performed significantly large operations.</p>

<p>understandability</p>

<h2 id="flexibility">Flexibility</h2>

<p>Ideally, a system can be architected with so few lines of code that the designer/programmer has no compunction about throwing all of the code away and starting afresh when new architectural discoveries are made about the problem space.</p>

<p>Alternatively, the code written must be so flexible as to allow rearranging of the architecture with little effort.</p>

<p>Most GPLs discourage this kind of flexibility while encouraging expression of details (which leads to inflexibility<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>).</p>

<h2 id="writing-less-code">Writing Less Code</h2>

<ul>
  <li>Lisp is one way to write <em>less</em> code.</li>
  <li>Diagrams are a way to write <em>less</em> code.</li>
</ul>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>For example, flexibility requires that no functions be called directly by name - all functions should be called through indirection (DLLs provide a degree of indirection, but discourage full flexibility by retaining function names).Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET