I"¢<p>Normalization is a way to deconstruct software constructs (data, control flow) into some kind of Lowest Common Denominator.</p>

<h1 id="triples">Triples</h1>
<p><em>Triples</em> are the most atomic form of software<sup id="fnref:curry" role="doc-noteref"><a href="#fn:curry" class="footnote">1</a></sup>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Relation (Subject, Object)
</code></pre></div></div>
<h1 id="the-atom-of-software-development">The Atom of Software Development</h1>
<p>Software Atoms &lt;=&gt; Normalization</p>
<h1 id="automation">Automation</h1>
<p>Normalization enables automation.</p>
<h1 id="projectional-editing">Projectional Editing</h1>
<p>Projectional Editing consists of</p>
<ol>
  <li>normalizing</li>
  <li>skinning information with multiple syntaxes (See Ohm-JS examples/incremental)</li>
</ol>

<h1 id="see-also">See Also</h1>
<ul>
  <li>Data Descriptors (Holt)</li>
  <li>RTL (Fraser Davidson peepholing) ‚Äì&gt; gcc</li>
  <li>OCG (Cordy ‚ÄúOrthogonal Code Generator‚Äù)</li>
  <li>Triples</li>
  <li>Factbases</li>
  <li>Audio Mixing, DAWs (Normalization of audio).</li>
</ul>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:curry" role="doc-endnote">
      <p>Q: Is a curried function more atomic than a triple or just a special case?  A curried function is {function X Subject} and can be applied to an Object.  3 items are involved, but grouped differently.¬†<a href="#fnref:curry" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET