I"<h2 id="tricky-uses-of-a-paradigm">Tricky Uses of a Paradigm</h2>

<p>Tricky uses of a paradigm are a <em>tell</em> that something is wrong with the paradigm being used.</p>

<h1 id="loops-vs-recursion">Loops vs. Recursion</h1>

<p>It has been discovered that Loops are a subset of Recursion.</p>

<p>Who cares?</p>

<p>Engineers and Implementors care.</p>

<p>Normal people don‚Äôt care.</p>

<p>CEOs don‚Äôt care.</p>

<p>Non-programmers don‚Äôt care.</p>

<h1 id="continuations">Continuations</h1>

<p>Continuations can be used to describe control-flow using the functional paradigm.</p>

<p>Who cares?</p>

<p>Normal people don‚Äôt care.</p>

<h1 id="thread-libraries">Thread Libraries</h1>

<p>Thread libraries can be used to force-fit concurrency into the functional paradigm.</p>

<p>Who cares?</p>

<p>Normal people don‚Äôt care.</p>

<p>Normal people use concurrency in their day-to-day lives (e.g. cooking recipes) without thinking about the details.</p>

<p>Architects need to capture concurrency requirements specified by ‚Äúnormal people‚Äù and need to translate such details into Engineering requirements.</p>

<h1 id="layers">Layers</h1>

<p>Ideally, there should not be a large gap between requirements specified by customers and details required at the Engineering levels.</p>

<p>The flow of requirements from customers to Architects to Engineers to Implementors should contain a smooth flow of provenance (being able to track customer requirements to their Implementation details).</p>

<p>If the mapping from customer requirements to Implementation cannot be performed in one smooth step, then a series of steps - layers - should be used.</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET