I"¨$<p>Computer software deals with two kinds of information:</p>
<ol>
  <li>data</li>
  <li>control.</li>
</ol>

<h1 id="issues">Issues</h1>
<h2 id="separation-of-concerns">Separation of Concerns</h2>
<p>See S/SL (in References) for an example of a data-less language.</p>

<h2 id="locality-of-reference">Locality of Reference</h2>
<p>Information leaks are currently called ‚Äúdependencies‚Äù[^locality].</p>

<p>An insidious form of information leak is the use of <em>functions</em>!</p>

<h1 id="scoping-nesting">Scoping (Nesting)</h1>

<p>In computer science, it has often been the case that problems have been solved through the use of nesting - aka <em>scoping</em>.</p>

<h2 id="structured-programming">Structured Programming</h2>

<p>Structured programming prescribes <em>nesting</em> of control-flow as a solution to the problem of <em>spaghetti</em> control-flow.</p>

<h2 id="global-variables">Global Variables</h2>

<p>The problem of <em>global variables</em> was solved using <em>nesting</em>.</p>

<p>The ‚Äúreal‚Äù problem is one of <em>spaghetti dependencies</em>.  How to stop programs from becoming ‚Äútoo large‚Äù?</p>

<h2 id="object-oriented-programming">Object Oriented Programming</h2>

<p>OOP is a solution for structuring data and divorcing data from implementation details.</p>

<p><em>Inheritance</em> is a useful way to organize data.</p>

<p><em>Inheritance</em> is a poor way to organize code.</p>

<h2 id="syntax">Syntax</h2>

<p>Syntax is, currently, used for dealing with control-flow descriptions.</p>

<p>Two languages for any program -</p>

<ol>
  <li>a data description language</li>
  <li>a control-flow description language</li>
</ol>

<h2 id="pattern-matching">Pattern Matching</h2>
<p>The trend in FP is to use <em>pattern matching</em> to separate control information from data information.</p>

<p>Pattern matching is well-understood, albeit under a different name - ‚Äúparsing‚Äù.</p>

<h2 id="denotational-semantics">Denotational Semantics</h2>

<p>Denotational Semantics is the field of describing programming languages using functional notation.</p>

<p>Control-flow, in Denotational Semantics, is most often handled through the use of <code class="language-plaintext highlighter-rouge">GOTOs</code> (rebranded as CPS, first-class-functions, continuations, etc.).</p>

<h2 id="data-flow">Data Flow</h2>

<p>‚ÄúData flow‚Äù refers to a style of control-flow, not to data structuring.</p>

<p>FP requires that <em>all</em> inputs arrive at a component (a <em>function</em>) at the same time.  FP assumes that there is a single <em>happy path</em>.</p>

<h2 id="control-flow">Control Flow</h2>

<p>The current model for control-flow - syntax - is based on assumptions related to 1950‚Äôs computer hardware - e.g. a single CPU[^cpu] and expensive memory.</p>

<h2 id="deep-recursion-long-running-loops">Deep Recursion, Long-Running Loops</h2>

<h2 id="state">State</h2>

<p>Programmers conflate the various uses of <em>state</em> and lump them together.</p>

<p>I discuss this further in https://guitarvydas.github.io/2021/03/30/State,-Analysis-of.html.</p>

<h2 id="statecharts">StateCharts</h2>

<p>I discuss StateCharts further in https://guitarvydas.github.io/2020/12/09/StateCharts.html and https://guitarvydas.github.io/2021/02/25/statecharts-(again).html.</p>

<p>Note that many ‚Äúsuccesses‚Äù in programming have been built on top of the <em>state</em> paradigm, e.g. operating systems, YACC, LEX, REGEXP, etc.</p>

<h2 id="threads">Threads</h2>

<p><em>Threads</em> are more like assembly-level operations provided on a single CPU than a high-level concept useful for programming distributed systems.</p>

<h2 id="dataless">Dataless</h2>

<p>See the References section for S/SL - a dataless language that was, ostensibly, used for constructing compilers (aka ‚Äúbig‚Äù programs).</p>

<h2 id="gotos-cps">GOTOs, CPS</h2>

<p>The problem with GOTOs was not the GOTOs themselves, but the unstructured use of GOTOs.</p>

<h2 id="scalability">Scalability</h2>

<p>Components are scalable only if they are not inter-related.</p>

<p>Scalable components cannot have dependencies on one another.</p>

<p>https://guitarvydas.github.io/2021/06/17/Dags.html</p>

<h2 id="type-checking">Type Checking</h2>

<p>Currently, most PLs provide a handful of hard-wired types and a way for programmers to define further types.</p>

<h3 id="hard-wired">Hard-Wired</h3>

<h3 id="programmer-defined">Programmer-Defined</h3>

<h3 id="input-validation">Input Validation</h3>

<h3 id="tell">Tell</h3>

<p>The fact that three forms of type checking exist is a <em>tell</em> that the concepts of type checking are non-uniform.</p>

<h2 id="absolute-naming">Absolute Naming</h2>

<p>Most PLs create names that are <em>absolute</em> and global to the whole application.</p>

<h1 id="solutions">Solutions</h1>

<h2 id="dependencies">Dependencies</h2>

<p>At present, I believe that dependencies are the first-order problem.</p>

<p>‚Ä¶ <em>dependency debt</em>.</p>

<h3 id="visualizing-dependencies">Visualizing Dependencies</h3>

<p>I believe that diagrams show dependencies more readily than textual code.</p>

<h2 id="little-things">Little Things</h2>

<p>The Little Things matter.</p>

<p>https://guitarvydas.github.io/2021/04/26/What-If-Making-A-Compiler-Was-Easy.html</p>

<h2 id="asynchronous-components">Asynchronous Components</h2>

<p>Software components are <em>asynchronous</em> by default.</p>

<p>Synchronous components are the exception, not the rule.</p>

<h3 id="lifetimes">Lifetimes</h3>

<p>Software components ‚Äúlive forever‚Äù (like web servers).</p>

<h3 id="parameters">Parameters</h3>

<p>Software components can be supplied inputs at different points in their lifetimes.</p>

<h3 id="outcomes">Outcomes</h3>

<p>Software components can produce outputs at various points in their lifetimes.</p>

<h3 id="exceptions">Exceptions</h3>

<p>Exceptions are not exceptional.</p>

<p>Exceptions produced by components are the same as all other outcomes produced by components.</p>

<p>The problems and the solutions dictate which outcomes are considered to be erroneous.  <em>Software Architects</em> design solutions that produce the desired outcomes, picking from a multitude of choices.  Few problems have exactly one solution - it is the Architects‚Äô responsibility to make vaarious trade-offs and to make the design clear to readers.</p>

<p>https://guitarvydas.github.io/2020/12/09/DI-Design-Intent.html</p>

<h2 id="ports">Ports</h2>

<p>Software components have input <em>and</em> output ports.</p>

<p>Most current PLs have APIs that imply synchronous operation.</p>

<h3 id="one-universal-type">One Universal Type</h3>

<p>Components are plugged together port-to-port where ports have a <em>single</em>, universal, simple type, e.g. a <em>message</em>.</p>

<p>Types checking is done in a pipeline, from simple to more complex.</p>

<p>Not <em>all</em> software components need to fit this simple - one-in-two-out - model.</p>

<h2 id="layering">Layering</h2>

<p>Components are built in layers.</p>

<p>No layer contains more units than can be comprehended, e.g. 7¬±2.</p>

<p>Components can, themselves, contain layers, recursively.</p>

<h2 id="loops">Loops</h2>

<p>Long running loops and deep recursion are not allowed.</p>

<h2 id="diagrams">Diagrams</h2>

<p>Diagrams are a way to visualize multiple outcomes.</p>

<p>Diagrams are a way to show nesting and locality of reference.</p>

<p>Diagrams can visualize information leakage.</p>

<p>Diagrams make it difficult to draw leaky components, especially when <em>everything</em> (e.g. function calls) is made explicit.</p>

<h3 id="example-diagram-scenario">Example Diagram Scenario</h3>

<p>A software component is represented as a box.</p>

<p>Software components are asynchronous.</p>

<p>Lines represent message flow paths.</p>

<p>Software components contain input and output ports.</p>

<p>Input ports are small green circles.</p>

<p>Output ports are small yellow circles.</p>

<p>A Dispatcher routine invokes <em>ready</em> components in a random order.</p>

<h2 id="relative-naming">Relative Naming</h2>

<p>All names are relative to components.</p>

<h3 id="namespaces">Namespaces</h3>

<p>Components have 5 namespaces:</p>

<ol>
  <li>
    <p>inputs</p>
  </li>
  <li>
    <p>ouputs</p>
  </li>
  <li>
    <p>contained components</p>
  </li>
  <li>
    <p>connections between components</p>
  </li>
  <li>
    <p>other</p>
  </li>
</ol>

<h3 id="example">Example</h3>

<p>A component refers to a component that is contained in it by using a name (e.g. ‚Äúinner‚Äù) or and index (1, 2, 3, ‚Ä¶), for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./c/inner/abc
./c/1/abc
</code></pre></div></div>

<p>Likewise, it can refer to a named input ‚Äúin‚Äù as, for example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./i/in
</code></pre></div></div>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a><br />
<a href="https://guitarvydas.github.io/2021/05/14/Table-Of-Contents.html">Table of Contents</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET