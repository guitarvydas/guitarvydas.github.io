I"Y<h1 id="synopsis">Synopsis</h1>
<p>You always use a linker, but its use is usually hidden from you.</p>

<h1 id="appendix">Appendix</h1>
<p>If you use any code library, the system uses a linker.</p>

<p>Most languages use a ‚Äúruntime library‚Äù to do the work that is punted by the compiler.</p>

<p>In this case, a linker is used.</p>

<p>Corollary: you would have to work very hard to <em>not</em> use a linker (library).</p>

<p>If you use <em>any</em> library (say, by specifying require () statements or by using a compiler that punts work to a small library), then it is likely that you will end up using a linker.</p>

<h1 id="appendix-more">Appendix More:</h1>
<p>The O/S (Operating System) ‚Äúhelps‚Äù you by hiding certain repetitive details.</p>

<p>Before an app can run, the O/S must ‚Äúload‚Äù it.</p>

<p>The O/S loads an app by bringing it into memory and then bringing into memory <em>all</em> of its dependencies (libraries).</p>

<p>If virtual memory is involved, the O/S does even more work.  It needs to screw around with virtual memory issues like MMUs and trying not to page in code that is ‚Äúon deck‚Äù but not yet needed.</p>

<p>All of this merely code, not magic.</p>

<p>Most modern libraries come pre-packaged with holes in them.</p>

<p>The linker (loader) fills in the holes and ties the library back to app code.</p>

<h1 id="appendix-more-more">Appendix More More:</h1>
<p>You are <em>always</em> compiling to a low level.</p>

<p>Every HLL (e.g. Haskell, Python, JS, etc, et) produces low level code for you (i.e. assembler and machine code).</p>

<p>Then, the O/S loads that low level code and loads whatever libraries the compiled code references.</p>

<p>Unlike package managers, the O/S doesn‚Äôt know which dependencies you need.  The dependencies must be explicitly specified (again, this is often hidden from you).</p>

<h1 id="appendix-more-more-more">Appendix More More More</h1>
<p>The API to the hardware is the set of opcodes (assembler).</p>

<p>All apps must boil down to that same set of opcodes.</p>

<p>For example, Haskell must boil down to the same set of opcodes that C boils down to.</p>

<p>Haskell includes a type interpreter that C doesn‚Äôt include.</p>

<p>In the end, both, Haskell and C, boil down to the same set of opcodes.</p>

<p>You <em>could</em> write all Haskell programs in assembler, but you don‚Äôt.</p>

<p>The difference is purely psychological - if you don‚Äôt have to worry about <em>xyz</em>, then your imagination can soar to new heights and solve bigger problems.</p>

<h1 id="appendix-more-more-more-more">Appendix More More More More:</h1>
<p>The low-level CPU API is invented by chip designers.</p>

<p>Chip designers work with asynchronous electronic circuits, composed as various forms of rust - oxides - created by exposing sand to various high temperatures. <a href="https://www.youtube.com/watch?v=w_znRopGtbE">Jeri Homebrew Transistor</a>.</p>

<p>The low-level API has been debated - von Neumann architectures, Harvard architectures, RISC architectures, etc.</p>

<p>All of that opcode stuff is malleable and we keep asking the question of ‚Äúwhat is the best arrangement?‚Äù.</p>

<p>(The answer, IMO, is that there is no ONE best arrangement. We need multiple arrangements.)</p>

<h1 id="see-also">See Also</h1>
<p><a href="https://www.youtube.com/watch?v=w_znRopGtbE">Jeri Homebrew Transistor</a><br />
<a href="https://guitarvydas.github.io">Blog</a><br />
<a href="https://guitarvydas.github.io/2021/09/21/Table-of-Contents-Sept-17-2021.html">Table of Contents as of Sept 17, 2021</a><br />
<a href="https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy5">Videos</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET