I"	<p>“Dependent types” is a language for defining type checkers.</p>

<p>“Dependent types” is a programming language.</p>

<p>“Dependent types” is a DSL.</p>

<p>AGDA is a manifestation of a programming language for writing type-checker code. The main feature of AGDA is that it has a syntax for describing type checkers. A secondary feature of AGDA is that it also includes syntax for other kinds of code.</p>

<p>AGDA attempts to ensure that type-checker code is self-consistent.</p>

<p>A <em>postulate</em> in AGDA is a break-out to a lower-level. A type system cannot be fully defined in pure AGDA, and <em>postulates</em> allow one to describe the “boundaries” of a type description. I use the term “foreign” for these kinds of postulated types.</p>

<p>Haskell conflates type definition and data implementation in the same notation (language). Because of this conflation, Haskell appears to be complicated.</p>

<h1 id="see-also">See Also</h1>

<p><a href="https://guitarvydas.github.io">Blog</a><br />
<a href="https://guitarvydas.github.io/2021/01/14/References.html">References</a></p>

<script src="https://utteranc.es/client.js" repo="guitarvydas/guitarvydas.github.io" issue-term="pathname" theme="github-light" crossorigin="anonymous" async=""> 
</script>

:ET