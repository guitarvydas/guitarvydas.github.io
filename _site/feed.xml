<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2020-12-10T08:56:43-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Sequencing</title><link href="https://computingsimplicity.neocities.org/2020/12/09/sequencing.html" rel="alternate" type="text/html" title="Sequencing" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/sequencing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/sequencing.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;sequencing&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T15:17:09Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T15:17:09Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Sequencing is an aspect of program design. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sequencing describes the flow of control in a program, e.g. answering the question: when a program element executes, what element will be executed next?&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most languages encourage &lt;i&gt;statement&lt;/i&gt; based sequencing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Another common sequencing style is the use of full preemption - threads of code execute in a synchronous (statement based) manner. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The operating system's &lt;i&gt;dispatcher&lt;/i&gt; decides that a given thread should run.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The use of synchronous sequencing is a design choice.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Other choices are possible.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I list some of the possible choices and attempt to draw diagrams of their flow.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Statement&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Statement.png&quot; width=&quot;320px&quot; height=&quot;193px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Statement-based sequencing is common in most current text-based PLs&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Statements are executed in an order based on their &lt;span class=&quot;s1&quot;&gt;textual appearance&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Subroutines are executed in stack-based sequencing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(See &quot;Stack&quot;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Statement based sequencing is caused by text-only syntax.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Routines are called in a synchronous manner.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See &lt;i&gt;stack&lt;/i&gt;-based sequencing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Stack&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Stack Based.png&quot; width=&quot;320px&quot; height=&quot;254px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Stack-based sequencing is the common form of CALL/RETURN.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A routine transfers control to another routine and waits for it to complete its processing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The caller uses a stack - i.e. an optimized collection&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; - to create a list of parameters to the callee, then leaves a breadcrumb (return address) on the stack.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The callee performs processing and leaves a return value (usually a single value) and uses the stacked breadcrumb to return control to the caller.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Stack based sequencing is caused by&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; text-only syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Spawn and Wait&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Spawn And Wait.png&quot; width=&quot;320px&quot; height=&quot;205px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In &lt;i&gt;spawn and wait&lt;/i&gt; sequencing, the caller &quot;spawns&quot; processes for each child/called routine and then waits until all of the child processes have died (and left results, if any, in distinguished locations).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Spawn and wait has been implemented in several forms:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;UNIX® fork() and waitpid()&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Bash (sh, etc.) &amp;amp; and wait commands&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hardware DMA (Direct Memory Access)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&quot;par&quot; statement in several &quot;parallel&quot; languages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;node.js (anonymous functions provide &lt;i&gt;wait()&lt;/i&gt; operation)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Spawn and wait has been traditionally conflated with full-blown operating system processes (aka threads). Processes have been traditionally conflated with solutions to the (harder) problems of time-sharing and memory sharing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Spawn and Wait 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Spawn And Wait (2).png&quot; width=&quot;318px&quot; height=&quot;174px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above diagram is simply another way to diagram a spawn and wait design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See &lt;i&gt;spawn and wait&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Server&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Server.png&quot; width=&quot;320px&quot; height=&quot;238px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;server &lt;/i&gt;based sequencer is one where a single process contains and hides a resource.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Client processes send requests for resource data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[Note that a Hoare Monitor is a essentially a server-based sequencer in the context of time-sharing and memory sharing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See Hoare Monitor for further discussion.]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Explicit Sequencer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Sequencer.png&quot; width=&quot;320px&quot; height=&quot;218px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the Explicit Sequencer design, work is sent to all workers, then a Sequencer process dictates the order in which each worker executes.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pull&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Pull.png&quot; width=&quot;320px&quot; height=&quot;91px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a &lt;i&gt;pull-&lt;/i&gt;based sequence, workers are arranged in a chain and respond to REQuests from downstream components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Preemption&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Preemption.png&quot; width=&quot;320px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a &lt;i&gt;preemption&lt;/i&gt;-based sequence, each worker is given a private memory space and stack.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A distinguished routine - the &lt;i&gt;dispatcher&lt;/i&gt; - determines the order in which workers execute.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;dispatcher&lt;/i&gt; routine is, typically, supplied by the O/S&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hoare Monitors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Hoare Monitors operate like the &lt;i&gt;server&lt;/i&gt; sequencer, but do so in an environment where memory sharing and/or CPU minimization&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; is employed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;monitor&lt;/i&gt; is a &lt;i&gt;server&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt; and all other processes can be clients of the server.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Requests&quot; are made by calling routines that are protected by the monitor.&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The O/S&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt; allows only one process to enter the monitor at a time, and all other requesting processes are &lt;i&gt;suspended&lt;/i&gt; and placed on a queue, waiting for the monitor to become free.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Processes inside the monitor could &lt;i&gt;signal&lt;/i&gt; events to other (waiting) processes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The original manifestation of Hoare Monitors required a &lt;i&gt;rendezvous&lt;/i&gt; between the process in the monitor and a process waiting on a &lt;i&gt;monitor signal&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The requirement for &lt;i&gt;rendezvous&lt;/i&gt; was relaxed to allow &lt;i&gt;deferred signals&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See, also, &quot;Server&quot; for a discussion of the basic pattern.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchy&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Hierarchy.png&quot; width=&quot;320px&quot; height=&quot;387px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Hierarchical sequencing is a sequencing style where children components are contained within parents, like Russian dolls.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;As incoming events arrive, the parent gets first-right-of-refusal to act on the events.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the parent does not act on the events, the events are passed on to contained children, recursively.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This pattern is common in windowing systems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Handshake Protocol&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Handshake Protocol.png&quot; width=&quot;320px&quot; height=&quot;193px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In &lt;i&gt;handshake &lt;/i&gt;sequencing, a component sends a request to another component (instead of directly &quot;calling&quot; it).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The receiving component responds with a &quot;handshake&quot; message - usually an ACK in the case of successful receipt.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The receiver might respond with a NAK (not acknowledge) if it deems that the message was garbled, or, the receiver might not respond at all.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The requestor expects one of 3 responses:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;ACK - means that the receiver received the message and is acting on it,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;NAK - means that the receiver received a message, but has deemed that the message has been damaged in transit - the requestor resends the message or, after several retries, declares a send error of some kind,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;silence - the requestor times-out waiting for an ACK/NAK from the&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;receiver - the requestor resends the message, or, after several retries, declares a send error of some kind.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This &lt;i&gt;handshake&lt;/i&gt; pattern is most often seen in network protocols.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I would expect to see this pattern arise more often with the advent of (more) distributed computing and IoT.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Filter Pipelines&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-FP (Functional Programming).png&quot; width=&quot;320px&quot; height=&quot;98px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Filter pipelines form chains of routines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each routine in the chain has no side-effects,&lt;a id=&quot;fnlink13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn13&quot;&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/a&gt; or its side effects are isolated from the rest of the system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Information flows strictly down the pipeline, e.g. from left to right.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Feedback loops do not exist.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pipeline sequencing has been implemented in:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;Bash&lt;/i&gt; pipelines&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;FP filter chains&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Smalltalk &quot;;&quot; operators&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In a filter pipeline pattern, the data flowing between components contains all of the state.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(See, also, FBP, for a pattern of data flows which allows feedback).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Flat Message Passing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Flat Message Sending.png&quot; width=&quot;320px&quot; height=&quot;221px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In message passing, every component has an input queue of messages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All components are asynchronous and can process messages at different speeds.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Flat message passing does not scale well to large systems (as is the case for anything that is designed in a flat manner).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Flat message passing can be tamed and scaled using hierarchical scoping.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP (Flow Based Programming)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-FBP (Flow Based Programming).png&quot; width=&quot;320px&quot; height=&quot;132px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each component is a concurrent machine. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Concurrent machines communicate with one another via bounded buffers.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Components have input and output ports that are connected to bounded buffers.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Data flowing between components is called IPs (Information Packets).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Components can read-from and write-to ports in a random manner.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;A component suspends if it attempts to send to an output port which has a full buffer.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;A component suspends if it attempts to read from an input port that has an empty buffer.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;FBP can route IPs in a feedback and feedforward manner.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;FBP is similar to FP,&lt;a id=&quot;fnlink14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn14&quot;&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/a&gt; in that all state is contained in IPs.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;FBP&lt;a id=&quot;fnlink15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn15&quot;&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/a&gt; can be used to construct filter pipelines, but FBP is more general in that it allows feedback and feedforward.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Unlike pipelines, FBP allows connections that &quot;skip over&quot; components in the chain and connections to components that come &quot;earlier&quot; in the chain.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;FBP systems have been, traditionally, simulated on top of preemptive sequencing.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(See, also, &lt;a href=&quot;https://groups.google.com/g/flow-based-programming/c/l5SkeB40iwE&quot;&gt;https://groups.google.com/g/flow-based-programming/c/l5SkeB40iwE&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(See also &lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;https://jpaulm.github.io/fbp/&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Daisy Chain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Daisy Chain.png&quot; width=&quot;320px&quot; height=&quot;231px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;daisy chain&lt;/i&gt; sequence arranges components in a chain. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each component has a unique address.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each component in the chain inspects incoming messages to determine if the message is addressed to them. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the message is not addressed to the given component, the message is forwarded to downstream components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the message is addressed to the given component, the message is not forwarded and is processed by the component.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Component outputs are all tied together to form a result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One component processes the message and creates one result (which is fed to the common output).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If no component processes the message, either&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;the message is completely ignored, or,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;the last component in the chain produces some sort of exception result.&lt;a id=&quot;fnlink16&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn16&quot;&gt;&lt;sup&gt;[16]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A daisy chain system has, logically, two output ports - one is the result, another is an exception.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a daisy chain, the earlier components in the chain receive priority over later components in the chain.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In general, fairness doesn't matter as long as the &quot;work&quot; gets done.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-BlockChain.png&quot; width=&quot;320px&quot; height=&quot;378px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A blockchain, in current technology, is a spawn-and-wait system wherein the parent node is changed on every &quot;cycle&quot; (defined by the blockchain algorithm).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The choice of &quot;parent&quot; is randomized to prevent attackers from guessing the future behaviour of the system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Blockchains typically consist of two parts:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;cryptography&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;sequencing.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reactive&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-15-17-09-Images/Sequencing All-Arrowgrams.png&quot; width=&quot;320px&quot; height=&quot;188px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the &lt;i&gt;reactive&lt;a id=&quot;fnlink17&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn17&quot;&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/a&gt; pattern, components receive events (aka messages) and react to the messages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Events (messages) are queued.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One message is processed, fully to completion, before another message is taken from the input queue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;A &lt;i&gt;reactive&lt;/i&gt; system is a system of concurrent components wherein every component processes events in a hierarchical pattern.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components are isolated from one another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components can be implemented as &lt;i&gt;composites&lt;/i&gt; or &lt;i&gt;leaves&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is not possible to discern how a component is implemented without looking inside the component.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components have multiple input ports and multiple output ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input events are queued (on a single queue) and a component processes an event to completion before processing another event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A leaf component processes an event using some other technology, e.g. by using a specific programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A composite component contains children components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A composite component process input events by forwarding them to its children.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A composite component is considered &quot;busy&quot; if any of its children are busy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;reactive&lt;/i&gt; pattern is a realization of the &lt;i&gt;divide and conquer &lt;/i&gt;paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A problem can be dissected into two components - &lt;i&gt;the&lt;/i&gt; &lt;i&gt;leaf&lt;/i&gt; and &lt;i&gt;the rest &lt;/i&gt;(conquer and divide, resp.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Denotational Semantics deals explicitly with generalized sequencing.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Programming Languages&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;A form of accidental complexity.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I.E. the caller waits for the callee to execute a RETURN statement.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The stack is an optimized Collection.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A stack is an Array allocated in &quot;inexpensive&quot; reusable, memory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An Array is a Collection with most of the housekeeping details optimized away.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A Stack is an Array is a Collection with items stored in contiguous locations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Early computer architectures, e.g. some IBM 360s, did not have hardware-supported stacks, and used special instructions, e.g. BALR, to create linked lists of optimized islands of memory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The idea of &lt;i&gt;scoping&lt;/i&gt; was conflated with &lt;i&gt;memory and CPU optimization&lt;/i&gt; as was common in early forms of computing.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;A form of accidental complexity.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Operating System - essentially a library.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;reduced number of CPUs needed - usually as an optimization in the face of costly CPU hardware&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The execution thread of the server is provided by the calling processes.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Calling a routine in a monitor &quot;lends&quot; the caller's thread-of-execution to the &quot;server&quot; (aka monitor).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Operating System&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;e.g. in the Turing+ language&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink13&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[13]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;In memory-sharing systems.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink14&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[14]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Functional Programming&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink15&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[15]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Flow-Based Programming&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn16&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink16&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[16]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Note that the sender might also be the &quot;last&quot; component in the chain.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn17&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink17&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[17]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Arrowgrams™ is the trade name of a reactive system that I am developing.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">sequencing</summary></entry><entry><title type="html">Anecdote secretary vs. synchrony</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Anecdote-Secretary-vs.-Synchrony.html" rel="alternate" type="text/html" title="Anecdote secretary vs. synchrony" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Anecdote%20-%20Secretary%20vs.%20Synchrony</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Anecdote-Secretary-vs.-Synchrony.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Anecdote - Secretary vs. Synchrony&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:49:00Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:49:00Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote - Secretary vs. Backup Instructions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In the early 1980's…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We had a VAX-11/750 (IIRC) with multiple dumb terminals (24x80) hung off of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I noticed that most programmers did not logout before going home at the end of the day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I noticed that our secretary used to arrive to work before all of the programmers arrived.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked the secretary to perform&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;backups every morning before the other programmers arrived.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote out instructions in the form:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;If you see &quot;&amp;gt; &quot;, type LOGOUT &amp;lt;return&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;If you see &quot;LOGIN:&quot;, type BACKUP &amp;lt;return&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;When you see &quot;PASSWORD:&quot;, type &amp;lt;…&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;When you see &quot;&amp;gt;&quot; type BACKUP&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;About a week later, I came in early, after the secretary had arrived, but before all of the other programmers had arrived.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I saw&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;LOGOUT&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;LOGIN:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;LOGOUT&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;LOGIN:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;on &lt;i&gt;every &lt;/i&gt;terminal.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked the secretary what happened.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I got 2 answers:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Backups never succeeded.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;The secretary never typed the word BACKUP and was always typing LOGOUT.&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I had assumed that my instructions were sequential.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The secretary started reading the instructions &lt;i&gt;from the top&lt;/i&gt; after every operation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The single sheet of instructions was a &lt;i&gt;parallel&lt;/i&gt; set of instructions in the secretary's mind, but &lt;i&gt;serial&lt;/i&gt; in my mind.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Anecdote - Secretary vs. Synchrony</summary></entry><entry><title type="html">Blockchain overview</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Blockchain-Overview.html" rel="alternate" type="text/html" title="Blockchain overview" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Blockchain%20Overview</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Blockchain-Overview.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;FBP and Blockchain&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:49:24Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:49:24Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9; min-height: 18.0px}
    span.s1 {text-decoration: underline}
    span.s2 {-webkit-text-stroke: 0px #000000}
    span.s3 {font: 12.0px Times; text-decoration: underline ; font-kerning: none; color: #0000e9}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain Overview&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;“Blockchain” is the generic term for BitCoin, Etherium, et. al.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A blockchain is a chain (using unique hashes as links) of blocks that contain one or more financial transactions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The blockchain is simply a public “ledger” that holds transactions and makes them immutable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Blockchain is not restricted to being a ledger financial transactions, but BitCoin specifically devotes itself to financial transactions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The BitCoin network is essentially a peer-to-peer (P2P) network.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;“Miners” are “big” nodes on the BitCoin network.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;“Miner” nodes are willing to do the heavy lifting and compete with each other to export a block of transactions. In BitCoin, there is a “prize” for the first miner to solve the puzzle and export its block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin is an “unpermissioned” network, meaning that any node can join the network without permission.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BitCoin needs many miners, spread across the globe, to do the real work of verifying and publishing transactions and verifying blocks or transactions published by other miners.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses PoW (proof of work) to solve a puzzle. The first miner to solve the puzzle gets to publish its block. A winning block contains only the transactions that the winner has chosen. Other competitors might choose a different set of transactions from the “mempool”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BitCoin dynamically adjusts so that solving a puzzle takes about 10 minutes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a transaction sits at the bottom of the pool for &amp;lt;&lt;i&gt;some number of&lt;/i&gt;&amp;gt; days, it might be dropped and never appear in a winning block. I.E. some transactions may &lt;span class=&quot;s1&quot;&gt;never&lt;/span&gt; be processed (“dust”).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Losers, miners, in the competition still perform computations - verifying the contents of each transaction in a published block and complaining, if something looks fishy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PoW wastes computing resources (and electricity). Miners tend to set up their operations, geographically, in places that provide cheap electricity and cool climates (eschewing the need for air conditioning), such as northern Quebec in Canada (lots of cheap hydro, cool climate).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin is written in open-sourced C++.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The original intent of BitCoin was to use as many distributed nodes as possible, distributed over the whole world. The number of nodes can change over time (e.g. new nodes joining and some existing nodes crashing). This is called “unpermissioned” — a node does not need permission to join the network. In general, we don’t know if the nodes can be trusted or if they might be fakers. The main problem in this case is BFT (Byzantine Fault Tolerance). The mathematics makes assumptions about how many nodes are fakers, and if a certain threshold of trusted nodes is attained, then the mathematics makes guarantees about the trustability of the whole network.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IBM, Linux and banks flog a “permissioned” kind of blockchain (HyperLedger). In this version, the nodes are all known and their count is determinate, i.e. no one can join the HyperLedger without permission. This is very similar to what banks (and VISA, et al) already do. It is not clear to me that this is true to the original intent of blockchain. It seems to be a marketing trick to capitalize on the buzz-word “blockchain”.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is not clear where BitCoin originated. Supposedly, “Satoshi Nakomoto” invented and open-sourced BitCoin. Who Satoshi is, is a secret. This secrecy could mean many things — that the originator is an individual or a group concerned with freedom of money and transactions, or a government group intent on removing paper money from circulation, or … &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Race conditions, caused by timing and the non-locality of the mining nodes, is handled by the “longest chain is accepted” strategy, which settles out after &amp;lt;&lt;i&gt;some number of&lt;/i&gt;&amp;gt; blocks have been verified (about 6-ish).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Along with BFT, so-called “Sybil attacks” are culprits that blockchains guard against. “Sybil attacks” are nodes that try to cheat the system by cloning several nodes on a single machine (multiple “personalities” on a single machine - similar to the film Sybil), and try to collude to gain control of transactions (i.e. making them pay out to the colluders). The front-line, easiest, defence against Sybil attacks is to make the PoW puzzles so onerous that only a single cpu with full power can solve the puzzle in about 10 minutes. If a single node is split into a bunch of time-shared nodes, the split, faked, nodes can never perform the full work (puzzle breaking) in less time than a full node, and a Sybil (fake) node can almost never win publishing rights for a block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By unconscious consensus, papers that discuss blockchain algorithms tend to use the names “Alice” and “Bob” as blockchain transaction participants.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses a puzzle that consists of hashing something (e.g. the proposed block of transactions plus a kludge factor — the “nonce”) until the hashcode has a requisite number of zero’s at its front.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of puzzle can only be solved by brute force, and it takes a random amount of time to solve.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the other hand, once solved (and published) the hashcode can be easily (and cheaply) verified, hence, all other nodes can verify the puzzle solution, to verify that the winning node did, indeed win.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The winning miner node gets to create a certain amount of BitCoins and to insert them into the published block (payable to the winning node).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That is how new BitCoins come into existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The amount of new BitCoins granted to the winning miner, drops over time, and at some point (a few years away, from 2019) the grant amount will drop to zero, hence, the BitCoin supply has an upper limit (which might affect future quantitative easing using BitCoin).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each transaction gives a fee to the winner, who also collects the BitCoin grant (prize).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When the grant drops to zero, winning miners will only receive transaction fees.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Users (human) of the BitCoin network own a “wallet” that holds one-half of a public/private key (they hold the private, or “secret” key).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The wallet generates public keys which are used in transactions as destination addresses to which BitCoins (or fractions of BitCoins) can be sent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All transactions are visible forever in the blockchain.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each block contains a hashcode to the previous block.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If any transaction in the chain is tinkered with, the whole chain will not verify.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using multiple public keys can make the chain harder to read, but ultimately, with enough horse-power, the chain can be unravelled, traced and viewed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a BitCoin-only world, a black market or “cash deals” cannot exist.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin also defines light weight nodes. Light weight nodes (e.g. smart phones) can participate in the network (generating transactions, holding wallets), but don’t do the heavy lifting (mining).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses Merkle trees to reduce memory usage - not every node needs to hold the complete chain at all times.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Merkle trees are a subset of ADS (Authenticated Data Structures).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Validation nodes, still, must visit and verify &lt;span class=&quot;s1&quot;&gt;each&lt;/span&gt; published block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The “value” of BitCoins is purely speculative and changes over time according to market whims.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Improvements to BitCoin are the subject of heated research. Improvements include: improving the transaction rate (BitCoin publishes a block of verified transactions every 10 minutes (at best 2700 transactions &lt;a href=&quot;https://cryptoslate.com/bitcoin-transactions-per-block-at-all-time-highs/&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://cryptoslate.com/bitcoin-transactions-per-block-at-all-time-highs/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s3&quot;&gt;)&lt;/span&gt;, whereas permissioned networks, e.g. VISA, process 1,000’s of transactions per second), scaling improvements such as CoSi and sharding (BitCoin slows down as the number of nodes/miners increases), better (cheaper) anti-cheating methods (e.g. PoS - proof of stake ; Randhound protocols), alternative data structures (e.g. Etherium), “smart contracts” (e.g. Etherium), etc.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There are 100’s, if not 1,000’s, of digital currencies in existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Which currency will win market share?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, BitCoin has the most market share, Etherium is a far second. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We already know that first-to-market holds a distinct advantage - e.g. Intel won the cpu battle in the face of, later, “better” cpu’s (Motorola, National Semiconductor), VHS won the battle, over Beta, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Permissioned networks are, currently, massively faster than unpermissioned networks.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Experiments / product offerings are being made, using non-monetary transactions, e.g. storing digital handles to physical objects (e.g. deeds, etc.) in the immutable ledger.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Surprises&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin doe not provide anonymity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin does NOT guarantee that every transaction will be processed. Transactions are dropped from the “mempool” if they sit at the bottom for &amp;lt;&lt;i&gt;some&lt;/i&gt;&amp;gt; days.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transactions cost money. Miners can grab and commit transactions based on fees plus mining rewards.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pederson commitments can provide anonymity, but are very expensive (time-wise) to compute and anonymity must start at the beginning of time (at the genesis, beginning, of the blockchain).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All BitCoin transactions are fully consumed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want to receive “change” back from a transaction, then you must split the transaction into two parts - one that goes to the vendor and one that goes to yourself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A miner that wins publishing rights for a block, gets to keep any “leftovers” (i.e. amounts that remain after the transaction has been processed. All transactions are fully consumed, some transactions may not sum to zero, the unclaimed difference goes to the winning miner).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Declaration of a winning miner is done in a as-random a method as possible (determined by the puzzle).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The winning miner collects all the transaction fees from the winning block, all leftovers from the winning block and the mining prize (as it stands at that moment in time).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A losing miner gets nothing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must amortize the random, non-frequent, wins against frequent losses.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">FBP and Blockchain</summary></entry><entry><title type="html">Box And Arrow dsl for concurrency</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html" rel="alternate" type="text/html" title="Box And Arrow dsl for concurrency" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Box-and-Arrow%20DSL%20For%20Concurrency</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Box-and-Arrow PL For Concurrency&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:50:22Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:50:22Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p9 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 12.0px Helvetica}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I discuss the design of a box-and-arrow diagram language (PSL)&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; that describes a system of concurrent, isolated software components. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Software components are drawn as boxes and event-flows&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; between the components are drawn as arrows.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I treat the diagrams as a syntax for a PSL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The diagram language is based on a set of conventions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;N.B. programming languages are, also, based on conventions - you can't get them to compile just any English phrase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The language manual tells you what phrases are acceptable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Similarly, our diagram language manual (this essay) tells you what phrase are acceptable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The language in this essay uses ASCII + boxes + lines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And, it allows these gratoms to overlap&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal of this language (PSL)&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; is to describe software components and events flowing between them.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Isolation means:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;components cannot share memory&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;components cannot share control flow&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;all components are asynchronous - they cannot rely on running in a specific order, except through explicit design, e.g. through the use of an explicitly designed/drawn handshake protocol&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;(See my essay &quot;Concurrency is not Parallelism&quot; which was derived from Rob Pike's talk with the same name).&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;concurrent components cannot rely on order of execution&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;concurrent components cannot share control flow&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;concurrent components are scheduled and executed by a single routine, which I call the &lt;i&gt;dispatcher()&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;&lt;/i&gt;analogy: web workers that communicate solely via messages&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;&lt;/i&gt;concurrent components can be the basis of a parallel system, if the problem requires parallelism&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;concurrency does not imply parallelism - a system can be built using the concurrent paradigm and run on non-parallel hardware&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;See my essay &quot;Call / Return Spaghetti, for reasons to use the concurrent paradigm (in non-parallel and parallel situations).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Events&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;represented as directed lines (arrows)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;one-way only&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;boxes&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;input ports&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output ports&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;kind&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;all components are isolated&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;all components are concurrent&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;all components are asynchronous - they cannot rely on running in a specific order, except through explicit design, e.g. through the use of an explicitly designed/drawn handshake protocol&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;components cannot share memory&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;components cannot share control flow&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-22-Images/Sample Component.png&quot; width=&quot;143px&quot; height=&quot;131px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Leaf Components&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;leaf components are implementations in some other language&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;leaves could use existing PLs&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;leaves could use other diagram PSLs, e.g. Hierarchical State Machines&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite Components&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;aka Schematics&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;composed, recursively, of box-and-arrow components&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&quot;busy&quot; if &lt;i&gt;any &lt;/i&gt;child component is busy&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;component can Send() its input events to its children and/or directly to one of its own output pins&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Input Event Queues&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;each component has one (1) input queue&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;queue contains events (tag + data)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;any component can process only one event at a time&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;a component is &quot;busy&quot; while it is processing an input event&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;component can react to an input event by generating 0 or more output events&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output Event Queues&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;each component has one (1) output queue&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;while processing an input event, a component can Send() 0 or more output events&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;generated output events are queued on the output queue with an output-pin tag and data&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the output queue is processed (by the dispatcher) at any time after a component has finished processing a single input event&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Input Pins&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;a component can have 0 or more input &quot;pins&quot; - input ports tagged with a name (symbol, index, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output Pins&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A component can have 0 or more output &quot;pins&quot; - input ports tagged with a name (symbol, index, etc.).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Details&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Input Event Delivery&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;the &lt;i&gt;dispatcher()&lt;/i&gt; routine distributes events and invokes components&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;all components, when finished processing a single event, return control back to the &lt;i&gt;dispatcher()&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;a component is &lt;i&gt;ready &lt;/i&gt;if it has at least one input event in its input queue and if it is not &lt;i&gt;busy&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;leaf components are &lt;i&gt;busy&lt;/i&gt; only when they are processing an event ; on a single-threaded system, this means that leaf components appear always to be &lt;i&gt;not busy&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;composite components are &lt;i&gt;busy &lt;/i&gt;if any of their children are busy (recursively)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the &lt;i&gt;dispatcher() &lt;/i&gt;contains an unordered list of all components on that processor&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the &lt;i&gt;dispatcher()&lt;/i&gt; visits every component in the system and, if the component is &lt;i&gt;ready&lt;/i&gt;, the &lt;i&gt;dispatcher()&lt;/i&gt; pulls one (1) event off of that component's input queue and invokes the component with that event, if a component is &lt;i&gt;not busy&lt;/i&gt; the &lt;i&gt;dispatcher()&lt;/i&gt; does not invoke it (and moves on to examining the next component)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;there is one (1) &lt;i&gt;dispatcher() &lt;/i&gt;per processor&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;parallel &lt;i&gt;dispatching()&lt;/i&gt; is done in a recursive manner - a top-level, parallel dispatcher metes out &quot;work&quot; to &lt;i&gt;dispatchers()&lt;/i&gt; on parallel processors, then spawns sub-dispatchers (one on each processor)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output Event Delivery&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;the &lt;i&gt;dispatcher()&lt;/i&gt; distributes events from the output queue of finished components (&lt;i&gt;when&lt;/i&gt; event distribution occurs is indeterminate, we guarantee only that output events are distributed only after a component has finished processing - e.g. the &lt;i&gt;dispatcher()&lt;/i&gt; could choose to distribute all output events from a component as soon as the component has finished processing, or, the &lt;i&gt;dispatcher()&lt;/i&gt; could invoke many components and, only later, distribute output events)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output events are queued up on the output queue of the &lt;i&gt;Send()&lt;/i&gt;ing component with the output pin tag of that component plus data&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output events are translated into input events by changing the pin tag (from the output pin tag of the &lt;i&gt;Send()&lt;/i&gt;er to the input pin tag of the receiver)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output pins can be connected to zero (0) input pins of other components, or,&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output pins can be connected to exactly one (1) input pin of another component, or,&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output pins can be connected to more than one (&amp;gt;1) input pins of components (the data contained in the event is immutable, the receiver must copy the data)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output pins can be connected to input pins of the same component&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dropping (Skipping) Events&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;any output event that is connected to an output pin, that is not connected to other input pins, is dropped and ignored&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;components cannot rely on how they've been connected to other components&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Event Delivery Guarantees&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The system guarantees &lt;i&gt;only&lt;/i&gt; that an output event sent to multiple receivers is delivered &quot;at the same time&quot; to all receivers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This implies that the &lt;i&gt;dispatcher() &lt;/i&gt;follows the following protocol for delivering an output event:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;pop event from output queue of &lt;i&gt;Send()&lt;/i&gt;er&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;examine / get routing table (in parent of &lt;i&gt;Send()&lt;/i&gt;er)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;lock input queues of associated receivers&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;for every receiver:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;create a new event&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;translate output pin tag to receiver-relative input pin tag, in new event&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;copy data&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; from output event to new event&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;push new event onto input queue of receiver&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;discard, GC,&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; output event&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;unlock input queues of associated receivers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Obviously, the lock-time determines the throughput of the system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is a matter for Optimization Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is probably problem-specific.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One solution does not fit all. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Digital hardware works this way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A system that is still locked when new inputs arrive is said to &quot;over-run&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is, also, deemed to be &quot;too slow&quot; to solve a particular problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The definition of slow-ness depends on the problem and cannot be easily generalized.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Production Engineering&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; can worry about whether a penny can be saved by using slower components and avoiding over-kill (over-design) for a particular problem.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Level Component&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;a component at the top level has exactly 0 input pins and exactly 0 output pins&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;a system can have 1 or more top level components&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;events &quot;from the outside world&quot; are collected by a top level component and distributed to its children&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;analogy: this is very similar in function to a window event loop, every box-and-arrow system is a system of concurrent components that reacts to events from the top level&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;all other components must have at least one (1) input pin&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bottom Level Component&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;a bottom level component has exactly 0 output pins&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;a bottom level component is executed solely for its side effect (e.g. controlling a piece of hardware) - this&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; is OK, because all components are &lt;i&gt;isolated&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Mid-Level Component&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;mid-level components have at least one (1) input pin and at least one (1) output pin&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;mid-level components can be leaf components or composite components&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Namespaces - Name Clashes&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;all input pins for one component must each have unique names&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;all output pins for one component must each have unique names&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;input pin names can be the same as output pin names (input pins and output pins are in different namespaces)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Long-Running Loops&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;long running loops are not allowed - this is a bug&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;long running (deep) recursion is not allowed - this is a bug&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data in Events&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;the system makes no guarantees about the data in an event (other than it, or a pointer to it, can be contained in the data field of an event)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;data is designed in a hierarchical manner - the &lt;i&gt;Send()&lt;/i&gt;er and the receiver must agree on the shape of the data&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the system knows only that an event contains a pin tag and a data field&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;input pin tags refer to the input port names of a receiving component&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;output pin tags refer to the output port name of the &lt;i&gt;Send()&lt;/i&gt;ing component&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the &lt;i&gt;dispatcher()&lt;/i&gt; maps output pin tags to input pin tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Example: UNIX® pipelines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events in a pipeline are lines of characters terminated by '\n' (0x0a).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;End of file is 0x04.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;No other structuring is implied.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some programs, e.g. &lt;i&gt;awk&lt;/i&gt;, assume and create &lt;i&gt;fields&lt;/i&gt; within the lines of characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;UNIX® does not control this interpretation of the data, it simply delivers events as whole lines (or as EOF).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Example: network protocols, e.g. OSI 7-layer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each layer treats packets of bytes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The bottom-most layers key on certain bytes at the beginning and end of packets, but don't impose further structure on the contents of the packets.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Example: FBP&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt; sends IPs through the system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The FBP system recognizes bracketed IPs, but imposes no further structure on the data contained in the IPs.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatching / Routing Events&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;I talk about events travelling along wires between parts - language borrowed from digital electronics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this language, &lt;i&gt;wires&lt;/i&gt; are lines (event flows), &lt;i&gt;parts&lt;/i&gt; are components, &lt;i&gt;schematics&lt;/i&gt; are composite components&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;wires are always explicitly drawn on a &lt;i&gt;schematic&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;wires are fixed and never routed dynamically&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;events are alway &lt;i&gt;Send()&lt;/i&gt;t to a component's output queue - only the parent can route output events of a child component&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the routing table for events is &lt;i&gt;scoped&lt;/i&gt; - a parent contains only the routing information between its direct children&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the implementation of wires is unrestricted
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;wires can be represented as routing tables, or,&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;wires can be represented as inline code, or,&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;…&lt;/li&gt;
    &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Measurement&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;each component is characterized by the amount of memory that it consumes
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;amount of memory is: static memory plus (+) heap memory plus (+) stack memory&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;each component is characterized by its worst-case throughput rate&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;a system is characterized by its throughput rate for:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;one-to-one output events&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;one-to-many output events&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;overhead incurred by running the &lt;i&gt;dispatcher()&lt;/i&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;we should be able to do a worst-case analysis of throughput of a completed system using simple math - for example, if component A &lt;i&gt;Sends()&lt;/i&gt; a 1:1 output to component B, then the system throughput is: worst-case-throughput(A) + worst-case-throughput(B) + system-system-throughput-for-one-event + system-overhead-for-dispatcher.&lt;a id=&quot;fnlink13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn13&quot;&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Control Events&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In general, a component &lt;i&gt;Send()&lt;/i&gt;s control events to its children.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Events&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In general, a component &lt;i&gt;Send()&lt;/i&gt;s data events to its parent (for further routing by the parent).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Trigger Events&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Some events are sent only for their effect - the data value doesn't matter, only the fact that the event arrived matters. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call these &lt;i&gt;triggers&lt;/i&gt;.&lt;a id=&quot;fnlink14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn14&quot;&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Triggers are even &quot;smaller&quot; than Booleans.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Triggers don't have a value.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Problem-Specific Language&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;aka data flows&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Whereas most textual languages don't allow characters to overlap.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Problem Specific Language - a kind of DSL (Domain Specific Language)&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Question: if the data is non-scalar, is it copied (by value) or is only it pointer copied (by reference)?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I don't know.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The answer probably depends on the problem space.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One solution does not fit all.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Garbage Collect&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;See my essay &quot;Roles for Software Engineering&quot;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;side-effects are OK when components are fully isolated&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Flow-based Programming.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;self-modifying code is not allowed ; see digital electronics circuits' &lt;i&gt;sockets&lt;/i&gt; for alternate ways to view dynamic construction&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Children components can only &quot;see&quot; their own output ports, and cannot name the receiving components directly.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Children &lt;i&gt;Send()&lt;/i&gt; outputs to their own output ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;dispatcher() &lt;/i&gt;distributes output events (later), according to the routing table contained in the parent component.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Unbounded recursion is a bug.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[13]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;N.B. for preemption-based systems (e.g Linux, Windows, MacOSX, etc.), this worst-case analysis is so bad, that the numbers are not published and/or ignored, in general.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The analysis is, also, overly-complicated for such systems.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink14&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[14]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Influenced by digital hardware design.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Box-and-Arrow PL For Concurrency</summary></entry><entry><title type="html">Call return spaghetti</title><link href="https://computingsimplicity.neocities.org/2020/12/09/CALL-RETURN-Spaghetti.html" rel="alternate" type="text/html" title="Call return spaghetti" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/CALL%20RETURN%20Spaghetti</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/CALL-RETURN-Spaghetti.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Box and Arrow Diagrams&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:50:50Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:50:50Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
    span.s4 {font: 8.0px Helvetica}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I show that a diagram of a Call/Return system makes less sense than a diagram of a concurrent system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I show the fundamental operation of a concurrent system and argue that it is inherently simpler than a system based on Call/Return.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simple System&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 1 contains a diagram of a simple system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/SyncVsAsync-SimpleDiagram.png&quot; width=&quot;400px&quot; height=&quot;150px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 1 &lt;span class=&quot;s1&quot;&gt;A Simple System&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The diagram contains one input&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; port and one output&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; port. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The diagram contains two components&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The algorithms for the boxes are straight-forward&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The algorithms are stated in terms of what each box outputs when inputs arrive at that box.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The flow of data within the diagram is shown by arrows.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It &lt;i&gt;appears&lt;/i&gt; that we have plugged two software components together to form a system.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What Happens?&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;What Happens When Events Arrive?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/SyncVsAsync-WhatHappens.png&quot; width=&quot;411px&quot; height=&quot;115px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 2&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;An Event Arrives&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What happens when an event arrives at the input?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See Fig. 2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The event, &quot;q&quot;, is injected into the input.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The algorithms specify exactly what each box does for any given input.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is the expected output?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Do we see the expected output every time?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Do we see the expected output for every coding of the diagram?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Current State of the Art&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Code for Components B and C&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We can implement the diagram in pseudo-code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function B&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;function B(in) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;if (in == q) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;call C(s)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;} else if (in == r) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;call C(t)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FatalError()&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 3 &lt;span class=&quot;s1&quot;&gt;Function B&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function C&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;function C(in) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;if (in == q) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;- v&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;} else if (in == r) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;- w&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;} else if (in == s) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;- x&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;} else if (in == t) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;- y&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;} else if (in == u) {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;- z&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;FatalError ()&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 4 &lt;span class=&quot;s1&quot;&gt;Function C&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Version 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Version 1 of the code might &lt;i&gt;call &lt;/i&gt;component B first:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;main () {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;call B(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;call C(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 1 &lt;span class=&quot;s1&quot;&gt;Code Version 1&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Version 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Version 2 of the code might call C first:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;main () {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;call C(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;call B(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 1 &lt;span class=&quot;s1&quot;&gt;Code Version 2&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Final Output&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Final Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The final output of the preceding routines depends on which version of the code we use.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Version 1 results in the following code path:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;main {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;call B(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;B calls C(s)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;output &amp;lt;— x&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;C returns to B&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;B returns to main&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;call C(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;— v&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;C returns to main&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;main done&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 1 &lt;span class=&quot;s1&quot;&gt;Final Output for Version 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final output for Version 1 is x,v&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;While version 2 results in the following code path:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;main () {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;call C(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;output &amp;lt;— v&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;call B(q)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;B calls C(s)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;output &amp;lt;- x&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;C returns to B&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;B returns to main&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;main done&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 1 &lt;span class=&quot;s1&quot;&gt;Final Output for Version 2&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final output for Version 2 if v,x.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Version 1 and version 2 create different results.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Control Flow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 5 shows the control flows for code versions 1 and 2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/diagrams-sync.png&quot; width=&quot;443px&quot; height=&quot;186px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 5 &lt;span class=&quot;s1&quot;&gt;Control Flow for Versions 1 &amp;amp; 2&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Desired Outcome&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to plug software components together.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want the diagram(s) to mean &lt;span class=&quot;s1&quot;&gt;exactly&lt;/span&gt; one thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want the diagram(s) to mean the same thing &lt;span class=&quot;s1&quot;&gt;every&lt;/span&gt; time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will show the event flow that we desire, in a series of diagrams, then, I will discuss how this flow can be achieved&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Event Delivery 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/SyncVsAsync-AsyncDelivery1.png&quot; width=&quot;438px&quot; height=&quot;92px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 5 &lt;span class=&quot;s1&quot;&gt;Event q Delivered&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 5 shows event &quot;q&quot; being delivered to B and C.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Nothing else happens, no routines are called.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;After Event Delivery 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/SyncVsAsync-AfterAsyncDelivery1.png&quot; width=&quot;421px&quot; height=&quot;97px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 5 &lt;span class=&quot;s1&quot;&gt;After Event Delivery 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 5 shows what the system looks like after Event Delivery 1 has occurred.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Both, Components B and C have an event &quot;q&quot; at their inputs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(Neither Component has acted yet).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Possible Control Flow Paths&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At this point, two control flow paths are possible:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Component B runs first.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Component C runs first.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I will draw a sequence of diagrams for each path.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;B Runs First - Path BC&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/PathBC.png&quot; width=&quot;281px&quot; height=&quot;616px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 6 &lt;span class=&quot;s1&quot;&gt;Control Flow BC&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;C Runs First - Path CB&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-50-50-Images/PathCB.png&quot; width=&quot;274px&quot; height=&quot;626px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fig. 7 &lt;span class=&quot;s1&quot;&gt;Control Flow CB&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Final Result&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In both cases, Path BC and Path CB, the final result is the same - v is output first, then x is output.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Achieving the Desired Result&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Requirements&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li9&quot;&gt;All Components have an input queue, onto which incoming events are placed.&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Components cannot &lt;i&gt;call&lt;/i&gt; one another.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Components are &lt;i&gt;asynchronous.&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;A &lt;i&gt;Dispatcher&lt;/i&gt; routine decides which Component will run and in what order&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Components are &lt;i&gt;ready&lt;/i&gt; if they have events in their input queues.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Components consume one input event and produce as many output events&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; as necessary in reaction to the input event.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Components perform a co-routine&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; dance with the Dispatcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When a Component has processed a single event to completion, the the Component &lt;i&gt;yields &lt;/i&gt;to the Dispatcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Dispatcher decides which Component will run next.&lt;a id=&quot;fnlink13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn13&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; Components do not decide on the order of dispatching (as with call-return based code) nor can Components rely on any certain dispatching order.&lt;a id=&quot;fnlink14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn14&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Events and data contained in events, are immutable.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;If a Component sends one event to multiple receivers, it must &lt;i&gt;lock&lt;/i&gt; the routing wire.&lt;a id=&quot;fnlink15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn15&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;In addition,&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li9&quot;&gt;Components have no parameters,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Send()&lt;a id=&quot;fnlink16&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn16&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[16]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; is used instead.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;Components have no return values.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Send() is used instead.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;There is no syntax for exceptions&lt;a id=&quot;fnlink17&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn17&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Send() is used instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Using Threads&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Operating system &lt;i&gt;threads&lt;a id=&quot;fnlink18&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn18&quot;&gt;&lt;sup&gt;[18]&lt;/sup&gt;&lt;/a&gt; can be used to trivially implement components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each Component has a &lt;i&gt;mailbox&lt;a id=&quot;fnlink19&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn19&quot;&gt;&lt;sup&gt;[19]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; &lt;/i&gt;and it sends messages to it parent&lt;a id=&quot;fnlink20&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn20&quot;&gt;&lt;sup&gt;[20]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The parent routes the messages to the mailboxes of appropriate receivers&lt;a id=&quot;fnlink21&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn21&quot;&gt;&lt;sup&gt;[21]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note - using &lt;i&gt;threads&lt;/i&gt; is overkill.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An operating system based &lt;i&gt;thread&lt;/i&gt; involves hardware MMUs&lt;a id=&quot;fnlink22&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn22&quot;&gt;&lt;sup&gt;[22]&lt;/sup&gt;&lt;/a&gt; and separate stacks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Operating system &lt;i&gt;threads &lt;/i&gt;implement the out-dated notion of &lt;i&gt;time-sharing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;None of these are actually required to make this system work.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fairness&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is not an issue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components run a single incoming event to completion, they &lt;i&gt;yield&lt;/i&gt; only to the Dispatcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This system mimics, more closely, the modern ideas of distributed systems&lt;a id=&quot;fnlink23&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn23&quot;&gt;&lt;sup&gt;[23]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Thread Safety&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Thread Safety is not an issue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components cannot share memory, hence, thread safety is not an issue.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Shared Memory&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Shared memory is not an issue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components cannot share memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components can only send immutable messages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In very tightly coupled systems, we have the temptation to send pointers to large blobs of memory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The sender might mutate the blobs of memory before the message is read by the receiver. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This system makes no guarantees for such situations.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;This&lt;/span&gt; system&lt;a id=&quot;fnlink24&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn24&quot;&gt;&lt;sup&gt;[24]&lt;/sup&gt;&lt;/a&gt; gives the Architect all of the atomic tools necessary to create systems that work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the memory-sharing issue was encountered 40+ years ago in TTL-based hardware systems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The solution was to use &quot;double-buffering&quot; and &quot;overrun&quot; flags.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If a system could not switch between buffers quickly enough, then it created an overrun condition.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A system which encountered overrun was deemed simply to be &quot;too slow&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Architect must make the calculation&lt;a id=&quot;fnlink25&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn25&quot;&gt;&lt;sup&gt;[25]&lt;/sup&gt;&lt;/a&gt; of whether his/her design is &quot;fast enough&quot; for a given purpose.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priority Inversion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Priority inversion is not an issue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I don't use&lt;a id=&quot;fnlink26&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn26&quot;&gt;&lt;sup&gt;[26]&lt;/sup&gt;&lt;/a&gt;, nor specify priorities&lt;a id=&quot;fnlink27&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn27&quot;&gt;&lt;sup&gt;[27]&lt;/sup&gt;&lt;/a&gt;, hence, priority inversion cannot happen.&lt;a id=&quot;fnlink28&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn28&quot;&gt;&lt;sup&gt;[28]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Loops and Recursion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It turns out that Looping (and Recursion) is the &lt;span class=&quot;s1&quot;&gt;exception&lt;/span&gt;, not the rule.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components must not enter long-running loops (or deep recursion).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components must &lt;i&gt;yield&lt;/i&gt; to the Dispatcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that compilers could insert &lt;i&gt;yields&lt;/i&gt; at the bottom of Loops to accomplish this behaviour.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Dispatcher routine is the only routine in the system that runs a loop.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It loops through a list of &lt;i&gt;ready&lt;/i&gt; closures and, randomly, invokes a &lt;i&gt;ready &lt;/i&gt;closure.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When the &lt;i&gt;closure&lt;/i&gt; finishes&lt;a id=&quot;fnlink29&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn29&quot;&gt;&lt;sup&gt;[29]&lt;/sup&gt;&lt;/a&gt;, the Dispatcher simply picks another &lt;i&gt;ready&lt;/i&gt; closure to run.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic Routing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic routing is not an issue, because it's not supported.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic routing used to be called &lt;i&gt;self-modifying code&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Self modifying code is a bad idea.&lt;a id=&quot;fnlink30&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn30&quot;&gt;&lt;sup&gt;[30]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Using Closures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Most modern languages provide the concept of &lt;i&gt;closures&lt;/i&gt;.&lt;a id=&quot;fnlink31&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn31&quot;&gt;&lt;sup&gt;[31]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Closures might be called &lt;i&gt;anonymous functions, &lt;/i&gt;or &lt;i&gt;callbacks,&lt;/i&gt; or be embedded in concepts such as &lt;i&gt;futures&lt;/i&gt;, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Even C has a way to make &lt;i&gt;closures,&lt;/i&gt; using function pointers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The minimum closure required by this system requires some static, but not exported, data, and a temporary stack&lt;a id=&quot;fnlink32&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn32&quot;&gt;&lt;sup&gt;[32]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;N.B. one stack, for the complete system, is enough&lt;a id=&quot;fnlink33&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn33&quot;&gt;&lt;sup&gt;[33]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;OO&lt;a id=&quot;fnlink34&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn34&quot;&gt;&lt;sup&gt;[34]&lt;/sup&gt;&lt;/a&gt; Objects and Blocks are very close, in principle, to the ideas expressed here.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The difference is that I specify &lt;i&gt;closures&lt;/i&gt; that run asynchronously whereas OO uses Objects that perform synchronous &lt;i&gt;call-return &lt;/i&gt;and explicit naming of receivers&lt;i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;I recommend that &lt;i&gt;closures&lt;/i&gt; send messages to their parents and do &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; refer to each other directly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, and experience, creating separate stacks for each &lt;i&gt;closure&lt;/i&gt; and using MMUs is overkill.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I don't wish to use time-sharing in my programs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I might use time-sharing if I were to build an operating system.&lt;a id=&quot;fnlink35&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn35&quot;&gt;&lt;sup&gt;[35]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If one imagines that &lt;i&gt;closures&lt;/i&gt; contain state-machines, then, this method could be considered to be a system of &lt;span class=&quot;s1&quot;&gt;communicating state machines&lt;/span&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I think in terms of &lt;span class=&quot;s1&quot;&gt;clockwork&lt;a id=&quot;fnlink36&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn36&quot;&gt;&lt;sup&gt;[36]&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Other Features&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reuse&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This system emphasizes &lt;i&gt;reuse&lt;/i&gt; of Architecture&lt;a id=&quot;fnlink37&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn37&quot;&gt;&lt;sup&gt;[37]&lt;/sup&gt;&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Architecture reuse is more valuable than code reuse.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Refactoring&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Software Component Architectures composed in this manner can be easily refactored into other Architectures, simply by moving/deleting/adding arrows.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components SEND() messages to their parents. Parents contain the routing tables&lt;a id=&quot;fnlink38&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn38&quot;&gt;&lt;sup&gt;[38]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parents route messages between their children.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This combination makes &lt;i&gt;refactoring&lt;/i&gt; of Architectures easy&lt;a id=&quot;fnlink39&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn39&quot;&gt;&lt;sup&gt;[39]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This system produces a natural hierarchical composition of Architectures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parents route messages between their children.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parents act like Components in all other respects.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parents cannot SEND() messages to their peers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They can only SEND() messages upwards to &lt;i&gt;their&lt;/i&gt; parents, and route messages of their direct children.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Global variables are not an issue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Global variables cannot leak beyond the boundaries of their Components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Global variables are not a problem, if properly encapsulated.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Types&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Global Types in synchronous languages are just as bad as Global Variables in those languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Global &lt;i&gt;anything&lt;/i&gt; is bad.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Encapsulation must be applied to every concept in software architecture.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Namespaces&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A component has two external namespaces:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;The set of inputs.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;The set of outputs&lt;a id=&quot;fnlink40&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn40&quot;&gt;&lt;sup&gt;[40]&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The internal namespace(s) of Components does not leak out.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;All input names must be unique within the input namespace.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;All output names must be unique within the output namespace.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The same name may appear in, both, the input and output namespaces.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Namespaces are naturally encapsulated in a hierarchical manner, due to hierarchical encapsulation of Components.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;If two Components have &lt;i&gt;exactly&lt;/i&gt; the same input namespace and the same output namespace, then the components are considered to be interchangeable, and &quot;pin compatible&quot;.&lt;a id=&quot;fnlink41&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn41&quot;&gt;&lt;sup&gt;[41]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation of Control Flow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Control Flow within Components is naturally isolated by the fact that Components are truly asynchronous.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Control flow begins when a Component is invoked, and, control flow ends when the Component &lt;i&gt;yields&lt;/i&gt; to the Dispatcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Control Flow does not leak beyond the boundaries of Components&lt;a id=&quot;fnlink42&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn42&quot;&gt;&lt;sup&gt;[42]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; The oval labelled &quot;input&quot;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; &lt;span class=&quot;s3&quot;&gt;The oval labelled &quot;output&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Boxes labelled B and C.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See the dashed callouts pointing to each box.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The input flows to B and to C.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;B's output flows to C.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;C's output flows to the output.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;in left to right order&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;After all, computer (digital) hardware is plugged together.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Even on synchronous operating systems.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;In a production version, Components also have output queues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That requirement is a fine point, discussed elsewhere.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The order is arbitrary.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components are fully asynchronous.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;0 or more.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this example, each component produces exactly 1 output for each input, but this is not a requirement.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;FYI - This is easy to accomplish using closures and state-machine mentality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Discussed later.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is also easy to accomplish using threads, albeit this is overkill.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink13&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[13]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;There are many scheduling possibilities.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the Dispatcher may invoke a Component repeatedly until the Component's input queue is empty.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Or, the Dispatcher may choose to work in a &lt;i&gt;round-robin&lt;/i&gt; fashion.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Fairness is not an issue (since a Component will eventually go idle when its input queue is empty).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink14&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[14]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Components are truly asynchronous and must survive through any dispatching order.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink15&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[15]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;In practical systems, this is not an issue.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It becomes an issue for bare metal systems (no operating system) or systems where Components are distributed along &quot;very slow&quot; connections.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I leave this &quot;problem&quot; to the Architect to solve in a manner suitable for the application.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I simply want to give the Architect the tools to work with to build reliable systems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Architect makes guarantees of reliability.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This system provides only the bare minimum tool set.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn16&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink16&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[16]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;SEND() is the only mechanism for transferring data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Data can be transferred to any number of receivers up and down the line, using SEND().&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is no need for a specialized RETURN() expression.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn17&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink17&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[17]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;SEND() is the only mechanism for transferring data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Exceptions are simply data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Data can be transferred to any receiver using SEND().&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn18&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink18&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[18]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;a.k.a. processes&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn19&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink19&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[19]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;a.k.a. input queue&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn20&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink20&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[20]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;which I call a &lt;i&gt;schematic&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;i&gt;&lt;a id=&quot;fn21&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fnlink21&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[21]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The routing information is based on the arrows on the diagram(s).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn22&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink22&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[22]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Memory Management Units&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn23&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink23&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[23]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;e.g. IoT, multi-core and internet systems&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn24&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink24&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[24]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;We call it Arrowgrams.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn25&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink25&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[25]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Calculation is discussed elsewhere.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn26&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink26&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[26]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This is not a flippant statement, regardless of how it sounds.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is based on hard-won experience with real products.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Priorities can (almost) always be designed out of a system.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn27&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink27&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[27]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This is system of atomic tools.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Priorities are non-atomic and can be implemented using the atomic tools.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn28&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink28&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[28]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;If a system must act using priorities, then the Architect is referred to literature on hardware priorities&lt;sup&gt;⁠1&lt;/sup&gt; fully documented some 40+ years ago&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;1 &lt;/sup&gt;&lt;/span&gt;NMI and IRQ levels.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn29&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink29&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[29]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;e.g. executes a &lt;i&gt;RETURN&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;i&gt;&lt;a id=&quot;fn30&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fnlink30&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[30]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Self-modifying code is especially bad from the maintenance perspective.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn31&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink31&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[31]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Closures were explored in the 1950's using Lisp.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn32&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink32&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[32]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;A temporary stack is used for compiler-generated temporary values.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn33&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink33&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[33]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;One stack is needed for implemenationon von Neumann architectures.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe one stack is one too many in non-von Neumann architectures?&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn34&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink34&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[34]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Object Oriented&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn35&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink35&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[35]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I argue that we shouldn't use operating systems at all.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn36&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink36&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[36]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Rendezvous techniques also form clockwork systems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Rendezvous has the drawback that it imposes synchronous operation of processes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is anathema to concurrency.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a concurrent system, processes are asynchronous by default.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Synchronization is the exception not the rule.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If synchronization is needed, it must be explicitly designed (for example, see ACK/NAK protocols in networking, and, synchronization techniques used in TTL hardware of the 1980's).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn37&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink37&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[37]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Reuse can be performed by cut/copy/paste.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;According to Paul Bassett, OO does not provide &lt;i&gt;reuse.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;OO provides &lt;i&gt;multiple-use&lt;/i&gt; (which leads to parameterization, which leads to accidental complexities, and so on).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn38&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink38&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[38]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;a.k.a. arrows&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn39&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink39&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[39]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Routing tables is nothing more than indirection.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It also allows for reuse (as opposed to multiple use) of architectures.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn40&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink40&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[40]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I call them &quot;input pins&quot; and &quot;output pins&quot;, resp., inspired by TTL hardware concepts.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn41&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink41&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[41]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This is similar to &lt;i&gt;referential transparency, &lt;/i&gt;but, without the constraint that pin-compatible components must produce the same outputs (this loosening of the same-output restriction allows upgrading).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn42&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink42&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[42]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Control Flow cannot leak because Components cannot &lt;i&gt;CALL&lt;/i&gt; other components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components can only SEND() messages upwards to their parents for routing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Corollary: the direction of SEND() is vertical-only - SEND() cannot be used to deliver messages &lt;i&gt;sideways&lt;/i&gt; to peer components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components can SEND() data upwards to their parent.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A parent can route messages between children (and their own input and output pins).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parents can SEND() commands downwards to children.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Box and Arrow Diagrams</summary></entry><entry><title type="html">Complexity ii</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Complexity-II.html" rel="alternate" type="text/html" title="Complexity ii" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Complexity%20II</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Complexity-II.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Complexity II&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:51:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:51:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p3 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    p.p4 {margin: 10.0px 0.0px 6.0px 0.0px; font: 16.0px Helvetica}
    p.p5 {margin: 10.0px 0.0px 6.0px 0.0px; font: 16.0px Helvetica; min-height: 19.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 16.0px Helvetica; min-height: 19.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 10.0px Arial; min-height: 11.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    span.Apple-tab-span {white-space:pre}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Q: Which is simpler, diagram A or&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-09-14-51-20-Images/ConCarCdr-flat.png&quot; width=&quot;241px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;diagram B?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;&lt;img src=&quot;/assets/2020-12-09-14-51-20-Images/ConCarCdr-closure.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Q: Which code is simpler?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Code C:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;function Cons(x,y) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.car = x;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.cdr = y;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;function car(cell) {&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return cell.car;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;function cdr(cell) {&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return cell.cdr;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;or Code D?&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;function Cons(x,y) {&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return function(placeholderFunction) {&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;placeholderFunction(x,y);&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;function car(cell) {&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return cell(&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;function(x,y){&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return x;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;function cdr(cell) {&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return cell(&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;function(x,y){&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return y;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;Simplicity can be defined as “lack of nuance”.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;It is the Software Architect’s responsibility to make the design readable and understandable.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Complexity II</summary></entry><entry><title type="html">Complexity</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Complexity.html" rel="alternate" type="text/html" title="Complexity" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Complexity</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Complexity.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Complexity&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:51:41Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:51:41Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p3 {margin: 0.0px 0.0px 7.0px 0.0px; font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica&quot;&gt;&lt;b&gt;Complexity&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Isolating complexity is more important than reducing complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Complexity</summary></entry><entry><title type="html">Computing then and now ii</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Computing-Then-And-Now-II.html" rel="alternate" type="text/html" title="Computing then and now ii" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Computing%20Then%20And%20Now%20II</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Computing-Then-And-Now-II.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Computing Then And Now II&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:52:03Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:52:03Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 36.0px 0.0px 36.0px 0.0px; text-align: center; font: 28.0px Helvetica&quot;&gt;Observation - Original Use For Computers&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;When computers were originally invented, it was thought that they would be used for computing mathematical functions, only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Hence, the name &quot;computers&quot;.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Computers now cover, broadly, at least several areas:&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Methods for computing mathematical functions might not be the best choice for use in the other fields, e.g. machine control.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, StateCharts are useful for (asynchronous) machine control, but not as useful for computing (sequential) mathematics.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;I include CRM (Customer Relationship Management) in this category.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;I include new-breed AI in this category&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;e.g. Functional Programming&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Computing Then And Now II</summary></entry><entry><title type="html">Computing then and now</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Computing-Then-and-Now.html" rel="alternate" type="text/html" title="Computing then and now" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Computing%20Then%20and%20Now</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Computing-Then-and-Now.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Computing Then and Now&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:52:24Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:52:24Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {text-decoration: underline ; color: #000080}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica&quot;&gt;&lt;b&gt;Computing, Then and Now&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(July 8, 2020)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Computers are inherently parallel.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Early on, hardware designers found ways to deal with the inherent parallelism (e.g. TTL, state machines, clocking, etc.).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;At an early stage, von Neumann suggested using a single-threaded approach in order to tame parallelism in software (N.B. note the similarity to consciousness - a single thread, coordinating the parallel processes of the human body)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;At that time, the assumptions were:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;memory was a scarce resource and needed to be conserved and reused&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;CPUs were very expensive and needed to be time-shared across multiple users&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;mathematical notation (as it existed) could solve all problems&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;programming languages were hard to create.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Today, these basic assumptions have been overturned&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;we have nearly infinite memory&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;microprocessors are cheap and abundant&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;written mathematical forms do not use the full capabilities of what can be displayed with a computer&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;programming languages (e.g. DSLs) are much easier to create now, e.g. using PEG and backtracking parsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The computing environment has changed drastically, but software programming languages have not kept up with the new reality.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We continue to use languages whose design was based on these early prejudices. This has led us into many accidental complexities that continue to vex us.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The most glaring of such accidental complexities are time-sharing-based multi-tasking and memory sharing (I count some 40+ accidental complexities).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We have developed a language, phrases and words to describe the problematic aspects of these choices, instead of dealing with the new reality and problems based on the early assumptions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We talk of thread-safety, priority inversion, mmap, race conditions (some race conditions are inherent in parallel systems, but many of the race conditions we deal with are due to accidental complexity), garbage collection, parameter lists, return values, the vague notions of &lt;i&gt;complexity, &lt;/i&gt;Agile, call-return, etc., all the while ignoring realities that TTL hardware dealt with – throughput time, asynchronous design, 1-page documentation, encapsulation, buses, etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We use programming editors that can edit only text (which are graphical glyphs made up of mini-bitmaps) instead of programming with graphical symbols, of which text is only &lt;i&gt;one&lt;/i&gt; of the choices.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We have created variable font editors for business (e.g. Word), we have created diagram editors for business (e.g. Visio) and we have invented new UIs for business (Excel, iPad), but the basic model of editors for &lt;i&gt;programming&lt;/i&gt; has not kept pace.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers use all ten fingers for typing, but programmers are forced to take their hands off of keyboards to use much more limited mouse pointing devices.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, a &lt;i&gt;box&lt;/i&gt; glyph could be bound to a single key on the keyboard&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; and two &lt;i&gt;boxes&lt;/i&gt; could be selected (e.g. using &lt;i&gt;point &lt;/i&gt;and &lt;i&gt;mark&lt;/i&gt;) with another keystroke creating a line/connection between them.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Snippets of text could be typed anywhere on the screen and not be relegated to the 24x80 line-oriented mindset of early predecessors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Technologies, once thought forbidden, like PROLOG backtracking, Early parsing, miniKanren (core.logic in clojure-speak) are now entirely viable and finish processing in the blink of an eye.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We &lt;i&gt;can&lt;/i&gt; waste computing resources to make programming easier, but instead we waste resources on tool-tips and mountains of APIs based on outdated notions of function libraries.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Most programming languages (and even tools like spreadsheets) use the outdated notion of &lt;i&gt;absolute addressing&lt;/i&gt; – where functions are named and called directly instead of using indirection (which is much more flexible for architecting new solutions).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hardware microprocessors underwent a transition from absolute addressing to relative addressing, but this has mostly not happened in the design of popular programming languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(See David Ackley’s MFM for someone who is thinking along these lines (albeit mostly for hardware, AFAICT) &lt;a href=&quot;https://www.cs.unm.edu/~ackley/papers/hotos-11.pdf&quot;&gt;&lt;span class=&quot;s2&quot;&gt;https://www.cs.unm.edu/~ackley/papers/hotos-11.pdf&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We spend time improving code tools instead of building new tools and languages for harder problems, like Architecture (which I call D.I. - Design Intent).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We relegate D.I. to whiteboards instead of concrete notations which can be compiled and executed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We build languages that only mathematicians can only love, instead of building tools to concretely communicate between CEOs, CTOs, Architects, Engineers and Programmers.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We have essentially &lt;i&gt;forgotten&lt;/i&gt; that synchronous code is a &lt;i&gt;trick&lt;/i&gt; used as &lt;i&gt;but one way&lt;/i&gt; to tame parallelism.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We expect all languages to provide call/return, parameters, return values, exceptions, etc. and we try to force-fit these ideas onto every problem we solve (“&lt;i&gt;when all you’ve got is a hammer, then everything looks like a nail”&lt;/i&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result is that we know how to solve only one problem (building unreliable websites).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rest of the problems in the real world (gaming, machine control, etc.) are left to C and the new kid on the block Rust (which is just a re-hash of old ideas).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The new reality consists of applications consisting of multiple microprocessors (I refuse to call them C.P.U.s&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- Central Processing Units – and call them P.U.s instead (Processing Units)) each with their own private memories, distributed across space.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One thread per P.U.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Communicating over wires (not memory).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Current programming languages, stack-based, can describe a program &lt;i&gt;on&lt;/i&gt; a P.U. but cannot (easily, without accidental complexity) describe programs &lt;i&gt;across &lt;/i&gt;distributed P.U.s.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We need languages that &lt;i&gt;do less&lt;/i&gt; so that Architects and Engineers can free their minds of unnecessary details (I discuss my ideas about how to structure a Software Organization elsewhere).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We have explored all sorts of tools and technologies and paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Now, we need to pick through the pile and select the best tools for every task and throw away the rest (see &lt;a href=&quot;https://alarmingdevelopment.org/?p=766&quot;&gt;&lt;span class=&quot;s2&quot;&gt;https://alarmingdevelopment.org/?p=766&lt;/span&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Or, a single gesture consisting of multiple keys, or multiple gestures, or, just about anything that is repeatable and stays the same (modeless).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Computing Then and Now</summary></entry><entry><title type="html">Concurrency is a paradigm</title><link href="https://computingsimplicity.neocities.org/2020/12/09/Concurrency-is-a-Paradigm.html" rel="alternate" type="text/html" title="Concurrency is a paradigm" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/09/Concurrency%20is%20a%20Paradigm</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/09/Concurrency-is-a-Paradigm.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Concurrency is a Paradigm&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:52:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:52:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    p.p4 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 7.0px 0.0px; font: 10.0px Times}
    span.s1 {font: 12.0px Times}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency is a Paradigm.&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not parallelism.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is a paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Programs designed to be parallel must employ the concurrent paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Parallelism implies Concurrency.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency does not imply Parallelism.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is a paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concurrency is often conflated with Parallelism.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is simpler than Parallelism. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not time-sharing. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not memory-sharing. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not thread safety. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not priority inversion.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Rob Pike’s talk “Concurrency Is Not Parallelism” https://vimeo.com/49718712&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Concurrency is a Paradigm</summary></entry></feed>