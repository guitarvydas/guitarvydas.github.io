<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-05-05T14:07:11-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Tags instead of names</title><link href="https://computingsimplicity.neocities.org/2021/05/05/Tags-Instead-of-Names.html" rel="alternate" type="text/html" title="Tags instead of names" /><published>2021-05-05T00:00:00-04:00</published><updated>2021-05-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/05/Tags%20Instead%20of%20Names</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/05/Tags-Instead-of-Names.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Tags Instead of Names&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;tagsinsteadofnames&quot;&gt;Tags Instead of Names&lt;/h1&gt;

&lt;p&gt;Below is a simple equation&lt;/p&gt;

&lt;p&gt;y = mx + b&lt;/p&gt;

&lt;p&gt;There are, at least, 4 names in this equation:&lt;/p&gt;

&lt;p&gt;y, m, x, b.&lt;/p&gt;

&lt;p&gt;These names are only meaningful to those who already understand the purpose of this equation.&lt;/p&gt;

&lt;p&gt;A novice would want different names, e.g.&lt;/p&gt;

&lt;p&gt;y, slope, x, y-intersect.&lt;/p&gt;

&lt;p&gt;A compiler-writer might used numeric names instead (aka addresses), e.g.&lt;/p&gt;

&lt;p&gt;0x7512, 0x5525, 0x7518, 0x1234.&lt;/p&gt;

&lt;p&gt;Or, a compiler-writer, might wish to abstract the names, using Data Descriptors, e.g.&lt;/p&gt;

&lt;p&gt;@sp.2, @r11.0, @sp.8, @0x1230.4&lt;/p&gt;

&lt;p&gt;In some cases&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; names are more like &lt;em&gt;comments&lt;/em&gt;. The names are superfluous except as comments to the reader.&lt;/p&gt;

&lt;p&gt;In some cases&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; it is enough to know only the type of a datum, e.g. if a datum appears only once in code, there is not point in assigning two identifiers (name and type) to the datum, where only one identifier will do.&lt;/p&gt;

&lt;p&gt;The Common Lisp language incorporates a construct called &lt;em&gt;symbol macros&lt;/em&gt; which emphasizes the superfluous nature of names.&lt;/p&gt;

&lt;p&gt;The above observations lead to the notion that names in PLs&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; are not single entities, but might be treated more like lists of tags.&lt;/p&gt;

&lt;p&gt;Names could be defined as lists.&lt;/p&gt;

&lt;p&gt;Named entities could be named by a list of valid synonyms.&lt;/p&gt;

&lt;p&gt;The above would be like projectional-editing-in-the-small.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Software Architecture using assign&amp;#8211;once languages. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;E.G. diagrams, etc. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;PL means Programming Language &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Tags Instead of Names</summary></entry><entry><title type="html">Prolog vs kanren</title><link href="https://computingsimplicity.neocities.org/2021/05/05/PROLOG-vs-Kanren.html" rel="alternate" type="text/html" title="Prolog vs kanren" /><published>2021-05-05T00:00:00-04:00</published><updated>2021-05-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/05/PROLOG%20vs%20Kanren</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/05/PROLOG-vs-Kanren.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;PROLOG vs Kanren&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;exhaustivesearch&quot;&gt;Exhaustive Search&lt;/h1&gt;

&lt;p&gt;Both methods, PROLOG and Kanren, perform exhaustive search.&lt;/p&gt;

&lt;p&gt;PROLOG achieves exhaustive search via backtracking and re-binding via Unification.&lt;/p&gt;

&lt;p&gt;Kanren achieves exhaustive search by creating an object of all possible matches at a given point, then passing the object+answers+unifiableVariables down a pipeline for further augmentation and clipping.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/2021-05-05-09-45-06-Images/PROLOGvsKanren.png&quot; alt=&quot;&quot; id=&quot;prologvskanren&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PROLOG vs Kanren</summary></entry><entry><title type="html">Breaking long running loops</title><link href="https://computingsimplicity.neocities.org/2021/05/05/Breaking-Long-Running-Loops.html" rel="alternate" type="text/html" title="Breaking long running loops" /><published>2021-05-05T00:00:00-04:00</published><updated>2021-05-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/05/Breaking%20Long%20Running%20Loops</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/05/Breaking-Long-Running-Loops.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Breaking Long Running Loops&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-05T09:50:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-05T09:50:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Breaking Long Running Loops&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers can help prevent long-running loops by compiling the code for a loop differently.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At its most basic, a loop is a start-label and an end-label.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;loop&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;x := 1&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;end loop&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, loops are compiled as:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;START:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MOV [X],1&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTO START&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;END:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Loops &lt;i&gt;could&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt; be compiled as&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;START:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MOV [X],1&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;CALL YIELD&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTO START&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;END:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Breaking Long Running Loops</summary></entry><entry><title type="html">Software components 001</title><link href="https://computingsimplicity.neocities.org/2021/05/04/Software-Components-001.html" rel="alternate" type="text/html" title="Software components 001" /><published>2021-05-04T00:00:00-04:00</published><updated>2021-05-04T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/04/Software%20Components%20001</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/04/Software-Components-001.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 001&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-04T23:43:52Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-04T23:43:52Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #000000; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p14 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px 'Lucida Grande'}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font-kerning: none; background-color: #f6f7f9}
    span.s4 {font: 8.0px Helvetica}
    span.s5 {font: 13.0px Palatino}
    span.s6 {font: 9.0px Palatino}
    span.s7 {font: 11.0px Menlo}
    table.t1 {border-collapse: collapse}
    td.td1 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This essay is mostly superseded by &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/03/Software-Components-101.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/05/03/Software-Components-101.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt; and &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/04/Software-Components-101-Connection-Queries.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/05/04/Software-Components-101-Connection-Queries.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt;, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I include this essay since it formed a step along my path towards the above articles.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some parts of this essay remain relevant, e.g. Motivating Example and &lt;/i&gt;Name Mangling, &lt;i&gt;etc&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;This essay contains the preamble to the above essays, the motivating example (although, I managed to simplify the example even further in the later essays) and contains queries that are very basic and very simple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It might be helpful to skim this essay before reading the above essays, without getting stuck on any of the details contained herein.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This essay also shows a snapshot of my thinking process — continuous divide and conquer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I started out with what looked like a simple problem (line intersection of boxes that have no rotation, and have only vertical and horizontal edges) and, while writing about it, found further simplifications.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I discuss Software Components, my diagrammatic notation for Components and how to manually compile diagrams to code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I happen to use &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt; for my diagrams, but any diagramming tool (including whiteboards and paper) could be used.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component is defined by its signature:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;a name&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a set of input ports&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a set of output ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Notation&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component is drawn as a rectangle (I used rounded rectangles).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The rectangle contains one (or zero) piece of text which is the &quot;type&quot; of the Component. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I used the word &quot;kind&quot; instead of &quot;type&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If we use the OO analogy, then the &quot;kind&quot; of the Component would be its class.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each Component on a diagram would be an &lt;i&gt;instance&lt;/i&gt; of the class.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We don't need to supply a name for the Component because the name is &quot;obvious&quot; from its position on the diagram, and, names are only needed when there are more than one Component of the same kind on the diagram.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In practice, when diagrams are used to represent architecture, instead of code, we tend to have only one of each kind of Component on any one diagram.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case, the kind suffices to name the Component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The IDE invents unique names for Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this bootstrap case, we will name Components by digits between 1 &amp;amp; 9.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Generally, we don't need more than 9 Components on a diagram.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Diagrams that use more than 9 Components are probably &quot;too busy&quot; to understand.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rule should involve the psychological norm, i.e. 7&lt;span class=&quot;s1&quot;&gt;±&lt;/span&gt;2 Components on a single diagram — we expect to use layers, so there might be more than 9 Components in a &lt;i&gt;system&lt;/i&gt; but not on a &lt;i&gt;single&lt;/i&gt; diagram.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In text, brackets are used to delimit a component's kind, e.g. [a], [a b c], etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ports have the following attributes:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;b&gt;direction&lt;/b&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;b&gt;visibility&lt;/b&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;b&gt;connection&lt;/b&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;b&gt;name&lt;/b&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;input&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;external&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;explicit&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&amp;lt;empty&amp;gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;output&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;internal&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;implicit&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;string&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use the convention that ports are&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;coloured green for input, and&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;coloured yellow/red for output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use different shapes for port visibility&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;bullets&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; denote external ports&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;squares, rectangles and circles denote internal ports.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I use shadows (and text) to denote connection type&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;ports with shadows&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; denote ports that can receive implicit connections (dynamic) ; in text, I mark implicit ports with the prefix *&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;ports with no shadows (flat, 2D) denote ports that must be connected explicitly (static connections).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Ports can have names.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Textually, port names are enclosed in parentheses:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;a port with no name is assigned a number [1-9] by the system (the order is given by the textual signature of the Component)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a port name can be any text (including spaces, except parenthesis and brackets) allowed by the diagram editing tool.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;External Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this example, we have 4 external Ports — 2 input and 2 output.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Their names are &quot;R1&quot;, R2&quot;, &quot;!&quot; and &quot;#&quot;, resp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-External Ports.png&quot; width=&quot;75px&quot; height=&quot;54px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As already mentioned, green Ports are Input Ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case &quot;R1&quot; and &quot;R2&quot; are External Input Ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The two External Output Ports are &quot;!&quot; and &quot;#&quot;, yellow and red, resp. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By convention (only), I've used the red colour to signify ports that are error ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this, simple, example, I collect all errors and send them to a single External Output Port (named &quot;#&quot;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;All four of these ports are explicitly connected.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will discuss explicit vs. implicit later.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Internal Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Example of various internal ports:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-Internal Ports.png&quot; width=&quot;23px&quot; height=&quot;103px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Input Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-Input Ports.png&quot; width=&quot;81px&quot; height=&quot;25px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-Output Ports.png&quot; width=&quot;75px&quot; height=&quot;54px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implicit Connections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Implicit connections &quot;gather&quot; all inputs/outputs from ports with the same name in the immediately enclosed context.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, a red box with a *# port connects implicitly to all *# ports in the boxes &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;contained in red box.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-Implicit Connection Example.png&quot; width=&quot;150px&quot; height=&quot;96px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Implicit Connection Example&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In Fig. 1, the outer box contains one *# Port and it collects all data from the *# Ports of Box 1 and Box 2.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Explicit Connections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-Explicit Connection Example.png&quot; width=&quot;100px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Connections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Explicit connections are drawn with lines (and arrows).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ports marked as explicit &lt;i&gt;must&lt;/i&gt; be connected visually with lines to their sources/sinks.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite Component Implementations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Furthermore, Composite Components are described by&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;a name&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a set of input ports&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a set of output ports&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;an ordered list of child components (their signatures)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a list of connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are concurrent by default.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Enclosing components wait for all children to &lt;i&gt;finish&lt;/i&gt; before creating outputs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Finish&lt;/i&gt; is defined as&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;having empty input queues (no events waiting to be processed)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;being &lt;i&gt;not busy&lt;/i&gt; (busy-ness is an issue only in truly concurrent systems ; it is not an issue in systems based on sequential operation (e.g. most current PLs)).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Components &lt;i&gt;can have&lt;/i&gt; implicit &quot;reset&quot; inputs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Any value applied to a &quot;reset&quot; input causes the component to immediately stop any work under way and to go back to a known idle (reset) state.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Implicit reset inputs are meant for optimization — stopping long-running processes&lt;/i&gt;].&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Special Components&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;#&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[#] components are like exception handlers. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[#] components gather any and all (#) outputs from child components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As soon as &lt;i&gt;any&lt;/i&gt; (#) output is fired from a child component, the child components are &lt;i&gt;reset&lt;/i&gt; and the [#] component outputs a &lt;i&gt;trigger&lt;/i&gt; message from its (*#) pin.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For debugging, implementation dependent trigger values can be defined, that carry error and debugging information in them.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Semantically, the trigger value is taken to be a &lt;i&gt;trigger&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; &lt;/i&gt;only and any debug information contained in the trigger is, semantically, ignored.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Any&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Any runs all children Components and &quot;stops&quot; after the first one fires its (Any) pin.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Any must wait for all children to subside before processing another event (or going dormant).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Motivating Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I will use a motivating example.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The example is that of determining whether a rectangle intersects another&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rectangle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can do most of this work by looking for line intersections (the 4 edges of one rectangle line-intersecting any of the four edges of another rectangle).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It turns out that &lt;i&gt;general &lt;/i&gt;line intersection, e.g. that used by 3D graphics, can be complicated.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For our purposes, we can use simpler algorithms.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: How do we document the design rules that we use to determine simple rectangle intersection?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A1: We document our design decisions using layers of diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagrams can be compiled to executable code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagrams can act as executable comments.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A2: Some of our design rules look like standard type checks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Other design rules usually don't find their way into type systems and/or are hidden by the details of the type rules.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An example of this kind of design rule is the fact that we treat &lt;i&gt;only&lt;/i&gt; rectangles the have vertical or horizontal edges (i.e. no rotation), to make our checks less onerous and more efficient.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We clearly show such rules in the diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;There is nothing new here.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Our design rules &lt;/i&gt;could&lt;i&gt; be encoded in a type system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I argue that the diagrams show our design decisions more clearly, in several layers, without losing any of the finer details.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;main - Top Level&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main.png&quot; width=&quot;300px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 2 Top Level - main&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;check&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-check.png&quot; width=&quot;400px&quot; height=&quot;62px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;Fig. 3 check&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;A smaller than B&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-A smaller than B.png&quot; width=&quot;300px&quot; height=&quot;108px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 4 A smaller than B&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;A intersects B&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-A intersects B.png&quot; width=&quot;300px&quot; height=&quot;174px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 5 A intersects B&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;intersects vertically&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-intersects vertically.png&quot; width=&quot;300px&quot; height=&quot;375px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 6 intersects vertically&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Note: I use diagrams as part of the name of the rectangles.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagrams highlight the intended matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in the Component called &quot;fig e&quot;, matches for the left edge of the smaller rectangle intersecting the top edge of the larger rectangle.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;intersect horizontally&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-intersects horizontally.png&quot; width=&quot;300px&quot; height=&quot;402px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 7&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;intersects horizontally&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig a&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig a.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 8 fig a&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig b&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fib b.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 9 fig b&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig c&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig c.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 10 fig c&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig d&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig d.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 11 fig d&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig e&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig e.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 12 fig e&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig f&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig f.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 13 fig f&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig g&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig g.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 14 fig g&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;fig h&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-fig h.png&quot; width=&quot;300px&quot; height=&quot;177px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 15 fig h&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compiling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Let's begin by compiling the &quot;main&quot; component.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We see that main has rectangles within rectangles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've used colour and shape to emphasize some concepts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Component called &quot;main&quot; consists of 3 levels (0-2), plus the main level.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each Level can be treated as a compilation unit. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss the levels below.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Overview&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;main&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main1.png&quot; width=&quot;200px&quot; height=&quot;120px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 16 main top level&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We compile this level by subdividing it…&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Level 0&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 0.png&quot; width=&quot;300px&quot; height=&quot;102px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 17 main Level 0&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Level 0 is the &quot;top level&quot;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Here we see 2 input ports —&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;named (R1) and (R2) respectively.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The input ports are coloured green.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We see 2 output ports — named (!) and (#) respectively.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The output ports are not coloured green.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The are coloured yellow and red.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Level 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 1.png&quot; width=&quot;300px&quot; height=&quot;180px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 18 main Level 1&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At Level 1, we see 1 rectangle.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rectangle is named [#] and is coloured red.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;By convention, we consider this rectangle to be a Software Component, denoted as [#] in text.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The rectangle has 2 inputs port and 2 output ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These ports are internal ports and are square or circular in shape.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The output port called (*#) has a shadow.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This means that it implicitly connects to &lt;i&gt;all &lt;/i&gt;output ports named (*#) at Level 2.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We see that the internal ports are explicitly connected to the external ports using lines (arrows).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Level 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 2.png&quot; width=&quot;200px&quot; height=&quot;120px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 19 main Level 2&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At Level 2, we see 3 inner components, with kinds [check], [check] and [#], resp.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Because there are two components with the same kind, but different (x,y) coordinates, we (the compiler, the IDE) invent unique names for them. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The 3 components are called [1], [2], and [#].&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The first 2 components, [1] and [2] have 1 input port (R) and two output ports, (#) and (BB) each.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The 3&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;rd&lt;/sup&gt;&lt;/span&gt; component, has 2 inputs ports, (A) and (B) and 2 output ports (!) and (#).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We're going to proceed in very small, distinct, steps.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the following discussion of signatures, we will ignore the implementations (the stuff inside of the boxes).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature for Level 0&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level .png&quot; width=&quot;300px&quot; height=&quot;102px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 17 main Level 0&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Level 0 is the &quot;top level&quot;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The signature for Level 0 is&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;[main] &amp;lt; (R1) (R2) &amp;gt; (!) (#)&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;{name, inputs, outputs}. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Component names are enclosed in brackets.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Port names are enclosed in parentheses.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature for Level 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 3.png&quot; width=&quot;300px&quot; height=&quot;180px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 18 main Level 1&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The signature for Level 1 is&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;[#] &amp;lt; (R1) (R2) &amp;gt; (!) (*#)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature for Level 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 4.png&quot; width=&quot;200px&quot; height=&quot;120px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 19 main Level 2&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The signature for Level 2 is&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;[#] &amp;lt; (A) (B) &amp;gt; (*!) (*#)&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At the moment, we ignore the signatures for all of the other levels.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We deal with only the signature&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;of the Level 2 box — the red box inside the red box on this diagram.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The outer-most red box also contains 2 other components (white) which we will ignore in this part of the discussion. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;(The inner boxes are parts of the &lt;i&gt;implementation, &lt;/i&gt;not the &lt;i&gt;signature&lt;/i&gt;).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The &lt;i&gt;implementation&lt;/i&gt; deals with &quot;what's inside&quot; of each layer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We implement connections between components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each component implementation contains:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;a list of child components&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;connections between children.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(Note that a component can have connections from a component's own input ports directly to its own output ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This edge-case is handled here, in the implementations).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Here, we deal with &lt;i&gt;implementations&lt;/i&gt; only at the diagram SCN level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components might, also, be implemented as text in other languages, like Python, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Those implementations are not described here and vector, via &lt;i&gt;foreign definitions&lt;/i&gt;, to the actual implementations in other languages.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Level 0&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 0 Implementation.png&quot; width=&quot;200px&quot; height=&quot;120px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 20 main Level 0 Implementation&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At this level, there are 2 input ports, 2 output ports and one component.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The implementation at this level is a signature+implementation:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[main] &amp;lt; (R1) (R2) &amp;gt; (!) (#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[#] &lt;i&gt;&amp;lt; &lt;/i&gt;(R1) (R2) &amp;gt; (!) (*#) { … }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;..(R1) -&amp;gt; [#].(R1)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;..(R2) -&amp;gt; [#].(R2)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[#].(!) -&amp;gt; ..(!)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[#].(*#) -&amp;gt; ..(!)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;which contains two lists (denoted by brackets)&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;a list of children components (described as signatures, with or without implementations)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;a list of connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Components use [] notation, while Ports use () notation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;The result is ugly from a human-readable perspective, but, we want machine-readability — uniformity is the goal, not human-readability.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In this example, there is one child component called&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;span class=&quot;s5&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; [#].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It has 2 input ports and 2 output ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All ports belonging to the child are &lt;i&gt;internal&lt;/i&gt;, wheres the ports belonging to the top-level are all &lt;i&gt;external.&lt;/i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The names of the internal ports overlaps with the names of the external ports — port namespaces belong to the components and must be fully qualified.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Level 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 1 Implementation.png&quot; width=&quot;200px&quot; height=&quot;152px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 21 main Level 1 Implementation&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At this level, we write down the signature of Level 1 plus &quot;what's inside&quot; of level 1.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The implementation consists of 3 child rectangles with corresponding signatures, plus a list of connections.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We write this, in text, as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[#] &amp;lt; (R1) (R2) &amp;gt; (*!) (*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[check] &amp;lt; (R) &amp;gt; (BB) (*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[check] &amp;lt; (R) &amp;gt; (BB) (*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[#] &amp;lt; (A) (B) &amp;gt; (!) (*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;.(R1) -&amp;gt; [1].(R)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[1].(BB) -&amp;gt; [#].(A)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[1].(*#) -&amp;gt; ..(*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;.(R1) -&amp;gt; [2].(R)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[2].(BB) -&amp;gt; [#].(A)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[2].(*#) -&amp;gt; ..(*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[#].(*!) -&amp;gt; ..(!)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[#].(*#) -&amp;gt; ..(*#)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Here, the system has given unique &quot;names&quot; to the two instances of [check].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The names are [1] and [2].&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Level 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-43-52-Images/intersection-main Level 2 Implementation.png&quot; width=&quot;200px&quot; height=&quot;231px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 19 main Level 2&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At Level 2, we see 2 inner components, with kinds [A smaller than B], and [A intersects B], resp.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;[#] &amp;lt; (A) (B) &amp;gt; (*!) (*#)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[A smaller than B] &amp;lt; (A) (B) &amp;gt; (*#) { foreign: &quot;aSmallerThanB&quot; }&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[A intersects B] &amp;lt; (A) (B) &amp;gt; (*!) (*#) { foreign: &quot;aIntersectsB&quot; }&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;.(A) -&amp;gt; [1].(A), [2].(A)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;.(B) -&amp;gt; [1].(B), [2].(B)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[1].(*#) -&amp;gt; ..(*#)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[2].(*#) -&amp;gt; ..(*#)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[2].(*!) -&amp;gt; ..(*!)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above says Level 2 contains 2 components [A smaller than B] and [A intersects B].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The components are, also, called [1] and [2], resp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Component [1] has 2 inputs (A) and (B) and one output (*#).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Component [2] has 2 inputs (A) and (B) and two outputs (*!) and (*#) resp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Level 2's Port A is connected to [1]'s Port A and to [2]'s Port A.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Level 2's Port B is connected to [1]'s Port B and to [2]'s Port B.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[A smaller than B] and [A intersects B] have implementations that are &quot;foreign&quot;, i.e. defined in some other language with the given names (names are the strings).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We could have left the { foreign : … } declarations off.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Component Loader (aka the runtime) loads components — if a component has no implementation at the point of final loading, it is assumed to be foreign.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Q: what are the default rules for name-mangling?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Should we delete whitespace, or convert whitespace characters to underscores &quot;_&quot; or, ???.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At this moment, I don't have an answer — probably trial and error will be needed.&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each of the components &lt;i&gt;could&lt;/i&gt; have been defined in separate files (along with implementations, if any).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Component Loader checks signatures for compatibility and associates implementations (if any) with each Component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Signatures can be declared multiple times, but only one implementation is allowed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DRY — Don't Repeat Yourself capabilities are not needed, since the diagram compiler can insert and repeat implementations as needed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If a human-writable/readable notation is required, then DRY could be handled by having a special symbol type that denotes &quot;same as&quot; relationships to other symbols.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, I toyed with using ^xyz to mean &quot;same as xyz&quot; — which would apply to component names and to port names ; I discarded this notation, since I expect to automatically generate code from diagrams and don't expect to manually write in this notation (other than during bootstrap of the system ; if bootstrapping becomes involved, I might resurrect the ^ notation).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compilation-1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Putting it all together, we get …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;See &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/03/Software-Components-101.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/05/03/Software-Components-101.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt; and follow-ons for details&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Loader&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;The Loader doesn't declare that any component is foreign, until &quot;the last minute&quot;, just before the system is executed.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The Loader incrementally type-checks the signatures and builds a &quot;soup&quot; of valid components and implementations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When a program is executed, it uses the latest versions of implementations for each component.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Versioning&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is no need to version components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Versioning&quot; can be implemented by specifying components explicitly in the enclosing layers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Once a component is deemed to be &quot;working&quot; (&quot;useful&quot;), then no changes are made to that component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Versions of similar components create completely different components, with different names.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components are never versioned, but simply replaced by newer components in newer diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Old diagrams continue to refer to the set of Components that &quot;worked&quot; when the old diagrams were created.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;New diagrams refer to new Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(New diagrams can refer, forever, to older Components, too).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is no attempt to replace components in-situ.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When a component is upgraded, it is referred-to only by newer diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Inter-component &quot;type checking&quot; is deferred until &quot;the last minute&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Loader checks to see that all components exist (and are type-correct) before running an app.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tidbits - Software Components By Example&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How: Subject vs. Object&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;relation(Subject, Object)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Subject == about what?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Object == attribute of Subject under the given relation&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;x(id97,5)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;means id97 has an attribute x with a value of 5&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use the convention that Subject is always &quot;bigger&quot; than Object.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Subject encloses Object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;1&lt;span class=&quot;s6&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt; thoughts - what can I do, what can I query?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This train of thinking led to aimless experimentation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Next thoughts — what do I need?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These thoughts led to concrete requirements for queries…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Which Components Are Defined?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Goal: We want a list of all components that have been defined.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG query&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;component(C,nil).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG Rule:&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;allDefined(All) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;setof(Defined,component(Defined,nil),All).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Usage:&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&amp;gt; swipl&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- consult(pl).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- consult(queries).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allDefined(All).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example:&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- consult(queries).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allDefined(All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;main&quot;, &quot;main #&quot;, &quot;main # #&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;All Components?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG query:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;isComponent(C) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;component(C,nil).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;isComponent(C) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;contained(C,_).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This means: if component(C,nil), then return C, else if contained(C,_), then return C.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Putting it all together, to get a list of unique components (defined or undefined):&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;allComponents(Set) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;setof(C,isComponent(C),Set).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;example:&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allComponents(S).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = [&quot;A intersects B&quot;, &quot;A smaller than B&quot;, &quot;check&quot;, &quot;main&quot;, &quot;main #&quot;, &quot;main # #&quot;].&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Which Components Are Used But Not Defined?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components that are undefined are ones which are contained, but not declared (with the component()&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;relation).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;undefined(C) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;contained(C,_),&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;\+ component(C,nil).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allUndefined(List).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;List = [&quot;A intersects B&quot;, &quot;A smaller than B&quot;, &quot;check&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;On the full factbase:&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allUndefined(All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;area&quot;, &quot;bottom&quot;, &quot;bounding box&quot;, &quot;fig f&quot;, &quot;is a rectangle&quot;, &quot;is not a point&quot;, &quot;left&quot;, &quot;less&quot;, &quot;line A intersects line B&quot;|...].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The SWIPL REPL elides lists that are too long.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using write() causes the complete result to be displayed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(One would expect that there is an option, somewhere to set the output line length in the REPL, but I haven't found it, and it is not important enough — this is but a transient need).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allUndefined(All),write(user_output,All),nl.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;[area,bottom,bounding box,fig f,is a rectangle,is not a point,left,less,line A intersects line B,make line,only vertical and horizontal lines,perfect rectangle,right,top]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;area&quot;, &quot;bottom&quot;, &quot;bounding box&quot;, &quot;fig f&quot;, &quot;is a rectangle&quot;, &quot;is not a point&quot;, &quot;left&quot;, &quot;less&quot;, &quot;line A intersects line B&quot;|...].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above output shows &quot;fig f&quot; as being undefined.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I did not intend to leave &quot;fig f&quot; undefined — I need to check the input file.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: Yes, &quot;fig f&quot; was left out of instersects.components.dasl.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Copy/paste fixed the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I &quot;halt.&quot; out of swipl, re-run './run.bash' (to regenerate fb.pl) and re-enter swipl :&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- consult(queries).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allUndefined(All),write(user_output,All),nl.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;[area,bottom,bounding box,is a rectangle,is not a point,left,less,line A intersects line B,make line,only vertical and horizontal lines,perfect rectangle,right,top]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;area&quot;, &quot;bottom&quot;, &quot;bounding box&quot;, &quot;is a rectangle&quot;, &quot;is not a point&quot;, &quot;left&quot;, &quot;less&quot;, &quot;line A intersects line B&quot;, &quot;make line&quot;|...].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, &quot;fig f&quot; is not in the undefined list. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Do the rest of the undefined Components look OK?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yes, there are 14 undefined Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of them look trivial to build (the heavy lifting was done in creating the diagram, the undefined Components &lt;i&gt;should&lt;/i&gt; be trivial).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Missing Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Design Rule check — formerly known as a &lt;i&gt;type check&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Look for all components that have no signatures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Type checking is not ignored — type checking is made explicit, i.e. the Architect/Engineer must supply the design rule check.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;drcMissingSig(C) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;component(C,nil),&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;\+ signature(C,_).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;drcMissingSig(C) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;contained(C,_),&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;\+ signature(C,_).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;drcAllMissingSig(All) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;setof(C,dcMissingSig(C),All).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- dcAllMissingSig(All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;area&quot;, &quot;bottom&quot;, &quot;bounding box&quot;, &quot;intersects horizontally any&quot;, &quot;intersects vertically any&quot;, &quot;is a rectangle&quot;, &quot;is not a point&quot;, &quot;left&quot;, &quot;less&quot;|...].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In general, it appears that I've not declared signatures for all of the undefined (foreign) components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After adding signatures, and re-running, I get&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- drcAllMissingSig(All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;b&gt;false.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Exactly One Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If we ask for signatures for a specific part, we sometimes get more than one signature.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- sig(&quot;main # #&quot;,S).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = &quot;&amp;lt; (A)(B) &amp;gt; (*!)(*#)&quot; &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = &quot;&amp;lt; (A)(B) &amp;gt; (*!)(*#)&quot;.&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s7&quot;&gt;Sig()&lt;/span&gt; is defined as a rule with 2 alternatives.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG backtracks through &lt;i&gt;all&lt;/i&gt; alternatives. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this particular case, &lt;span class=&quot;s7&quot;&gt;&quot;main # #&quot;&lt;/span&gt; is defined as a component&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;component(&quot;main # #&quot;, nil).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and, &lt;span class=&quot;s7&quot;&gt;&quot;main # #&quot;&lt;/span&gt; appears in a &lt;span class=&quot;s7&quot;&gt;contained&lt;/span&gt; relationship.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG will backtrack, using the &lt;span class=&quot;s7&quot;&gt;sig&lt;/span&gt; rule as we defined it, and show us a signature for the &lt;span class=&quot;s7&quot;&gt;component&lt;/span&gt; case as well as a signature for the &lt;span class=&quot;s7&quot;&gt;contained&lt;/span&gt; case.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The rule could be rewritten, or it could be written to use the &lt;span class=&quot;s7&quot;&gt;cut&lt;/span&gt; (&lt;span class=&quot;s7&quot;&gt;!&lt;/span&gt;) operator or we can just use &lt;span class=&quot;s7&quot;&gt;setof&lt;/span&gt; to return only the unique values.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, we don't care about efficiency, so we'll take the easiest path — by using the &lt;span class=&quot;s7&quot;&gt;setof&lt;/span&gt; operator.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s7&quot;&gt;Cut&lt;/span&gt; would make the search more efficient (the search would stop after the first successful match), but, we leave that concern to Efficiency Engineers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The goal would be for Engineers to hack on the code to make it more efficient, but to leave the original architecture intact, and, &lt;i&gt;always&lt;/i&gt; generate the production version from the architectural version.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[How?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Using automation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I think that Paul Bennett shows how to do this in his book &quot;Framing Software Reuse&quot;,&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; or, by using macros (see M4, awk, etc.)].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Modifying the original architecture effaces history and provinence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe &lt;span class=&quot;s7&quot;&gt;git&lt;/span&gt; can be of help here, too.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;More Than One Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Some Components have more than one signature:&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;drcMoreThanOneSig(C,Signatures) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;usig(C,Signatures),&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;length(Signatures,Len),&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Len &amp;gt; 1.&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- drcMoreThanOneSig(C,S).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;C = &quot;intersects horizontally Any&quot;,&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = [&quot;&amp;lt; ()() &amp;gt; (sb_)(so_)&quot;, &quot;&amp;lt; (BB1)(BB2) &amp;gt; (sb_)(st_)(so_)&quot;] &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;C = &quot;intersects vertically Any&quot;,&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = [&quot;&amp;lt; ()() &amp;gt; (sb_)(so_)&quot;, &quot;&amp;lt; (BB1)(BB2) &amp;gt; (sb_)(st_)(so_)&quot;] &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;b&gt;false.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(We have already weeded out Components that have 0 signatures, using Missing Signatures)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This check shows us that &lt;span class=&quot;s7&quot;&gt;&quot;intersects horizontally Any&quot;&lt;/span&gt; and &lt;span class=&quot;s7&quot;&gt;&quot;intersects vertically Any&quot;&lt;/span&gt; have two signatures each.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They should have exactly one signature each.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need to go back to the files to check why this is the case.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: I added incompatible signatures when correcting Missing Signatures.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, I've been learning as I go, and, it turns out that my original signatures were incorrect.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Type Checking Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Note that we have broken type checking down into two sub-tasks:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;signature-to-signature checking&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;implementation vs. signature checking.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Using normalization, (1) becomes a simple string compare.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every signature is guaranteed to be of the&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;same form, so a simple comparison of signatures is enough to alert us to problems.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We'll deal with sub-task (2) later.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Contains&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What Components does &quot;main&quot; contain?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Single query:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- contained(C,&quot;main&quot;).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;C = &quot;main #&quot;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All:&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;allContained(Parent,All) :-&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;setof(C,contained(C,Parent),All).&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allContained(&quot;main&quot;,All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;main #&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Digging down into &quot;main&quot;…:&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allContained(&quot;main #&quot;,All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;check&quot;, &quot;main # #&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allContained(&quot;main # #&quot;,All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;A intersects B&quot;, &quot;A smaller than B&quot;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goals&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;stand-alone compilation of each diagram&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;implement all foreign functions&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;do I have enough info to begin implementing?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;what language? what languages?&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;2 languages at once, to keep me honest?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rough-in all parts&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compiling Main Manually&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Let's compile the top-most diagram.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;main - Top Level&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What do we need to know?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Name Mangling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;3) name mangling&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We've included spaces (and other special characters) in the names of Components at the architectural level. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most languages do not allow such characters in names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need to adopt a convention on how to re-name architectural components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ideally, the re-naming should be done by automation (e.g. awk, sed, regex, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all spaces are replaced by underscores &quot;_&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all exclamation points (!) are replaced by &quot;_b_&quot; (exclamation points are often abbreviated to&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;bang&quot;s).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all octothorpes (#) are replaced by underscores &quot;o_&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all tildes (~) are replaced by underscores &quot;t_&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all (*!) are replaced by underscores &quot;sb_&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all (*#) are replaced by underscores &quot;so_&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let's say that all (*~) are replaced by underscores &quot;st_&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote an &lt;i&gt;awk&lt;/i&gt; script to mangle names as above, and inserted the script in run.bash.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;gsub(/\*!/,&quot;sb_&quot;,$0);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;gsub(/\*~/,&quot;st_&quot;,$0);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;gsub(/\*#/,&quot;so_&quot;,$0);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;gsub(/!/,&quot;b_&quot;,$0);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;gsub(/~/,&quot;t_&quot;,$0);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;gsub(/#/,&quot;o_&quot;,$0);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;print $0&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(Name mangling could have been done in many other languages, my choice of awk is not special.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Awk, though, pre-existed many of the other languages).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components of Main&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What Components does &quot;main&quot; contain (recursively)?:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allContained(&quot;main&quot;,All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;main_o_&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allContained(&quot;main_o_&quot;,All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;check&quot;, &quot;main_o__o_&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- allContained(&quot;main_o__o_&quot;,All).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;All = [&quot;A_intersects_B&quot;, &quot;A_smaller_than_B&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What are the signatures for &quot;main&quot; and all of its children?:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- usig(&quot;main&quot;,S).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = [&quot;&amp;lt; (R1)(R2) &amp;gt; (!)(#)&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- usig(&quot;main #&quot;,S).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = [&quot;&amp;lt; (R1)(R2) &amp;gt; (!)(*#)&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?- usig(&quot;main # #&quot;,S).&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;S = [&quot;&amp;lt; (A)(B) &amp;gt; (*!)(*#)&quot;].&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s5&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s5&quot;&gt; &lt;/span&gt;I have switched, since writing this, to using circles to denote external ports (circles are explicit in SVG, whereas bullets are formed by polylines, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Bullets can be parsed, but circles require less work).&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s5&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s5&quot;&gt; &lt;/span&gt;I have switched, since writing this, to using stroke-width=3 instead of shadows.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Stroke-width is more easily handled by SVG.&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s5&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s5&quot;&gt; &lt;/span&gt;A &lt;i&gt;trigger &lt;/i&gt;is like half of a boolean.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It carries no information beyond its own existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In hardware, these are called &quot;edge triggers&quot;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s5&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s5&quot;&gt; &lt;/span&gt;The red rounded rectangle.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It's name is # and we enclose component names in brackets, giving [#] as the component name.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s5&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s5&quot;&gt; &lt;/span&gt;See https://guitarvydas.github.io/2021/01/14/References.html&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 001</summary></entry><entry><title type="html">Software components 101 connection queries</title><link href="https://computingsimplicity.neocities.org/2021/05/04/Software-Components-101-Connection-Queries.html" rel="alternate" type="text/html" title="Software components 101 connection queries" /><published>2021-05-04T00:00:00-04:00</published><updated>2021-05-04T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/04/Software%20Components%20101%20-%20Connection%20Queries</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/04/Software-Components-101-Connection-Queries.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Connection Queries&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-04T23:29:22Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-04T23:29:22Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    span.s1 {font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;See &lt;a href=&quot;https://guitarvydas.github.io/2021/05/03/Software-Components-101.html&quot;&gt;https://guitarvydas.github.io/2021/05/03/Software-Components-101.html&lt;/a&gt; for an introduction to the examples shown below.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/basicdasl&quot;&gt;https://github.com/guitarvydas/basicdasl&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Query Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;conn(Component,[Sender|SendingPort],[ReceivingComponent|ReceivingPort]) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;connection(Component,ConnectionID),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;sender(ConnectionID,SenderPairID),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;pp(SenderPairID,SendingPort),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;pc(SenderPairID,Sender),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;receiver(ConnectionID,ReceiverPairID),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;pc(ReceiverPairID,ReceivingComponent),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;pp(ReceiverPairID,ReceivingPort).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;allReceivers(Component,S,R) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;setof(Receivers,conn(Component,S,Receivers),R).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;conn(Component,'--&amp;gt;'(S,RBag)):-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;allReceivers(Component, S, RBag).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;conn(':'(C,W)) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;conn(C,W).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;span class=&quot;s1&quot;&gt;conn/1&lt;/span&gt; query results in one connection (W) for a given component (C).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We repeat the query at the REPL (using semi-colon) to get all connections on a diagram.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;It is possible to write a query that returns all connections for all components, but the REPL version is sufficient for this essay.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each sender and each receiver is represented by a &lt;i&gt;pair&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each pair is given a unique ID and each pair consists of two parts &lt;i&gt;pc &lt;/i&gt;and &lt;i&gt;pp&lt;/i&gt;, pair-component and pair-port, resp.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Basic&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-29-22-Images/basic1-basic1.png&quot; width=&quot;150px&quot; height=&quot;99px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Basic Component&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dasl (basic1)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main] &amp;lt; (in) &amp;gt; (out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(in) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;main&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n0).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;main&quot;,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;main&quot;,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair1,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair2,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair1,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair2,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair2).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n0,pair1).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(q).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- conn(X).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;.&quot;|&quot;in&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nested&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-29-22-Images/basic1-basic2.png&quot; width=&quot;150px&quot; height=&quot;99px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 2 Nested Component&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dasl (basic2)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main] &amp;lt; (in) &amp;gt; (out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [subcomponent] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(in) -&amp;gt; [subcomponent].(A)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[subcomponent].(B) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent] &amp;lt; (A) &amp;gt; (B)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;main&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;subcomponent&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n0).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n3).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;main&quot;,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;main&quot;,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;subcomponent&quot;,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;main&quot;,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;subcomponent&quot;,&quot;B&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair1,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair2,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair4,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair5,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair1,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair2,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair4,&quot;B&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair5,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair2).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n3,pair5).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n0,pair1).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n3,pair4).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(q).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- conn(X).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;.&quot;|&quot;in&quot;]--&amp;gt;[[&quot;subcomponent&quot;|&quot;A&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;subcomponent&quot;|&quot;B&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nested Component Nested Inside a Nested Component-1&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-29-22-Images/basic1-basic3.png&quot; width=&quot;150px&quot; height=&quot;78px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 3 Component Nested in a Nested Component&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dasl (basic3)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main] &amp;lt; (in) &amp;gt; (out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [subcomponent] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(in) -&amp;gt; [subcomponent].(A)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[subcomponent].(B) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent] &amp;lt; (A) &amp;gt; (*#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [component X] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(A) -&amp;gt; [component X].(c)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[component X].(#) -&amp;gt; [.].(*#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X] &amp;lt; (c) &amp;gt; (#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;component_X&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;main&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;subcomponent&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n0).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n3).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;subcomponent&quot;,n6).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;subcomponent&quot;,n9).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;main&quot;,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;subcomponent&quot;,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;component_X&quot;,&quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;main&quot;,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;subcomponent&quot;,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;component_X&quot;,&quot;o_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;main&quot;,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;subcomponent&quot;,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair1,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair10,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair11,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair2,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair4,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair5,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair7,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair8,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair1,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair10,&quot;o_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair11,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair2,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair4,&quot;B&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair5,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair7,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair8,&quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair2).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n3,pair5).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n6,pair8).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n9,pair11).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n0,pair1).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n3,pair4).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n6,pair7).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n9,pair10).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(q).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- conn(X).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;.&quot;|&quot;in&quot;]--&amp;gt;[[&quot;subcomponent&quot;|&quot;A&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;subcomponent&quot;|&quot;so_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;subcomponent&quot;:([&quot;.&quot;|&quot;A&quot;]--&amp;gt;[[&quot;component_X&quot;|&quot;c&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;subcomponent&quot;:([&quot;component_X&quot;|&quot;o_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;so_&quot;]]).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Copied Component&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-29-22-Images/basic1-basic4.png&quot; width=&quot;150px&quot; height=&quot;133px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 4 Copied Component&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dasl (basic4)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main] &amp;lt; (in) &amp;gt; (out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [subcomponent] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(in) -&amp;gt; [1].(A),[2].(A)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[1].(*#) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[2].(*#) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent] &amp;lt; (A) &amp;gt; (*#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [component X] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(A) -&amp;gt; [component X].(c)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[component X].(#) -&amp;gt; [.].(*#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X] &amp;lt; (c) &amp;gt; (#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;component_X&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;main&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;subcomponent&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n0).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n4).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n7).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;subcomponent&quot;,n10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;subcomponent&quot;,n13).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;main&quot;,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;subcomponent&quot;,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;component_X&quot;,&quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;main&quot;,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;subcomponent&quot;,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;component_X&quot;,&quot;o_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;main&quot;,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;subcomponent&quot;,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair1,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair11,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair12,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair14,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair15,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair2,&quot;1&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair3,&quot;2&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair5,&quot;1&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair6,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair8,&quot;2&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair9,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair1,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair11,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair12,&quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair14,&quot;o_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair15,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair2,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair3,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair5,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair6,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair8,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair9,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair2).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair3).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n10,pair12).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n13,pair15).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n4,pair6).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n7,pair9).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n0,pair1).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n10,pair11).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n13,pair14).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n4,pair5).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n7,pair8).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(q).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- conn(X).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;.&quot;|&quot;in&quot;]--&amp;gt;[[&quot;1&quot;|&quot;A&quot;], [&quot;2&quot;|&quot;A&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;1&quot;|&quot;so_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;2&quot;|&quot;so_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;subcomponent&quot;:([&quot;.&quot;|&quot;A&quot;]--&amp;gt;[[&quot;component_X&quot;|&quot;c&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;subcomponent&quot;:([&quot;component_X&quot;|&quot;o_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;so_&quot;]]).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Squashed&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-05-04-23-29-22-Images/basic1-basic.png&quot; width=&quot;150px&quot; height=&quot;133px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 5 Copied Component&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Diagram Fig. 5 is the same as Fig. 4.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At this point, we are not changing the diagram, we will only be changing the .dasl file…&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dasl (basic5)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;=== signatures&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main] &amp;lt; (in) &amp;gt; (out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent] &amp;lt; (A) &amp;gt; (*#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X] &amp;lt; (c) &amp;gt; (#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== components&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [subcomponent] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[ [component X] ]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;=== connections&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(in) -&amp;gt; [1].(A),[2].(A)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[1].(*#) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[2].(*#) -&amp;gt; [.].(out)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[subcomponent]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[.].(A) -&amp;gt; [component X].(c)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[component X].(#) -&amp;gt; [.].(*#)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[component X]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this .dasl file, we squash all of the signatures / components / connections together, but, otherwise this .dasl file represents the same constructs as in Copied Component.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;component_X&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;main&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;component(&quot;subcomponent&quot;,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n0).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n4).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;main&quot;,n7).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;subcomponent&quot;,n10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;connection(&quot;subcomponent&quot;,n13).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;main&quot;,&quot;subcomponent&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;contains(&quot;subcomponent&quot;,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;component_X&quot;,&quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;main&quot;,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;inputPort(&quot;subcomponent&quot;,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;component_X&quot;,&quot;o_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;main&quot;,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;outputPort(&quot;subcomponent&quot;,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair1,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair11,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair12,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair14,&quot;component_X&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair15,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair2,&quot;1&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair3,&quot;2&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair5,&quot;1&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair6,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair8,&quot;2&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pc(pair9,&quot;.&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair1,&quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair11,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair12,&quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair14,&quot;o_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair15,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair2,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair3,&quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair5,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair6,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair8,&quot;so_&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;pp(pair9,&quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair2).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n0,pair3).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n10,pair12).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n13,pair15).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n4,pair6).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;receiver(n7,pair9).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n0,pair1).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n10,pair11).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n13,pair14).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n4,pair5).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;sender(n7,pair8).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- consult(q).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;true.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?- conn(X).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;.&quot;|&quot;in&quot;]--&amp;gt;[[&quot;1&quot;|&quot;A&quot;], [&quot;2&quot;|&quot;A&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;1&quot;|&quot;so_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;main&quot;:([&quot;2&quot;|&quot;so_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;out&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;subcomponent&quot;:([&quot;.&quot;|&quot;A&quot;]--&amp;gt;[[&quot;component_X&quot;|&quot;c&quot;]]) &lt;b&gt;;&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;X = &quot;subcomponent&quot;:([&quot;component_X&quot;|&quot;o_&quot;]--&amp;gt;[[&quot;.&quot;|&quot;so_&quot;]]).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;?-&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The queries return the same results as in Copied Component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We have changed nothing, except for the formatting (squashing) of the .dasl file.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Connection Queries</summary></entry><entry><title type="html">Software components 101</title><link href="https://computingsimplicity.neocities.org/2021/05/03/Software-Components-101.html" rel="alternate" type="text/html" title="Software components 101" /><published>2021-05-03T00:00:00-04:00</published><updated>2021-05-03T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/03/Software%20Components%20101</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/03/Software-Components-101.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-03T18:30:43Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-03T18:30:43Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {text-decoration: underline}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Components 101&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This essay introduces some of the concepts of Software Components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A full discussion of Software Components is fractal and recursive in nature.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This essay is an introduction and I choose to skip some of the details.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The key concept is that Components are &lt;i&gt;relative &lt;/i&gt;to one another and are &lt;i&gt;asynchronous&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These concepts are quite different from those of most modern programming languages, but the concepts are subtle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I intend to draw components in SVG and I intend to show&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; how to use diagrams, and SVG, as syntax (instead of characters).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Level&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-03-18-30-43-Images/basic1-basic1.png&quot; width=&quot;150px&quot; height=&quot;99px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Basic Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 shows a basic software component diagram.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This diagram represents the top level of a software Component.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The component's name is &quot;main&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Component has one Input Port — &quot;in&quot; — represented by the green circle (containing the text &quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Component has one Output Port — &quot;out&quot; — represented by the yellow circle (containing the text &quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Port &quot;in&quot; is connected to the Port &quot;out&quot; by a line representing the flow of Events from &quot;in&quot; to &quot;out&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Most lines begin at a green input and end at a yellow output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we used an arrow, instead of a line, the arrow would point at the yellow output port (the direction of flow).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will see that it is also possible to connect a yellow output to another yellow output and a green input to another green input, later.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We write the name of the Component as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;the input port as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;(in)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;and the output port as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;(out).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I.E. Component names are written in brackets, Port names are written in parentheses.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nested&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-03-18-30-43-Images/basic1-basic2.png&quot; width=&quot;150px&quot; height=&quot;99px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 shows a component, called &quot;subcomponent&quot; nested inside the component called &quot;main&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Inner input ports are green rectangles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Inner output ports are yellow rectangles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;External ports are circles, inner ports are rectangles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Input Port &quot;in&quot; is connected to the inner Input Port &quot;A&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The inner Output Port &quot;B&quot; is connected to the External Output Port &quot;out&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;This diagram contains two components and a total of two connections.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nested Component in a Nested Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-03-18-30-43-Images/basic1-basic3.png&quot; width=&quot;150px&quot; height=&quot;78px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 Component Nested in a Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This diagram shows 3 components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Component X&quot; is inside component &quot;subcomponent&quot; and component &quot;subcomponent&quot; is, itself, inside the Component &quot;main&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The component &quot;subcomponent&quot; has an output port called &quot;#&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Output Port has a shadow&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The shadow means that the port is connected to all sub-ports with the same name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We write this Port name as (*#).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;We prefix the component name with *&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In this diagram, there are 3 Components and 4 connections.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;3 connections are explicit (shown as lines) and one connection is implicit ([component X].(#) connected to [subcomponent].(*#)).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Here, we introduce another syntactical point - names can include spaces and any characters except brackets, parentheses and dots.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example the name of the inner-inner component is [component X]. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Names are &lt;i&gt;relative&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the section Relative Naming below.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It is easier to think of the above diagram as being subdivided into several layers, eliding the inner details at each layer. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The topmost layer might be thought of as:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-03-18-30-43-Images/basic1-basic3 (0).png&quot; width=&quot;150px&quot; height=&quot;78px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Component Nested in a Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;whereas the inner layer might be thought of as:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-03-18-30-43-Images/basic1-basic3 (1).png&quot; width=&quot;150px&quot; height=&quot;77px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5 Component Nested in a Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The detail to note is the &lt;i&gt;self [.]&lt;/i&gt; is relative, not absolute.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hence, [.] refers to [subcomponent] or to [component X], depending on context.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Copied Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-03-18-30-43-Images/basic1-basic4.png&quot; width=&quot;150px&quot; height=&quot;133px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Copied Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 shows a simple COPY/PAST of [subcomponent].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Component [main] contains two clones of the component [subcomponent].&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Relative naming makes this possible and simple and easy.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite vs. Leaf Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can contain other components (e.g. &lt;i&gt;composition&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Such components are call &lt;i&gt;composite&lt;/i&gt; &lt;i&gt;components&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Composite Components, once invoked, run until all of their children have subsided.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components that do not contain other components, or are implemented in some other language (other than &lt;span class=&quot;s2&quot;&gt;dasl&lt;/span&gt;), are called &lt;i&gt;leaf components&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Leaf Components are like black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When they are invoked, they run to completion (one input event only).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We do not &quot;see&quot; — at the &lt;span class=&quot;s2&quot;&gt;dasl&lt;/span&gt; level — the inner workings of &lt;i&gt;Leaf Components.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are asynchronous.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components may only communicate by sending events to their output ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Event delivery is, conceptually, not implemented as CALL / RETURN.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Event delivery occurs in two phases,&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; see &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;It might help to think of closures with input queues and a distinguished routine, called the Dispatcher, that invokes closures that are ready.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This concept is not very different from processes and scheduling found in most operating systems, but it can be implemented in a more light-weight manner (there is no requirement for full preemption).&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run to Completion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components consume one input event at a time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components process each input event to completion before popping another input event from their input queues.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Note that components can be broken up into pieces which are coordinated by event arrival.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events invoke only one piece of a Component at a time and &quot;running to completion&quot; means that only one piece completes running.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ready / Busy&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax Details&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dot Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We write a component / port pair as&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[ … ] . ( … )&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I.E. the Component name is enclosed in brackets, the Port name is enclosed in parentheses and the &lt;i&gt;dot&lt;/i&gt; operator joins the two (much like the field operator in most textual OO languages).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Self Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;self&lt;/i&gt; Component has a special name &quot;.&quot; and is written as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[.]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Reference to a Port of a &lt;i&gt;self &lt;/i&gt;Component looks like&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[.].(A)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;We want machine readability first, human readability second.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The important point is that Components and Ports have a different syntax which is always the same.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The namespace of Input Ports can overlap with the namespace of Output Ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Syntax is easy to change, if you don't like the above&lt;/i&gt;.]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Green vs. Yellow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Green is defined as any colour where the R component is &amp;lt;#80 and the G component is &amp;gt;= #80.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yellow is defined as any colour where the R component is &amp;gt;= #80 and the G component is &amp;gt;= #80.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relative Naming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Component names are constructed in a relative manner, by prefixing each component name with its parent component, followed by a space followed by the Component's name.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, we would refer to the inner-inner Component of Nested Component in a Nested Component, as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[main subcomponent component X].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This convention does not apply to Port names, since Port names are always internally distinguished by the Component that they belong to, e.g. the Port (c) in Nested Component in a Nested Component is written as:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[main subcomponent component X].(c)&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Kinds vs. Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What we have been calling Component &lt;i&gt;names&lt;/i&gt; are actually Component &lt;i&gt;kinds&lt;/i&gt; — much like their type or class.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In most cases, there is only one Component of a given kind on a diagram&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the cases where there is more than one Component of a given kind, the components are written as digits, starting at 1, in the order of declaration of the Components (component declarations will be discussed elsewhere).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in Copied Component, the [main] Component has two copies of [subcomponent].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They are written as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[1]…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[2]…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(Internally, the components are further distinguished by their (x,y) coordinates and are unique).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that &lt;span class=&quot;s2&quot;&gt;[subcomponent]&lt;/span&gt; has only one copy of &lt;span class=&quot;s2&quot;&gt;[component X]&lt;/span&gt; inside of it, so &lt;span class=&quot;s2&quot;&gt;[component X]&lt;/span&gt; is &lt;span class=&quot;s3&quot;&gt;not&lt;/span&gt; written in a qualified manner in the implementation of &lt;span class=&quot;s2&quot;&gt;[subcomponent]&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Hopefully this will become more clear with more examples.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We are using &lt;/i&gt;&lt;span class=&quot;s3&quot;&gt;&lt;i&gt;relative&lt;/i&gt;&lt;/span&gt;&lt;i&gt; naming, whereas most modern programming languages use &lt;/i&gt;&lt;span class=&quot;s3&quot;&gt;&lt;i&gt;absolute&lt;/i&gt;&lt;/span&gt;&lt;i&gt; naming.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All naming and namespacing is relative to the immediate parent Component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Another subtlety is that we are splitting each component up into 3 specifications — signature, children, connections — whereas most modern programming languages attempt to consolidate all code into flat, not relative, specifications&lt;/i&gt;]&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;In a following essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If one looks at SVG, it should become apparent how to use SVG as syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Instead of characters, I use a syntax composed of rects, circles, ellipses, lines and text. I call this DaS (Diagrams as Syntax).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;In fact, I will begin using a stroke-width of 3, which is more easily represented and recognized in SVG.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Notably, event receivers are not immediately executed once an event arrives.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is best to think of events as (1) being placed on input queues and (2) Component execution being coordinated by a Scheduler (separate from event delivery).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;If this seems anti-intuitive, note that diagrams represent Software Architecture, not Code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In practice, Architectures tend to have only one of each kind of thing on a diagram.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(If you are thinking of &quot;+&quot; Components, then you are thinking about Code, not Architecture).&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101</summary></entry><entry><title type="html">Subdividing problems</title><link href="https://computingsimplicity.neocities.org/2021/04/28/Subdividing-Problems.html" rel="alternate" type="text/html" title="Subdividing problems" /><published>2021-04-28T00:00:00-04:00</published><updated>2021-04-28T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/28/Subdividing%20Problems</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/28/Subdividing-Problems.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Dubdividing Problems&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;subdividingproblems&quot;&gt;Subdividing Problems&lt;/h1&gt;

&lt;p&gt;[&lt;em&gt;Do you have a heuristic when to use certain paradigms and when to avoid them?&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;Fractalize.&lt;/p&gt;

&lt;p&gt;FDD - Failure Driven Development.&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Break a problem down, break each part down into sub-parts. Repeat (recur).&lt;/p&gt;

&lt;p&gt;Choose a different paradigm for each sub-part. Choose based on the problem-at-hand.&lt;/p&gt;

&lt;p&gt;For example, input is mostly pattern matching &amp;#8212; parsing, PEG, S/SL.&lt;/p&gt;

&lt;p&gt;Output can be done with printf and JS back-tick strings. When I need tabular output, I use a spreadsheet to edit the final tables (I convert / normalize the data into .CSV files, to make the data more acceptable to spreadsheets).&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;N.B. I needed an editor to make the final output format for a project. Spreadsheets are good editors (for tabular data), but tend to lock you into a single paradigm (spreadsheet language). .CSV is a normalized format acceptable to most spreadsheets. If you convert your data to/from .CSV, you can use any editor (built into spreadsheets) you want. Export from the &amp;#8220;editor&amp;#8221; to CSV. We need a .CSV-like normal form for all data and programs (I suggest triples).&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;N.B. Talking about editors, I like to use Keynote as an editor &amp;#8212; it helps me organize my thoughts and to keep my text short. Keynote has the disadvantage in that it doesn&amp;#8217;t export well to normalized forms. Keynote does export to HTML, but includes a bunch of JS in the process.&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;Queries are exhaustive search. PROLOG has a nice syntax for crafting queries. PROLOG can import and export data in normal form (triples).&lt;/p&gt;

&lt;p&gt;Note that I am breaking programming down into two classes (at least): human readable syntax vs. machine readable syntax.&lt;/p&gt;

&lt;p&gt;/bin/sh was aimed at machine readability. After that, things like /bin/bash and /bin/zsh only danced around the elephant and didn&amp;#8217;t really bring any new advances in think-ability.&lt;/p&gt;

&lt;p&gt;In my mind, the next step for /bin/sh is to make it diagrammatic. Visual Shell. vsh. [&lt;em&gt;Experimental version at &lt;a href=&quot;https://github.com/guitarvydas/vsh&quot;&gt;https://github.com/guitarvydas/vsh&lt;/a&gt;&lt;/em&gt;]&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;https://guitarvydas.github.io/2021/04/23/Failure&amp;#8211;Driven&amp;#8211;Design.html &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Dubdividing Problems</summary></entry><entry><title type="html">Parsing vs fp pattern matching</title><link href="https://computingsimplicity.neocities.org/2021/04/28/Parsing-vs-FP-Pattern-Matching.html" rel="alternate" type="text/html" title="Parsing vs fp pattern matching" /><published>2021-04-28T00:00:00-04:00</published><updated>2021-04-28T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/28/Parsing%20vs%20FP%20Pattern%20Matching</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/28/Parsing-vs-FP-Pattern-Matching.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Parsing vs FP Pattern Matching&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-28T10:16:31Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-28T10:16:31Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Functions of Time Using FP&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss how parsers can be used to create functions of time (&lt;i&gt;f(t)&lt;/i&gt;) using FP components…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;String of Beads&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I think of a pipeline of parsers as a string of beads.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each &lt;i&gt;bead&lt;/i&gt; is a function, maybe programmed in an FP language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;ASTs and CSTs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;People have generalized the term AST — abstract syntax tree — to mean the result of a parse (usually a tree data structure, remembering that trees can be serialized into streams of tokens).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I subdivide parsing into two parts&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;what &lt;i&gt;can &lt;/i&gt;be parsed&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;what &lt;i&gt;was&lt;/i&gt; actually parsed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I use the term AST for (1).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Abstract Syntax Tree.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I use the term CST for (2).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concrete Syntax Tree.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;History vs. FP&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Likewise, a program can be subdivided into two parts:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;what &lt;i&gt;can&lt;/i&gt; the program accept and process?&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;what &lt;i&gt;did &lt;/i&gt;the program accept and process?&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;History is but a function of time — &lt;i&gt;f(t)&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In general, history is not reversible (as far as we know).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;But, pure FP (functional programming) expunges &lt;i&gt;f(t) &lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;from its notation, to appease its notation (and to allow transformations that would be impossible if &lt;i&gt;f(t)&lt;/i&gt; were allowed (that's where the onus to expunge side-effects comes from)).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;How, then, could history be expressed in FP???&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Parsers walk input streams (aka trees) driven by reality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parsers don't process abstractions (ASTs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parsers walk realities (CSTs). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;History is encoded in the backtrace of how a parser walked the CST.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The actual input causes the parser to walk a (crooked?) path through the AST.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The AST does not change, but the history of the walk is different with every different input.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each step &lt;i&gt;along&lt;/i&gt; the way can be expressed as an FP function. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Steps are FP, history is not FP&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Let us concoct a simple example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function f(x) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;if (x == 5) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;printf (&quot;5&quot;);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;printf (&quot;not 5&quot;);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is the final output of the above function?&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can't know what the final output is without supplying a value for the parameter, x.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The function is like an AST — it expresses all possible outcomes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When we supply a value for the parameter, x, then the function runs and produces one or the other outcome.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The run is &lt;i&gt;history&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The run is like a CST.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We can get a backtrace for the run.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(A CST is like a backtrace).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parsers — grammars in particular — give us a declarative way to talk about history.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that FP increasingly uses parser technology — pattern matching. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pattern matching taken to the limit, is parsing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parsing deals with history and, hence, with &lt;i&gt;f(t)&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Analogy&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Note that a &lt;i&gt;parsing engine&lt;/i&gt; is analogous to a PROLOG &lt;i&gt;rule engine&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Flags&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers have used &lt;i&gt;flags&lt;/i&gt; (mutable variables) for ages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We have discovered that &lt;i&gt;flags &lt;/i&gt;cause accidental complexity and lack-of-debuggability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parsers are engines that subsume the use of &lt;i&gt;flags&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Parsers give us a way to talk about flags in a declarative manner.]&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parsing vs. FP Pattern Matching&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Parsers are FP pattern matching taken to the limit.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP uses relational engines and pattern matching.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP &lt;i&gt;could&lt;/i&gt; use relational engines &lt;i&gt;and&lt;/i&gt; parsing engines.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Side-effects are &lt;i&gt;f(t)&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FP expunges side-effects.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FP expunges time from its notation.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;FP does not allow &lt;i&gt;f(t)&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;f(t) &lt;/i&gt;is History.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hence, FP expunges History.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;History must be recorded using some other notation.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Parsing vs FP Pattern Matching</summary></entry><entry><title type="html">Observation why relational programming works</title><link href="https://computingsimplicity.neocities.org/2021/04/28/Observation-Why-Relational-Programming-Works.html" rel="alternate" type="text/html" title="Observation why relational programming works" /><published>2021-04-28T00:00:00-04:00</published><updated>2021-04-28T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/28/Observation%20Why%20Relational%20Programming%20Works</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/28/Observation-Why-Relational-Programming-Works.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Observation Why Relational Programming Works&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;observation:whyrelationalprogrammingworks&quot;&gt;Observation: Why Relational Programming Works&lt;/h1&gt;

&lt;p&gt;Relational programming expresses &amp;#8220;code&amp;#8221; in a declarative manner.&lt;/p&gt;

&lt;p&gt;Relational programming divides &amp;#8220;coding&amp;#8221; into two main tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;relations (code)&lt;/li&gt;
&lt;li&gt;engine.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The relational engine is divorced from the &amp;#8220;code&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A programmer cannot express &amp;#8220;how&amp;#8221; to do something, the engine decides.&lt;/p&gt;

&lt;p&gt;This is the key &amp;#8212; divide a problem into sub-parts, remove all inter-dependencies between the parts.&lt;/p&gt;

&lt;p&gt;Other Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPUs hide the gory details of how various kinds of rust interact electrically. CPUs are opcode engines, programmers write code in HLLs, and these are divorced from the inner workings of the hardware.&lt;/li&gt;
&lt;li&gt;Peter Lee approached an otherwise hoary notation &amp;#8212; Denotational Semantics &amp;#8212; and managed to build practical compilers using D.S. by subdividing the notation into sub-notations.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Observation Why Relational Programming Works</summary></entry><entry><title type="html">Toolbox languages (2)</title><link href="https://computingsimplicity.neocities.org/2021/04/28/Toolbox-Languages-(2).html" rel="alternate" type="text/html" title="Toolbox languages (2)" /><published>2021-04-28T00:00:00-04:00</published><updated>2021-04-28T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/28/Toolbox%20Languages%20(2)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/28/Toolbox-Languages-(2).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Toolbox Languages (2)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-28T11:12:31Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-28T11:12:31Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 9.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Toolbox Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The thing I call &lt;i&gt;toolbox languages&lt;/i&gt; is a form of high-level assembler (!).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Toolbox languages strive for &lt;i&gt;machine&lt;/i&gt;-readability instead of &lt;i&gt;human&lt;/i&gt;-readability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Machine-readability comes from expunging edge-cases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Machine-&lt;i&gt;writability&lt;/i&gt; comes from expunging edge-cases, too.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to write code that writes code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to write comments that write code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relational Programming vs. Software Atoms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I think that Relational Programming is the &lt;i&gt;atom &lt;/i&gt;of the 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt; step in software design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are only 2 steps:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;read (gather, breathe-in)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;write (emit, output, breathe-out).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Relational programming is well-suited to step (1) but is not well-suited for step (2).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yes, it is &lt;i&gt;possible&lt;/i&gt; to perform step (2) using &lt;i&gt;only&lt;/i&gt; relational programming, but it is simpler to express step (2) in some other form, even &lt;i&gt;printf&lt;/i&gt; is better (!) at this.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I favour choosing the right paradigm for the job, instead of choosing one paradigm for all jobs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Toolbox Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Further discussion&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Toolbox Languages (2)</summary></entry></feed>