<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-04-20T14:33:05-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Git could do more</title><link href="https://computingsimplicity.neocities.org/2021/04/20/Git-Could-Do-More.html" rel="alternate" type="text/html" title="Git could do more" /><published>2021-04-20T00:00:00-04:00</published><updated>2021-04-20T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/20/Git%20Could%20Do%20More</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/20/Git-Could-Do-More.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Git Could Do More&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-20T14:32:38Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-20T14:32:38Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github, Git, Diff, etc.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I consider &quot;github&quot; to be a whole gamut of technologies based on &quot;diff&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;githhub
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;git
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;diff (a UNIX tool)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Github&quot; is a production version of &quot;diff&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;FYI, REGEX is a production version of The Dragon Book DFA's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Actually, regex goes even further back, but I regress).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Henry Spencer wrote regex.c (while working in the Biology building at UofT, IIRC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Kleene opened our eyes to REGEX principles.&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automated DRY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Github could use &quot;diff&quot; in a bigger way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Instead of diff'ing lines of code, it should diff layers of design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Which might be blocks of code).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Our PLs&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;are just glorified text editors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A lot of what we think about and build into PLs is DRY.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;RY&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; is what we want, but we waste brain power on DRY.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Machines could detect DRY for us.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And refactor the code/design/etc. for us automagically.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Github could include technology to figure out DRY.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Git-based Editors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Our editors could figure out repeated lumps of text and make a golden copy for us.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The editor could show repeated lumps of source in gray and automagically update the golden copy when we edit the gray parts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Henry Spencer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Henry_Spencer&quot;&gt;https://en.wikipedia.org/wiki/Henry_Spencer&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; PL means Programming Language&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; DRY means Don’t Repeat Yourself&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; &lt;span class=&quot;s1&quot;&gt;RY means Repeat Yourself&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Git Could Do More</summary></entry><entry><title type="html">Recursive design, iterative design by example (2)</title><link href="https://computingsimplicity.neocities.org/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html" rel="alternate" type="text/html" title="Recursive design, iterative design by example (2)" /><published>2021-04-20T00:00:00-04:00</published><updated>2021-04-20T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/20/Recursive%20Design,%20Iterative%20Design%20By%20Example%20(2)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Recursive Design, Iterative Design By Example (2)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-20T07:33:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-20T07:33:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 9.0px Palatino}
    span.s2 {text-decoration: underline}
    span.s3 {font: 11.0px Menlo}
    span.s4 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: lower-alpha}
    ol.ol2 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Part 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This is a follow-on to part 1 of &quot;Recursive Design, Iterative Design By Example&quot;.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Goal: transpile a file of ASON text to Lisp items.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sub-goal: instead of trying to implement ASON and Rebol, I start by converting ASON text into tokens.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will see, later,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;how to progress from there…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In general, the parser inputs a stream of text and outputs a stream of ASON tokens.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specifically, when emitting a stream of Lisp tokens, the ASON tokens will appear as&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Lisp atoms when there is a direct relationship between ASON and Lisp, e.g. strings, integers, floats, etc.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;or, Lisp function calls,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;e.g. (ason-array &lt;i&gt;items&lt;/i&gt;)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;e.g. (yymmdd &lt;i&gt;int int int&lt;/i&gt;)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;(see &quot;Lisp Emitter Sample&quot; and &lt;a href=&quot;https://github.com/guitarvydas/ason/blob/master/emitter-lisp.grasem&quot;&gt;https://github.com/guitarvydas/ason/blob/master/emitter-lisp.grasem&lt;/a&gt;).&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;I am trying to capture my design thoughts as they occur, kind of like a live-stream video.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is not a paper, nor a YouTube video nor a Twitch live-stream.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result is probably uneven - I will continue to experiment with various thought-capture methodologies.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Discovery&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Discovery / Observation; the 7&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; pass - called blocks - is unnecessary.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The block tokens [], {}, () simply emit&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;lisp function calls, e.g. &quot;(ason-array-block&quot;, &quot;(ason-object-block&quot; and &quot;(ason-expression-block&quot;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;end of call &quot;)&quot; (in all 3 cases)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The grammar does not need to parse compound blocks, since emitting Lisp lists (function calls) is sufficient.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp will read the emitted compound blocks into its internal (list) format.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Lisp REPL applies different semantics to lists than the Rebol REPL / compiler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will deal with interpretation of the stream later. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;For now, I just want to tokenize the input.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;ASON has many basic data types and I want to experiment with tokenizing them using PEG.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Restructuring Token Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar has become a tokenizer consisting of 2 layers:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;very basic tokens&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;string&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;delimiter&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;integer&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;namedMonth&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hex&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;ws&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;unknown&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;ident&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;compound tokens&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;pair&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;range&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;tuple&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;currency&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;yyyymmddhhmmsstz&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt; yyyymmddhhmmss&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;yyyymmdd&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;mmdd&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hhmmss&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;binaryBase64&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;email&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;url&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;path&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hypertextTag&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;getUnevalField&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;setfield&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;selectField&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;pathRefinement&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;literal&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;symbol&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;refinement&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;selector&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;getword&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;defineword&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;useword&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lbracket&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rbracket&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lbrace&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rbrace&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lpar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rpar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;float&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;eufloat&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;namedMonth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The 3&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;rd&lt;/sup&gt;&lt;/span&gt; layer is the emitter.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I built a generic emitter and tested it.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Then, I built a Lisp emitter and tested it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I RY'ed the generic emitter to create the lisp emitter.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp Emitter Sample&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The sample input code:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;{ year: 2021&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;tx: [&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;         &lt;/span&gt;[ jul-23 ??? -333.53 pppppp ]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is converted into the token stream:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D{ {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e! year&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I 2021&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e! tx&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D[ [&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D[ [&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;cP july 23&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;U&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D- -&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;bF 333 53&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e? pppppp&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D] ]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D] ]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D} }&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;which is then converted into Lisp code&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;((ason-object-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word year)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;2021&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word tx)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;(mmdd july 23)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;???&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;#\-&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;333.53&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;(use-word pppppp)))))&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Next Step&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I want to have &quot;define-word&quot; be a function of 2 arguments, e.g. the stream should be&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;((ason-object-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word year 2021)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word tx&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(mmdd july 23)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;???&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;#\-&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;333.53&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(use-word pppppp))))))&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This could be done in&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Lisp, or,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;the Grammar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I haven't decided, yet, how to do this.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Step (a) would need to change to grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp would simply read the list of tokens and consume tokens that are needed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Step (b) would require a change to the grammar, but would make the Lisp code simpler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This looks like a simple pattern match, which is the domain of the grammar/parser.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will start there.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, the tokenizer emits something like&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;((ason-object-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word year) 2021&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word tx)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(mmdd july 23)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;???&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;#\-&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;333.53&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(use-word pppppp))))))&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bug&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG allows one to write grammars that are &quot;forgiving&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am choosing to write grammars explicitly, to&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;make the explanations of what is going on more clear, and,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;to double-check the data in the pipeline (the grammar can be loosened up after most of the passes are working).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the moment, some of the passes are failing on parse errors, due to an extra blank character inserted into some of the tokens.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Unfortunately, the error is caused by an invisible character, which has made it harder to detect the nature of the failure.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It seems that the token&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;bF 333 53&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;has an extra space appended to it (bF is a floating point token containing the two integer parts of a float value).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I currently save the output of each pass in a temp file (&lt;span class=&quot;s3&quot;&gt;_temp[0-9]&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is, of course, inefficient, but helps me debug the current problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I see that &lt;span class=&quot;s3&quot;&gt;_temp3&lt;/span&gt; does not contain the extra space, but &lt;span class=&quot;s3&quot;&gt;_temp4&lt;/span&gt; does.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Looking at run.bash, I see that the pass &lt;span class=&quot;s3&quot;&gt;date.grasem&lt;/span&gt; inputs _temp3 and outputs &lt;span class=&quot;s3&quot;&gt;_temp4&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This pass needs to be examined more closely.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first step in debugging is to grab the grammar (only) from &lt;span class=&quot;s3&quot;&gt;date.grasem&lt;/span&gt; and the file &lt;span class=&quot;s3&quot;&gt;_temp3&lt;/span&gt; and put them into Ohm-editor&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, for a sanity check. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Debugging question #1&lt;/span&gt;: is the token being parsed correctly?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is immediately obvious that the token is being parsed by the rule &lt;span class=&quot;s3&quot;&gt;numericalToken&lt;/span&gt;, but with only one text field.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The definition of the rule probably allows spaces in the first text field — something I don't intend to allow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Indeed the rule says&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;numericalToken = ntag nsubtag whiteSpace text text? eol&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = whiteSpace *textChar+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textChar = ~eol any&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;TextChar&lt;/span&gt; accepts any character except newline.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I need to tighten this up to exclude whitespace.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Note to self: check if other passes use this same code snippet.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Fix it, if so.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Debugging question #2&lt;/span&gt;: does the code emission for rule numericalToken look OK?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(&lt;i&gt;A: Yes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe the extra space was a result of mis-parsing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Try the test, again.&lt;/i&gt;)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fixing that parse has made the problem go away.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Groups&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Design Upgrade / Change:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;While working on this, I see a simplification.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is not necessary to emit ASON blocks as separate tokens.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use &quot;G &lt;i&gt;ident&lt;/i&gt;&quot; to denote the beginning of a block.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;ident&lt;/i&gt; supplies information about the block type.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have &lt;i&gt;ason-arrays, ason-objects &lt;/i&gt;and &lt;i&gt;ason-expressions&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To this, I add &lt;i&gt;define-word.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;This addition makes it easier to parse &lt;i&gt;define-word&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The parser now emits:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;(asonArray nil …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(asonObject nil …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(asonExpression nil …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(define-word &lt;i&gt;name &lt;/i&gt;…)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;[see &lt;a href=&quot;https://github.com/guitarvydas/ason/blob/master/expr.grasem&quot;&gt;https://github.com/guitarvydas/ason/blob/master/expr.grasem&lt;/a&gt;]&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Negative Integer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I found that simple integers are not enough — not a surprise, but I didn't catch this requirement earlier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fixing this problem is simple — I need to add another pass.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The only tricky part of this problem is that several ASON types require dashes between integers (e.g. dates).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to leave the earlier parser passes alone (they are meant to be &lt;i&gt;isolated&lt;/i&gt;) and insert a new pass near the end of the pipeline.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[see &lt;a href=&quot;https://github.com/guitarvydas/ason/blob/master/negativenum.grasem&quot;&gt;https://github.com/guitarvydas/ason/blob/master/negativenum.grasem&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bug 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I added the line&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;balance : 1234.56&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;to the small test.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is causing me to flip-flop on what the correct solution is.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The grammar as-it-stands — expects no pairs after the list of transactions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The above simple addition violates this original assumption.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am learning something new about the problem.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The line causes a pair of tokens to be passed to the emitter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e! balance&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;bF 1234 56&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;At first, I thought that e! should be weeded out by the expr pass (which immediately precedes the emitter pass),&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Then, I thought that this sequence of tokens is legal.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Then, I thought that this sequence of tokens is illegal and should be weeded out by the expr pass before being passed to the emitter passes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I am going back-and-forth in understanding the details of this problem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This is &quot;nothing special&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I did not understand all of the details of the problem when I started.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The deeper understanding of the problem does not wreck my earlier design and code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Layering some of the details — and eliding details — has made it possible for me to see more nuance in the problem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;At first, I thought of setting variables occurring at the beginning of object blocks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This new addition shows that it is reasonable to have setting of variables occur.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Now that I see this, I wonder &quot;how could I have missed this?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Layering — and moving forward with the easy stuff — has revealed more nuance to me.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I've seen such revelations happen in work that took 2 years to build.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At the point that the revelation was made, the design had been calcified and the new revelation(s) could not be taking into account in the existing code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The idea of scripting and generating code, makes it easy to incorporate such new revelations into the code base.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Break Down of Bug 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The problem now becomes &quot;why didn't the expr pass capture and rewrite this line and its two tokens?&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Theories:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;the grammar did not catch the pair of tokens that form the defineWord sequence&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a blunder&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;something else.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Theory (a) might indicate that the rule &lt;span class=&quot;s3&quot;&gt;ident&lt;/span&gt; is picking off &lt;span class=&quot;s3&quot;&gt;tags&lt;/span&gt;, preventing rule &lt;span class=&quot;s3&quot;&gt;defineWord&lt;/span&gt; group from succeeding.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This leads to an examination of the rules &lt;span class=&quot;s3&quot;&gt;tag&lt;/span&gt; and &lt;span class=&quot;s3&quot;&gt;ident&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In anticipation of needing to tighten up &lt;span class=&quot;s3&quot;&gt;tag&lt;/span&gt; vs. &lt;span class=&quot;s3&quot;&gt;ident&lt;/span&gt; matching in all passes, I have split some of the code (from &lt;span class=&quot;s3&quot;&gt;expr&lt;/span&gt;) into a boilerplate.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I include this boilerplate into the &lt;span class=&quot;s3&quot;&gt;expr&lt;/span&gt; pass using the &lt;span class=&quot;s3&quot;&gt;m4&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; tool.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;First, I test the file split and the use of &lt;span class=&quot;s3&quot;&gt;m4&lt;/span&gt; to see that I get the same result (the result, at this point, is an error message).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Indeed — the two tokens are being parsed as two separate tokens and the defineWordGroup rule is not matching.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The rule defineWordToken is defined as&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;defineWordGroup = defineWordToken expr expr&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;whereas it should be&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;defineWordGroup = defineWordToken expr&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(There are one too many expr's in the rule).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layering Solutions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;One needs to roll the problem around in one's mind to fully understand it. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Some people &quot;see&quot; the details of the problem more rapidly than others, but, at some point this &quot;seeing&quot; is overwhelmed by masses of detail. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I theorize that this &lt;i&gt;always&lt;/i&gt; happens, but at different degrees of detail for different people.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;At some point, the details overwhelm one's ability to reason about a problem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The point of Recursive Design and FDD&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; is to create layers for details and to make it possible to reason about larger-and-larger problems, regardless of one's ability to cut through details at any level. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I may need more layers, whereas others may need fewer layers for the same problem. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The goal is to allow anyone to chunk a problem into layers and to address more interesting problems. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In the hands of those who require fewer layers, further chunking and layering should make it possible to address more-and-more interesting problems.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;https://ohmlang.github.io/editor/&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Same code found in stringsAndBinary.grasem and words.grasem.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;A standard UNIX® command-line tool.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Failure-Driven Design&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Recursive Design, Iterative Design By Example (2)</summary></entry><entry><title type="html">Scoping static vs dynamic</title><link href="https://computingsimplicity.neocities.org/2021/04/16/Scoping-Static-vs-Dynamic.html" rel="alternate" type="text/html" title="Scoping static vs dynamic" /><published>2021-04-16T00:00:00-04:00</published><updated>2021-04-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/16/Scoping%20Static%20vs%20Dynamic</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/16/Scoping-Static-vs-Dynamic.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Scoping Static vs Dynamic&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-16T23:58:00Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-16T23:58:00Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic Scoping&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic scoping — the name is looked up at &lt;i&gt;runtime&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-04-16-23-58-00-Images/scoping-Dynamic Scoping.png&quot; width=&quot;300px&quot; height=&quot;82px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Values are placed in stacks, with one value stack per name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Only the top-most value is visible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Scoping&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Static scoping — the compiler looks up the names and assigns absolute locations for them at &lt;i&gt;compile time&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;After compilation, the names are discarded.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In most languages, there are two places that variables can reside:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;global memory&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;stack.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-04-16-23-58-00-Images/scoping-Static Scoping.png&quot; width=&quot;300px&quot; height=&quot;264px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The compiler assigns an absolute index for each name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Names are stripped away after compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Scoping Static vs Dynamic</summary></entry><entry><title type="html">Recursive Design, Iterative Design By Example</title><link href="https://computingsimplicity.neocities.org/2021/04/12/Recursive-Iterative-Design-By-Example.html" rel="alternate" type="text/html" title="Recursive Design, Iterative Design By Example" /><published>2021-04-12T00:00:00-04:00</published><updated>2021-04-12T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/12/Recursive%20Iterative%20Design%20By%20Example</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/12/Recursive-Iterative-Design-By-Example.html">&lt;p&gt;Recursive Design, Iterative Design By Example&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-12-Recursive Iterative Design By Example/index.html&quot;&gt;Recursive Design Iterative Design&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Recursive Design, Iterative Design By Example</summary></entry><entry><title type="html">Glue Tool</title><link href="https://computingsimplicity.neocities.org/2021/04/11/Glue-Tool.html" rel="alternate" type="text/html" title="Glue Tool" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/Glue%20Tool</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/Glue-Tool.html">&lt;p&gt;Glue Tool&lt;/p&gt;

&lt;p&gt;A PEG for generating JS code for Ohm-JS (a PEG)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-11-Glue Tool/index.html&quot;&gt;Glue Tool&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Glue Tool</summary></entry><entry><title type="html">Various Playlists</title><link href="https://computingsimplicity.neocities.org/2021/04/11/Playlists.html" rel="alternate" type="text/html" title="Various Playlists" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/Playlists</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/Playlists.html">&lt;p&gt;Playlists&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PROLOG for Programmers&lt;/li&gt;
  &lt;li&gt;Control Flow&lt;/li&gt;
  &lt;li&gt;Divide and Conquer (extreme)&lt;/li&gt;
  &lt;li&gt;Visual Programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-11-Playlists/index.html&quot;&gt;Playlists&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Playlists PROLOG for Programmers Control Flow Divide and Conquer (extreme) Visual Programming</summary></entry><entry><title type="html">DI - Design Intent</title><link href="https://computingsimplicity.neocities.org/2021/04/11/DI.html" rel="alternate" type="text/html" title="DI - Design Intent" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/DI</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/DI.html">&lt;p&gt;DI - Design Intent&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-11-DI/index.html&quot;&gt;DI - Design Intent&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">DI - Design Intent</summary></entry><entry><title type="html">Compiling Diagrams</title><link href="https://computingsimplicity.neocities.org/2021/04/11/Compiling-Diagrams.html" rel="alternate" type="text/html" title="Compiling Diagrams" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/Compiling%20Diagrams</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/Compiling-Diagrams.html">&lt;p&gt;(Same as Syntax Primitives)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-Syntax Primitives/index.html&quot;&gt;Compiling Diagrams&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">(Same as Syntax Primitives)</summary></entry><entry><title type="html">Grasem Tool</title><link href="https://computingsimplicity.neocities.org/2021/04/11/Grasem.html" rel="alternate" type="text/html" title="Grasem Tool" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/Grasem</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/Grasem.html">&lt;p&gt;Glue Tool&lt;/p&gt;

&lt;p&gt;A PEG for generating Ohm-JS (a PEG)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-11-Grasem/index.html&quot;&gt;Grasem Tool&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Glue Tool</summary></entry><entry><title type="html">ASON Notation Pipeline (building 7 passes)</title><link href="https://computingsimplicity.neocities.org/2021/04/10/ASON-Notation-Pipeline.html" rel="alternate" type="text/html" title="ASON Notation Pipeline (building 7 passes)" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/ASON%20Notation%20Pipeline</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/ASON-Notation-Pipeline.html">&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-ASON Notation Pipeline/index.html&quot;&gt;Building ASON Notation Pipeline in passes&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Building ASON Notation Pipeline in passes</summary></entry></feed>