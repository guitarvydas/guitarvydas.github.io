<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-18T10:11:59-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">The rain god</title><link href="https://computingsimplicity.neocities.org/2021/03/18/The-Rain-God.html" rel="alternate" type="text/html" title="The rain god" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/The%20Rain%20God</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/The-Rain-God.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Rain God&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T10:11:54Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T10:11:54Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Rain God&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, also, crashed the University of Toronto's computing facility.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It was my first assembler course.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I imagined that we were using an assembler VM&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; and that the computer system was totally protected from having any harm caused to it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the time, we used card decks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My program was, maybe, about 10-20 cards long.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I would drop my assignment into the card-reading hopper and stand in line waiting for my turn at the line printer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Every&lt;/i&gt; time I stepped up to the printer, the system would crash and the line printer would auto-open its hatch (about the size of a hatchback on a modern automobile).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lousy luck.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I kept doing this&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; until the overseer got a phone call from downtown.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He looked at my code and told me to stop trying to run my assignment.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Later, I found the bug in my code and was surprised that the VM hadn't protected the system from my mistake.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I learned that there was no VM, I was running raw IBM 360 hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I learn from mistakes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've learned a lot.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/List_of_The_Hitchhiker%27s_Guide_to_the_Galaxy_characters#Rob_McKenna&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;There was no term such as &quot;VM&quot; at the time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;VM means virtual machine.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;One card was one line of code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; It was on the Scarborough Campus, closest to my home, but I was enrolled in the downtown campus.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Rain God</summary></entry><entry><title type="html">Little language</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Little-Language.html" rel="alternate" type="text/html" title="Little language" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Little%20Language</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Little-Language.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Little Language&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T09:41:28Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T09:41:28Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {text-decoration: underline}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: lower-alpha}
    ol.ol2 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I develop a little language (SCL)&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; in about 1 day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then I use the little language (SCL) to filter SVG files to help me build another essay.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This SCL was built in &lt;i&gt;layers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;glue&lt;/i&gt; SCL layer reads a spec, then generates code that can be used in a lower layer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Both layers happen to use Ohm-JS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This example is very simple, hence it contains only 2 layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ideally, all SCLs should be this simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The code associated with this essay can be found at&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/glue/tree/master&quot;&gt;https://github.com/guitarvydas/glue/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The various branches — dev0, dev1, dev2, and dev3 — show the project at different stages (described below).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final test is in branch foreignFilter.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All branches have been collapsed into branch master.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Quick&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; language and tool was developed in less than one day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal of this SCL is to help me write PEG grammars and associated code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to use parsers the way the most people use REGEXPs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that REGEXPs are not &quot;type checked&quot; in most languages and editors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, pattern matching in this SCL is not &quot;type checked&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The programmer is responsible for writing the code correctly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that pattern-matching is already a kind of type check (pattern matching is use in FP languages), so, the lack of type-checking is not as big a problem here as it might be in general purpose programming languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a fundamental principle of SCL design - YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Save development time by skipping hoary operations, like type-checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The goal is to create something that will generate useful code in less than a day of work (undercutting one of the principle reasons why DSLs are not used frequently).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Type checking&quot; will come later, if this tool gets used frequently.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that it will be easier to type-check Glue programs than it would be to type-check REGEXPs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Emitter&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I want to write a little language — and SCL — that lets me pattern match a text file, then rearrange it and output it in some other way.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, I have the problem that I'm writing essays that include diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use &lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt; to create my diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt; does not save in SVG format.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must ask &lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt; nicely to export the drawing in SVG format.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The exported SVG diagram contains a lot of noise.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I just want to see pure SVG, without the noise.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The exported SVG file contains &quot;&amp;lt;switch&amp;gt;…&amp;lt;/switch&amp;gt;&quot; clauses that contain &quot;&amp;lt;foreignObject&amp;gt;…&amp;lt;/foreignObject&amp;gt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This stuff overwhelms the .SVG file and I can't see the stuff that I really want to see (the rects, the ellipses, the paths, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can I write a &lt;i&gt;filter&lt;/i&gt; to remove the noise? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That is my goal.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Write a filter.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Delete the noise.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Divide and Conquer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Divide and conquer — on steroids — is recursive design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Chop every problem up into two pieces.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Treat each piece separately.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you don't know how to solve a piece, chop it up into two pieces.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Keep doing this until you know how to accomplish every piece.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As you go, new ideas will pop up.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The new ideas can modify the problem at any level.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My divide &amp;amp; conquer for this (simple) problem went something like this:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;0&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;main problem / main goal - remove &amp;lt;switch&amp;gt; and &amp;lt;foreignObject&amp;gt; elements from the Drawio generated SVG files&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;This can't be done in REGEXP, so I decided to use something more powerful — a &lt;i&gt;parser &lt;/i&gt;— which allowed me to use nesting&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;1&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;SVG grammar&lt;/b&gt; — I know how to do this (PEG grammar in Ohm-JS)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;2&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;other stuff&lt;/b&gt; - I need to write the JavaScript to accompany the grammar&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;2.0 &lt;b&gt;invent&lt;/b&gt; a sub-language (I call it &lt;i&gt;glue&lt;/i&gt;) to help me write the JavaScript&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;2.0 is simpler than the original problem&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;chop&lt;/b&gt; 2.0 into up 2 pieces&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;2.1&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;invent&lt;/b&gt; a helper grammar that works with Ohm-JS
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;2.1.1&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;implement&lt;/b&gt; that helper grammar
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;the first cut is in branch dev1&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;implement glue.js that reads in the grammar, reads the helper language code&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;run the grammar parser and write &quot;successful&quot; or not (in which case, I use Ohm-JS's grammar tracer)&lt;/li&gt;
          &lt;/ul&gt;&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;2.1.2&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;write&lt;/b&gt; the javascript support code for the helper language&lt;/li&gt;
        &lt;/ul&gt;
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;this is straight-forward, so I wrote the JS code directly (branch dev3)&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;2.1.2.0&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;feedback&lt;/b&gt;: while building this, I realized that I could make the helper tool even simpler&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/ul&gt;
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;2.1.2.1 &lt;b&gt;re-invent&lt;/b&gt; the grammar for the helper tool, using the already-built grammar and JS code&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;li class=&quot;li4&quot;&gt;2.2 &lt;b&gt;decide&lt;/b&gt; how to incorporate the generated helper code into the glue.js tool
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;2.2.0 I decided to take the easiest route - I would simply COPY/PASTE the generated code into the Ohm-JS boilerplate&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;The resulting code is in branch dev3.&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above is recursive design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each step reduces the original problem until the termination case is encountered.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Recursive break-down is used (recursively) on each branch of the problem — there are many termination cases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I think that the current crop of PLs — e.g. Python, JavaScript, etc. — show a distinct lack of divide-and-conquer mentality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IMO, everything should be a function call until the termination case is encountered in the recursive design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It should not be possible to use operators other than function calls except at the leaf levels.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, &quot;+&quot; should not appear in any code except the very lowest-level code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, &quot;cons&quot; and array operations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compilers can optimize-away function calls by making them into inline (macro) calls.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;AFAICT, most PLs allow unrestricted use of low-level operations (like &quot;+&quot;, cons, arrays) at any level of the design.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The SVG Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote a first cut of the grammar in &lt;a href=&quot;https://github.com/guitarvydas/glue&quot;&gt;https://github.com/guitarvydas/glue&lt;/a&gt; (branch: dev0).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I got it running.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That was a &quot;major&quot; hurdle, since it required me to understand how to use Ohm-JS, how to read a file in JS, etc., etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The &quot;hurdle&quot; decreases every time I use Ohm-JS and JavaScript, but I didn't need to wait to go down the respective learning curves.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I started to &lt;i&gt;use&lt;/i&gt; Ohm-JS and JavaScript right away.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Ohm-JS knows how to do its magic in HTML scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I've explored that possibility in &lt;/i&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;&lt;i&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/i&gt;&lt;/a&gt;&lt;i&gt;.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, I refined my ideas and re-cut the SVG grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Branch: dev3.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Final SVG Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;SVGSwitchAndForeign {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; EmptyDefs Element+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element = ElementWithSwitch | ElementWithForeign | ElementWithElements | ElementWithoutElements&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; Element Element &quot;&amp;lt;/switch&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; Element &quot;&amp;lt;/foreignObject&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; (Element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1st&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The glue Tool&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Problem (2.1) is that of creating an &lt;i&gt;identity&lt;/i&gt; grammar for SVG.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I break this problem down into 2 parts&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;match SVG and leave hooks&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rearrange the matches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Using Ohm-JS, I need to&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;write a grammar (for SVG)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;write so-called &quot;semantics&quot; code to do the rearranging.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I want a tool which makes it easy to pattern-match SVG and to re-arrange the matched bits.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;In Ohm-JS, you write a grammar to do the pattern-matching, and you write some JavaScript code to do the re-arranging.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is one JavaScript function for each rule in the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The matches are passed in as function parameters.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Roughly, I want a tool that does something like:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;pattern matcher —&amp;gt; javascript code&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The pattern matcher portion is handled by Ohm-JS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It's called the &lt;i&gt;grammar.&lt;/i&gt; The syntax is well-documented in &lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The javascript re-arranging code is just a mess of JavaScript code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is called the &lt;i&gt;semantics&lt;/i&gt; in Ohm-JS documentation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I've done this before.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Writing the semantics code can be very repetitive and boring.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, all that I need is some way to tie grammar rules to JavaScript `…${v}…` strings.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I want:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;.SVG —&amp;gt; Ohm-JS grammar —&amp;gt; string-language —&amp;gt; same .SVG&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Actually, I would be happy if the string-language was simply the same as JavaScript `…${v}…` strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, I would settle for:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;.SVG —&amp;gt; Ohm-JS grammar —&amp;gt; JavaScript `…` strings —&amp;gt; same .SVG&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;OK, so I want to write a grammar in Ohm-JS, then I want a mini-language that lets me rewrite pattern matches using JavaScript strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I &lt;i&gt;could &lt;/i&gt;have done this in raw JavaScript, but I didn't want to write details when I could automate&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS gives me each match (in some internal format)&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; as function parameters.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, what I want is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;.SVG —&amp;gt; Ohm-JS grammar —&amp;gt; JavaScript variables —&amp;gt; JavaScript `…` strings —&amp;gt; same as original .SVG&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, my requirements boil down to:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;use Ohm-JS to write a grammar for SVG (YAGNI, I don't need to handle &lt;i&gt;all &lt;/i&gt;of SVG, just enough for my current problem, I can get away with 95% of SVG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The last 5% is a killer, usually.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So avoid it.)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;use another tool to build my JavaScript re-arranger code&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;run Ohm-JS+JS-rearranger-code to input a .SVG and spit it back out unchanged (but leaving me hooks for later).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I need to write a tool in Ohm-JS to spit out code that could be used with Ohm-JS to eat and spit out .SVG files.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;My tool syntax is something like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;grammarRuleName variables —&amp;gt; javascript&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;One more complication: some of the grammar rules match one thing, but some grammar rules match multiple-things.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The +/*/? operators in the grammar match multiple things. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In Ohm-JS, single matches are returned as JavaScript variables, and multiple matches are returned as JavaScript arrays (see the appendix).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, for this mini-language, I need to differentiate between the two kinds of things and generate different code for each kind of thing (single vs. multiple).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If the grammar has +/*/? in it, then we need more JavaScript code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If there is no +/*/?, then we still need JavaScript code, but less of it.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If we choose to use strings, then JavaScript has the .join('') operator, which makes handling of arrays of strings particularly easy.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;One grammar rule can have both types of matches (singles and arrays).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, for example, for the grammar rule:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = A B+ C&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;we need to create a function like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = function (a, bArray, c) { return a.semcode () + bArray.semcode (). join('') + c.semcode (); },&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;There are more details, but I'm going to skip over them for now.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the final source code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Details kill.&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Note that I like to leave spaces before parameter lists (it results in cleaner-looking code after you get used to it).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I write &quot;&lt;/i&gt;&lt;span class=&quot;s2&quot;&gt;&lt;i&gt;fn(a,b)&quot;&lt;/i&gt;&lt;/span&gt;&lt;i&gt; as &quot;&lt;/i&gt;&lt;span class=&quot;s2&quot;&gt;&lt;i&gt;fn (a, b)&quot;&lt;/i&gt;&lt;/span&gt;&lt;i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compressing whitespace is so 1950's.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;My first cut at the SCL (mini language) was to imagine a language where statements like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader [1 2s 3] = $1 @2s $3&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;would generate JavaScript, like:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader = function (p1, p2s, p3) { return p1.glue () + p2s.glue.join('') + p3.glue () };&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I generated a prototype and made it run.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Branches &quot;dev0&quot; and &quot;dev1&quot;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Why did I use brackets instead of parentheses for the parameter lists?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To remind me that this isn't JavaScript — and — to remind me that I was trying to create an SCL that was declarative — i.e. I was allowed to put &quot;operators&quot; in the left-hand side as well as on the right-hand side.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;While tinkering with the details, I realized that I could reduce this language to something with statements like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader [x @y z] = abc${x}def${y}ghi${z}jkl&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;that would generate (JavaScript) code like:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader = function (_x, _y, _z) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var x = _x.glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var y = _y.glue.join('');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var z = _z.glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;return `abc${x}def${y}ghi${z}jkl`&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;In JavaScript, &quot;_&quot; is just a normal character.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a convention to use &quot;_&quot; as a prefix for untouchable data (unexported).&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Final glue Tool Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;SemanticsSCL {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Semantics = SemanticsStatement+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SemanticsStatement = RuleName &quot;[&quot; Parameters &quot;]&quot; &quot;=&quot; Rewrites&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RuleName = letter1 letterRest*&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parameters = Parameter+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parameter = treeparameter | flatparameter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;flatparameter = fpws | fpd&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;fpws = pname ws+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;fpd = pname delimiter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;treeparameter = &quot;@&quot; tflatparameter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tflatparameter = tfpws | tfpd&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tfpws = pname ws+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tfpd = pname delimiter&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;pname = letterRest letterRest*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Rewrites = rwstring&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;letter1 = &quot;_&quot; | &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;letterRest = &quot;0&quot; .. &quot;9&quot; | letter1&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ws = &quot;\n&quot; | &quot; &quot; | &quot;\t&quot; | &quot;,&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;delimiter = &amp;amp;&quot;]&quot; | &amp;amp;&quot;=&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rwstring = stringchar*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringchar = ~&quot;\n&quot; any&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Emitter&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;branch: dev3&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote code that is very repetitive, on purpose.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in &lt;span class=&quot;s2&quot;&gt;SemanticsStatement &lt;/span&gt;I evaluated each match, although only 1, 3 and 6 are used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I name each parameter &lt;span class=&quot;s2&quot;&gt;_n&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Underscore is not special — it is just another character).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I name each local (temporary) variable as &lt;span class=&quot;s2&quot;&gt;__n&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Two underscores and a digit).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To &quot;walk the tree&quot; — evaluate the CST by applying semantics functions, I needed to call the function &lt;span class=&quot;s2&quot;&gt;_glue ()&lt;/span&gt; on each match.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I chose to make every function return a string.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use JavaScript `…` strings to build the results.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In places where Ohm-JS returns an array, I also call the .join ('') function.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in &lt;span class=&quot;s2&quot;&gt;RuleName&lt;/span&gt;, the second parameter is an array.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I collapse it with the following code:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;var __2s = _2s._glue ().join ('')&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use &lt;span class=&quot;s2&quot;&gt;run.bash&lt;/span&gt; to run the GLUE language.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final JavaScript code is:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;// npm install ohm-js&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function ohm_parse (grammar, text) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var parser = ohm.grammar (grammar);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var cst = parser.match (text);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (cst.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return { parser: parser, cst: cst };&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (parser.trace (text).toString ());&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;throw &quot;Ohm matching failed&quot;;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function getNamedFile (fname) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var fs = require ('fs');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (fname === undefined || fname === null || fname === &quot;-&quot;) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (0, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (fname, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;var varNameStack = [];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function addSemantics (sem) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;sem.addOperation ('_glue', {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Semantics: function (_1s) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1s._glue ().join ('');&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `sem.addOperation ('_glue', {${__1}});`;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;SemanticsStatement: function (_1, _2, _3, _4, _5, _6) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;varNameStack = [];&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __2 = _2._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __3 = _3._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __4 = _4._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __5 = _5._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __6 = _6._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;               &lt;/span&gt;${__1} : function (${__3}) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                          &lt;/span&gt;${varNameStack.join ('\n')}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                          &lt;/span&gt;return \`${__6}\`;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                        &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;RuleName: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1 + __2s; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Parameters: function (_1s) {&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var __1s = _1s._glue ().join (','); return __1s; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Parameter: function (_1) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `${__1}`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;flatparameter: function (_1) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;varNameStack.push (`var ${__1} = _${__1}._glue ();`);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `_${__1}`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;fpws: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;fpd: function (_1, _2) { var __1 = _1._glue (); var __2 = _2._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;treeparameter: function (_1, _2) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __2 = _2._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;varNameStack.push (`var ${__2} = _${__2}._glue ().join ('');`);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `_${__2}`;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;tflatparameter: function (_1) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `${__1}`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;tfpws: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;tfpd: function (_1, _2) { var __1 = _1._glue (); var __2 = _2._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;pname: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1 + __2s;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Rewrites: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;letter1: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;letterRest: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;ws: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;delimiter: function (_1) { return &quot;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;rwstring: function (_1s) { var __1s = _1s._glue ().join (''); return __1s; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;stringchar: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;_terminal: function () { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;});&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// usage: node glue &amp;lt;file&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// reads grammar from &quot;glue.ohm&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var text = getNamedFile (&quot;-&quot;);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var grammar = getNamedFile (&quot;glue.ohm&quot;);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var { parser, cst } = ohm_parse (grammar, text);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var sem = {};&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var outputString = &quot;&quot;;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (cst.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;sem = parser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;addSemantics (sem);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;outputString = sem (cst)._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return { cst: cst, semantics: sem, resultString: outputString };&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;var { cst, semantics, resultString } = main ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;console.log(resultString);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Brainstorming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;It is better to &lt;i&gt;do&lt;/i&gt; &lt;i&gt;something&lt;/i&gt; rather than just sitting around and &lt;i&gt;thinking&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It is OK to throw intermediate results away. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Sometimes the intermediate results generate new ideas. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This is called &lt;i&gt;brainstorming&lt;/i&gt; in songwriting and is such a reliable technique that several teachers teach you to do this before creating every song. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The &lt;i&gt;brainstorming&lt;/i&gt; techniques in songwriting get you to think outside of the box and to fill-in the story with more detail.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In software development, brainstorming helped me make the &lt;i&gt;glue&lt;/i&gt; SCL even more simple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Tinkering with code produces results similar to &quot;shower time&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Menial tasks move the project forward while allowing time for deeper thought.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Deeper thought, applied to bits of the working project, resulted in out-of-the-box thoughts that would not have occurred to me if I hadn't made the base levels work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Thinking works better when it has &quot;something to latch onto&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Test&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test Use Case&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I used the &lt;i&gt;glue&lt;/i&gt; tool to remove &amp;lt;switch&amp;gt; and &amp;lt;foreignObject…&amp;gt; from a sample SVG file (generated by Drawio).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;I used the SVG grammar &quot;as is&quot;.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I wrote a &lt;i&gt;glue&lt;/i&gt; script to generate the extra JavaScript &quot;semantics&quot; code.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I ran the &lt;i&gt;glue &lt;/i&gt;tool and pasted the result into my boilerplate.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I ran frun.bash.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(This ran the &lt;i&gt;glue &lt;/i&gt;tool using &lt;span class=&quot;s2&quot;&gt;semantics.glue&lt;/span&gt;, then ran the result using input file &lt;span class=&quot;s2&quot;&gt;test.svg&lt;/span&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpiler Spec&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My final spec is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;SVGSwitchAndForeign {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svg = xmlHeader docTypeHeader svgElement&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot; ws*&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;docTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; ws*&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; ws* emptyDefs element+ &quot;&amp;lt;/svg&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;emptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;element = (elementWithSwitch | elementWithForeign | elementWithelements | elementWithoutelements) ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; ws* element element &quot;&amp;lt;/switch&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; ws* element &quot;&amp;lt;/foreignObject&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithelements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; ws* (element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithoutelements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1st&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ws = &quot; &quot; | &quot;\n&quot; | &quot;\t&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg [a b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement [a @b c d @e f] = ${a}${b}${c}${d}${e}${f}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch [a b c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign [a @b c d e] = ${a}${b}${c}${d}${e}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements [a b @c d @e f g h] = ${a}${b}${c}${d}${e}${f}${g}${h}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements [a b @c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name [a @b] = ${a}${b}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Which is a lot less code&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; than what is written in raw JavaScript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This code chops — divide and conquer — up the problem into two obvious parts:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe in — pattern match the .SVG&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe out — rearrange the matched code and spit it out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each part does one thing only — the first part does pattern matching, the second part does rearranging.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each part is described by its own SCL (DSL).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pattern matching is best described as a &lt;span class=&quot;s3&quot;&gt;grammar&lt;/span&gt;, while rearranging is best described as &lt;span class=&quot;s3&quot;&gt;JavaScript `…` syntax&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;I don't try to force-fit everything into one paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pattern matchers don't make for good code rearrangers, JavaScript strings don't make for good pattern matchers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;General purpose languages don't make for good anything.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Except details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Details kill.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test glue Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; code that corresponds to the SVG grammar is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg [a b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement [a @b c d @e f] = ${a}${b}${c}${d}${e}${f}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch [a b c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign [a @b c d e] = ${a}${b}${c}${d}${e}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements [a b @c d @e f g h] = ${a}${b}${c}${d}${e}${f}${g}${h}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements [a b @c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name [a @b] = ${a}${b}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This says:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Svg is a grammar rule. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;the Svg grammar rule is matched, the matches are provided (as CSTs) in parameters a, b, and c.&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Combine the three parameters using JavaScript `…` string syntax and return that string result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;XMLHeader is another grammar rule.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The grammar rule is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, the grammar matches 3 items (&quot;&amp;lt;?&quot;, stuff* and &quot;?&amp;gt;&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The second item, though, has a zero-or-more operator (*), which means that the grammar returns an array (for zero items, the array has length 0).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The fact that the second item — b — is non-scalar (an array) is denoted by writing &lt;span class=&quot;s2&quot;&gt;@b &lt;/span&gt;on the left-hand side of the GLUE statement.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The right-hand side uses simple JavaScript `…` notation where the tool has collapsed the second item into the final variable called &lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The programmer is responsible for writing the LHS's correctly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no &quot;type checking&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This tool language is more like an editor operation than a DSL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Comparison: REGEXPs are not type-checked (yet) in languages that use them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Details About Matching&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;In Ohm-JS, each grammar rule returns &lt;i&gt;&amp;lt;something&amp;gt;&lt;/i&gt; after it is finished. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If the rule is something like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = A B C&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;then the grammar rule called &quot;R&quot; returns a single thing — a combination of the return values from A and B and C. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case A maps to a JS variable and B maps to a JS variable and C maps to a JS variable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each variable contains one &lt;i&gt;&amp;lt;thing&amp;gt;&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;But, if the rule is something like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = A B* C&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;then the B maps to an &lt;i&gt;array &lt;/i&gt;of &lt;i&gt;&amp;lt;something&amp;gt;&lt;/i&gt;s.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is easy to handle in JavaScript, but you — the programmer — need to know when to expect a single thing or an array of things.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Notation Affects Thinking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;A side-note on how notation affects thinking… In ESRAP, B* returns a list (a tree). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It took me a while to reconcile what I expected (coming from Lisp to JS).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JS wants you to express details in arrays, whereas Lisp makes it easy to think in terms of trees (aka lists).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Ohm-JS could have returned JS objects, but it returned arrays instead.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The creator(s) of Ohm-JS was influenced by JS to use arrays instead of Objects. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The creator of ESRAP was influenced by Lisp to return lists.&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The difference is made more clear in something like&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;(A* B* C*)&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;where ESRAP returns one list and Ohm-JS returns three arrays.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Note that ESRAP rewrites this as (and (* A) (* B) (* C)) which is less clear, if you are thinking in terms of pattern matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is yet another orthogonal&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;conversation — see my essay &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;SCL means Solution Specific Language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Like the original idea behind DSLs.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;I've written parsers many times before.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each time I learned something new.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This time, I can apply a subset of what I learned, with cofidence.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The JavaScript code that hangs off of the grammar is called &quot;semantics&quot; in Ohm-JS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This term comes from compiler technology, but you don't really need to know about this stuff to simply use it.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;See my essay &quot;Details Kill&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The format is a CST - a concrete syntax tree.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;CSTs are often conflated with ASTs, but there is nothing &quot;abstract&quot; about CSTs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ASTs define the universe of possibilities, but CSTs represent the &lt;span class=&quot;s3&quot;&gt;actual&lt;/span&gt; incoming code.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;and less detail - details kill&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;A CST, to be exact.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A CST is represented as an Object with certain format (see Ohm-JS source code for exact details).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;One could argue that arrays are just optimized lists, but that's beside the point.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Little Language</summary></entry><entry><title type="html">Divide and conquer in pls</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Divide-and-Conquer-in-PLs.html" rel="alternate" type="text/html" title="Divide and conquer in pls" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Divide%20and%20Conquer%20in%20PLs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Divide-and-Conquer-in-PLs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Divide and Conquer in PLs&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T08:46:04Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T08:46:04Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Divide and Conquer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I think that the current crop of PLs — e.g. Python, JavaScript, etc. — show a distinct lack of divide-and-conquer mentality. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IMO, everything should be a function call until the termination case is encountered in the recursive design. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It should not be possible to use operators other than function calls except at the leaf levels. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, &quot;+&quot; should not appear in any code except the very lowest-level code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Likewise, &quot;cons&quot; and array operations. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers can optimize-away function calls by making them into inline (macro) calls. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;AFAICT, most PLs allow unrestricted use of low-level operations (like &quot;+&quot;, cons, arrays) at any level of the design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Low-level operations are like GOTOs — they should be avoided and &lt;i&gt;structured&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Divide and Conquer in PLs</summary></entry><entry><title type="html">Toe for software development</title><link href="https://computingsimplicity.neocities.org/2021/03/18/TOE-for-Software-Development.html" rel="alternate" type="text/html" title="Toe for software development" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/TOE%20for%20Software%20Development</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/TOE-for-Software-Development.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;TOE for Software Development&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T00:34:05Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T00:34:05Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;TOE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;TOE means Theory of Everything.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I don't have the answers, but I have some observations…&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Code boils down to two operations:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe in&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;i&gt;Breath in&lt;/i&gt; usually involves pattern matching.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;i&gt;Breathing out&lt;/i&gt; usually means rearranging the stuff that got breathed in.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Pattern matching: use PEG. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;PEG is &quot;better&quot; than REGEXPs in that PEG can match nested patterns.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The theoretical name for pattern matching is &lt;i&gt;parser, &lt;/i&gt;and PDFA.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Theory gave us YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG is not YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG is easier than YACC.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEXP theory is called &lt;i&gt;scanners&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Theory gave us LEX.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG makes LEX obsolete.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;FP languages use pattern matching.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Data boils down to one universal data structure - the &lt;i&gt;triple.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All other data structures are ways to rearrange and optimize triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In 1950's-thinking, it was a good idea to optimize data structures. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I'm not so sure that it's a good idea to optimize data structures in the 202x's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Certainly not during &quot;compile time&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We used to believe that optimizing memory and CPU usage was critical.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that optimizing human-thought-effort is more critical, now.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My further thoughts on this subject are:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Boring - The Essential Ingredient&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Optimizations thwart efforts to automate processes. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We saw this problem happen in the early days of C and Pascal.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Assembler programmers thought that they could optimize better than compilers could.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Then GCC came along.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Now, we all use HLL's and don't imagine writing code in assembler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Make it boring. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Make it repetitive. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then write code that automates and optimizes the boring and repetitive parts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We already know how to do that, e.g. peephole optimizers, compiler technologies, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How do you make data boring?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Deconstruct it into triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How do you make code boring?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Deconstruct it into triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;MOV R0,R1&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function(subject,object)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;is a triple&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and PROLOG can write triples&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;father(justin,paul).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple in PROLOG-ese.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Boring.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Not a Triple&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;But,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;parents(justin,paul,ilona).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is &lt;i&gt;not &lt;/i&gt;a triple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't use triples if you think that your optimizer needs more edge-cases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inferencing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;How do you get more-interesting data structures if everything is reduced to triples? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Inferencing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Backtracking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pattern-matching.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">TOE for Software Development</summary></entry><entry><title type="html">Peg vs. other pattern matchers</title><link href="https://computingsimplicity.neocities.org/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html" rel="alternate" type="text/html" title="Peg vs. other pattern matchers" /><published>2021-03-17T00:00:00-04:00</published><updated>2021-03-17T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/17/PEG%20vs.%20Other%20Pattern%20Matchers</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;PEG vs. Other Pattern Matchers&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-17T23:38:11Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-17T23:38:11Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 9.0px Palatino}
    span.s3 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I discuss why you should use PEG (instead of, say, REGEXP).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is a breakthrough technology.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It lets you write pattern-matchers as easily as you would write REGEXPs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The difference between PEG and REGEXP is that PEG lets you write nested matches, which are much harder (if not impossible) to write as REGEXPs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG can match programming language constructs, like &quot;{ … }&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG can match such patterns to any depth, e.g. &quot;{ … { … { … } … } … }&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG can rearrange the matches any way you would like, then spit out new code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG can be used to write &lt;i&gt;transpilers&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parser technology used to be reserved only for compiler-writers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG changes that. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, &quot;normal&quot; programmers can use nested pattern-matching as easily as they use REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I happen to use Ohm-JS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is a PEG grammar tool that works with JavaScript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are PEG libraries for many different languages, for example ESRAP for Common Lisp, &quot;#lang peg&quot; for Racket. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In some cases there are multiple PEG libraries for a single PL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I had to choose between Ohm-JS and peg-js, for JavaScript.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What to Look For&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;grammar&lt;/i&gt; is a DSL for pattern-matching.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP is a DSL for pattern-matching, but it doesn't (easily) allow nesting, whereas PEG does allow nesting.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My opinion is that you want to have as little noise in the &lt;i&gt;grammar&lt;/i&gt; as possible. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG can match patterns, but it leaves the &quot;what to do with the matches&quot; up to you and your language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most PEG libraries include &lt;span class=&quot;s1&quot;&gt;extra&lt;/span&gt; syntax to assign matches to variables.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; doesn't do this.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ohm-JS leaves the grammar alone, to stand on its own.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When you want to rearrange the patterns,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;in Ohm-JS you have to look at another part of the code/script.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;in other PEGs, you have to soil the grammar by adding such details&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; to the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Details kill readability.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scanning and Parsing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Skip this section if you just want to use PEG]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In previous technologies, one had to write a &lt;i&gt;scanner&lt;/i&gt; and a &lt;i&gt;parser &lt;/i&gt;separately.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;the YACC tool generates parsers, but it needs a scanner tool, usually LEX.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;LEX uses a different notation (REGEXP) than YACC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG subsumes all of that into one notation - you can write the scanner &lt;i&gt;and&lt;/i&gt; the parser in one go.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This seems like a small difference but it makes it possible to write SCLs (little languages) at will. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, I argue that one &lt;i&gt;should &lt;/i&gt;write many SCLs for any one project.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Any one project — if big and interesting enough — involves more than one paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each paradigm should get its own SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At present, we choose one 3&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;rd&lt;/sup&gt;&lt;/span&gt;-generation language (like Python, JavaScript, Rust, etc.) and implement all paradigms in that one language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result is an unreadable mess.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Details kill readability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The YACC/LEX dichotomy kept me from building many little languages for each project.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is opening my eyes to new ways of doing things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scanning&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP is a DSL for building scanners.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP is built into many languages, including Perl and JavaScript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP is &quot;flat&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It cannot (easily) match nested patterns.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One of the original tools that used the REGEXP DSL syntax was LEX.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The theory for converting REGEXPs to code can be found in The Dragon Book.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you just want to &lt;i&gt;use&lt;/i&gt; REGEXPs, don't read The Dragon Book.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parsing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Parsing is &lt;i&gt;pattern matching&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most parser-generator tools require some sort of regular input that is more-than just characters, e.g. &lt;i&gt;tokens&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The theory for building parsers is documented in The Dragon Book.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you just want to &lt;i&gt;use&lt;/i&gt; pattern matching, don't bother reading The Dragon Book.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pattern matching is becoming ubiquitous in FP (functional programming) languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All that you really need is a way to match patterns and then emit code as &lt;i&gt;lambdas&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JavaScript, for example, has a lot of this kind of stuff&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most PLs have 1&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions (aka lambdas) and pattern matching libraries (REGEXP and PEG and LR(k) and …).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want theorists to tell us what works and what doesn't, but we don't need to wait for theories before starting to use this stuff.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; and ESRAP, in a sense&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; &lt;/span&gt;In ESRAP, the grammar is left alone and lambdas are tacked onto the end.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The problem with ESRAP is that it uses a Lisp syntax instead of a PEG syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(This can be cured by writing a PEG in ESRAP that transpiles to ESRAP, but that's another essay).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See my essay &quot;Details Kill&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;JS has REGEXPs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You can write TDPL parsers using REGEXPs in functions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JS has lambdas, but calls them anonymous functions.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PEG vs. Other Pattern Matchers</summary></entry><entry><title type="html">Asking the right questions</title><link href="https://computingsimplicity.neocities.org/2021/03/17/Asking-The-Right-Questions.html" rel="alternate" type="text/html" title="Asking the right questions" /><published>2021-03-17T00:00:00-04:00</published><updated>2021-03-17T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/17/Asking%20The%20Right%20Questions</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/17/Asking-The-Right-Questions.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Asking The Right Questions&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-17T23:51:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-17T23:51:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; -webkit-text-stroke: #000000}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; -webkit-text-stroke: #000000; min-height: 14.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font-kerning: none}
    span.s2 {-webkit-text-stroke: 0px #000000}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Asking the right questions.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not how to live with dependencies and how to paste bandaids over dependencies.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;How can we eliminate dependencies?&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not stating that multitasking is hard and how can we live with those difficulties.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Why is multitasking hard?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And how can we express multitasking so that it's not so hard?&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Why is it valid to abstract-away &lt;i&gt;f(t) &lt;/i&gt;in processes that involve time?&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; What did Nobel Laureate Ilya Prigogene have to say about this in &quot;Order Out Of Chaos&quot;?&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Asking The Right Questions</summary></entry><entry><title type="html">Apl</title><link href="https://computingsimplicity.neocities.org/2021/03/17/APL.html" rel="alternate" type="text/html" title="Apl" /><published>2021-03-17T00:00:00-04:00</published><updated>2021-03-17T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/17/APL</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/17/APL.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;APL&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-17T08:38:24Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-17T08:38:24Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;I was an APL monkey at IBM for 9-ish months…&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;APL is a notation that is useful for mathematical thinking.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Mathematical notation (thinking) does not apply &lt;i&gt;everywhere&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;We (the royal we) &lt;i&gt;think&lt;/i&gt; that multitasking is hard because we’re trying to do it in mathematical notation.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;In fact, everyone already knows how to do multitasking.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The best (so far) notation for multitasking is a musical score.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It denotes realtime, multiple parallel processes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OTOH, musical notation has the same problem as mathematical notation has — it was invented for 2D pen-and-paper, not 3D thinking.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Our problem is that we conflate “notation” with “programming”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We try to force-fit all of programming into one notation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; I took down all of IBM Toronto (Canada?) writing a simple APL program (on a 5100).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Turns out that there was a bug in IBM APL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OTOH, I was paid overtime to light up all of the front-panel lights on a 360 without trying.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; Think “cooking recipes”, “music&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">APL</summary></entry><entry><title type="html">Details kill</title><link href="https://computingsimplicity.neocities.org/2021/03/17/Details-Kill.html" rel="alternate" type="text/html" title="Details kill" /><published>2021-03-17T00:00:00-04:00</published><updated>2021-03-17T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/17/Details%20Kill</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/17/Details-Kill.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Details Kill&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-17T09:59:16Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-17T09:59:16Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000}
    span.s1 {font-kerning: none}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Details kill.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Details kill readability.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;It is the Architect's responsibility to make a design clear and understandable to other readers.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Details Kill</summary></entry><entry><title type="html">Component diagrams</title><link href="https://computingsimplicity.neocities.org/2021/03/16/component-diagrams.html" rel="alternate" type="text/html" title="Component diagrams" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/component%20diagrams</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/component-diagrams.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;component diagrams&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T19:15:24Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T19:15:24Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I describe software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use diagrams where possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Box&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-box.png&quot; width=&quot;121px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Box&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Box with Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-box with text.png&quot; width=&quot;121px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Box with Text&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with Type&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-typed component.png&quot; width=&quot;121px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 Component with Type&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with Input Port&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-component with input port.png&quot; width=&quot;131px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Component with Input Port&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relationships&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Note that this diagram contains two boxes (&quot;ty1&quot; and &quot;in&quot;). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Intersection&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;size&lt;/span&gt; are the relations that determine that &quot;in&quot; is a subordinate of &quot;ty1&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Green-ness&lt;/span&gt; determines that the box &quot;in&quot; is an &quot;input&quot;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Intersection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The box with name &quot;in&quot; intersects the box with name &quot;ty1&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Size&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The box &quot;in&quot; is smaller than the other box.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Green-ness&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Green&lt;/span&gt;-ness is my convention for &quot;input&quot;.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with Output Port&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-component with output port.png&quot; width=&quot;131px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5 Component with Output Port&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Yellow-ness&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;Yellow&lt;/i&gt;&lt;/span&gt;&lt;i&gt;-ness is my convention for &quot;output&quot;.&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with 2 Input Ports and 3 Output Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-component with 2 inputs port and 3 output ports.png&quot; width=&quot;143px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6 Component with 2 Input Ports and 3 Output Ports&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-two components.png&quot; width=&quot;423px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 7Two Components&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Components 2 Connections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-two comonents 2 connections.png&quot; width=&quot;423px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. &amp;lt;$n:figure:TwoComponentsAndTwo Connections&amp;gt;Two Components and Two Connections&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NC (No Connection)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ports that are not connected are termed NC (No Connection).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC applies to input ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC applies to output ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;In &lt;/span&gt;Fig. &amp;lt;$n:figure:TwoComponentsAndTwo Connections&amp;gt;, ty1.in1 and ty1.in2 are NC inputs.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;Note that in mathematical notation there is no concept of NC, a function, once invoked, always returns a value (or an exception, or, …)&lt;/i&gt;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run Forever&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components run forever.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are concurrent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components run at their own speed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Components can be parallel.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concurrency is a prerequisite of parallelism.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Aspects of Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component has these distinct aspects:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;type&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;input ports (aka input API)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;output ports (aka output API)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input ports names must be unique within the &lt;i&gt;input port namespace&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Likewise, output ports names must be unique within the &lt;i&gt;output port namespace&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input port names can be the same as output port names (the input port namespace is distinct from the output port namespace).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Name Spaces&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component has various distinct namespaces&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;inputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;outputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;internal — e.g. employed — children components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;Question: What is the namespace for types?&lt;/i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;i&gt; IMO, types are other components (filter components — one in, one out).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A component includes &quot;types&quot; as children components.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;signature &lt;/i&gt;of a component is defined by:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;name (&lt;i&gt;kind&lt;/i&gt; name)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;inputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The &lt;i&gt;signature&lt;/i&gt; of a Composite Component is extended to include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;child parts (and their signatures).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Send()&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component&lt;/i&gt; can &lt;i&gt;send&lt;/i&gt; an &lt;i&gt;event&lt;/i&gt; to another component via a &lt;i&gt;connection&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, &lt;i&gt;components&lt;/i&gt; cannot &lt;i&gt;send&lt;/i&gt; &lt;i&gt;events&lt;/i&gt; to their peers, they can only &lt;i&gt;send&lt;/i&gt; &lt;i&gt;events &lt;/i&gt;to their enclosing parent components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The parent &lt;i&gt;component&lt;/i&gt; routes the message send to another child.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The parent &lt;i&gt;component&lt;/i&gt; routes the child's response back to the sender. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Parameters are subsumed by &lt;i&gt;Send()&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parameters can be sent one-at-a-time or in a block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In contrast, functional PLs require that all parameters be sent as a block, all at the same time.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time oriented processes can &lt;i&gt;send&lt;/i&gt; information (parameters) at any time and are not restricted to sending such information in constrained blocks.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Return Values&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Return values are subsumed by &lt;i&gt;Send()&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components never &quot;return&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They simply &lt;i&gt;Send()&lt;/i&gt; information.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Exceptions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Exceptions are subsumed by &lt;i&gt;Send()&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components never &quot;throw exceptions&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They simply &lt;i&gt;Send()&lt;/i&gt; information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Sometimes, the information relates to error conditions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NC - No Connection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The parent can &lt;i&gt;choose&lt;/i&gt; to make any connection(s) NC — no connection — in which case:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;An &lt;i&gt;output&lt;/i&gt; &lt;i&gt;event&lt;/i&gt; is dropped on the floor and ignored&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;An &lt;i&gt;input&lt;/i&gt; &lt;i&gt;event&lt;/i&gt; never arrives and never activates the child.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There are no implicit dependencies between components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All dependencies appear explicitly on the diagrams, e.g. as containment relationships and connections.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inheritance&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is no inheritance in this system&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; of components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components are created by &lt;i&gt;composition&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Children components cannot &lt;i&gt;override&lt;/i&gt; the actions of parent components.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Composite Components may include other components via &lt;i&gt;composition&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components of the same type (within the same parent component) are given distinct names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Often, though, names are not necessary, e.g. when there is but one component of a given type within a given parent.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In such cases, component names are optional.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In such cases, components can be referred to by their type name.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;In &lt;/span&gt;Fig. &amp;lt;$n:figure:TwoComponentsAndTwo Connections&amp;gt;, there is but one component with type &lt;i&gt;ty1&lt;/i&gt; and one component with type &lt;i&gt;ty2&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is sufficient to refer to these components as &lt;i&gt;ty1&lt;/i&gt; and &lt;i&gt;ty2&lt;/i&gt;, resp. (the components do not need names — the compiler might generate names for them, e.g. via gensym, their unique address, non-colliding hashcodes, URIs, etc.)&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Busy()&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are &lt;i&gt;busy&lt;/i&gt; if they are doing something.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Notably, a &lt;i&gt;composite component&lt;/i&gt; is &lt;i&gt;busy&lt;/i&gt; if &lt;i&gt;any&lt;/i&gt; of its children are busy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;leaf component &lt;/i&gt;is &lt;i&gt;busy&lt;/i&gt; if it is processing an input event.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This condition is never observed when the underlying hardware is stack-based (CALL/RETURN using a stack causes components to run to completion before executing a RETURN instruction) and all components reside in the same thread.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ready&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A component is &lt;i&gt;ready&lt;/i&gt; if it has one or more &lt;i&gt;events&lt;/i&gt; in its input queue and is not &lt;i&gt;busy&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Event&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Events&lt;/i&gt; contain two things:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;A port name (aka &lt;i&gt;tag&lt;/i&gt;)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;Data (anything).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The sender and the receiver must agree on the shape (aka type) of the data.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;Note that type checking is just another kind of component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We could insert type-checking components in between two Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We could insert a chain of type checkers between two Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the Examples section.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reaction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component&lt;/i&gt; reacts to one — and only one — event at a time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run To Completion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component &lt;/i&gt;processes one event to completion.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component &lt;/i&gt;cannot process the next event until it has completed processing the current event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that, a &lt;i&gt;component&lt;/i&gt; can be broken up into a number of states.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;i&gt;component&lt;/i&gt; might &lt;i&gt;process&lt;/i&gt; an incoming event by simply changing its state.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This — breaking up a &lt;i&gt;component's &lt;/i&gt;action — might be considered to be an idiom that subsumes the concept of &lt;i&gt;loop&lt;/i&gt; (recursion).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See, also, Feedback.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can be composed of other components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Composite components can be implemented recursively — i.e. a composite can contain other composites.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A composite component is implemented by appending two structures to the generalized concept of &lt;i&gt;component&lt;/i&gt;:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of components employed by the current component&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;routing table — paths between children outputs and inputs (or, the component's own inputs and outputs).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Leaf Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Leaf Components contain &lt;i&gt;implementation (&lt;/i&gt;e.g. code&lt;i&gt;) &lt;/i&gt;in some other notation (e.g. Python, Javascript, C, StateCharts, Drakon, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Leaf Components differ from Composite Components in that their implementation is not described by this notation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatcher&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;On stack-based hardware and operating systems, this system of components is &quot;run&quot; by using a &lt;i&gt;dispatcher&lt;/i&gt; routine.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;dispatcher&lt;/i&gt; is a simple loop that runs forever and invokes components that are ready, in any order.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Macros / Shorthand&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Repetitive diagram elements can be subsumed into (diagram) editor macros and shorthand gestures created can be created for them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Furthermore, repetitive diagram elements can be elided, removing them from the diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagram compiler(s) re-insert such relationships in ways that are invisible to the Architect and to Engineers/Maintainers/Implementors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, +V and GND (ground) appear on electronics schematics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They are connected to &lt;i&gt;every &lt;/i&gt;electronics component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If every such connection is shown explicitly, then the diagrams become &lt;i&gt;too busy&lt;/i&gt; &lt;i&gt;to read&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most schematic editors elide such details from the schematics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Such information is not deleted, but only suppressed and elided from a given class of diagrams.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram Compilers - Multiple&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is at least one compiler for each dialect of a diagram language.&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component Constitution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are generally defined in a static manner with a static signature, e.g. {kind, inputs, outputs}.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are statically defined by:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;kind name&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of inputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At load-time, static components are instantiated (possibly many times).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each instance contains several methods that apply only to the load-and-run-time instances, e.g. input queue operations, output queue operations, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Load-time is distinct from run-time in that component instantiation occurs only during load time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Instances, and routing information, cannot be changed at run-time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that composite components are recursively instantiated to include an instance of all children parts along with an instance of routing information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part collections and routing information are completely private to the containing composite components [&lt;i&gt;these are akin to local variables or hidden heap-based items in other languages.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;As already mentioned, certain parts of components are instantiated at load-time, including:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;input queue (one per component)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;output queue (one per component)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;busy predicate (method)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of parts (Composite components only)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of routing information (Composite components only).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above are completely private to each instance.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Long Running Loops / Deep Recursion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components must complete their actions &quot;quickly&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components process one input event at a time, i.e. components &quot;run to completion&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no requirement for preemption.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Feedback&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can send messages to themselves, for example, to &quot;continue&quot; looping.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Model&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components model the real-world where each component gets its own CPU and memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components are connected via thin pathways.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Memory Sharing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing is not implicitly supported.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing is an optimization applicable to only certain kinds of applications.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing causes accidental complexity and complication.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing should not be used in applications that do not need it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Time Slicing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing is not implicitly supported.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing is an optimization applicable to only certain kinds of applications (e.g. operating systems).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing causes accidental complexity and complication.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing should not be used in applications that do not need it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PU Not CPU&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, there is no such thing as a &lt;i&gt;central&lt;/i&gt; processing unit. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All processors are distributed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will try to use the term PU (processing unit) or just &lt;i&gt;processor&lt;/i&gt; in place of the more common term CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If I do use the term CPU, it should be taken to mean &lt;i&gt;PU&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Cores&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores are just a half-hearted attempt at providing true distributed processing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores might also be considered to be an optimization of distributed processing, where the PUs are interconnected via high bandwith pathways and where the PUs can share memory.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Caching&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Caching is an optimization.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Caching brings a lot of &quot;baggage&quot; — accidental complexity — with it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Optimizations, such as caching, should be employed on a per-project basis and not be made generally available.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Caching should not be built into every PU nor built into every application.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IMO.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Kinds&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p8&quot;&gt;Kind is like type, but I think of types as filters (other children components), so I use a word different from &quot;type&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Data is passed through various kinds of filters that guarantee that their outputs contain a certain kinds of structure. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Filters have a second output — failure (aka exception). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Failure exceptions are connected in application-specific manners.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature Compatibility - Referential Transparency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Two Components are equivalent if their static signatures are the same.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;They are said to be pin compatible, or, referentially transparent.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Type Checking Chain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;bit —&amp;gt; collect into bytes —&amp;gt; collect into words —&amp;gt; convert to characters —&amp;gt; convert into objects —&amp;gt; check for certain fields —&amp;gt; convert to certain types&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; It is possible to use shape to define input/output instead of color.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have tried this and find that it makes the diagram &quot;too busy&quot; looking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The choice really depends on the writer(s) and the reader(s) of the diagram and the display medium (I used only B&amp;amp;W displays in the early versions of these diagrams). &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One could, also, use hidden attributes to store directional information, but I work with problems that make in-ness and out-ness important enough to be shown and not elided. In EE school, we were taught to use only one convention, since this makes diagrams accessible to a wider range of audiences (and concentrates/focusses the learning curve to a single course/curriculum). Mechanical Engineers provide 3 views of every drawing (front, side, top), but this may be reconsidered when using computers that can display 3D drawings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must remember that mathematics was developed as a notation for pen-and-paper mediums.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The 1.5D convention for writing computer code is derived from mathematics (most PLs use a 1.5D coordinate space to represent computer programs - columns of non-overlapping cells of characters arranged in rows of lines).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; See Rob Pike's &quot;Concurrency is not Parallelism&quot; in https://guitarvydas.github.io/2021/01/14/References.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; FP eliminates time (t) as a variable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This can be a useful approximation if used in moderation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of approximation is not suitable for functions that involve time, e.g. robotics, sequencers, Physics (see Nobel Laureate Ilya Prigogene's book &quot;Order Out Of Chaos).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have noticed that my operating systems (Linux, Mac, etc.) and editors (emacs, aquamacs) periodically &quot;hang&quot; due to timeless code being force-fitted into timeful functionality.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; Inheritance can be design-in explicitly using connections and containment.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;[5]&lt;/a&gt; See StateCharts for a simple way to avoid overriding https://guitarvydas.github.io/2020/12/09/StateCharts.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; For example: a component network compiler, a Statechart compiler (for implementation of some leaf components), a JavaScript compiler, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">component diagrams</summary></entry><entry><title type="html">Toolbox languages</title><link href="https://computingsimplicity.neocities.org/2021/03/16/Toolbox-Languages.html" rel="alternate" type="text/html" title="Toolbox languages" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/Toolbox%20Languages</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/Toolbox-Languages.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Toolbox Languages&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T17:31:57Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T17:31:57Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This essay enumerates and discusses various issues related to SCL&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; transpiler development.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Toolbox Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A base language that supports building SCLs easily would impose few restrictions on the transpiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Restrictions are usually anything that is done solely at compile-time.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Anything with the words &lt;i&gt;static&lt;/i&gt; or &lt;i&gt;final &lt;/i&gt;in front of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, syntactic sugar and syntax rules makes transpilation more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The toolbox — the base language — doesn't need to be a &quot;good&quot; language to program in, it simply needs to be a good language to transpile into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation can handle all of the &quot;static&quot; stuff.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Solution-specific syntax sugar can be added back in by automation (SCLs, little languages).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;First-Class Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is &quot;nice to have&quot; a toolbox language that supports first-class functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler supports first-class functions, so, one &lt;i&gt;could&lt;/i&gt; use Assembler directly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that first-class functions are just GOTOs in sheeps' clothing.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics uses the GOTO-ness of first-class functions directly, since denotational semantics concerns itself with specifying control flow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In all other cases (e.g. CPS, closures, callbacks, etc.), first-class functions must be used with extreme care.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the proverbs in &quot;GOTO Considered Harmful&quot; apply to first-class functions. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP is an attempt to &quot;structure&quot; the use of first-class gotos by applying a strict policy of one-in-causes-one-out nesting.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Any other kind of use that falls outside of these strict guidelines runs into accidental complexity and problems — eg. callbacks, multitasking, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Expression Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Expression languages — where everything is an expression and everything returns a value (there are no statements) — make SCLs easier to write.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Typing vs. Dynamic Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language — a base language — is a set of programming constructs that make transpilation easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language is different from a &quot;good&quot; programmer-level language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language is like Assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It offers almost no constraints and allows the programmer (the SCL builder) to &quot;shoot oneself in the foot&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Human programmers hate programming directly in toolbox languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transpiler-writers like using toolbox languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The transpiler adds-in the programmer-level checking - syntax and type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The toolbox language does not stand in the way.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language has little syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntactic sugar in the toolbox language makes transpilation to it more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntactic sugar is often an afterthought that is applied to a toolbox language in order to make it more usable for direct use by programmers.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp - Why Some People Love It and Others Hate It&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is a &quot;good&quot; toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp support 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp has little syntax (I argue that lisp has &lt;i&gt;no &lt;/i&gt;syntax).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is an expression language&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is dynamically-typed out-of-the-box.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Dynamically-typing is not the same as no-typing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Types are checked, albeit at &quot;runtime&quot;].&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is not strictly functional, e.g. it allows side-effects. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp does not lock programmers into a single paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the above make Lisp a good toolbox language (this may sound counter-intuitive, at first).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Restrictions of any form (syntax, static typing, etc.) stand in the way of building SCLs easily.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Javascript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript exhibits most of the toolbox characteristics of Lisp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The biggest exception is the fact that Javascript has syntax and is not an expression language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These &quot;features&quot; make it harder to use Javascript as a toolbox language than Lisp, but, Javascript is still easier to use for building transpilers than most languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript supports first-class functions and anonymous functions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These features make Javascript a good toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers have tried to write programs in Javascript directly, much like assembler programmers did before C became popular. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To make Javascript more usable for direct programming, various tweaks have been added to Javascript and various dialects of JS (e.g. Typescript) have been invented, and, many frameworks have been created.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most of these changes and additions could have been avoided through the use of SCLs as layers on top of Javascript.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rhetorical Question&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Are all dynamically-typed languages just toolbox languages in disguise?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;C and Pascal overtook Assembler programming, yet, both C and Pascal compile to assembler.&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Debuggers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Debuggers have several uses:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;a) Finding bizarre problems, e.g. ones caused by typos and insufficient design.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;b) Bench-testing architectures.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;c) Architectural Archaeology — understanding designs created by other people (e.g. when the code contains too much detail and hides the Architecture and original design).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pragmas&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Few languages support positional pragmas (e.g. like &lt;span class=&quot;s2&quot;&gt;#line&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;#file&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This means that type errors are shown relative to the toolbox language instead of being relative to the SCL source code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The fact that debuggers can single-step through the source&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; means that positional information is created and exists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In most cases, such positional information has not been made into first-class entities.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pragmas should allow making correspondences between source code position and control flow points.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, pragmas should make correspondences between environments and individual variables and the originating SCLs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Restarts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Does a program simply fail when it hits a bug, or, does it offer a menu of possible ways to continue running?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp pioneered the concept of restarts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, restarts constitue a layer used at the debugger-level.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Packages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Common Lisp goes further than most languages in terms of scoping — also called packaging.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CL (Common Lisp) variables, function names, etc. — symbols — can be qualified to be within named packages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Unfortunately, the CL &lt;span class=&quot;s2&quot;&gt;read&lt;/span&gt; function makes it difficult to transpile code using SCLs (it reads new symbols into the runtime package instead of the compile-time package — there is a disconnect between how source code is written and how it can be generated).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, I argue that packages should have been lifted into a separate layer (YAGNI) instead of being embedded inside of CL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;C, despite its many faults, professed a very simple — and usable&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; — scoping system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variables and functions could be scoped &lt;span class=&quot;s2&quot;&gt;static&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;extern&lt;/span&gt;, giving control of visibility to the user (and SCL transpiler builder).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Furthermore, C variables could be scoped to be local or global orthogonally to the &lt;span class=&quot;s2&quot;&gt;static&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;extern&lt;/span&gt; declarations.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Closures provide a way to wrap and hide variables.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language does not lock one into a certain paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Examples of poor toolbox languages are Smalltalk, Haskell, Erlang, PROLOG, and most other languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These languages emphasize single paradigms and make it difficult to use other paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In my opinion, such paradigms should have been layered on top of a more general toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is no accident that Lisp has been used for the implementation of early versions of other languages, such as GHC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is mostly paradigm agnostic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript provides a way to build classes (using prototypes) without restricting the paradigm to class-based only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler supports all programming paradigms.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Type Checking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language provides primitive operations for type-checking, thus, alleviating the SCL-builder from implementing type checking in the SCL (DSL).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp and Javascript are &quot;good&quot; toolbox languages with respect to type checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler, although being a good toolbox language in other respects, does not provide any form of type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This leaves too much work to the SCL builder.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Garbage Collection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language elides memory allocation and freeing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;GC (garbage collection) is a generally accepted form of this kind of facility.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All other forms of allocation (e.g. malloc/free, Rust ownership) are optimizations of the general problem (of allocating memory during runtime).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Freeform&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language is format-agnostic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, most languages allow arbitrary amounts of whitespace in between expressions and statements.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FORTRAN requires a specific layout — card oriented, code must be written in certain columns only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Python has specific layout rules — indentation is significant.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This feature makes it more difficult to use Python as a toolbox language (because the transpiler must fiddle with the output format and keep track of indentation details — a time consuming project).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prototypes Not Classes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language supports prototype-based code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Classes are an up-front type-check of the more general concept of prototypes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Good toolbox languages support dynamic objects.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Duck Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Good toolbox languages support dynamic objects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Duck typing is better for toolbox languages than is static typing.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Solution-Centric Language - like DSLs.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/27/Compile-Time-and-Runtime.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See my essay &quot;How Many Inputs How Many Outputs&quot; https://guitarvydas.github.io/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;E.g the Lispworks debugger can track correspondences between source code and single-stepping.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Slime and SBCL also provide a means to connect source code to program counter position.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most modern debuggers have this ability.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;in the toolbox sense&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Toolbox Languages</summary></entry></feed>