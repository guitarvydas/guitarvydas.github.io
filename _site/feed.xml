<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-05-12T08:22:46-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Table of contents</title><link href="https://computingsimplicity.neocities.org/2021/05/12/Table-Of-Contents.html" rel="alternate" type="text/html" title="Table of contents" /><published>2021-05-12T00:00:00-04:00</published><updated>2021-05-12T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/12/Table%20Of%20Contents</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/12/Table-Of-Contents.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Table Of Contents&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-12T08:21:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-12T08:21:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;&lt;img src=&quot;/assets/2021-05-12-08-21-06-Images/index2.png&quot; width=&quot;500px&quot; height=&quot;3730px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Table Of Contents</summary></entry><entry><title type="html">Arithmetic Example in Ohm-JS and grasem</title><link href="https://computingsimplicity.neocities.org/2021/05/11/Ohm-Arithmetic.html" rel="alternate" type="text/html" title="Arithmetic Example in Ohm-JS and grasem" /><published>2021-05-11T00:00:00-04:00</published><updated>2021-05-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/11/Ohm%20Arithmetic</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/11/Ohm-Arithmetic.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This essay discusses how to build the simple “Arithmetic” example found in &lt;br /&gt;
&lt;a href=&quot;https://github.com/harc/ohm/tree/master/examples/math&quot;&gt;Ohm-JS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We create an identity grammar.&lt;/p&gt;

&lt;p&gt;We create code for Python and JS and Lisp from the specification.&lt;/p&gt;

&lt;p&gt;We discuss the difference between upper-case and lower-case grammar rules.&lt;/p&gt;
&lt;h1 id=&quot;basics&quot;&gt;Basics&lt;/h1&gt;
&lt;p&gt;Ohm-JS is a PEG parser library (it calls itself a language).&lt;/p&gt;

&lt;p&gt;PEG is a lot like REGEX, but better.&lt;/p&gt;

&lt;p&gt;PEG is easy to use and can match things that REGEX can’t match (in fact, PEG can match things that other parsers can’t match).&lt;/p&gt;

&lt;p&gt;Ohm-JS is my (current) favorite version of PEG for 2 main reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The grammar remains pure and readable.  The code for doing-something with the matches does not go in the grammar, as it does in most other PEG tools that I’ve seen.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;Ohm-Editor&lt;/a&gt; makes it very easy to develop and debug grammars.  PEG is already good for developing grammars, but Ohm-Editor is maybe 10x better than even PEG.  I usually spend about a day or two debugging PEG grammars, but with Ohm-Editor I measure development time in 10’s of minutes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;Ohm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use the same grammar to generate code in the 3 languages.&lt;/p&gt;

&lt;h1 id=&quot;grasem-and-glue&quot;&gt;GRASEM and GLUE&lt;/h1&gt;
&lt;p&gt;I developed a tool that I call &lt;em&gt;glue&lt;/em&gt; to dovetail with Ohm-JS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Glue&lt;/em&gt; generates the what-to-do-with-the-matches code for Ohm-JS.  (Ohm-JS calls this “the semantics” and expects us to program it in JavaScript).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Grasem&lt;/em&gt; is a micro-tool that joins an Ohm-JS grammar together with a &lt;em&gt;glue&lt;/em&gt; specification into one file (a .grasem file).  (Guess what?  The &lt;em&gt;glue&lt;/em&gt; tool was developed using Ohm-JS.)&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;grasem&lt;/em&gt;, we can write a transpiler - using only simple operations - and not touch JS at all.&lt;/p&gt;

&lt;p&gt;Briefly - a &lt;em&gt;glue&lt;/em&gt; spec consists of one rule for every rule in the grammar.  The name of the rule must be the same as the name used to name a grammar rule.  The LHS of a &lt;em&gt;glue&lt;/em&gt; rule takes one parameter for each partial match in the grammar rule (the match can be a single match or a tree-match, with slightly different syntax for each kind of parameter).  The RHS of a &lt;em&gt;glue&lt;/em&gt; rule consists of an optional chunk of JS followed by an output format (using the JS back-tick syntax).  &lt;em&gt;Glue&lt;/em&gt; also allows the programmer to create a set of scoped (inherited) variables that annotate the tree-walk.  A &lt;em&gt;glue&lt;/em&gt; rule recursively walks the CST (concrete, not abstract, syntax tree) built by the Ohm-JS grammar and outputs code as per the specification.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;glue&lt;/em&gt; syntax is meant for machine-readability instead of human-readability.  (Hint: Someone might want to create a more human-readable syntax, using, of course, &lt;em&gt;Ohm-JS&lt;/em&gt; or &lt;em&gt;glue&lt;/em&gt; or &lt;em&gt;grasem&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&quot;&gt;Glue Manual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;Grasem Documention&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;identity-grammar&quot;&gt;Identity Grammar&lt;/h1&gt;
&lt;p&gt;The first step in developing a grasem program is to write the grammar using the Ohm-Editor.&lt;/p&gt;

&lt;p&gt;The second step is to create &lt;em&gt;glue&lt;/em&gt; code that outputs the input - exactly.  Most parser technologies strip and discard whitespace at an early stage.&lt;/p&gt;

&lt;p&gt;An example of these two steps can be seen in commit 5dd6c3df5a31e19cc09a7ff3ea3192a0eeb57976 of &lt;a href=&quot;https://github.com/guitarvydas/arithmetic&quot;&gt;arithmetic identity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This set of 2 steps - creating an identity transpiler - produces a working a grammar and an output spec.&lt;/p&gt;

&lt;p&gt;In subsequent steps, the programmer hacks on the output spec to perform desired manipulations.&lt;/p&gt;

&lt;p&gt;In this (simple) example, I cloned the &lt;em&gt;grasem&lt;/em&gt; spec 3 times and hacked on the &lt;em&gt;glue&lt;/em&gt; specs of each clone to produce Python, JS and Lisp code.  The final result is in &lt;a href=&quot;https://github.com/guitarvydas/arithmetic&quot;&gt;my github arithmetic repo&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;upper-case-vs-lower-case&quot;&gt;Upper-case vs Lower-case&lt;/h1&gt;
&lt;p&gt;Ohm-JS tries to improve grammar readability by skipping over whitespace.&lt;/p&gt;

&lt;p&gt;In Ohm-JS, rules that begin with capital letters, perform automatic whitespace skipping.&lt;/p&gt;

&lt;p&gt;Ohm-JS rules that begin with lower-case letters work like PEG, requiring the programmer to specify matches for whitespace.&lt;/p&gt;

&lt;p&gt;PEG, unlike other parsing technologies, allows programmers to write, both, the scanner and the parser in the same language (for example, to use YACC, you need to provide a LEX scanner - YACC and LEX are two completely different things with separate syntaxes).  This feature makes PEG more accessible to non-compiler-writers, but, it means that grammars are sullied by the addition of whitespace sub-rules.&lt;/p&gt;

&lt;p&gt;If one is concerned more with machine-readability than with human-readability (as I am), then this feature is of little help.&lt;/p&gt;

&lt;p&gt;When one writes grammars for languages that use commas and semi-colons (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; resp), this Ohm-JS feature is a time-saver, but, when one writes grammars for comma-less languages, this feature can cause strange behaviour ((you don’t need to understand this point to be able to just-use Ohm-JS - e.g. “two words” is matched as one word “twowords”.  The secret to dealing with this kind of problem is to use tokens, or, to create a list of delimiters in the grammar, or, to build grammars in a staged manner (the first stage is written using only lower-case rules)).&lt;/p&gt;

&lt;h1 id=&quot;arithmetic-in-3-languages---python-js-and-lisp&quot;&gt;Arithmetic in 3 Languages - Python, JS and Lisp&lt;/h1&gt;
&lt;p&gt;The 3 language transpilers are invoked by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash&lt;/code&gt; scripts:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arithmetic % ./pyrun.bash 
9.11111111111111
7
123
42
arithmetic % ./jsrun.bash
9.11111111111111
7
123
42
arithmetic % ./lisprun.bash
82/9
7
123
42
arithmetic % 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;wasm&quot;&gt;WASM&lt;/h1&gt;
&lt;p&gt;Wasm is next.&lt;/p&gt;

&lt;h1 id=&quot;dissection&quot;&gt;Dissection&lt;/h1&gt;
&lt;p&gt;Let’s look at pymath.grasem.&lt;/p&gt;

&lt;p&gt;Let’s look at the bottom-most grammar rule (the middle of the file, just before the closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  number  (a number)
    = ...
    | digit+             -- whole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The grammar rule says that a whole number is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digit+&lt;/code&gt;.  PEG uses syntax that is similar to REGEX, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digit+&lt;/code&gt; means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match 1 or more digits&lt;/code&gt;.  Digit is a built-in rule that comes with out-of-the-box Ohm-JS.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; means 1-or-more, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; means 0-or-more and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; means optional (0 or 1).&lt;/p&gt;

&lt;p&gt;The comment in the parentheses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a number)&lt;/code&gt; is used only during the creation of parse-error messages and is ignored in successful parses.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt; grammar rule is broken into two branches&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-- fract&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-- whole&lt;/code&gt; branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each branch is named by the rule name and the branch name, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_whole&lt;/code&gt; in this case.&lt;/p&gt;

&lt;p&gt;(Notice that the branches are “uneven” in match length.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_fract&lt;/code&gt; branch matches 3 things - “digit*” and “.” and “digit+”.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_whole&lt;/code&gt; branch matches only 1 thing - “digit+”.  That is why we need separate sub-names for the branches).&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;glue&lt;/em&gt; section contains a matching rule&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;number_whole [@n] = [[${n}]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This rule says that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_whole&lt;/code&gt; takes one parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; and that it is a tree parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@n&lt;/code&gt; matching up with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digit+&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; are tree parameters).&lt;/p&gt;

&lt;p&gt;The RHS of this &lt;em&gt;glue&lt;/em&gt; rule gives the rewrite surrounded by double-brackets&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[${n}]]&lt;/code&gt;.  The RHS says to make the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; into a string and to return that string.  See JS back-tick string documentation for further information on how to format the RHS.&lt;/p&gt;

&lt;p&gt;OTOH, the AddExp_plus rule is&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AddExp_plus [e1 op e2] = [[${e1}+${e2}]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which says that AddExp takes 3 parameters (e1, op and e2), none of which are tree parameters.  The rewrite is fairly simple - make e1 and e2 into strings and stick a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; character between them.&lt;/p&gt;

&lt;h2 id=&quot;rabbit-hole&quot;&gt;Rabbit Hole&lt;/h2&gt;
&lt;p&gt;Basically, anything inside the dollar form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${ ... }&lt;/code&gt; is evaluated (by Javascript), whereas everything else is just copied to the output string.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Glue&lt;/em&gt; does almost no work here.  &lt;em&gt;Glue&lt;/em&gt; just wraps back-ticks around the rewrite string and relies on JS to do the actual work.  We transpile the &lt;em&gt;.grasem&lt;/em&gt; spec into a .js file and then run the JS file (using node.js).  See the pyrun.bash file.  You can view the generated intermediate file by looking at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pymath.js&lt;/code&gt;.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pymath.js&lt;/code&gt; is a &lt;em&gt;JS app&lt;/em&gt; that &lt;em&gt;creates&lt;/em&gt; a python program - see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_temp.py&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deeper-rabbit-hole&quot;&gt;Deeper Rabbit Hole&lt;/h3&gt;
&lt;p&gt;Aside: this example is quite simple - the &lt;em&gt;glue&lt;/em&gt; rules consist of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name [ parameters ] = [[rewrite]]&lt;/code&gt;.  There is no optional JS on the RHS (optional JS would be enclosed in double-braces)).&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Introduction This essay discusses how to build the simple “Arithmetic” example found in Ohm-JS.</summary></entry><entry><title type="html">Diagram based languages</title><link href="https://computingsimplicity.neocities.org/2021/05/11/Diagram-Based-Languages.html" rel="alternate" type="text/html" title="Diagram based languages" /><published>2021-05-11T00:00:00-04:00</published><updated>2021-05-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/11/Diagram%20Based%20Languages</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/11/Diagram-Based-Languages.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Diagram Based Languages&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-11T23:51:36Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-11T23:51:36Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    p.p3 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 7.0px 0.0px; font: 10.0px Times}
    p.p6 {margin: 0.0px 0.0px 7.0px 36.0px; text-indent: -18.0px; font: 10.0px Times}
    li.li2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    li.li4 {margin: 0.0px 0.0px 14.2px 0.0px; font: 12.0px Times}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 12.0px Times}
    span.s3 {text-decoration: underline ; color: #000080}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DaS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is often believed that programming languages come in only 2 forms: (1) textual and (2) visual.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Visual Programming has become to mean pixel-based image processing.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have implemented an intermediate form of programming.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Something between (1) textual and (2) pixel-based image processing.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call it DaS – Diagram as Syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is &lt;i&gt;diagrammatic programming&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I used to call this “visual programming”, but that phrase has come to mean something else, something much harder to implement.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;aha&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I backed into a number of design principles.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will do my best to summarize them below...&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Most programming languages and compilers are based on glyphs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;i&gt;character &lt;/i&gt;is a small bitmap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;i&gt;character &lt;/i&gt;is a &lt;i&gt;glyph.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;Programming languages are based on grids of non-overlapping glyphs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Language design has been driven by programming-editor capabilities, e.g. emacs, Vim, VisualStudio.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Fixed-font programming editors determine the shape of programming languages (not the other way around).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programming editors are frozen in the 1950’s, whereas non-programming editors (e.g. Word) have advanced to include variable-sized fonts, diagrams, images, etc.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Modern hardware is not constrained to editing non-overlapping glyphs in a grid.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;It is OK to mix text and diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A diagrammatic language does not need to be 100% diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some concepts, e.g. concepts like “a = b + c”, are better expressed as text.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Diagrams for concurrency need only a few overlapping glyphs&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; – (1) boxes, (2) arrows, (3) text. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Diagrams for StateCharts need only a few overlapping glyphs – (1) ellipses (or rounded boxes), (2) curved lines, (3) text&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Backtracking is OK.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;PROLOG can be used as a parser.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;A single app can use more than one paradigm, e.g. if PROLOG backtracking is used for parsing, the rest of the app is not constrained to use only PROLOG&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;DSLs everywhere – multiple DSLs can (should)&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; be used in one project.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is OK to build source-to-source converters that let the base language do the heavy lifting – this makes building DSLs much less onerous.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Hierarchical composition – makes Software Architecture, DI&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; easier and, more expressive, and promotes &lt;i&gt;divide &amp;amp; conquer&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;I want to derive interesting information about a diagram (code).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, I want to know the (x,y) for a box, I want to know (x,y) for the start-point of a line, I want to know (x,y) for the end-point of a line.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I can used backtracking pattern matching to derive some of this information. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Current PLs (programming languages) are based on the concept that, in (x,y),“x” is a character position and “y” is a line number.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Characters are strictly non-overlapping and sequential.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I would say that characters are not 2D, but something less, like 1.5D.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Current hardware can do better – (x,y), &lt;i&gt;can&lt;/i&gt; be represented as pixel coordinates and full 2D glyphs can overlap.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;I need to ensure that my “editor” gives me enough information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The requirements for a diagrammatic programming editor are different from the requirements for a business editor (like Word, VISIO, Draw.io, etc.).&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;SVG and XML based editors and diagram editors produce diagrams that contain much of this needed information, but they also contain lots of noise (aka syntactic sugar).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It might be better to build one’s own diagram-programming editor, but in the meantime, Draw.io, yEd, etc., might suffice.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;I am more concerned with DI than with Maintenance Engineering, Efficiency Engineering, Test Engineering, etc., etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;From this perspective – i.e. DI - I don’t care about the efficiency of parsers that employ backtracking, as long as it doesn’t keep me waiting, on my computer.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Hierarchical composition – keeps things small.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;O(3) doesn’t matter when things are small.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;O(3) still runs “fast enough”.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Box-and-Arrow Diagrams and Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The canonical form of “visual programming” - which I call DaS – is the box-and-arrow diagram.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a network diagram wherein nodes are functions instead of full-blown computers.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most attempts at implementing box-and-arrow diagrams have failed (as far as I know).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most attempts at “visual programming” have failed (as far as I know – visual programming can produce pretty pictures, but do not address PLs).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have been successfully using box-and-arrow diagrams in production since the mid-1990’s.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FBP&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; has been using box-and-arrow diagrams since the 1960’s.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;UNIX® pipelines are a degenerate form of box-and-arrow-diagrams.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why have most attempts at box-and-arrow diagrams failed?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Box-and-arrow diagrams do not work well in the sequential paradigm.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the working instances of box-and-arrow diagrams – that I know of – treat boxes as being concurrent components and treat arrows as pipelines of concurrent messages between (concurrent) components.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® pipelines and existing implementations of FBP use heavy-weight &lt;i&gt;threads&lt;/i&gt; to implement concurrency.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I implemented the concurrent paradigm without using &lt;i&gt;threads&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I used something like closures.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;“Visual Programming” also meant, for a while, software development using GUIs. MFC and Visual BASIC were touted as “visual programming”.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Here, I am using the word “glyph” to mean “atomic graphical symbol”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See also &lt;a href=&quot;https://en.wikipedia.org/wiki/Glyph&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://en.wikipedia.org/wiki/Glyph&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Unlike character glyphs, atomic graphical elements are not fixed size, but, like character glyphs they can be bound to a single input gesture (e.g. a keystroke).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are not many of these kinds of glyphs in any given notation (e.g. about 3).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See my essay “DSLs - The Future of Computing”&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Design Intent&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See my essay “Divide And Conquer”&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&amp;lt;ref to FBP&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See my essay “Concurrency is a Paradigm”&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Diagram Based Languages</summary></entry><entry><title type="html">Concurrency is not parallelism</title><link href="https://computingsimplicity.neocities.org/2021/05/11/Concurrency-is-not-Parallelism.html" rel="alternate" type="text/html" title="Concurrency is not parallelism" /><published>2021-05-11T00:00:00-04:00</published><updated>2021-05-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/11/Concurrency%20is%20not%20Parallelism</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/11/Concurrency-is-not-Parallelism.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Concurrency is not Parallelism&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-11T23:43:05Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-11T23:43:05Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    p.p3 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p4 {margin: 0.0px 0.0px 7.0px 0.0px; font: 10.0px Times}
    li.li2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    span.s1 {text-decoration: underline}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font: 12.0px Times}
    span.s4 {font: 7.0px Times}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Central Point&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency is a programming &lt;i&gt;paradigm&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parallelism is an application problem, &lt;i&gt;not&lt;/i&gt; a paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parallel programs must use the concurrent paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concurrent programs, though, are not necessarily parallel.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rob Pike's Talk&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;https://vimeo.com/49718712&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Conflating Concurrency and Parallelism&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I used to conflate parallelism and concurrency until I watched Rob Pike’s talk.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I used to try to convince people that they could write concurrent programs using something “better” than Processes (Threads).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What I didn’t realize was that I was trying to explain the difference between the &lt;span class=&quot;s1&quot;&gt;paradigm&lt;/span&gt; called “concurrency” and the application &lt;span class=&quot;s1&quot;&gt;problem&lt;/span&gt; called “parallelism”.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A parallel program &lt;i&gt;must&lt;/i&gt; run on multiple processors.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A program designed using the concurrent paradigm can run on a &lt;i&gt;single&lt;/i&gt; Processor or on multiple processors. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The advantages of using the concurrent paradigm can be seen even on a single processor system.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One can write concurrent software that uses only a single Processor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One cannot write parallel software that uses a single Processor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can &lt;i&gt;simulate&lt;/i&gt; parallel software on a single processor, but this is not necessary (although it might help debugging, while hindering debugging). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multi-tasking – as we know it today – is a &lt;i&gt;simulation&lt;/i&gt; of parallelism.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multi-tasking, as we know it today, tries valiantly to solve too many problems at once – e.g. memory sharing, bandwidth optimization, time-sharing, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multi-tasking as we know it today, is a simulation of parallelism that attempts to optimize concurrency using multiple stacks (a form of memory sharing optimization + processor optimization and sharing).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing the Concurrent Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing the Concurrent Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A concurrent system is composed of a number of &lt;i&gt;closures&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is a single distinguished routine, called the Dispatcher().&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Distpacher() invokes closures, at random.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That’s all there is.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is simple – almost too simple – to implement concurrency in any language that supports &lt;i&gt;closures&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is possible to implement the concurrent paradigm in C or assembler, too, one just needs to pay more attention to details.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As simple as this sounds, the concurrent paradigm forces one to program in a completely different manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The program cannot rely on synchrony.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The program – composed of many communicating closures – must be written in a way that acknowledges that &lt;i&gt;any&lt;/i&gt; closure might be awakened at &lt;i&gt;any &lt;/i&gt;time (by the Dispatcher()).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This seemingly simple requirement causes programmers to re-evaluate control-flow coupling.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Operating system Processes and threading libraries are heavy-handed approaches to creating closures and a Dispatcher().&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some, &lt;i&gt;but not most&lt;/i&gt;, cases it is necessary to use hardware to protect one program from another (e.g. MMUs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some, &lt;i&gt;but not most&lt;/i&gt;, cases it is necessary to optimize memory usage using memory-sharing and stacks (stacks are just an optimized form of linked lists).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some, &lt;i&gt;but not most&lt;/i&gt;, cases it is necessary to use time-sharing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When you strip these features out of threading libraries, you get multi-tasking that is easy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Closures have been around for a long time, and they don’t require MMUs, memory sharing, stacks and time-sharing.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Closures are like GOTOs – they &lt;i&gt;can&lt;/i&gt; be misused.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Organizing closures in a hierarchical manner (see my other essays on this subject) is one way to tame their use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We have found that we need “languages” that encourage certain usage patterns – e.g. C vs. assembler programming (C encourages Structured control flow, through if-then-else statements, etc.) - e.g. OO encourages data encapsulation (but leaves control-flow encapsulation wide open, if not worse off).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;GOTOs are assembler-level details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTOs must exist.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTOs must be tamed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, Closures exist and must be tamed.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Message-passing is another GOTO-like atomic element.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It must be tamed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Message-passing enables the concurrent paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A component can send another component a message, but the receiving component is not constrained as to when it deals with the message.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Message-passing defeats rendezvous.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Message-passing allows asynchrony.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The concurrent paradigm requires asynchrony.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Backus asked “Can Programming Be Liberated From The von Neumann Style?”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The question is a good one.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The answer that Backus proposed was insufficient, though.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Mathematics, as we know it today, implies synchronous evaluation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We need to think of mathematics and synchrony being &lt;i&gt;isolated&lt;/i&gt; on asynchronous &lt;i&gt;islands&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Computers are parallel by default.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Forcing synchrony onto every part of computing is contrary to the manner in which computers work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, multi-tasking is considered to be a “hard” problem mostly because multi-tasking is being solved using only one paradigm – a paradigm that is not the best choice for every problem in a particular solution.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is like trying to emulate C-like &lt;i&gt;format&lt;/i&gt; statements in PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It can be done, but results in accidental complexity.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;“Yes” to synchronous operations floating on asynchronous islands.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;“No” to synchronous &lt;i&gt;everything&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is OK to use more than one paradigm at a time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, again, PROLOG leads the way towards thinking in relational terms, but casting &lt;i&gt;everything &lt;/i&gt;as a relation brings unnecessary difficulty.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Paradigms are DSLs draped over full-featured assemblers.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Concurrent API&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The API for the concurrent paradigm consists of one routine – Send().&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples of the Concurrent Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;These are some examples of the concurrent paradigm:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;UNIX® shell pipelines&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;closures using queues/mailboxes for inter-closure communication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;O/S threads, and threading libraries, are often conflated with the concurrent paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;O/S threads – and many threading libraries – solve much greater problems,&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; and are poor examples of the concurrent paradigm.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Advantages to Using the Concurrent Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Encourages the absence of dependencies&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Isolation.&lt;/li&gt;
  &lt;hr&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Most HLL PLs started out life as DSLs built on top of full-featured substrate languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Greenspun’s 10&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; rule is usually taken as a joke, but taken in the light of HLLs-as-DSLs, it begins to ring true.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;OK, OK, I am simplifying.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are some house-keeping functions that might be necessary.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We definitely don’t need RETURN and we don’t need CATCH/THROW.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Send() is sufficient. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RETURN?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use Send() instead. CATCH/THROW?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use Send() instead.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;LOOP?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get rid of it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Recursion?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get rid of it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[Also, we don’t need dynamicism.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dynamic programming is just another way to say “self modifying code”, which is even worse than using the word “GOTO”]. RETURN &amp;amp; CATCH/THROW &amp;amp; LOOP &amp;amp; Recursion make sense &lt;i&gt;only &lt;/i&gt;on a synchronous island.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They are not atomic elements of the concurrent paradigm.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Problems such as time-sharing, memory-sharing, protecting apps from one another, protecting against long-running apps, code-reuse, etc..&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most single apps don’t need these features / problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that mutual-multitasking is OK within a single app.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A “bug” is just a “bug” regardless of whether the concurrent paradigm or the synchronous paradigm is used.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Concurrency is not Parallelism</summary></entry><entry><title type="html">Software Components 101 - Engine Part 4 Review</title><link href="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-4-Review.html" rel="alternate" type="text/html" title="Software Components 101 - Engine Part 4 Review" /><published>2021-05-10T00:00:00-04:00</published><updated>2021-05-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine%20Part%204%20Review</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-4-Review.html">&lt;p&gt;In beginning to work on part 5 of this series of essays, I noticed a design bug.&lt;/p&gt;

&lt;p&gt;Arrows contain two parts (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrowBegin&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrowEnd&lt;/code&gt;) and should be written as a pair referencing the containing composite component.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;outline text=&quot;comp “c”&quot;&amp;gt;
  ...
    &amp;lt;outline text=&quot;arrow c/c  c/e/m&quot; /&amp;gt;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should create a pair, referring to “comp c”, and, should create a beginning and end for the pair, like…&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comp(id5, c).
arrow(id5,idXXX).
arrowBegin(idXXX,c_c).
arrowEnd(idXXX,[c_c_m]).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(In part 5, we will convert the synonyms &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;c_c&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;c_c_m&quot;&lt;/code&gt; into ids.  This essay is only about fixing the design bug mentioned above).&lt;/p&gt;

&lt;p&gt;This bug should be relatively easy to repair.  We need to visit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grasem&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glue&lt;/code&gt; code for arrow and add another fact.&lt;/p&gt;

&lt;p&gt;[N.B. There is at least one other appeasement to human-readability - the use of PROLOG lists (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[...]&lt;/code&gt;) in arrowEnd facts.  I don’t think that we’ll bother to fix this.  The pure form would be to unroll arrowEnd and make it into multiple facts, i.e. to express the Lists as multiple facts (something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beginArrowEnd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrowEndNext&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrowEndEnd&lt;/code&gt;). PROLOG lets us “get away” with lists of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ... ]&lt;/code&gt; and we will let this impurity stand, for now.  This is an interim project which doesn’t need to be fixed yet (YAGNI)].&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">In beginning to work on part 5 of this series of essays, I noticed a design bug.</summary></entry><entry><title type="html">Software components 101 engine part 3 factbase</title><link href="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html" rel="alternate" type="text/html" title="Software components 101 engine part 3 factbase" /><published>2021-05-10T00:00:00-04:00</published><updated>2021-05-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/10/Software%20Components%20101%20-%20Engine%20Part%203%20Factbase</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Engine Part 3 Factbase&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-10T00:53:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-10T00:53:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; min-height: 10.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Goal of this step is to construct a factbase from the diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use my &lt;i&gt;grasem &lt;/i&gt;tool for this step.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use SWI PROLOG (swipl) for creating queries, hence, target its syntax using grasem.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grasem Overview&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Grasem combines Ohm-JS grammar specification and &lt;i&gt;glue&lt;/i&gt; semantic specifications in one file.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Grasem simply glues a grammar and a &lt;i&gt;glue&lt;/i&gt; spec together into one input file.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It splits the two specifications apart, runs the &lt;i&gt;glue&lt;/i&gt; transpiler then glues it into a JS file along with a grammar to produce a single JS program.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This could be done by a shell script (e.g. by using /usr/bin/split)&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why combine both parts?&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Keep all assets of a project together, where possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Why keep the parts separated?&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;isolation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;psychological &quot;trick&quot; to prevent premature optimization (something encouraged by current PLs)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;low-level optimization should not be addressed during architecture (low-level details get in the way)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;for example, questions like &quot;is this implemented as a list or as an array?&quot; should not enter at the Architectural level and, maybe, not even at the Engineering level — such details are the domain of Implementation&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS creates parsers from grammar specifications.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS parsers use JS as the toolbox language.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Glue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; tool supplies JS code to output code depending on matching done by the grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; allows the programmer to specify an output action for every rule in the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Glue&lt;/i&gt; uses JS back-tick string notation (`...${x}…`).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The combination of a grammar plus simple string outputting is curiously powerful.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This tool — the &lt;i&gt;grasem &lt;/i&gt;tool — is used to transpile a .opml file into a PROLOG factbase that can be queried.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;.SVG files could be used instead of .opml files.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I choose to use .opml for this — simple — example only because I have ready access to a non-svg drawing tool (&lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;) plus an .opml editor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Editing .SVG is not the primary purpose of this essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I need to convince you — the reader — that this process is straight-forward and that it can be easily automated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that performing the transpilation steps manually — and showing the intermediate steps — will be a convincing argument for the simplicity of this technique.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sight-Reading&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To show this set of steps, I simply sight-read the diagram and transcribed it into a tree-view. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The tree-view tool, that I use,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; can export the tree in .opml format. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;From that point forward, we can apply automation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I happen to use Ohm-JS and PROLOG and UNIX® shell scripts, but, other technologies (like other parser tools, miniKanren, etc.) could be used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As an example of converting a diagram, let us look at the top-level diagram in this example…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/kernel-Copy of Rough-in Processes.png&quot; width=&quot;500px&quot; height=&quot;179px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Top Level Diagram For Creating a Runnable&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/kernel-Copy of Rough-in Processes Labelled.png&quot; width=&quot;500px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 2 Tagged Top Level Diagram For Creating a Runnable&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In this diagram, we see&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;3 circles (two green, one yellow)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;3 rounded rectangles (one gray, the other two white&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;2 cylinders&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;14 small squares (2 blue, 8 green, 4 yellow)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;9 arrows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;For convenience in this example, we've tagged most of the above with single-letter tags &lt;span class=&quot;s1&quot;&gt;a-m&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We didn't bother to tag the largest, gray rectangle.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;A true drawing editor would assign an (x,y) point to the position of each of these graphical items.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For convenience, we've omitted this information and eye-ball the &lt;i&gt;contains&lt;/i&gt; relationship directly (this is easier for human manual input than trying to calculate and specify the (x,y) of every item).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A fully automated transpiler would use the (x,y) coordinates of all items to infer &lt;i&gt;contains&lt;/i&gt; and &lt;i&gt;intersects&lt;/i&gt; relationships.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have found it useful to generate a bounding box (left/top/right/bottom) for each graphical item before inferring containment and intersection relationships.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Likewise, for human input, it was easier to directly assign text items to the various objects.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A fully automated transpiler would infer text containment from the (x,y) coordinates of the text items and the various graphical items.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The actual text items are seen in the non-tagged diagram Fig. 1.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We start sight-reading by creating an item in the tree view corresponding to each graphical item on the diagram:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/Screen Shot 2021-05-09 at 3.22.58 PM.png&quot; width=&quot;500px&quot; height=&quot;439px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;We have left out the text for the top level rounded rect.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is probably a typo bug.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We'll fix it later.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Then, for each item in the diagram, we insert attributes into the tree view. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;For example, &quot;cicle a&quot; has 3 attributes:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;color (green)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;stroke-width (3)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;text (&quot;my Composite Template&quot;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Note that stroke-width=3 will become significant when we infer information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A Port with stroke-width=3 will be considered to be an implicit Port — we do not draw connection lines to/from implicit Ports (and we let dynamic inheritance make the connections).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;OPML2FB Source Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The opml2fb.grasem file contains&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;a grammar that matches the .opml entries (YAGNI - we match only what we need — this is a one-shot transpiler, more like a REGEX than a compiler)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a set of rewrite rules (JS back-tick strings) that produce the output — in this case, we want to convert .opml &lt;span class=&quot;s1&quot;&gt;&amp;lt;outline …&amp;gt; … &amp;lt;/outline&amp;gt;&lt;/span&gt; into facts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=3&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is converted to the facts:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id1, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id1, green).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id1, 3).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid2, &quot;my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id1, tid2).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar rules involved in this conversion are:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject = &quot;text=\&quot;circle &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr = &quot;text=\&quot;color=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr = &quot;text=\&quot;stroke-width=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr = &quot;text=\&quot;text=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The pattern matches are tortuous due to the actual structure of the &amp;lt;outline…&amp;gt; input&lt;/i&gt;.]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and the outputting rules are:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject [teqc str] = [[circle(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr [teqc str] = [[color(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr [teqc str] = [[strokeWidth(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr [teqc str] =&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[str(${scopeGet (&quot;tobject&quot;)}, ${changeUnicodeQuotes (str)}).\ntext(${scopeGet (&quot;gobject&quot;)}, ${scopeGet (&quot;tobject&quot;)}).]]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first grammar rule&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject = &quot;text=\&quot;circle &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;says that the grammar matches&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'text=&quot;circle '&lt;/span&gt; followed by a stringTail match&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringTail = notDQ* dq&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After such matches occur, the &lt;i&gt;glue &lt;/i&gt;rules are invoked with matches as parameters to the rules (&lt;span class=&quot;s1&quot;&gt;teqc&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;str&lt;/span&gt;, in this case):&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject [teqc str] = [[circle(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue &lt;/i&gt;rule says that when a match of a &lt;span class=&quot;s1&quot;&gt;circleObject&lt;/span&gt; happens, output it as&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(xxx,yyy).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;where &lt;span class=&quot;s1&quot;&gt;xxx&lt;/span&gt; is the ID of the most-recent object and &lt;span class=&quot;s1&quot;&gt;yyy&lt;/span&gt; is the &lt;span class=&quot;s1&quot;&gt;stringTail&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to create a new ID for every graphical object and we want attributes to reference the IDs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We create new IDs by calling scopeAdd(&quot;gobject&quot;,…) and we reference such IDs by calling &lt;span class=&quot;s1&quot;&gt;scopeGet(&quot;gobject&quot;)&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;New &lt;span class=&quot;s1&quot;&gt;gobject&lt;/span&gt; ID's are created during the tree-walk, and, various sub-rules reference and output this value during the tree-walk.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We use &lt;span class=&quot;s1&quot;&gt;scopeAdd(&quot;…&quot;,value)&lt;/span&gt; to insert values into the dynamic scope and &lt;span class=&quot;s1&quot;&gt;scopeGet(&quot;…&quot;)&lt;/span&gt; to fetch the most recent value.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The opml2fb.grasem file is included below:&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;OPML2FB {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OPML = xmlHeader opmlHeader head body Outline endBody endOPML&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeader = &quot;&amp;lt;opml&quot; opmlHeaderChar* &quot;&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeader = &quot;&amp;lt;?xml&quot; xmlHeaderChar* &quot;?&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;head = &quot;&amp;lt;head&amp;gt;&quot; headChar* &quot;&amp;lt;/head&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;body = &quot;&amp;lt;body&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endBody = &quot;&amp;lt;/body&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endOPML = &quot;&amp;lt;/opml&amp;gt;&quot; (newline | end)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Outline = OutlineNoContent | OutlineWithContent&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineNoContent = &quot;&amp;lt;outline&quot; item &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineWithContent = &quot;&amp;lt;outline&quot; item &quot;&amp;gt;&quot; Outline* &quot;&amp;lt;/outline&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;item = noise | graphicalObject | attribute&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;graphicalObject = lineObject | arrowObject | circleObject | compObject | rectObject | cylinderObject&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = colorAttr | strokeWidthAttr | textAttr | genericAttr&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;noise = &quot;text=\&quot;lines&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject = &quot;text=\&quot;circle &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;compObject = &quot;text=\&quot;comp &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rectObject = &quot;text=\&quot;rect &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;cylinderObject = &quot;text=\&quot;cyl &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;lineObject = &quot;text=\&quot;line &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;arrowObject = &quot;text=\&quot;arrow &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr = &quot;text=\&quot;color=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr = &quot;text=\&quot;stroke-width=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr = &quot;text=\&quot;text=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;genericAttr = &quot;text=&quot; string&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;headChar = ~&quot;&amp;lt;/head&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeaderChar = ~&quot;&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeaderChar = ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;newline = &quot;\n&quot;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = dq notDQ* dq&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringTail = notDQ* dq&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;dq = &quot;\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQ = ~&quot;\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OPML [xmlhdr opmlhdr head body outline endbody endopml] =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[${xmlhdr}${opmlhdr}${head}${body}${outline}${endbody}${endopml}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeader [begin @hdr close nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeader [begin @hdr close nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;head [begin @hdr close nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;body [begin nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endBody [begin nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endOPML [begin nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Outline [o] = [[${o}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineNoContent [begin t slashClose] = [[${t}\n]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineWithContent [begin t close @o slasho] =  [[${t}${o}]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;headChar [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeaderChar [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeaderChar [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;newline [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;item [i] = [[${i}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;graphicalObject [o] = [[${o.trim ()}\n]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = [[${a.trim ()}\n]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject [teqc str] = [[circle(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;compObject [teqc str] = [[comp(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rectObject [teqc str] = [[rect(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;cylinderObject [teqc str] = [[cylinder(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;lineObject [teqc str] = [[line(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;arrowObject [teqc str] =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[[&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;arrowBegin(${scopeGet (&quot;gobject&quot;)}, ${abegin (str)}).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;arrowEnd(${scopeGet (&quot;gobject&quot;)}, ${aend (str)}).]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr [teqc str] = [[color(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr [teqc str] = [[strokeWidth(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr [teqc str] =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[str(${scopeGet (&quot;tobject&quot;)}, ${changeUnicodeQuotes (str)}).\ntext(${scopeGet (&quot;gobject&quot;)}, ${scopeGet (&quot;tobject&quot;)}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;genericAttr [teq str] = [[${teq}${str}]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string [q1 @cs q2] = [[${q1}${changeUnicodeQuotes (cs)}${q2}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringTail [@cs q2] = [[${changeUnicodeQuotes (cs)}${q2}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQ [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;dq [c] = [[]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;noise [a b] = [[]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The resulting factbase is:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, a).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, b).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, c).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, f).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, g).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, h).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, j).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, l).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, n).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, s).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, v).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, a).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, b).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, c).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, f).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, h).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, l).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, m).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, p).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, s).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [d]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [f]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [h]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [j]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [l]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [m]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [o]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [p]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [r]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [t]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [u]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [d]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [f]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [g]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [h]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [k]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [l,o]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [l]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [n]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [r]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id1, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id11, &quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id13, &quot;d&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id3, &quot;b&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id45, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id46, &quot;b&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id47, &quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id7, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id70, &quot;d&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id73, &quot;g&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id9, &quot;b&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id1, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id11, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id13, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id16, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id17, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id22, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id23, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id24, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id29, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id3, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id30, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id35, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id36, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id37, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id45, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id46, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id47, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id50, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id51, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id52, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id57, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id58, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id59, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id64, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id65, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id66, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id7, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id70, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id73, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id9, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id0, &quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id14, &quot;e&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id20, &quot;g&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id27, &quot;i&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id33, &quot;k&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id43, &quot;e&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id48, &quot;e&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id5, &quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id55, &quot;g&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id62, &quot;i&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id18, &quot;f&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id25, &quot;h&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id31, &quot;j&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id38, &quot;l&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id41, &quot;d&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id53, &quot;f&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id60, &quot;h&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id67, &quot;j&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id71, &quot;f&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id16, &quot;m&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id17, &quot;n&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id22, &quot;o&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id23, &quot;p&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id24, &quot;q&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id29, &quot;r&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id30, &quot;s&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id35, &quot;t&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id36, &quot;u&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id37, &quot;v&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id50, &quot;k&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id51, &quot;l&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id52, &quot;m&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id57, &quot;n&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id58, &quot;o&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id59, &quot;p&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id64, &quot;q&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id65, &quot;r&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id66, &quot;s&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid10, &quot;my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid12, &quot;child&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid15, &quot;make instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid19, &quot;child instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid2, &quot;my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid21, &quot;invent name&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid26, &quot;named child instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid28, &quot;recursively instantiate&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid32, &quot;filled child instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid34, &quot;insert child into children of my runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid39, &quot;my runnable filled in with children&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid4, &quot;my runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid42, &quot;my runnable filled in with children&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid44, &quot;∀ connections of my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid49, &quot;clone connection&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid54, &quot;runnable connection with holes&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid56, &quot;fixup connection&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid6, &quot;∀ children of my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid61, &quot;fixed up connection&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid63, &quot;insert connection into runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid68, &quot;final runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid72, &quot;runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid8, &quot;my runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id1, 3).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id3, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id45, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id46, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id47, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id50, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id51, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id52, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id57, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id58, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id59, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id64, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id65, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id66, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id70, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id73, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id1, tid2).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id11, tid12).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id14, tid15).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id18, tid19).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id20, tid21).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id25, tid26).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id27, tid28).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id3, tid4).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id31, tid32).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id33, tid34).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id38, tid39).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id41, tid42).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id43, tid44).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id48, tid49).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id5, tid6).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id53, tid54).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id55, tid56).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id60, tid61).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id62, tid63).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id67, tid68).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id7, tid8).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id71, tid72).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id9, tid10).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that PROLOG requires that all facts with the same name be grouped together.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We do this by invoking the UNIX® &lt;i&gt;sort&lt;/i&gt; command (see run.bash — &lt;a href=&quot;https://github.com/guitarvydas/basicdasl/blob/master/pseudo/run.bash&quot;&gt;https://github.com/guitarvydas/basicdasl/blob/master/pseudo/run.bash&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roadmap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/Roadmap3.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/26/Factbases-101.html&quot;&gt;https://guitarvydas.github.io/2021/04/26/Factbases-101.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;Ohm-JS &lt;/b&gt;(skim or familiarize yourself with Ohm-JS using this essay or Ohm-JS documentation)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;ohm-js editor&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;glue&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;grasem&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;isolation&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/Superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/Superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/24/superposition-2.html&quot;&gt;https://guitarvydas.github.io/2021/01/24/superposition-2.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;details kill&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;software development roles&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&quot;&gt;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;toolbox language&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/28/Toolbox-Languages-(2).html&quot;&gt;https://guitarvydas.github.io/2021/04/28/Toolbox-Languages-(2).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;screencasts&lt;/b&gt; (esp. PROLOG For Programmers)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Playlists.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Playlists.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Cloud Outliner&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Engine Part 3 Factbase</summary></entry><entry><title type="html">Parsing vs regexing</title><link href="https://computingsimplicity.neocities.org/2021/05/10/Parsing-vs-REGEXing.html" rel="alternate" type="text/html" title="Parsing vs regexing" /><published>2021-05-10T00:00:00-04:00</published><updated>2021-05-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/10/Parsing%20vs%20REGEXing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/10/Parsing-vs-REGEXing.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Parsing vs REGEXing&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-10T10:41:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-10T10:41:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parsing vs REGEXing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wanted to change all &quot;/&quot; to &quot;_&quot; in my .opml file, but only in qualified identifiers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The global-find-and-replace strategy doesn't work, because the .opml contains legitimate &quot;/&quot;s that shouldn't change.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using a parser, the change can be done in 1 line:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;qident_recursive [id slash qid] = [[${id}${slash}${qid}]]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;becomes&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;qident_recursive [id slash qid] = [[${id}_${qid}]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;REGEX is Flat, Parsing is Hierarchical&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The main difference between the two approaches is that REGEX and find-and-replace are &quot;flat&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEX cannot easily follow structure.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parsing can follow structure.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parsing Is Now Accessible&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Parsing used to be the domain of compiler writers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG, and especially Ohm-JS, bring this technology down from the mountain and make it as easily accessible as REGEX (which &lt;i&gt;used&lt;/i&gt; to be only available in the domain of compiler writers).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix OPML Source Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;See the code in the project &lt;a href=&quot;https://guitarvydas.github.io/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html&quot;&gt;https://guitarvydas.github.io/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - PEG and Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&quot;&gt;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/PEG.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/PEG.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Parsing vs REGEXing</summary></entry><entry><title type="html">Software Components 101 - Engine Part 5 Queries</title><link href="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-5-Queries.html" rel="alternate" type="text/html" title="Software Components 101 - Engine Part 5 Queries" /><published>2021-05-10T00:00:00-04:00</published><updated>2021-05-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine%20Part%205%20Queries</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-5-Queries.html">&lt;p&gt;Let’s undo one of the human-input conveniences and normalize the factbase to contain only machine-readable codings.&lt;/p&gt;

&lt;p&gt;Currently, arrows contain references to graphical objects.  These references should actually be ids.  These references are (human-readable) synonyms to (machine-readable) ids.&lt;/p&gt;

&lt;p&gt;For example, as in part 4, we have facts like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comp(id5, c).
arrow(id40, a41).
arrowBegin(a41, c_c).
arrowEnd(a41, [c_e_m]).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Firstly, we can create synonym facts, e.g.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comp(id5, c).
synonym(c, id5).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we use the synonym facts to modify all arrowBegin facts, e.g.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arrowBegin(a41, c_c).
aBegin(a41, idYYY).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we use the synonym facts to modify all arrowEnd facts, e.g.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arrowEnd(a41, [c_e_m]).
aEnd(a41, [idZZZ]).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;N.B. Currently, we leave all of the facts in the factbase.  There is no need to remove facts.  Removing facts at this stage – without proof of needing to do so – is premature optimization (and uneccessary brain clutter).&lt;/p&gt;

&lt;p&gt;We define gobject(ID).  See &lt;a href=&quot;https://github.com/guitarvydas/basicdasl/blob/master/pseudo/q.pl&quot;&gt;q.pl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we specify the synonym in gobject definitions, the query for synonyms is straight-forward&lt;br /&gt;
synonym(ID,Synonym) :-&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nonArrowGobject(ID,Synonym).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[A ‘nonArrowGobject’ is any gobject except arrows.  See the code for further details.]&lt;/p&gt;

&lt;p&gt;Creating a new aBegin fact consists of a compound query - print out an aBegin fact for every arrowBegin fact, replacing the synonym… (again, details elided, see code):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;printAllABegin :-
    forall(arrowBegin(ID,_),printABegin(ID)).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sanity-checks&quot;&gt;Sanity Checks&lt;/h2&gt;
&lt;p&gt;I create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gkind&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; queries and double-check by running queries and looking at the diagram (the code for transpilation in this example is meant to be done manually, so I would expect many bugs.  We’ll see what I missed when we try to run this stuff.)&lt;/p&gt;

&lt;p&gt;For example, we double-check the arrow with two receivers:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;?- consult(fb).
true.

?- consult(q).
true.

?- printAllAEnd.
...
aEnd(a82,[id62,id69]).
...
false.

?- tag(id62,Tag).
Tag = e_e_l ;
false.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(which appears to coincide with what is on the diagram).&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Let’s undo one of the human-input conveniences and normalize the factbase to contain only machine-readable codings.</summary></entry><entry><title type="html">Software components 101 engine part 2 diagram to text</title><link href="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html" rel="alternate" type="text/html" title="Software components 101 engine part 2 diagram to text" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/09/Software%20Components%20101%20-%20Engine%20Part%202%20Diagram%20to%20Text</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Engine Part 2 Diagram to Text&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-09T16:09:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-09T16:09:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Goal of this step is to enter the diagrams manually.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ideally, we would use an editor to perform this step, producing SVG diagrams, but most editors are too fancy (most SVG editors) or too old (&lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt;) to perform this step cleanly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I ended up sight-reading the diagrams into &quot;Cloud Outliner&quot; and produced an .&lt;span class=&quot;s1&quot;&gt;opml&lt;/span&gt; file.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss this process below.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that an automated transpiler would not need to use .&lt;span class=&quot;s1&quot;&gt;opml&lt;/span&gt; files — we could go from .&lt;span class=&quot;s1&quot;&gt;svg&lt;/span&gt; files directly,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;but,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to show my thinking process in great detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I was taught to &quot;show my work for partial marks&quot; in school.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Doing this step manually is like showing my work or showing numeric division in longhand, or, …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that it should be &quot;obvious&quot; how to build&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; a transpiler to alleviate most of this work.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(For the diagrams, see Prerequisites)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roadmap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-16-09-20-Images/Roadmap2.png&quot; width=&quot;500px&quot; height=&quot;608px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cloud Outliner&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-16-09-20-Images/Screen Shot 2021-05-09 at 3.22.58 PM.png&quot; width=&quot;500px&quot; height=&quot;439px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Diagram in Cloud Outliner&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I wanted to transcribe the diagram by hand, to show the thinking process.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There was so much &quot;detail&quot; (the .OPML file is 200 lines long) in the diagrams, that I searched for something less inconvenient to use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I tried raw text, then emacs .org mode, then SimpleMind and finally settled on Cloud Outliner.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Transpiling from a diagram to some kind of text (say, .SVG), &lt;i&gt;should&lt;/i&gt; be easy and automated. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In the worst case, one can use one of the above tools and save the diagrams in .svg format, then perform post-processing&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A post-processed file can be further manipulated with PROLOG scripts or shell scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was accomplished — a diagram transpiler consisting of some 40 components was built in Common Lisp (+ Holm PROLOG), but the number of steps&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; turned out to be a hindrance to rapid turn-around.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I felt that something less complicated could be accomplished (this set of blogs indicates how to accomplish full transpilation).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I simply sight-read the diagrams into the tree-view.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The main diagrammatic objects are:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;rectangles&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;circles&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lines (arrows)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each object is annotated with appropriate attributes, such as color, etc.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The result is seen in Fig. 1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The full details can be seen in the github repo.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I allowed myself some conveniences.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, instead of entering Components and Ports as &lt;i&gt;rectangles&lt;/i&gt;, I entered Components as &lt;i&gt;comp&lt;/i&gt; and Ports as &lt;i&gt;rect&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I, also, allowed myself to tag interesting objects with single-letter tags instead of inventing and using full-blown IDs for each.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;An automated transpiler would not need these conveniences but I, as a human, found it too error-prone to enter these diagrams in the most normalized (aka &lt;i&gt;boring&lt;/i&gt;) manner.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;OPML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The final OPML file is shown below. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A point to note is the extreme repetitive nature of the data — it is not &quot;human readable&quot; (except as a last resort), but, it &lt;i&gt;is&lt;/i&gt; machine-readable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We only need the data to be in machine-readable format to further process it using scripts, Ohm-JS, PROLOG, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that the diagrams are &quot;human readable&quot; but are not very readable when reduced to textual form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note, in passing, that it &lt;i&gt;is &lt;/i&gt;possible to describe an architecture in diagrammatic form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The last step — converting the diagram to machine-readable form — can be performed by a scribe or by a suitable editor or by a set of scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The number of distinct kinds of elements is very small, but the normalized data is very boring from a human-readability perspective.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Boring&quot; means error-prone when entered by humans.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Boring&quot; means that automation can be applied.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&amp;lt;opml version=&quot;1.0&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;title&amp;gt;Diagrams 1&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;expansionState&amp;gt;0,22,26,71,73,86,89,92,123&amp;lt;/expansionState&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “A”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=3&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “b”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “c”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”∀ children of my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “b”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “c”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“child”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “d”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “e”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“make instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “m”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “n”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “f”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“child instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “g”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”invent name”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “o”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “p”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “q”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “h”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”named child instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “i”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“recursively instantiate”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “r”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “s”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “j”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“filled child instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “k”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”insert child into children of my runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “t”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “u”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “v”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “l”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable filled in with children”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;lines&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow c&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;m&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;f&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow f&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;o&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow b&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;p&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow g&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;h&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow h&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;r&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow s&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;j&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow j&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;t&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow a&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;u&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow v&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;l&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow l&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;d&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “d”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable filled in with children”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “e”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“∀ connections of my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “b”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “c”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “e”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”clone connection”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “k”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “l”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “m”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “f”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“runnable connection with holes”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “g”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“fixup connection”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “n”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “o”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “p”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “h”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“fixed up connection”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “i”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”insert connection into runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “q”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “r”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “s”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “j”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“final runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;lines&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow c k&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow b l o&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow m f&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow f n&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow p h&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow h g&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow a r&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow s l&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow l d&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “d”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “f”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “g”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&amp;lt;/opml&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Further&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In subsequent essays, I will show how&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;to read the .OPML file using my &lt;i&gt;grasem&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; &lt;/i&gt;tool,&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;to convert the data into a factbase, (again, using grasem)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;to run search queries against the data — inferring semantically interesting information from the diagrams&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;outputting code (that's: code transpiled from the diagrams), finally closing the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Hint: PEG / Ohm-JS and PROLOG would be my weapons of choice.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I intend to do this explicitly in a future essay.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This is done in the full-blown transpiler Arrowgrams, in Haskell and Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the code in https://github.com/bmfbp/bmfbp if you want all of the gory details.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;We used Draw.io to create diagrams, but needed to massage them and export them as .SVG files.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Engine Part 2 Diagram to Text</summary></entry><entry><title type="html">Software components 101 engine development (part 1)</title><link href="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html" rel="alternate" type="text/html" title="Software components 101 engine development (part 1)" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/09/Software%20Components%20101%20-%20Engine%20Development%20(Part%201)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Engine Development (Part 1)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-09T15:05:16Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-09T15:05:16Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px 'Apple Symbols'}
    span.s3 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal of this sub-project is to build an engine&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; that runs software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I try to show how to compile diagrams by hand.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am trying to capture my design thoughts while they are still fresh.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the roadmap in Roadmap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I hope to build the engine in:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Common Lisp&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;JavaScript&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;design&lt;/i&gt; for each of the above, is the same, but the details change depending on the language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to capture the design similarities and generate the above engines automatically, if possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To do this, I sub-divide the problem and add a new sub-problem:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;pseudo-code in diagram form for the engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I &lt;i&gt;think&lt;/i&gt; that I'm going to use Ohm-JS and PROLOG to generate code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let's see…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;See&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/04/Software-Components-001.html&quot;&gt;https://guitarvydas.github.io/2021/05/04/Software-Components-001.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/08/Software-Components-101.html&quot;&gt;https://guitarvydas.github.io/2021/05/08/Software-Components-101.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/04/Software-Components-101-Connection-Queries.html&quot;&gt;https://guitarvydas.github.io/2021/05/04/Software-Components-101-Connection-Queries.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I drew diagrams&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; for the engine.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;First, I drew an overview diagram, then I successively added detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I kept each diagram &quot;simple enough&quot; for me to understand.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As I drew the diagrams, I kept &quot;implementability&quot; and &quot;explainability&quot; in mind.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;1. Data and Types&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Data &amp;amp; Types.png&quot; width=&quot;500px&quot; height=&quot;179px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Data &amp;amp; Types&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Template&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;a Template is like a class&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Template specifies the structure of a Component, but doesn't create an instance&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Template can be used more than once in a diagrams&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;Kind&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;a Kind is akin to a Type (Class / whatever)&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;I'm using a different name - &lt;i&gt;kind&lt;/i&gt; - because the main operation is different than in OO (see below)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;we combine Templates using &lt;i&gt;composition&lt;/i&gt; instead of inheritance&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;we might want to use the index as a name&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;name is either&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;template name (if the template is used only once on a diagram), or,&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;an index into the ordered bag of children (of this template)&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;(we could assign string names to each child, but that's more work than is necessary for this simple example).&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Composite Template&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;A Composite is a Template that contains (is composed of) other Templates&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;recursive&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Composite is a Basic Template with 2 additions
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;children
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;an ordered bag of other Templates&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;connections
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;connections between child components (and/or self)&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;connections can ONLY be made between direct children (and self)&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;sender&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;one sender per connection&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;each sender specifies a connection to zero or more receivers&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;each sender is joined to a bag of receivers&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;multiple senders can appear to send to the same connection on a diagram
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;connections can specify the same bag of receivers, but only one sender per connection&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;this looks-like multiple senders sending to the &lt;i&gt;same&lt;/i&gt; bag of receivers&lt;/li&gt;
          &lt;/ul&gt;&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;each sender has a name as above (i.e. Template name or index)&lt;/li&gt;
        &lt;/ul&gt;&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;bag of receivers
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;each receiver has a name as above (i.e. Template name or index)&lt;/li&gt;
        &lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Leaf Template&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;a Leaf is the &quot;bottom&quot; of the hierarchy of Templates&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Leaf is the &quot;termination case&quot; for recursive construction of Templates &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;a Leaf is a &quot;black box&quot;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;a Leaf is (probably) implemented in some other language&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Runnable&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;a Runnable is the extra stuff needed to instantiate a Template&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;since Templates can be used more than once, each Runnable must be unique&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;Runnable &quot;points back&quot; to Template for stuff that doesn't need to be copied&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;to make a Composite Runnable unique
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;need to copy Connections&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;fixup all Runnable's Connections to refer to children in Runnable (instances of children)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Types&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;inputs&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;outputs&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;input_events&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;output_events&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;children&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;connections&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;connection&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;port&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;component&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;sender&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;receiver&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;event_queue&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;event&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;li4&quot;&gt;types boil down to several possibilities:
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;a &lt;i&gt;name&lt;/i&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;a symbol
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;probably implemented as a hashed string&lt;/li&gt;
        &lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;a &lt;i&gt;collection&lt;/i&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;namespace&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;bag&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;queue&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;a &lt;i&gt;tuple&lt;/i&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;{ ..., ..., ... }&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;any&lt;/b&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;any of the above&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Note that the &quot;type language&quot; described in the diagram (under legend) should be easy to build in PEG (I like Ohm-JS).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I intend to use the type language in the component diagrams below.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I know that I can implement the type language in Ohm-JS (I've done it before).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It simply represents work and &quot;no risk&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will step around this sub-problem for now.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;2. Nested Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Nested Components.png&quot; width=&quot;400px&quot; height=&quot;129px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 2 Nested Components&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At first, I draw a rough diagram of how I wish to architect the solution.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The basic operation is: input a &lt;i&gt;template&lt;/i&gt; and convert it to a &lt;i&gt;runnable&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I immediately see this solution as 3 nested layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I jot down the overview — informally — to give myself a roadmap of how I want to solve this problem (the problem is: to build an engine for components and to deliver it in various target languages).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I imagine 3 processes and draw them as rounded rectangles.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I imagine 2 intermediate results and draw them as cylinders.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I draw only the &lt;i&gt;happy path&lt;/i&gt; between the processes as arrows.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The gist of this step is to capture/explain my intended architecture while deferring details&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; for later.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;3. Add Ports to Nested Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Add Ports to Nested Components.png&quot; width=&quot;400px&quot; height=&quot;100px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 3 Add Ports&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I embellish the diagram by drawing input and output ports (green and yellow, resp.).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;External ports are drawn as circles.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Internal ports are drawn a small squares.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The work, in this step, is minimal, but it makes me ponder the design further.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This example is simple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a more complicated solution, I might change my mind about the design and update the diagrams in this step.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;4. Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Layers.png&quot; width=&quot;400px&quot; height=&quot;500px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 4 Layers&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I divvy up the design into layers using the previous diagrams as guides.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I often do this step implicitly without drawing anything further.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;As can be seen, each &lt;i&gt;layer&lt;/i&gt; is a black box with input ports and output ports.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;5. Rough-in Processes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Rough-in Processes.png&quot; width=&quot;400px&quot; height=&quot;332px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 5 Rough in&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At this point, I am satisfied with the intended solution, so I begin roughing-in the details.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I morphed the top level diagram somewhat — it now contains 2 major process, but still contains 2 intermediate results.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;This is &lt;i&gt;engineering, &lt;/i&gt;i.e. adding details to the original &lt;i&gt;architecture&lt;/i&gt; to make it realizable.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;As I consider the details, I add more external ports and flesh out the two main blocks. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I need to remind myself that I am starting out with a &lt;i&gt;template&lt;/i&gt; and am trying to build a &lt;i&gt;runnable&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I keep these concepts separated, using separate ports and separate connections.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When using current programming languages, I would normally fold the architectural concepts (of &lt;i&gt;template&lt;/i&gt; and &lt;i&gt;runnable&lt;/i&gt;) into a single data structure.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In essence, this kind of folding is a premature optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that the above diagrams and separation capture my intended approach for all to read (and/or to criticize, I'm not perfect).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I want to communicate what I'm thinking and the &lt;i&gt;why's&lt;/i&gt; of my intended solution.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There might be more than one way to solve this problem, but these diagrams need to show how &lt;i&gt;I &lt;/i&gt;choose to solve it.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;To enable easier hand-compilation, I've drawn all ports &lt;i&gt;inside&lt;/i&gt; the components that own them.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Normally, I would draw ports so that they intersect the boundaries of the parent components — intersection and ownership is &quot;easy&quot; for a computer to calculate, but this minor change makes it easier for me to hand-compile the diagrams (as I eye-ball the diagrams).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case I have only 1 relationship — &lt;i&gt;contains&lt;/i&gt; —instead of the two relationships a non-bootstrap compiler would use — &lt;i&gt;contains&lt;/i&gt; and &lt;i&gt;intersects&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I avoid putting (x,y) coordinates on the diagram as that will slow me down during hand-compilation, but is no problem for a computer.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;New invention: the solution that I want to express needs 2 &lt;i&gt;forall&lt;/i&gt; operations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I draw these as large components with the &lt;span class=&quot;s2&quot;&gt;∀&lt;/span&gt; character as the first character in the names and with blue ports signifying the &quot;inputs&quot; from the encompassing &lt;i&gt;forall &lt;/i&gt;operation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This might be written as&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;for child in Template.children { … }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;in pseudo-code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;6. Re-Label Rough-in&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Rough-in Processes Labelled.png&quot; width=&quot;400px&quot; height=&quot;336px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 6 Re-Labelling&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;As another aid to hand-compilation, I tag every drawing element with a single-letter symbol.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, this kind of tagging is not necessary in a fully-automated process, but removes some of the boring and error-prone steps in hand-compilation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I've tagged all circles, rectangles and cylinders this way.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;A fully automated compiler would simply use the graphical objects' IDs and would not require tags.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We can say that the &lt;i&gt;tag&lt;/i&gt;s are &lt;i&gt;synonym&lt;/i&gt;s for the tagged object ID's.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Further&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I the next instalment, I will discuss how to convert &lt;span class=&quot;s3&quot;&gt;Fig. 6 into a text file, ready for processing.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/basicdasl/tree/master/pseudo&quot;&gt;https://github.com/guitarvydas/basicdasl/tree/master/pseudo&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roadmap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/Roadmap.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;I also call the &lt;i&gt;engine&lt;/i&gt; a &lt;i&gt;kernel&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The first step in automating anything is to do it manually.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The work should be really boring to do and scream to be automated.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; The diagrams are in the file kernel.drawio, under separate tabs.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;/span&gt;I will show how to build the type language in another blog.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is just simple, repetitive and boring work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I'll implement it when my brain is fried — there is no point doing it now while I'm still fresh and on a designing-roll.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe this is what athletes call &quot;the zone&quot; or &quot;flow state&quot; - I choose to do nothing to break this flow, leaving menial implementation tasks for later.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Engine Development (Part 1)</summary></entry></feed>