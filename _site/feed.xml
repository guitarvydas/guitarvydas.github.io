<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-04-11T17:03:03-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Compiling Diagrams</title><link href="https://computingsimplicity.neocities.org/2021/04/11/Compiling-Diagrams.html" rel="alternate" type="text/html" title="Compiling Diagrams" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/Compiling%20Diagrams</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/Compiling-Diagrams.html">&lt;p&gt;(Same as Syntax Primitives)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-Syntax Primitives/index.html&quot;&gt;Compiling Diagrams&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">(Same as Syntax Primitives)</summary></entry><entry><title type="html">Random Anecdotes</title><link href="https://computingsimplicity.neocities.org/2021/04/10/Random-Anecdotes.html" rel="alternate" type="text/html" title="Random Anecdotes" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/Random%20Anecdotes</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/Random-Anecdotes.html">&lt;p&gt;Emacs, vi, ed, WordStar&lt;/p&gt;

&lt;p&gt;S/SL&lt;/p&gt;

&lt;p&gt;Syntax (and diagrams)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-Random Anecdotes/index.html&quot;&gt;Random Anecdotes&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Emacs, vi, ed, WordStar</summary></entry><entry><title type="html">Two Syntaxes For Every Programming Language</title><link href="https://computingsimplicity.neocities.org/2021/04/10/Two-Syntaxes-for-Every-Language.html" rel="alternate" type="text/html" title="Two Syntaxes For Every Programming Language" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/Two-Syntaxes-for-Every-Language</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/Two-Syntaxes-for-Every-Language.html">&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-Two Syntaxes for Every PL/index.html&quot;&gt;Two Syntaxes For Every Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Two Syntaxes For Every Programming Language</summary></entry><entry><title type="html">Notation vs. DSLs and PLs</title><link href="https://computingsimplicity.neocities.org/2021/04/10/Notation.html" rel="alternate" type="text/html" title="Notation vs. DSLs and PLs" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/Notation</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/Notation.html">&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-Notation vs DSLs and PLs/index.html&quot;&gt;Notation vs. DSLs and PLs&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Notation vs. DSLs and PLs</summary></entry><entry><title type="html">Notation Example</title><link href="https://computingsimplicity.neocities.org/2021/04/10/Notation-Example.html" rel="alternate" type="text/html" title="Notation Example" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/Notation%20Example</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/Notation-Example.html">&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-Notation Example/index.html&quot;&gt;Notation Example&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Notation Example</summary></entry><entry><title type="html">ASON Notation Pipeline (building 7 passes)</title><link href="https://computingsimplicity.neocities.org/2021/04/10/ASON-Notation-Pipeline.html" rel="alternate" type="text/html" title="ASON Notation Pipeline (building 7 passes)" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/ASON%20Notation%20Pipeline</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/ASON-Notation-Pipeline.html">&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-ASON Notation Pipeline/index.html&quot;&gt;Building ASON Notation Pipeline in passes&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Building ASON Notation Pipeline in passes</summary></entry><entry><title type="html">SCN</title><link href="https://computingsimplicity.neocities.org/2021/04/10/SCN.html" rel="alternate" type="text/html" title="SCN" /><published>2021-04-10T00:00:00-04:00</published><updated>2021-04-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/10/SCN</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/10/SCN.html">&lt;p&gt;Solution Centric Notation&lt;/p&gt;

&lt;p&gt;Like DSLs, but smaller.&lt;/p&gt;

&lt;p&gt;Like REGEXs, but more powerful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-10-SCN/index.html&quot;&gt;SCNs&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Solution Centric Notation</summary></entry><entry><title type="html">What if making a compiler was easy?</title><link href="https://computingsimplicity.neocities.org/2021/04/05/What-If-Making-A-Compiler-Was-Easy.html" rel="alternate" type="text/html" title="What if making a compiler was easy?" /><published>2021-04-05T00:00:00-04:00</published><updated>2021-04-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/05/What%20If%20Making%20A%20Compiler%20Was%20Easy</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/05/What-If-Making-A-Compiler-Was-Easy.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;What If Compilers Were Easy?&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;whatif&quot;&gt;What If?&lt;/h1&gt;

&lt;p&gt;What if it was easy to create compilers and languages?&lt;/p&gt;

&lt;p&gt;Say, 10 minutes instead of several years?&lt;/p&gt;

&lt;p&gt;How would your approach to programming change?&lt;/p&gt;

&lt;p&gt;Does your favourite programming language have REGEX built in? Or, does it have a REGEX library?&lt;/p&gt;

&lt;p&gt;What if writing a new language, a new DSL, were as easy as writing a REGEX?&lt;/p&gt;

&lt;h1 id=&quot;paradigmsnotlanguages&quot;&gt;Paradigms, Not Languages&lt;/h1&gt;

&lt;p&gt;Paradigms, e.g. OO, FP, message-passing, etc. would still be important.&lt;/p&gt;

&lt;p&gt;Languages and syntax would no longer be important, if you could build languages as easily as writing REGEXs.&lt;/p&gt;

&lt;p&gt;You could easily wrap a language around &lt;em&gt;any&lt;/em&gt; given paradigm.&lt;/p&gt;

&lt;p&gt;If you didn&amp;#8217;t like a particular language, you would throw it away and build a new one to suit your needs (10 minutes, not years) .&lt;/p&gt;

&lt;h1 id=&quot;alanguageforeveryproblem&quot;&gt;A Language for Every Problem&lt;/h1&gt;

&lt;p&gt;If languages were cheap to build, you could build a new language every time you started a project.&lt;/p&gt;

&lt;p&gt;This would be different, even, from creating DSLs.&lt;/p&gt;

&lt;p&gt;Normally, we think of DSLs as being tied to particular technologies, like SQL is a DSL for database queries.&lt;/p&gt;

&lt;p&gt;Instead, we could just invent a new DSL for &lt;em&gt;every&lt;/em&gt; project. For example, if we used a database for Project XYZ, we could have an XYZ-DSL for the project. It would generate SQL queries based on what the Project XYZ needed.&lt;/p&gt;

&lt;p&gt;XYZ-DSL would not be general. It would be specific &lt;em&gt;only&lt;/em&gt; to project XYZ.&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;already&lt;/em&gt; do that, when we build code in a programming language.&lt;/p&gt;

&lt;p&gt;We don&amp;#8217;t separate the code details from the architectural needs of the project.&lt;/p&gt;

&lt;p&gt;We find a language, or a DSL, which is sufficiently general to handle most of the aspects of our problem (XYZ in this case).&lt;/p&gt;

&lt;p&gt;Then we write code in that language until we solve the XYZ problem. We make problem XYZ &lt;em&gt;fit&lt;/em&gt; the chosen language.&lt;/p&gt;

&lt;p&gt;Sometimes, we don&amp;#8217;t need to use all of the fancy features of a language.&lt;/p&gt;

&lt;p&gt;Sometimes, the details (is this a list?, is this an array?, is this an int?, is this a double?, etc.) obscure the real meat of the solution.&lt;/p&gt;

&lt;h1 id=&quot;regex&quot;&gt;REGEX&lt;/h1&gt;

&lt;p&gt;REGEX is a simple DSL.&lt;/p&gt;

&lt;p&gt;REGEX was, originally, compiler technology.&lt;/p&gt;

&lt;p&gt;Today, it is possible for non-specialists to use REGEX.&lt;/p&gt;

&lt;p&gt;What can REGEX do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can match strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What can&amp;#8217;t REGEX do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can&amp;#8217;t match nested strings.&lt;/li&gt;
&lt;li&gt;It can&amp;#8217;t match across lines.&lt;/li&gt;
&lt;li&gt;REGEX is not recursive. It can&amp;#8217;t call itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is there something that can do what REGEX can do &lt;em&gt;and&lt;/em&gt; what REGEX can&amp;#8217;t do?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;PEG.&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Is PEG built into other languages?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No, not yet.&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;scls&quot;&gt;SCLs&lt;/h1&gt;

&lt;p&gt;I call such languages SCLs &amp;#8212; for &lt;em&gt;Solution Centric Languages&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Actually, other parser technologies like ANTRL do this. PEG feels more &amp;#8220;light weight&amp;#8221; to me. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;There is &amp;#8220;#lang peg&amp;#8221; in Racket and a myriad of PEG libraries for many languages. PEG is usually added as an afterthought. For example, if Racket really, really used PEG, it wouldn't need macros. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">What If Compilers Were Easy?</summary></entry><entry><title type="html">Kill math</title><link href="https://computingsimplicity.neocities.org/2021/04/03/Kill-Math.html" rel="alternate" type="text/html" title="Kill math" /><published>2021-04-03T00:00:00-04:00</published><updated>2021-04-03T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/03/Kill%20Math</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/03/Kill-Math.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Kill Math&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;programmingisthenewmath&quot;&gt;Programming is the New Math&lt;/h1&gt;

&lt;p&gt;Programming is the &lt;em&gt;new math&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mathematics was invented as a notation for the pencil and paper realm.&lt;/p&gt;

&lt;p&gt;Computers allow 3D and 4D, but we cling to mathematics (at best 2D).&lt;/p&gt;

&lt;p&gt;PLs are constrained by syntactic conventions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grid of non-overlapping cells&lt;/li&gt;
&lt;li&gt;&lt;em&gt;all&lt;/em&gt; PLs based on line/offset of cells&lt;/li&gt;
&lt;li&gt;&amp;#8230; instead of (x,y) positions of overlapping elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bret Victor espouses &amp;#8220;kill math&amp;#8221;&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; but jumps from text-only notation to full-blown graphical notation.&lt;/p&gt;

&lt;p&gt;There is a simple notation in between text-only and full-blown graphics.&lt;/p&gt;

&lt;h1 id=&quot;syntaxevolution&quot;&gt;Syntax Evolution&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;text, rects, ellipses, lines (arrows)&lt;/li&gt;
&lt;li&gt;bitmap and vector graphics&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;calculators&quot;&gt;Calculators&lt;/h1&gt;

&lt;p&gt;Most PLs describe calculators&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one-in, one-out&lt;/li&gt;
&lt;li&gt;synchronous.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Originally, it was thought that computers were useful &lt;em&gt;only&lt;/em&gt; for ballistics calculations (fancy calculators).&lt;/p&gt;

&lt;p&gt;Computers have outgrown the calculator-only paradigm.&lt;/p&gt;

&lt;h1 id=&quot;asynchronousvs.synchronous&quot;&gt;Asynchronous vs. Synchronous&lt;/h1&gt;

&lt;p&gt;Text-only thinking leads to synchronous designs.&lt;/p&gt;

&lt;p&gt;But, the world is asynchronous.&lt;/p&gt;

&lt;p&gt;Example: human body&amp;#8217;s autonomous system. Self 1 and Self 2.&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Consciousness is only a small portion of how a body functions. A body consists mostly of asynchronous processes.&lt;/p&gt;

&lt;p&gt;Example: cooking recipes. &amp;#8220;&amp;#8230; while the potatoes cook, &amp;#8230;&amp;#8221;&lt;/p&gt;

&lt;p&gt;Example: music notation &amp;#8212; real-time, asynchronous (polyphonic), SonicPi&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: driving an automobile and listening to the radio.&lt;/p&gt;

&lt;p&gt;Example: riding a bicycle.&lt;/p&gt;

&lt;p&gt;Example: walking.&lt;/p&gt;

&lt;p&gt;Example: opening a door.&lt;/p&gt;

&lt;h1 id=&quot;boxandarrowdiagrams&quot;&gt;Box and Arrow Diagrams&lt;/h1&gt;

&lt;p&gt;Box and arrow diagrams work well if they deal with asynchronous components.&lt;/p&gt;

&lt;p&gt;Box and arrow diagrams are a &amp;#8220;hard problem&amp;#8221; if built using synchronous PLs.&lt;/p&gt;

&lt;h1 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h1&gt;

&lt;p&gt;Distributed programming is the newer reality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blockchain&lt;/li&gt;
&lt;li&gt;p2p&lt;/li&gt;
&lt;li&gt;HTML, internet, etc.&lt;/li&gt;
&lt;li&gt;Concurrency is Not Parallelism &amp;#8212; &lt;a href=&quot;https://www.youtube.com/watch?v=oV9rvDllKEg&quot;&gt;https://www.youtube.com/watch?v=oV9rvDllKEg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concurrency is easy, but text is not a good notation for concurrency.&lt;/p&gt;

&lt;h2 id=&quot;assemblylanguageforconcurrency&quot;&gt;Assembly Language for Concurrency&lt;/h2&gt;

&lt;p&gt;At best, we have &lt;em&gt;assembler&lt;/em&gt; components for concurrency, but lack a popular PL for concurrency (HTML+JavaScript?)&lt;/p&gt;

&lt;h2 id=&quot;stateoftheart&quot;&gt;State of the Art&lt;/h2&gt;

&lt;p&gt;Current state of the art for concurrency:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;many stand-alone calculators&lt;/li&gt;
&lt;li&gt;dropped into envelopes to shield them from each other (threads)&lt;/li&gt;
&lt;li&gt;lots of accidental complexity due to use of text-only notation&lt;/li&gt;
&lt;li&gt;time-sharing&lt;/li&gt;
&lt;li&gt;memory-sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;accidentalcomplexity&quot;&gt;Accidental Complexity&lt;/h3&gt;

&lt;p&gt;Examples of accidental complexity due to text-only thinking:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;thread safety&lt;/li&gt;
&lt;li&gt;priorities, priority inversion (&lt;a href=&quot;https://www.rapitasystems.com/blog/what-really-happened-software-mars-pathfinder-spacecraft&quot;&gt;https://www.rapitasystems.com/blog/what-really-happened-software-mars-pathfinder-spacecraft&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mutexes&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;timesharing&quot;&gt;Time Sharing&lt;/h3&gt;

&lt;p&gt;Time-sharing is an old-fashioned idea.&lt;/p&gt;

&lt;p&gt;Meant to optimize CPU usage (CPUs were expensive in the 1950&amp;#8217;s).&lt;/p&gt;

&lt;p&gt;CPUs are cheap, now.&lt;/p&gt;

&lt;p&gt;No need to optimize CPU time.&lt;/p&gt;

&lt;p&gt;Programmer time is more important than CPU time.&lt;/p&gt;

&lt;h3 id=&quot;memorysharing&quot;&gt;Memory Sharing&lt;/h3&gt;

&lt;p&gt;Memory-sharing is an old-fashioned idea.&lt;/p&gt;

&lt;p&gt;Meant to optimize memory usage (memory was expensive in the 1950&amp;#8217;s).&lt;/p&gt;

&lt;p&gt;Memory is cheap, now.&lt;/p&gt;

&lt;p&gt;No need to optimize memory.&lt;/p&gt;

&lt;p&gt;Programmer time is more important than wasted memory.&lt;/p&gt;

&lt;h1 id=&quot;newerreality&quot;&gt;Newer Reality&lt;/h1&gt;

&lt;p&gt;Newer reality: &lt;strong&gt;distributed&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;many computers&lt;/li&gt;
&lt;li&gt;thin wires (low bandwidth) connections&lt;/li&gt;
&lt;li&gt;uptime not guaranteed to be high.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;efficiency&quot;&gt;Efficiency&lt;/h1&gt;

&lt;h2 id=&quot;rust&quot;&gt;Rust&lt;/h2&gt;

&lt;p&gt;Main efficiency gains will come from optimizing distributed computers.&lt;/p&gt;

&lt;p&gt;Rust can only optimize calculators.&lt;/p&gt;

&lt;p&gt;Incorrect emphasis.&lt;/p&gt;

&lt;h2 id=&quot;wasm&quot;&gt;WASM&lt;/h2&gt;

&lt;p&gt;Main efficiency gains will come from optimizing distributed computers.&lt;/p&gt;

&lt;p&gt;WASM can only optimize browsers (client computers).&lt;/p&gt;

&lt;p&gt;Incorrect emphasis.&lt;/p&gt;

&lt;h2 id=&quot;bigo&quot;&gt;Big O&lt;/h2&gt;

&lt;p&gt;Important: UX &amp;#8212; what the user experiences.&lt;/p&gt;

&lt;p&gt;Not Important: CPU usage.&lt;/p&gt;

&lt;p&gt;Big-O only analyzes CPU usage.&lt;/p&gt;

&lt;p&gt;Incorrect emphasis.&lt;/p&gt;

&lt;p&gt;Main efficiency gains will come from optimizing distributed computers, then, optimizing UX.&lt;/p&gt;

&lt;p&gt;Example: A good spec defines user experience (response time). A good spec does not define CPU usage.&lt;/p&gt;

&lt;p&gt;Analysis of CPU usage is Production Engineering. Cost reduction. This is not a 1&lt;sup&gt;st&lt;/sup&gt; order effect. Make it work first, then optimize second.&lt;/p&gt;

&lt;p&gt;Big-O made more sense when CPUs were expensive.&lt;/p&gt;

&lt;h2 id=&quot;delusion&quot;&gt;Delusion&lt;/h2&gt;

&lt;p&gt;Delusion: Measurement makes right.&lt;/p&gt;

&lt;p&gt;Just because we can measure something does not mean that &amp;#8220;that is all there is&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Example: we think of sound as a 2D plot on an oscilloscope, but sound is actually a 3D spherical wavefront that expands over time (4D).&lt;/p&gt;

&lt;p&gt;Example: we think of Earth orbiting the Sun in an elliptical orbit, but in reality, Earth transcribes a helix (the Sun is moving, Earth is following).&lt;/p&gt;

&lt;p&gt;The 2D oscilloscope plot and elliptical orbits are only &lt;em&gt;useful approximations&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Everything is a fractal. Every problem can be subdivided further.&lt;/p&gt;

&lt;p&gt;(further discussion: &lt;a href=&quot;https://guitarvydas.github.io/2021/03/23/Everything-is-a-Fractal.html&quot;&gt;https://guitarvydas.github.io/2021/03/23/Everything-is-a-Fractal.html&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&quot;thestack&quot;&gt;The Stack&lt;/h1&gt;

&lt;p&gt;Current CPUs &lt;em&gt;encourage&lt;/em&gt; the calculator paradigm.&lt;/p&gt;

&lt;p&gt;The Stack used by CALL/RETURN is a global variable that tracks dynamic dependencies (&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&quot;&gt;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;http://worrydream.com/KillMath/ &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;https://www.amazon.ca/Inner&amp;#8211;Game&amp;#8211;Tennis&amp;#8211;Classic&amp;#8211;Performance/dp/0679778314 &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;https://sonic&amp;#8211;pi.net/ &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Kill Math</summary></entry><entry><title type="html">Recursive design knowns and unknowns</title><link href="https://computingsimplicity.neocities.org/2021/04/02/Recursive-Design-Knowns-and-Unknowns.html" rel="alternate" type="text/html" title="Recursive design knowns and unknowns" /><published>2021-04-02T00:00:00-04:00</published><updated>2021-04-02T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/02/Recursive%20Design%20-%20Knowns%20and%20Unknowns</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/02/Recursive-Design-Knowns-and-Unknowns.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Recursive Design - Knowns and Unknowns&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-02T10:07:46Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-02T10:07:46Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    table.t1 {border-collapse: collapse}
    td.td1 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Knowns and Unknowns&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I discuss &lt;i&gt;recursive design&lt;/i&gt; — an extreme form of &lt;i&gt;divide and conquer &lt;/i&gt;in terms of &lt;i&gt;knowns &lt;/i&gt;and &lt;i&gt;unknowns&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, recursive design — divide and conquer — continues to iterate and never stops. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At some point, the design becomes so stable that it can be &lt;i&gt;shipped&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This is much like songwriting.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One never stops tweaking a song, although committing it to a recording tends to slow down the tweaking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Performing songwriters often perform a song differently than it was recorded.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dissecting Knowns and Unknowns&lt;/b&gt;&lt;/h2&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unkown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unknown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;brainstorm&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unknown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unknown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;attack early&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;implement&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unknown Unknown&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You cannot know what you don't know (unknown unknown).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Iterate and implement.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As design proceeds, you might encounter new sub-problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Iterate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Keep iterating until all unknowns are broken down into knowns, or, the solution is complete.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unknown Known&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Break the problem down into the other 3 categories&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Known Unknown&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;High risk.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fail early.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Mitigate the risk by trying to understand the risk.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;If the risk becomes a problem that cannot be solved, you want know as early as possible (e.g. abort as soon as possible).
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;Aborting might become a re-casting of the problem, in which case re-start iterations.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;If the risk can be handled, iterate and break it down further.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Use strong, static typing to flesh out a design (without writing implementation code) to convert unknowns into knowns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Known Known&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If you know how to solve a sub-problem:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Defer&lt;/b&gt;&lt;/span&gt;, don't implement if any unknowns still exist&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;attack unknowns first&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;see brainstorming, later
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li7&quot;&gt;sometimes it is beneficial to implement knowns and look for new unknowns&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Implement&lt;/b&gt;&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;Look for new unknowns that surface (mixed in with the knowns)
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li7&quot;&gt;Scope creep — unknowns that surface during implementation that are not formally handled constitute &lt;i&gt;scope creep&lt;/i&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li7&quot;&gt;handling a new unknown should result in new iterations of the recursive design process&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;Implementation can be a form of brainstorming&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;Strong, static typing is a form of implementation (see later)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Brain Storming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Brainstorming is a technique of looking for new unknowns — and then iterating them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Brainstorming is most often associated with &lt;i&gt;the arts&lt;/i&gt;, e.g. songwriting.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Much of current programming is &lt;i&gt;art&lt;/i&gt; — creativity that has not (can not) been formalized.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;The more you know, the more creative you can be&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;/b&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;b&gt;.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Implementing is a way to know more about a specific domain.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Static typing is a way to know more about a specific domain. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Thinking and Coding&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Coding, currently, involves two activities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;thinking&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;writing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Strong, Static Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Static typing is, actually, a form of implementation — coding up the types, without coding up the implementation&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Haskell, Agda, etc. break implementation down into two sub-components&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;signatures&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Some people have a &lt;i&gt;eureka&lt;/i&gt; moment when using statically-typed languages — they code up the type system, and, when it passes automatic checking, they write code underneath the type system and &quot;it just works&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Coding, currently, involves two activities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;thinking&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;writing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Writing and checking types is the &quot;thinking&quot; part. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Using type-checking to brainstorm the thinking part is just &quot;divide and conquer&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Coding is &lt;b&gt;deferred&lt;/b&gt; until the type system has been automatically checked.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Essence of Recursive Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;The &lt;i&gt;essence &lt;/i&gt;of recursive design is to break problems down into smaller sub-problems. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Each sub-problem is broken down — over and over — until all sub-problems can be easily understood and implemented.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The &lt;i&gt;hard&lt;/i&gt; part of a problem is the &lt;i&gt;thinking&lt;/i&gt; part.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;easy&lt;/i&gt; part of a problem is writing code after the &lt;i&gt;thinking&lt;/i&gt; has been completed.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;If a problem seems &lt;i&gt;hard&lt;/i&gt;, the problem needs to be sub-divided.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;If a problem seems &lt;i&gt;hard&lt;/i&gt;, one might be trying to use the wrong paradigm to solve it in.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;For example, we currently think that multi-tasking is &lt;i&gt;hard&lt;/i&gt;, but most people (not programmers) already know how to deal with multitasking, e.g. music scores, cooking recipes, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Are we using the wrong paradigm to think about multi-tasking?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;functional &lt;/i&gt;approach is useful for one-in-one-out problems&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is multitasking a one-in-one-out style of problem?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I find that StateCharts&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; and asynchronous ideas, e.g. SonicPi,&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; FBP,&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; Arrowgrams,&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; etc., make it easier to think about multitasking.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Links&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;FBP&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;https://jpaulm.github.io/fbp/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Sonic Pi&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://sonic-pi.net/&quot;&gt;https://sonic-pi.net/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Arrowgrams / Components&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/06/Components-(again).html&quot;&gt;https://guitarvydas.github.io/2021/03/06/Components-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/HTML-Components-Arrowgrams.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/HTML-Components-Arrowgrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html&quot;&gt;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/HTML-Components-Arrowgrams.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/HTML-Components-Arrowgrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/HTML-Components-Handling-Callback-Logic-Explicitly.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/HTML-Components-Handling-Callback-Logic-Explicitly.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Pat Pattison&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Divide and Conquer, again.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Implementation can be broken down into 2 things - (1) type system, (2) code.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I call this class of problem a &quot;calculator&quot;.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/02/25/statecharts-(again).html, https://guitarvydas.github.io/2020/12/09/StateCharts.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See appendix&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See appendix&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See appendix&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Recursive Design - Knowns and Unknowns</summary></entry></feed>