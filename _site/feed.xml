<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-05-10T10:41:54-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Parsing vs regexing</title><link href="https://computingsimplicity.neocities.org/2021/05/10/Parsing-vs-REGEXing.html" rel="alternate" type="text/html" title="Parsing vs regexing" /><published>2021-05-10T00:00:00-04:00</published><updated>2021-05-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/10/Parsing%20vs%20REGEXing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/10/Parsing-vs-REGEXing.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Parsing vs REGEXing&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-10T10:41:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-10T10:41:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parsing vs REGEXing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wanted to change all &quot;/&quot; to &quot;_&quot; in my .opml file, but only in qualified identifiers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The global-find-and-replace strategy doesn't work, because the .opml contains legitimate &quot;/&quot;s that shouldn't change.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using a parser, the change can be done in 1 line:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;qident_recursive [id slash qid] = [[${id}${slash}${qid}]]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;becomes&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;qident_recursive [id slash qid] = [[${id}_${qid}]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;REGEX is Flat, Parsing is Hierarchical&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The main difference between the two approaches is that REGEX and find-and-replace are &quot;flat&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEX cannot easily follow structure.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parsing can follow structure.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parsing Is Now Accessible&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Parsing used to be the domain of compiler writers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG, and especially Ohm-JS, bring this technology down from the mountain and make it as easily accessible as REGEX (which &lt;i&gt;used&lt;/i&gt; to be only available in the domain of compiler writers).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix OPML Source Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;See the code in the project &lt;a href=&quot;https://guitarvydas.github.io/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html&quot;&gt;https://guitarvydas.github.io/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - PEG and Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&quot;&gt;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/PEG.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/PEG.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Parsing vs REGEXing</summary></entry><entry><title type="html">Software components 101 engine part 3 factbase</title><link href="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html" rel="alternate" type="text/html" title="Software components 101 engine part 3 factbase" /><published>2021-05-10T00:00:00-04:00</published><updated>2021-05-10T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/10/Software%20Components%20101%20-%20Engine%20Part%203%20Factbase</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/10/Software-Components-101-Engine-Part-3-Factbase.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Engine Part 3 Factbase&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-10T00:53:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-10T00:53:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; min-height: 10.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Goal of this step is to construct a factbase from the diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use my &lt;i&gt;grasem &lt;/i&gt;tool for this step.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use SWI PROLOG (swipl) for creating queries, hence, target its syntax using grasem.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grasem Overview&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Grasem combines Ohm-JS grammar specification and &lt;i&gt;glue&lt;/i&gt; semantic specifications in one file.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Grasem simply glues a grammar and a &lt;i&gt;glue&lt;/i&gt; spec together into one input file.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It splits the two specifications apart, runs the &lt;i&gt;glue&lt;/i&gt; transpiler then glues it into a JS file along with a grammar to produce a single JS program.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This could be done by a shell script (e.g. by using /usr/bin/split)&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why combine both parts?&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Keep all assets of a project together, where possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Why keep the parts separated?&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;isolation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;psychological &quot;trick&quot; to prevent premature optimization (something encouraged by current PLs)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;low-level optimization should not be addressed during architecture (low-level details get in the way)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;for example, questions like &quot;is this implemented as a list or as an array?&quot; should not enter at the Architectural level and, maybe, not even at the Engineering level — such details are the domain of Implementation&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS creates parsers from grammar specifications.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS parsers use JS as the toolbox language.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Glue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; tool supplies JS code to output code depending on matching done by the grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; allows the programmer to specify an output action for every rule in the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Glue&lt;/i&gt; uses JS back-tick string notation (`...${x}…`).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The combination of a grammar plus simple string outputting is curiously powerful.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This tool — the &lt;i&gt;grasem &lt;/i&gt;tool — is used to transpile a .opml file into a PROLOG factbase that can be queried.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;.SVG files could be used instead of .opml files.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I choose to use .opml for this — simple — example only because I have ready access to a non-svg drawing tool (&lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;) plus an .opml editor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Editing .SVG is not the primary purpose of this essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I need to convince you — the reader — that this process is straight-forward and that it can be easily automated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that performing the transpilation steps manually — and showing the intermediate steps — will be a convincing argument for the simplicity of this technique.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sight-Reading&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To show this set of steps, I simply sight-read the diagram and transcribed it into a tree-view. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The tree-view tool, that I use,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; can export the tree in .opml format. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;From that point forward, we can apply automation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I happen to use Ohm-JS and PROLOG and UNIX® shell scripts, but, other technologies (like other parser tools, miniKanren, etc.) could be used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As an example of converting a diagram, let us look at the top-level diagram in this example…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/kernel-Copy of Rough-in Processes.png&quot; width=&quot;500px&quot; height=&quot;179px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Top Level Diagram For Creating a Runnable&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/kernel-Copy of Rough-in Processes Labelled.png&quot; width=&quot;500px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 2 Tagged Top Level Diagram For Creating a Runnable&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In this diagram, we see&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;3 circles (two green, one yellow)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;3 rounded rectangles (one gray, the other two white&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;2 cylinders&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;14 small squares (2 blue, 8 green, 4 yellow)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;9 arrows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;For convenience in this example, we've tagged most of the above with single-letter tags &lt;span class=&quot;s1&quot;&gt;a-m&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We didn't bother to tag the largest, gray rectangle.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;A true drawing editor would assign an (x,y) point to the position of each of these graphical items.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For convenience, we've omitted this information and eye-ball the &lt;i&gt;contains&lt;/i&gt; relationship directly (this is easier for human manual input than trying to calculate and specify the (x,y) of every item).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A fully automated transpiler would use the (x,y) coordinates of all items to infer &lt;i&gt;contains&lt;/i&gt; and &lt;i&gt;intersects&lt;/i&gt; relationships.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have found it useful to generate a bounding box (left/top/right/bottom) for each graphical item before inferring containment and intersection relationships.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Likewise, for human input, it was easier to directly assign text items to the various objects.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A fully automated transpiler would infer text containment from the (x,y) coordinates of the text items and the various graphical items.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The actual text items are seen in the non-tagged diagram Fig. 1.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We start sight-reading by creating an item in the tree view corresponding to each graphical item on the diagram:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/Screen Shot 2021-05-09 at 3.22.58 PM.png&quot; width=&quot;500px&quot; height=&quot;439px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;We have left out the text for the top level rounded rect.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is probably a typo bug.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We'll fix it later.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Then, for each item in the diagram, we insert attributes into the tree view. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;For example, &quot;cicle a&quot; has 3 attributes:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;color (green)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;stroke-width (3)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;text (&quot;my Composite Template&quot;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Note that stroke-width=3 will become significant when we infer information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A Port with stroke-width=3 will be considered to be an implicit Port — we do not draw connection lines to/from implicit Ports (and we let dynamic inheritance make the connections).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;OPML2FB Source Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The opml2fb.grasem file contains&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;a grammar that matches the .opml entries (YAGNI - we match only what we need — this is a one-shot transpiler, more like a REGEX than a compiler)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a set of rewrite rules (JS back-tick strings) that produce the output — in this case, we want to convert .opml &lt;span class=&quot;s1&quot;&gt;&amp;lt;outline …&amp;gt; … &amp;lt;/outline&amp;gt;&lt;/span&gt; into facts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=3&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is converted to the facts:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id1, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id1, green).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id1, 3).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid2, &quot;my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id1, tid2).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar rules involved in this conversion are:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject = &quot;text=\&quot;circle &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr = &quot;text=\&quot;color=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr = &quot;text=\&quot;stroke-width=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr = &quot;text=\&quot;text=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The pattern matches are tortuous due to the actual structure of the &amp;lt;outline…&amp;gt; input&lt;/i&gt;.]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and the outputting rules are:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject [teqc str] = [[circle(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr [teqc str] = [[color(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr [teqc str] = [[strokeWidth(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr [teqc str] =&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[str(${scopeGet (&quot;tobject&quot;)}, ${changeUnicodeQuotes (str)}).\ntext(${scopeGet (&quot;gobject&quot;)}, ${scopeGet (&quot;tobject&quot;)}).]]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first grammar rule&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject = &quot;text=\&quot;circle &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;says that the grammar matches&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'text=&quot;circle '&lt;/span&gt; followed by a stringTail match&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringTail = notDQ* dq&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After such matches occur, the &lt;i&gt;glue &lt;/i&gt;rules are invoked with matches as parameters to the rules (&lt;span class=&quot;s1&quot;&gt;teqc&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;str&lt;/span&gt;, in this case):&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject [teqc str] = [[circle(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue &lt;/i&gt;rule says that when a match of a &lt;span class=&quot;s1&quot;&gt;circleObject&lt;/span&gt; happens, output it as&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(xxx,yyy).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;where &lt;span class=&quot;s1&quot;&gt;xxx&lt;/span&gt; is the ID of the most-recent object and &lt;span class=&quot;s1&quot;&gt;yyy&lt;/span&gt; is the &lt;span class=&quot;s1&quot;&gt;stringTail&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to create a new ID for every graphical object and we want attributes to reference the IDs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We create new IDs by calling scopeAdd(&quot;gobject&quot;,…) and we reference such IDs by calling &lt;span class=&quot;s1&quot;&gt;scopeGet(&quot;gobject&quot;)&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;New &lt;span class=&quot;s1&quot;&gt;gobject&lt;/span&gt; ID's are created during the tree-walk, and, various sub-rules reference and output this value during the tree-walk.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We use &lt;span class=&quot;s1&quot;&gt;scopeAdd(&quot;…&quot;,value)&lt;/span&gt; to insert values into the dynamic scope and &lt;span class=&quot;s1&quot;&gt;scopeGet(&quot;…&quot;)&lt;/span&gt; to fetch the most recent value.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The opml2fb.grasem file is included below:&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;OPML2FB {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OPML = xmlHeader opmlHeader head body Outline endBody endOPML&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeader = &quot;&amp;lt;opml&quot; opmlHeaderChar* &quot;&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeader = &quot;&amp;lt;?xml&quot; xmlHeaderChar* &quot;?&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;head = &quot;&amp;lt;head&amp;gt;&quot; headChar* &quot;&amp;lt;/head&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;body = &quot;&amp;lt;body&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endBody = &quot;&amp;lt;/body&amp;gt;&quot; newline&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endOPML = &quot;&amp;lt;/opml&amp;gt;&quot; (newline | end)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Outline = OutlineNoContent | OutlineWithContent&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineNoContent = &quot;&amp;lt;outline&quot; item &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineWithContent = &quot;&amp;lt;outline&quot; item &quot;&amp;gt;&quot; Outline* &quot;&amp;lt;/outline&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;item = noise | graphicalObject | attribute&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;graphicalObject = lineObject | arrowObject | circleObject | compObject | rectObject | cylinderObject&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = colorAttr | strokeWidthAttr | textAttr | genericAttr&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;noise = &quot;text=\&quot;lines&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject = &quot;text=\&quot;circle &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;compObject = &quot;text=\&quot;comp &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rectObject = &quot;text=\&quot;rect &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;cylinderObject = &quot;text=\&quot;cyl &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;lineObject = &quot;text=\&quot;line &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;arrowObject = &quot;text=\&quot;arrow &quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr = &quot;text=\&quot;color=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr = &quot;text=\&quot;stroke-width=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr = &quot;text=\&quot;text=&quot; stringTail&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;genericAttr = &quot;text=&quot; string&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;headChar = ~&quot;&amp;lt;/head&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeaderChar = ~&quot;&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeaderChar = ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;newline = &quot;\n&quot;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = dq notDQ* dq&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringTail = notDQ* dq&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;dq = &quot;\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQ = ~&quot;\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OPML [xmlhdr opmlhdr head body outline endbody endopml] =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[${xmlhdr}${opmlhdr}${head}${body}${outline}${endbody}${endopml}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeader [begin @hdr close nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeader [begin @hdr close nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;head [begin @hdr close nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;body [begin nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endBody [begin nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;endOPML [begin nl] = [[]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Outline [o] = [[${o}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineNoContent [begin t slashClose] = [[${t}\n]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutlineWithContent [begin t close @o slasho] =  [[${t}${o}]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;headChar [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;opmlHeaderChar [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeaderChar [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;newline [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;item [i] = [[${i}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;graphicalObject [o] = [[${o.trim ()}\n]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = [[${a.trim ()}\n]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;circleObject [teqc str] = [[circle(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;compObject [teqc str] = [[comp(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rectObject [teqc str] = [[rect(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;cylinderObject [teqc str] = [[cylinder(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;lineObject [teqc str] = [[line(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;arrowObject [teqc str] =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[[&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;arrowBegin(${scopeGet (&quot;gobject&quot;)}, ${abegin (str)}).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;arrowEnd(${scopeGet (&quot;gobject&quot;)}, ${aend (str)}).]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;colorAttr [teqc str] = [[color(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;strokeWidthAttr [teqc str] = [[strokeWidth(${scopeGet (&quot;gobject&quot;)}, ${str}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textAttr [teqc str] =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[str(${scopeGet (&quot;tobject&quot;)}, ${changeUnicodeQuotes (str)}).\ntext(${scopeGet (&quot;gobject&quot;)}, ${scopeGet (&quot;tobject&quot;)}).]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;genericAttr [teq str] = [[${teq}${str}]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string [q1 @cs q2] = [[${q1}${changeUnicodeQuotes (cs)}${q2}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringTail [@cs q2] = [[${changeUnicodeQuotes (cs)}${q2}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQ [c] = [[${c}]]&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;dq [c] = [[]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;noise [a b] = [[]]&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The resulting factbase is:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, a).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, b).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, c).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, f).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, g).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, h).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, j).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, l).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, n).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, s).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id40, v).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, a).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, b).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, c).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, f).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, h).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, l).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, m).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, p).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowBegin(id69, s).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [d]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [f]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [h]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [j]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [l]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [m]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [o]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [p]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [r]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [t]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id40, [u]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [d]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [f]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [g]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [h]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [k]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [l,o]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [l]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [n]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;arrowEnd(id69, [r]).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id1, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id11, &quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id13, &quot;d&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id3, &quot;b&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id45, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id46, &quot;b&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id47, &quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id7, &quot;a&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id70, &quot;d&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id73, &quot;g&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;circle(id9, &quot;b&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id1, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id11, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id13, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id16, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id17, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id22, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id23, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id24, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id29, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id3, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id30, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id35, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id36, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id37, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id45, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id46, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id47, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id50, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id51, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id52, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id57, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id58, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id59, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id64, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id65, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id66, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id7, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id70, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id73, yellow).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;color(id9, green).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id0, &quot;A&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id14, &quot;e&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id20, &quot;g&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id27, &quot;i&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id33, &quot;k&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id43, &quot;e&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id48, &quot;e&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id5, &quot;c&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id55, &quot;g&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;comp(id62, &quot;i&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id18, &quot;f&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id25, &quot;h&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id31, &quot;j&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id38, &quot;l&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id41, &quot;d&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id53, &quot;f&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id60, &quot;h&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id67, &quot;j&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;cylinder(id71, &quot;f&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id16, &quot;m&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id17, &quot;n&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id22, &quot;o&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id23, &quot;p&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id24, &quot;q&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id29, &quot;r&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id30, &quot;s&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id35, &quot;t&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id36, &quot;u&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id37, &quot;v&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id50, &quot;k&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id51, &quot;l&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id52, &quot;m&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id57, &quot;n&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id58, &quot;o&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id59, &quot;p&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id64, &quot;q&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id65, &quot;r&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;rect(id66, &quot;s&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid10, &quot;my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid12, &quot;child&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid15, &quot;make instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid19, &quot;child instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid2, &quot;my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid21, &quot;invent name&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid26, &quot;named child instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid28, &quot;recursively instantiate&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid32, &quot;filled child instance&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid34, &quot;insert child into children of my runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid39, &quot;my runnable filled in with children&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid4, &quot;my runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid42, &quot;my runnable filled in with children&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid44, &quot;∀ connections of my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid49, &quot;clone connection&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid54, &quot;runnable connection with holes&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid56, &quot;fixup connection&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid6, &quot;∀ children of my Composite Template&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid61, &quot;fixed up connection&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid63, &quot;insert connection into runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid68, &quot;final runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid72, &quot;runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;str(tid8, &quot;my runnable&quot;).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id1, 3).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id3, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id45, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id46, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id47, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id50, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id51, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id52, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id57, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id58, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id59, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id64, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id65, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id66, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id70, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;strokeWidth(id73, 1).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id1, tid2).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id11, tid12).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id14, tid15).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id18, tid19).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id20, tid21).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id25, tid26).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id27, tid28).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id3, tid4).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id31, tid32).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id33, tid34).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id38, tid39).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id41, tid42).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id43, tid44).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id48, tid49).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id5, tid6).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id53, tid54).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id55, tid56).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id60, tid61).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id62, tid63).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id67, tid68).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id7, tid8).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id71, tid72).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;text(id9, tid10).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that PROLOG requires that all facts with the same name be grouped together.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We do this by invoking the UNIX® &lt;i&gt;sort&lt;/i&gt; command (see run.bash — &lt;a href=&quot;https://github.com/guitarvydas/basicdasl/blob/master/pseudo/run.bash&quot;&gt;https://github.com/guitarvydas/basicdasl/blob/master/pseudo/run.bash&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roadmap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-10-00-53-29-Images/Roadmap3.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/26/Factbases-101.html&quot;&gt;https://guitarvydas.github.io/2021/04/26/Factbases-101.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;Ohm-JS &lt;/b&gt;(skim or familiarize yourself with Ohm-JS using this essay or Ohm-JS documentation)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;ohm-js editor&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Ohm-Editor.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;glue&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;grasem&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;isolation&lt;/b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/Superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/Superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/24/superposition-2.html&quot;&gt;https://guitarvydas.github.io/2021/01/24/superposition-2.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;details kill&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;software development roles&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&quot;&gt;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;toolbox language&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/28/Toolbox-Languages-(2).html&quot;&gt;https://guitarvydas.github.io/2021/04/28/Toolbox-Languages-(2).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;screencasts&lt;/b&gt; (esp. PROLOG For Programmers)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Playlists.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Playlists.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Cloud Outliner&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Engine Part 3 Factbase</summary></entry><entry><title type="html">Software components 101 engine development (part 1)</title><link href="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html" rel="alternate" type="text/html" title="Software components 101 engine development (part 1)" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/09/Software%20Components%20101%20-%20Engine%20Development%20(Part%201)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Engine Development (Part 1)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-09T15:05:16Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-09T15:05:16Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px 'Apple Symbols'}
    span.s3 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal of this sub-project is to build an engine&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; that runs software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I try to show how to compile diagrams by hand.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am trying to capture my design thoughts while they are still fresh.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the roadmap in Roadmap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I hope to build the engine in:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Common Lisp&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;JavaScript&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;design&lt;/i&gt; for each of the above, is the same, but the details change depending on the language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to capture the design similarities and generate the above engines automatically, if possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To do this, I sub-divide the problem and add a new sub-problem:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;pseudo-code in diagram form for the engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I &lt;i&gt;think&lt;/i&gt; that I'm going to use Ohm-JS and PROLOG to generate code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let's see…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;See&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/04/Software-Components-001.html&quot;&gt;https://guitarvydas.github.io/2021/05/04/Software-Components-001.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/08/Software-Components-101.html&quot;&gt;https://guitarvydas.github.io/2021/05/08/Software-Components-101.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/04/Software-Components-101-Connection-Queries.html&quot;&gt;https://guitarvydas.github.io/2021/05/04/Software-Components-101-Connection-Queries.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I drew diagrams&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; for the engine.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;First, I drew an overview diagram, then I successively added detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I kept each diagram &quot;simple enough&quot; for me to understand.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As I drew the diagrams, I kept &quot;implementability&quot; and &quot;explainability&quot; in mind.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;1. Data and Types&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Data &amp;amp; Types.png&quot; width=&quot;500px&quot; height=&quot;179px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Data &amp;amp; Types&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Template&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;a Template is like a class&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Template specifies the structure of a Component, but doesn't create an instance&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Template can be used more than once in a diagrams&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;Kind&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;a Kind is akin to a Type (Class / whatever)&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;I'm using a different name - &lt;i&gt;kind&lt;/i&gt; - because the main operation is different than in OO (see below)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;we combine Templates using &lt;i&gt;composition&lt;/i&gt; instead of inheritance&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;we might want to use the index as a name&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;name is either&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;template name (if the template is used only once on a diagram), or,&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;an index into the ordered bag of children (of this template)&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;(we could assign string names to each child, but that's more work than is necessary for this simple example).&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Composite Template&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;A Composite is a Template that contains (is composed of) other Templates&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;recursive&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Composite is a Basic Template with 2 additions
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;children
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;an ordered bag of other Templates&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;connections
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;connections between child components (and/or self)&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;connections can ONLY be made between direct children (and self)&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;sender&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;one sender per connection&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;each sender specifies a connection to zero or more receivers&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;each sender is joined to a bag of receivers&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;multiple senders can appear to send to the same connection on a diagram
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;connections can specify the same bag of receivers, but only one sender per connection&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;this looks-like multiple senders sending to the &lt;i&gt;same&lt;/i&gt; bag of receivers&lt;/li&gt;
          &lt;/ul&gt;&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;each sender has a name as above (i.e. Template name or index)&lt;/li&gt;
        &lt;/ul&gt;&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;bag of receivers
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;each receiver has a name as above (i.e. Template name or index)&lt;/li&gt;
        &lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Leaf Template&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;a Leaf is the &quot;bottom&quot; of the hierarchy of Templates&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;a Leaf is the &quot;termination case&quot; for recursive construction of Templates &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;a Leaf is a &quot;black box&quot;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;a Leaf is (probably) implemented in some other language&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Runnable&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;a Runnable is the extra stuff needed to instantiate a Template&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;since Templates can be used more than once, each Runnable must be unique&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;Runnable &quot;points back&quot; to Template for stuff that doesn't need to be copied&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;to make a Composite Runnable unique
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;need to copy Connections&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;fixup all Runnable's Connections to refer to children in Runnable (instances of children)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;Types&lt;/b&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;inputs&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;outputs&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;input_events&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;output_events&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;children&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;connections&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;connection&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;port&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;component&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;sender&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;receiver&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;event_queue&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;event&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;li4&quot;&gt;types boil down to several possibilities:
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;a &lt;i&gt;name&lt;/i&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;a symbol
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;probably implemented as a hashed string&lt;/li&gt;
        &lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;a &lt;i&gt;collection&lt;/i&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;namespace&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;bag&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;queue&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;a &lt;i&gt;tuple&lt;/i&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;{ ..., ..., ... }&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;any&lt;/b&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;any of the above&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Note that the &quot;type language&quot; described in the diagram (under legend) should be easy to build in PEG (I like Ohm-JS).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I intend to use the type language in the component diagrams below.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I know that I can implement the type language in Ohm-JS (I've done it before).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It simply represents work and &quot;no risk&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will step around this sub-problem for now.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;2. Nested Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Nested Components.png&quot; width=&quot;400px&quot; height=&quot;129px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 2 Nested Components&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At first, I draw a rough diagram of how I wish to architect the solution.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The basic operation is: input a &lt;i&gt;template&lt;/i&gt; and convert it to a &lt;i&gt;runnable&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I immediately see this solution as 3 nested layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I jot down the overview — informally — to give myself a roadmap of how I want to solve this problem (the problem is: to build an engine for components and to deliver it in various target languages).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I imagine 3 processes and draw them as rounded rectangles.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I imagine 2 intermediate results and draw them as cylinders.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I draw only the &lt;i&gt;happy path&lt;/i&gt; between the processes as arrows.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The gist of this step is to capture/explain my intended architecture while deferring details&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; for later.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;3. Add Ports to Nested Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Add Ports to Nested Components.png&quot; width=&quot;400px&quot; height=&quot;100px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 3 Add Ports&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I embellish the diagram by drawing input and output ports (green and yellow, resp.).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;External ports are drawn as circles.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Internal ports are drawn a small squares.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The work, in this step, is minimal, but it makes me ponder the design further.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This example is simple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a more complicated solution, I might change my mind about the design and update the diagrams in this step.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;4. Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Layers.png&quot; width=&quot;400px&quot; height=&quot;500px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 4 Layers&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I divvy up the design into layers using the previous diagrams as guides.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I often do this step implicitly without drawing anything further.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;As can be seen, each &lt;i&gt;layer&lt;/i&gt; is a black box with input ports and output ports.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;5. Rough-in Processes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Rough-in Processes.png&quot; width=&quot;400px&quot; height=&quot;332px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 5 Rough in&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;At this point, I am satisfied with the intended solution, so I begin roughing-in the details.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I morphed the top level diagram somewhat — it now contains 2 major process, but still contains 2 intermediate results.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;This is &lt;i&gt;engineering, &lt;/i&gt;i.e. adding details to the original &lt;i&gt;architecture&lt;/i&gt; to make it realizable.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;As I consider the details, I add more external ports and flesh out the two main blocks. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I need to remind myself that I am starting out with a &lt;i&gt;template&lt;/i&gt; and am trying to build a &lt;i&gt;runnable&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I keep these concepts separated, using separate ports and separate connections.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When using current programming languages, I would normally fold the architectural concepts (of &lt;i&gt;template&lt;/i&gt; and &lt;i&gt;runnable&lt;/i&gt;) into a single data structure.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In essence, this kind of folding is a premature optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that the above diagrams and separation capture my intended approach for all to read (and/or to criticize, I'm not perfect).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I want to communicate what I'm thinking and the &lt;i&gt;why's&lt;/i&gt; of my intended solution.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There might be more than one way to solve this problem, but these diagrams need to show how &lt;i&gt;I &lt;/i&gt;choose to solve it.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;To enable easier hand-compilation, I've drawn all ports &lt;i&gt;inside&lt;/i&gt; the components that own them.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Normally, I would draw ports so that they intersect the boundaries of the parent components — intersection and ownership is &quot;easy&quot; for a computer to calculate, but this minor change makes it easier for me to hand-compile the diagrams (as I eye-ball the diagrams).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case I have only 1 relationship — &lt;i&gt;contains&lt;/i&gt; —instead of the two relationships a non-bootstrap compiler would use — &lt;i&gt;contains&lt;/i&gt; and &lt;i&gt;intersects&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I avoid putting (x,y) coordinates on the diagram as that will slow me down during hand-compilation, but is no problem for a computer.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;New invention: the solution that I want to express needs 2 &lt;i&gt;forall&lt;/i&gt; operations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I draw these as large components with the &lt;span class=&quot;s2&quot;&gt;∀&lt;/span&gt; character as the first character in the names and with blue ports signifying the &quot;inputs&quot; from the encompassing &lt;i&gt;forall &lt;/i&gt;operation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This might be written as&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;for child in Template.children { … }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;in pseudo-code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;6. Re-Label Rough-in&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/kernel-Rough-in Processes Labelled.png&quot; width=&quot;400px&quot; height=&quot;336px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 6 Re-Labelling&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;As another aid to hand-compilation, I tag every drawing element with a single-letter symbol.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, this kind of tagging is not necessary in a fully-automated process, but removes some of the boring and error-prone steps in hand-compilation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I've tagged all circles, rectangles and cylinders this way.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;A fully automated compiler would simply use the graphical objects' IDs and would not require tags.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We can say that the &lt;i&gt;tag&lt;/i&gt;s are &lt;i&gt;synonym&lt;/i&gt;s for the tagged object ID's.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Further&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I the next instalment, I will discuss how to convert &lt;span class=&quot;s3&quot;&gt;Fig. 6 into a text file, ready for processing.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/basicdasl/tree/master/pseudo&quot;&gt;https://github.com/guitarvydas/basicdasl/tree/master/pseudo&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roadmap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-15-05-16-Images/Roadmap.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;I also call the &lt;i&gt;engine&lt;/i&gt; a &lt;i&gt;kernel&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The first step in automating anything is to do it manually.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The work should be really boring to do and scream to be automated.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; The diagrams are in the file kernel.drawio, under separate tabs.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;/span&gt;I will show how to build the type language in another blog.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is just simple, repetitive and boring work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I'll implement it when my brain is fried — there is no point doing it now while I'm still fresh and on a designing-roll.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe this is what athletes call &quot;the zone&quot; or &quot;flow state&quot; - I choose to do nothing to break this flow, leaving menial implementation tasks for later.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Engine Development (Part 1)</summary></entry><entry><title type="html">Ohm Editor</title><link href="https://computingsimplicity.neocities.org/2021/05/09/Ohm-Editor.html" rel="alternate" type="text/html" title="Ohm Editor" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/09/Ohm-Editor</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/09/Ohm-Editor.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Ohm-Editor&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-09T11:27:11Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-09T11:27:11Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm Editor Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A screenshot of the Ohm Editor is show in &lt;span class=&quot;s1&quot;&gt;Fig. 1.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-11-27-11-Images/Screen Shot 2021-04-26 at 5.48.37 PM.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Fig. 1 Ohm Editor screenshot.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The screen is divided into 4 sections — upper left, upper right, the middle and the bottom.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The upper left section holds the grammar under development. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The upper right section hold various test cases.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Test cases can be add using the &quot;+Add&quot; button or by double-clicking on a specific case.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The middle section (here showing &quot;2 * * 4 2 - 1 ) / 9&quot;) shows the string being parsed.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The bottom section shows the resulting CST&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The CST is gray when the parse is successful and red when the parse fails.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hovering over a node in the parse tree highlights the corresponding grammar rule.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The most common problem encountered when debugging a PEG grammar is the that of incorrect parsing of whitespace.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Ohm Editor lets you see what the parser is doing and can give you hints as to where the parse is failing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Salient Points About Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS is a PEG library.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Important advantages of Ohm-JS vs. other PEG libraries:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;grammar remains unspoiled by detail&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;PEG editor (IDE) for rapid debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Ohm-JS divides a parser into 2 stages&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;grammar&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;semantics code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This note appeared as Appendix A in:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/26/Recursive-Design,-Iterative-Design-By-Example-(3).html&quot;&gt;https://guitarvydas.github.io/2021/04/26/Recursive-Design,-Iterative-Design-By-Example-(3).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;See GLUE tool for PEG for generating semantics code&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/Glue-Manual.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/Glue-Manual.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/18/Little-Language.html&quot;&gt;https://guitarvydas.github.io/2021/03/18/Little-Language.html&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; A CST is often called an AST.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When fractalized, a grammar breaks down into two parts - the AST and the CST (abstract syntax tree and concrete syntax tree, resp.).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The AST shows what&lt;i&gt; can &lt;/i&gt;parsed, which the CST shows what &lt;i&gt;was&lt;/i&gt; parsed (in concrete terms).&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Ohm-Editor</summary></entry><entry><title type="html">Software components 101 engine part 2 diagram to text</title><link href="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html" rel="alternate" type="text/html" title="Software components 101 engine part 2 diagram to text" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/09/Software%20Components%20101%20-%20Engine%20Part%202%20Diagram%20to%20Text</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/09/Software-Components-101-Engine-Part-2-Diagram-to-Text.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101 - Engine Part 2 Diagram to Text&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-09T16:09:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-09T16:09:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Goal of this step is to enter the diagrams manually.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ideally, we would use an editor to perform this step, producing SVG diagrams, but most editors are too fancy (most SVG editors) or too old (&lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt;) to perform this step cleanly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I ended up sight-reading the diagrams into &quot;Cloud Outliner&quot; and produced an .&lt;span class=&quot;s1&quot;&gt;opml&lt;/span&gt; file.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss this process below.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that an automated transpiler would not need to use .&lt;span class=&quot;s1&quot;&gt;opml&lt;/span&gt; files — we could go from .&lt;span class=&quot;s1&quot;&gt;svg&lt;/span&gt; files directly,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;but,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to show my thinking process in great detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I was taught to &quot;show my work for partial marks&quot; in school.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Doing this step manually is like showing my work or showing numeric division in longhand, or, …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that it should be &quot;obvious&quot; how to build&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; a transpiler to alleviate most of this work.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(For the diagrams, see Prerequisites)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html&quot;&gt;https://guitarvydas.github.io/2021/05/09/Software-Components-101-Engine-Development-(Part-1).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roadmap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-16-09-20-Images/Roadmap2.png&quot; width=&quot;500px&quot; height=&quot;608px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cloud Outliner&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-09-16-09-20-Images/Screen Shot 2021-05-09 at 3.22.58 PM.png&quot; width=&quot;500px&quot; height=&quot;439px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Diagram in Cloud Outliner&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I wanted to transcribe the diagram by hand, to show the thinking process.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There was so much &quot;detail&quot; (the .OPML file is 200 lines long) in the diagrams, that I searched for something less inconvenient to use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I tried raw text, then emacs .org mode, then SimpleMind and finally settled on Cloud Outliner.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Transpiling from a diagram to some kind of text (say, .SVG), &lt;i&gt;should&lt;/i&gt; be easy and automated. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In the worst case, one can use one of the above tools and save the diagrams in .svg format, then perform post-processing&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A post-processed file can be further manipulated with PROLOG scripts or shell scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was accomplished — a diagram transpiler consisting of some 40 components was built in Common Lisp (+ Holm PROLOG), but the number of steps&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; turned out to be a hindrance to rapid turn-around.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I felt that something less complicated could be accomplished (this set of blogs indicates how to accomplish full transpilation).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I simply sight-read the diagrams into the tree-view.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The main diagrammatic objects are:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;rectangles&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;circles&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lines (arrows)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each object is annotated with appropriate attributes, such as color, etc.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The result is seen in Fig. 1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The full details can be seen in the github repo.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I allowed myself some conveniences.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, instead of entering Components and Ports as &lt;i&gt;rectangles&lt;/i&gt;, I entered Components as &lt;i&gt;comp&lt;/i&gt; and Ports as &lt;i&gt;rect&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I, also, allowed myself to tag interesting objects with single-letter tags instead of inventing and using full-blown IDs for each.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;An automated transpiler would not need these conveniences but I, as a human, found it too error-prone to enter these diagrams in the most normalized (aka &lt;i&gt;boring&lt;/i&gt;) manner.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;OPML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The final OPML file is shown below. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A point to note is the extreme repetitive nature of the data — it is not &quot;human readable&quot; (except as a last resort), but, it &lt;i&gt;is&lt;/i&gt; machine-readable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We only need the data to be in machine-readable format to further process it using scripts, Ohm-JS, PROLOG, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that the diagrams are &quot;human readable&quot; but are not very readable when reduced to textual form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note, in passing, that it &lt;i&gt;is &lt;/i&gt;possible to describe an architecture in diagrammatic form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The last step — converting the diagram to machine-readable form — can be performed by a scribe or by a suitable editor or by a set of scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The number of distinct kinds of elements is very small, but the normalized data is very boring from a human-readability perspective.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Boring&quot; means error-prone when entered by humans.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Boring&quot; means that automation can be applied.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&amp;lt;opml version=&quot;1.0&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;title&amp;gt;Diagrams 1&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;expansionState&amp;gt;0,22,26,71,73,86,89,92,123&amp;lt;/expansionState&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “A”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=3&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “b”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “c”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”∀ children of my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “b”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “c”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“child”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “d”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “e”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“make instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “m”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “n”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “f”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“child instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “g”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”invent name”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “o”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “p”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “q”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “h”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”named child instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “i”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“recursively instantiate”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “r”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “s”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “j”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“filled child instance”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “k”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”insert child into children of my runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “t”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “u”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “v”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “l”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable filled in with children”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;lines&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow c&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;m&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;f&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow f&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;o&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow b&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;p&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow g&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;h&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow h&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;r&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow s&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;j&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow j&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;t&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow a&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;u&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow v&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;l&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow l&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;d&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “d”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“my runnable filled in with children”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “e”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“∀ connections of my Composite Template”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “a”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “b”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “c”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “e”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”clone connection”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “k”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “l”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “m”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “f”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“runnable connection with holes”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “g”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“fixup connection”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “n”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “o”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “p”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “h”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“fixed up connection”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;comp “i”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=”insert connection into runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “q”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “r”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=green&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;rect “s”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “j”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“final runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;lines&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow c k&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow b l o&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow m f&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow f n&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow p h&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow h g&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow a r&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow s l&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;arrow l d&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “d”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;cyl “f”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;text=“runnable”&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;circle “g”&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;color=yellow&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;outline text=&quot;stroke-width=1&quot; /&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/outline&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&amp;lt;/opml&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Further&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In subsequent essays, I will show how&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;to read the .OPML file using my &lt;i&gt;grasem&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; &lt;/i&gt;tool,&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;to convert the data into a factbase, (again, using grasem)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;to run search queries against the data — inferring semantically interesting information from the diagrams&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;outputting code (that's: code transpiled from the diagrams), finally closing the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Hint: PEG / Ohm-JS and PROLOG would be my weapons of choice.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I intend to do this explicitly in a future essay.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This is done in the full-blown transpiler Arrowgrams, in Haskell and Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the code in https://github.com/bmfbp/bmfbp if you want all of the gory details.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;We used Draw.io to create diagrams, but needed to massage them and export them as .SVG files.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101 - Engine Part 2 Diagram to Text</summary></entry><entry><title type="html">Software components 101</title><link href="https://computingsimplicity.neocities.org/2021/05/08/Software-Components-101.html" rel="alternate" type="text/html" title="Software components 101" /><published>2021-05-08T00:00:00-04:00</published><updated>2021-05-08T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/08/Software%20Components%20101</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/08/Software-Components-101.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Components 101&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-08T08:17:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-08T08:17:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {text-decoration: underline}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Components 101&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This essay introduces some of the concepts of Software Components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A full discussion of Software Components is fractal and recursive in nature.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This essay is an introduction and I choose to skip some of the details.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The key concept is that Components are &lt;i&gt;relative &lt;/i&gt;to one another and are &lt;i&gt;asynchronous&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These concepts are quite different from those of most modern programming languages, but the concepts are subtle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I intend to draw components in SVG and I intend to show&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; how to use diagrams, and SVG, as syntax (instead of characters).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Level&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-08-08-17-49-Images/basic1-basic1.png&quot; width=&quot;150px&quot; height=&quot;99px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Basic Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 shows a basic software component diagram.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This diagram represents the top level of a software Component.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The component's name is &quot;main&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Component has one Input Port — &quot;in&quot; — represented by the green circle (containing the text &quot;in&quot;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Component has one Output Port — &quot;out&quot; — represented by the yellow circle (containing the text &quot;out&quot;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Port &quot;in&quot; is connected to the Port &quot;out&quot; by a line representing the flow of Events from &quot;in&quot; to &quot;out&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Most lines begin at a green input and end at a yellow output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we used an arrow, instead of a line, the arrow would point at the yellow output port (the direction of flow).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will see that it is also possible to connect a yellow output to another yellow output and a green input to another green input, later.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We write the name of the Component as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[main]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;the input port as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;(in)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;and the output port as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;(out)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I.E. Component names are written in brackets, Port names are written in parentheses.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nested&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-05-08-08-17-49-Images/basic1-basic2.png&quot; width=&quot;150px&quot; height=&quot;99px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 shows a component, called &quot;subcomponent&quot; nested inside the component called &quot;main&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Inner input ports are green rectangles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Inner output ports are yellow rectangles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;External ports are circles, inner ports are rectangles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Input Port &quot;in&quot; is connected to the inner Input Port &quot;A&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The inner Output Port &quot;B&quot; is connected to the External Output Port &quot;out&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;This diagram contains two components and a total of two connections.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nested Component in a Nested Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-08-08-17-49-Images/basic1-basic3.png&quot; width=&quot;150px&quot; height=&quot;78px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 Component Nested in a Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This diagram shows 3 components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Component X&quot; is inside component &quot;subcomponent&quot; and component &quot;subcomponent&quot; is, itself, inside the Component &quot;main&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The component &quot;subcomponent&quot; has an output port called &quot;#&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Output Port has a shadow&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The shadow means that the port is connected to all sub-ports with the same name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We write this Port name as (*#).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;We prefix the component name with *&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In this diagram, there are 3 Components and 4 connections.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;3 connections are explicit (shown as lines) and one connection is implicit ([component X].(#) connected to [subcomponent].(*#)).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Here, we introduce another syntactical point - names can include spaces and any characters except brackets, parentheses and dots.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example the name of the inner-inner component is [component X]. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Names are &lt;i&gt;relative&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the section Relative Naming below.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It is easier to think of the above diagram as being subdivided into several layers, eliding the inner details at each layer. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The topmost layer might be thought of as:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-08-08-17-49-Images/basic1-basic3 (0).png&quot; width=&quot;150px&quot; height=&quot;78px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Component Nested in a Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;whereas the inner layer might be thought of as:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-08-08-17-49-Images/basic1-basic3 (1).png&quot; width=&quot;150px&quot; height=&quot;77px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5 Component Nested in a Nested Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The detail to note is the &lt;i&gt;self [.]&lt;/i&gt; is relative, not absolute.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hence, [.] refers to [subcomponent] or to [component X], depending on context.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Copied Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-05-08-08-17-49-Images/basic1-basic4.png&quot; width=&quot;150px&quot; height=&quot;133px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6 Copied Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6 shows a simple COPY/PASTE of [subcomponent].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Component [main] contains two clones of the component [subcomponent].&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Relative naming makes this possible and simple and easy.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite vs. Leaf Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can contain other components (e.g. &lt;i&gt;composition&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Such components are call &lt;i&gt;composite&lt;/i&gt; &lt;i&gt;components&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Composite Components, once invoked, run until all of their children have subsided.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components that do not contain other components, or are implemented in some other language (other than &lt;span class=&quot;s2&quot;&gt;dasl&lt;/span&gt;), are called &lt;i&gt;leaf components&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Leaf Components are like black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When they are invoked, they run to completion (one input event only).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We do not &quot;see&quot; — at the &lt;span class=&quot;s2&quot;&gt;dasl&lt;/span&gt; level — the inner workings of &lt;i&gt;Leaf Components.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are asynchronous.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components may only communicate by sending events to their output ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Event delivery is, conceptually, not implemented as CALL / RETURN.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Event delivery occurs in two phases,&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; see &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;It might help to think of closures with input queues and a distinguished routine, called the Dispatcher, that invokes closures that are ready.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This concept is not very different from processes and scheduling found in most operating systems, but it can be implemented in a more light-weight manner (there is no requirement for full preemption).&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run to Completion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components consume one input event at a time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components process each input event to completion before popping another input event from their input queues.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Note that components can be broken up into pieces which are coordinated by event arrival.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events invoke only one piece of a Component at a time and &quot;running to completion&quot; means that only one piece completes running.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ready / Busy&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax Details&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dot Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We write a component / port pair as&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[ … ] . ( … )&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I.E. the Component name is enclosed in brackets, the Port name is enclosed in parentheses and the &lt;i&gt;dot&lt;/i&gt; operator joins the two (much like the field operator in most textual OO languages).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Self Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;self&lt;/i&gt; Component has a special name &quot;.&quot; and is written as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[.]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Reference to a Port of a &lt;i&gt;self &lt;/i&gt;Component looks like&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[.].(A)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;We want machine readability first, human readability second.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The important point is that Components and Ports have a different syntax which is always the same.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The namespace of Input Ports can overlap with the namespace of Output Ports.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Syntax is easy to change, if you don't like the above&lt;/i&gt;.]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Green vs. Yellow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Green is defined as any colour where the R component is &amp;lt;#80 and the G component is &amp;gt;= #80.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yellow is defined as any colour where the R component is &amp;gt;= #80 and the G component is &amp;gt;= #80.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relative Naming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Component names are constructed in a relative manner, by prefixing each component name with its parent component, followed by a space followed by the Component's name.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, we would refer to the inner-inner Component of Nested Component in a Nested Component, as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[main subcomponent component X].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This convention does not apply to Port names, since Port names are always internally distinguished by the Component that they belong to, e.g. the Port (c) in Nested Component in a Nested Component is written as:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[main subcomponent component X].(c)&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Kinds vs. Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What we have been calling Component &lt;i&gt;names&lt;/i&gt; are actually Component &lt;i&gt;kinds&lt;/i&gt; — much like their type or class.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In most cases, there is only one Component of a given kind on a diagram&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the cases where there is more than one Component of a given kind, the components are written as digits, starting at 1, in the order of declaration of the Components (component declarations will be discussed elsewhere).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in Copied Component, the [main] Component has two copies of [subcomponent].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They are written as&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[1]…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[2]…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(Internally, the components are further distinguished by their (x,y) coordinates and are unique).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that &lt;span class=&quot;s2&quot;&gt;[subcomponent]&lt;/span&gt; has only one copy of &lt;span class=&quot;s2&quot;&gt;[component X]&lt;/span&gt; inside of it, so &lt;span class=&quot;s2&quot;&gt;[component X]&lt;/span&gt; is &lt;span class=&quot;s3&quot;&gt;not&lt;/span&gt; written in a qualified manner in the implementation of &lt;span class=&quot;s2&quot;&gt;[subcomponent]&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Hopefully this will become more clear with more examples.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We are using &lt;/i&gt;&lt;span class=&quot;s3&quot;&gt;&lt;i&gt;relative&lt;/i&gt;&lt;/span&gt;&lt;i&gt; naming, whereas most modern programming languages use &lt;/i&gt;&lt;span class=&quot;s3&quot;&gt;&lt;i&gt;absolute&lt;/i&gt;&lt;/span&gt;&lt;i&gt; naming.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All naming and namespacing is relative to the immediate parent Component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Another subtlety is that we are splitting each component up into 3 specifications — signature, children, connections — whereas most modern programming languages attempt to consolidate all code into flat, not relative, specifications&lt;/i&gt;]&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;In a following essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If one looks at SVG, it should become apparent how to use SVG as syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Instead of characters, I use a syntax composed of rects, circles, ellipses, lines and text. I call this DaS (Diagrams as Syntax).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;In fact, I will begin using a stroke-width of 3, which is more easily represented and recognized in SVG.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Notably, event receivers are not immediately executed once an event arrives.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is best to think of events as (1) being placed on input queues and (2) Component execution being coordinated by a Scheduler (separate from event delivery).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;If this seems anti-intuitive, note that diagrams represent Software Architecture, not Code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In practice, Architectures tend to have only one of each kind of thing on a diagram.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(If you are thinking of &quot;+&quot; Components, then you are thinking about Code, not Architecture).&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Components 101</summary></entry><entry><title type="html">Breaking out of synchronous thinking</title><link href="https://computingsimplicity.neocities.org/2021/05/07/Breaking-Out-Of-Synchronous-Thinking.html" rel="alternate" type="text/html" title="Breaking out of synchronous thinking" /><published>2021-05-07T00:00:00-04:00</published><updated>2021-05-07T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/07/Breaking%20Out%20Of%20Synchronous%20Thinking</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/07/Breaking-Out-Of-Synchronous-Thinking.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Breaking Out Of Synchronous Thinking&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-07T09:56:01Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-07T09:56:01Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Async&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The default should be that everything is asynchronous.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Synchrony should be the exception, not the rule.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;No Loops&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Loops and recursion, currently, imply synchrony.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Loops are replaced&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; by:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;send message to self&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See &lt;a href=&quot;https://guitarvydas.github.io/2021/05/05/Breaking-Long-Running-Loops.html&quot;&gt;https://guitarvydas.github.io/2021/05/05/Breaking-Long-Running-Loops.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sync&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Functions/operations that are synchronous must be prefixed by the &lt;span class=&quot;s1&quot;&gt;sync&lt;/span&gt; keyword.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sequencing is not the Default&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In most current PLs, operations follow a strict sequence specified by consecutive lines of code or nested function calls.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn(5)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn(6)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fnx(fny(7))&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;implies that &lt;span class=&quot;s1&quot;&gt;fn(6)&lt;/span&gt; is invoked only after &lt;span class=&quot;s1&quot;&gt;fn(5)&lt;/span&gt; has been invoked and has finished.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, &lt;span class=&quot;s1&quot;&gt;fnx()&lt;/span&gt; is called only after &lt;span class=&quot;s1&quot;&gt;fny()&lt;/span&gt; has finished.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the first case, the language has a &lt;i&gt;hidden&lt;/i&gt; synchronization operation and in the second case, &lt;span class=&quot;s1&quot;&gt;fnx()&lt;/span&gt; has a &lt;i&gt;hidden&lt;/i&gt; &lt;span class=&quot;s1&quot;&gt;wait()&lt;/span&gt; operation built into it&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Computers are able to perform concurrent operations, but our PLs build synchronization in as the default&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Distributed computers don't necessarily act as functions, but act as &lt;i&gt;components&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Mathematics is a &lt;i&gt;notation&lt;/i&gt; for dealing with &lt;i&gt;functions &lt;/i&gt;that are implicitly synchronized.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Using mathematical notation for programming languages limits what can be done&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; with a computer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, programmers imagine that distributed programming is &quot;hard&quot; and tend not to invent languages that span processors, e.g. inventing a &lt;i&gt;language&lt;/i&gt; that deals with 2 rPis instead of only one rPi at a time ; currently we have only &lt;i&gt;libraries &lt;/i&gt;of assembler-like operations to deal with multiple processes and multiple CPUs&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; and some languages attempt conflate expression of so-called parallel processes into a functional notation.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What Happens When Functions Aren't Synchronous?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Q: In the case&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fnx(fny(7))&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;what happens if &lt;span class=&quot;s1&quot;&gt;fnx()&lt;/span&gt; does not employ a built-in wait operation?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: Maybe fnx() runs before fny(). (!)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components run &lt;i&gt;forever.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When an Architect wants a component to wait for input from another component, the Architect must specify that this is the case.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: Does that mean more code?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: Not if an appropriate &lt;i&gt;notation&lt;/i&gt; is employed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, our notations specify synchronization.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See Relational Programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Calculators vs. Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Current programming make it easy to express &lt;i&gt;calculator&lt;/i&gt; style code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;E.G. input -&amp;gt; perform calculation -&amp;gt; output.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Even for this simplistic paradigm, we have added a syntactic bag called &lt;i&gt;exceptions&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Exceptions break the fundamental tennet of Structured Programming&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Structured Programming means one in, one out, whereas,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Most modern languages support one-in, two-out (output a result or output an exception).&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Exceptions are based on the &lt;i&gt;dynamic&lt;/i&gt; call-chain.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The order that functions are called determines the order in which exceptions are inherited and acted upon.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Dynamic&lt;/i&gt; call-chains make code harder to debug (chains are determined at runtime, instead of a compile-time).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;JavaScript callbacks were an attempt to express, differently, the dynamic nature of call-chains.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Building a calculator should be the exception, not the rule.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programming can go well beyond the notion of just building calculators.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://vimeo.com/113707214&quot;&gt;https://vimeo.com/113707214&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Calculator Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;calculator&lt;/i&gt; paradigm assumes that a program has&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;one input&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;one output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Pros&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;expunges time, &lt;i&gt;f(t)&lt;/i&gt;, from the notation making it possible to manipulate&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt; the notation statically&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;based on mathematical notation — we have 100's of years of experience with this notation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;notation can be manipulated at &quot;compile time&quot; and weeding out can occur before runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Cons&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;the calculator paradigm breaks down in the presence of exceptions&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;the calculator paradigm breaks the fundamental rule of Structured Programming — one in and one out (current PLs support one in and two outs (result and exception), which is not structured&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt;)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&quot;calculators&quot; are but a subset of what computers can do&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;pencil-and-paper notation used for in an advanced 2D&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt; (3D) medium&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lines+offsets of non-overlapping elements vs. (x,y) of overlapping elements (e.g. grid vs. overlapping windows)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;expunges time, e.g. &lt;i&gt;f(t)&lt;/i&gt; from the notation, which results in concepts like JS callbacks (this comes from force-fitting the notation onto the problem, instead of choosing a notation first, depending on the problem — see &lt;a href=&quot;https://guitarvydas.github.io/2021/04/10/Notation.html&quot;&gt;https://guitarvydas.github.io/2021/04/10/Notation.html&lt;/a&gt;)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;expunging &lt;i&gt;f(t)&lt;/i&gt; was responsible for set-backs in physics&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;mathematical functions&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text processing (sed, awk)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;pipelines (e.g. bash)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Anti-Examples&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;distributed processing (result, error, network error)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;the human body's autonomous system&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;recipes (while potatoes boil, do …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;walking through a doorway (with a closed door)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;window re-draw (onPaint).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;keyboard input&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;mouse input&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;sensor input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relational Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Relational Programming&lt;/i&gt; (aka declarative programming) is backing in to the idea that code should not specify synchronization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In &lt;i&gt;relational&lt;/i&gt; languages, one writes &lt;i&gt;relations&lt;/i&gt; that must be satisfied — in any order — for a rule to succeed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The engine decides on the ordering of relation evaluation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;An asynchronous language does not have implicit synchronization built into its syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An example is &lt;i&gt;relational&lt;/i&gt; programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A language for asynchronous components allows the programmer to specify:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;the set of inputs for the component&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;the set of outputs of a component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Inputs do not necessarily &quot;happen at the same time&quot;, as is the case with current programming languages (parameters are all delivered at the same time when a function is called).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;If a component needs to wait for a set of inputs to be ready, then the Architect must explicitly say so.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Outputs do not necessarily &quot;happen at the same time&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A component can produce an output at any time. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A component can produce an output in response to an input.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A component can produce no output in response to an input (this can't be done with CALL/RETURN — a function always returns &lt;i&gt;something &lt;/i&gt;(even if it is just the return of &lt;i&gt;control flow&lt;/i&gt;)).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A component can produce an output even when it has not been given any input(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Current PLs return all values &quot;at the same time&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A function returns its values when it returns.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is a form of synchronization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;In contrast, consider a server.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It waits for requests and responds when it is good and ready.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It &lt;/i&gt;could&lt;i&gt; respond more than once — there is nothing stopping it from doing so — but, our mindset occludes this possibility and considers it to be an error.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: Does the Architect need to be explicit about synchronization?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: Yes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: What work can be done asynchronously?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: All sorts of work that we can't even imagine when using the current breed of synchronous languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For an analogy, consider the human body.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The human body has an autonomous system that involves some 500 concurrent processes, but, the human body has only one thread of consciousness.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In our current mindset, we would program this by building 500 calculators and shoving them into envelopes (called &quot;threads&quot;) with point-to-point connections for inter-envelope messaging.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: Does any of the above look familiar?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: Yes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Networking, internet, distributed computing, etc. is like this.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that GUI's are like this, too.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;User input — keyboard, mouse, etc. — comes &quot;at any time&quot; and there must be a component ready to accept such input.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, we fake it and force-fit the everything-is-a-function paradigm onto these kinds of problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We can solve these problems in the current paradigm, but they could be solved more easily using other paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Our current solution — using an inappropriate paradigm — have been causing accidental complexities.&lt;a id=&quot;fnlink13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn13&quot;&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Compilers could do this replacement.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;To signal next iteration step.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Specifically, fnx() uses the CALL low-level opcode and fny() uses the RETURN low-level opcode to signal that it has finished.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The synchronization is performed by the underlying hardware, using a global variable (the Stack).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;So, by default, we do not get concurrency.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;A component is like an Actor that isn't synchronized by default.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;easily&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Note that we talk about CPU - centralized processing units - even when discussing distributed computing.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://vimeo.com/113707214 shows an interesting way to organize one-in-two-out programs.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Substitution works only if (a) there are no side effects or (b) components are well-isolated and all side-effects do not leak beyond the boundaries of an isolated component.&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Typed languages with pattern matching are attempting to rein this in.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Such languages make it possible to create two types — result and error — instead of creating two outputs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I argue that it would be simpler to admit that components can have more than one output port.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;[11]&lt;/a&gt; &lt;/span&gt;I consider &quot;pencil and paper&quot; to be a 1D notation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Actually, it deals with grids of non-overlapping characters arranged in rows, which is 2D-ish.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I argue that we should deal with grids of overlappable elements arranged in (x,y) space instead of in (row,line) cell space.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Ilya Prigogene (Nobel laureate), &quot;Order Out Of Chaos&quot;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink13&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[13]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;s3&quot;&gt;Such as &lt;/span&gt;priority inversion, full preemption, thread safety, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Breaking Out Of Synchronous Thinking</summary></entry><entry><title type="html">Tags instead of names</title><link href="https://computingsimplicity.neocities.org/2021/05/05/Tags-Instead-of-Names.html" rel="alternate" type="text/html" title="Tags instead of names" /><published>2021-05-05T00:00:00-04:00</published><updated>2021-05-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/05/Tags%20Instead%20of%20Names</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/05/Tags-Instead-of-Names.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Tags Instead of Names&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-05T14:45:32Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-05T14:45:32Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tags Instead of Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Below is a simple equation&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y = mx + b&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are, at least, 4 names in this equation:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y, m, x, b.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These names are only meaningful to those who already understand the purpose of this equation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A novice would want different names, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y, slope, x, y-intersect.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A compiler-writer might used numeric names instead (aka addresses), e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;0x7512, 0x5525, 0x7518, 0x1234.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Or, a compiler-writer, might wish to abstract the names, using Data Descriptors, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;@sp.2, @r11.0, @sp.8, @0x1230.4&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In some cases&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; names are more like &lt;i&gt;comments&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The names are superfluous except as comments to the reader.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In some cases&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; it is enough to know only the type of a datum, e.g. if a datum appears only once in code, there is not point in assigning two identifiers (name and type) to the datum, where only one identifier will do.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Common Lisp language incorporates a construct called &lt;i&gt;symbol macros&lt;/i&gt; which emphasizes the superfluous nature of names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above observations lead to the notion that names in PLs&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; are not single entities, but might be treated more like lists of tags. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Names could be defined as lists. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Named entities could be named by a list of valid synonyms.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above would be like projectional-editing-in-the-small.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Software Architecture using assign-once languages.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;E.G. diagrams, etc.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;PL means Programming Language&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Tags Instead of Names</summary></entry><entry><title type="html">Prolog vs kanren</title><link href="https://computingsimplicity.neocities.org/2021/05/05/PROLOG-vs-Kanren.html" rel="alternate" type="text/html" title="Prolog vs kanren" /><published>2021-05-05T00:00:00-04:00</published><updated>2021-05-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/05/PROLOG%20vs%20Kanren</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/05/PROLOG-vs-Kanren.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;PROLOG vs Kanren&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;exhaustivesearch&quot;&gt;Exhaustive Search&lt;/h1&gt;

&lt;p&gt;Both methods, PROLOG and Kanren, perform exhaustive search.&lt;/p&gt;

&lt;p&gt;PROLOG achieves exhaustive search via backtracking and re-binding via Unification.&lt;/p&gt;

&lt;p&gt;Kanren achieves exhaustive search by creating an object of all possible matches at a given point, then passing the object+answers+unifiableVariables down a pipeline for further augmentation and clipping.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/2021-05-05-09-45-06-Images/PROLOGvsKanren.png&quot; alt=&quot;&quot; id=&quot;prologvskanren&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PROLOG vs Kanren</summary></entry><entry><title type="html">Breaking long running loops</title><link href="https://computingsimplicity.neocities.org/2021/05/05/Breaking-Long-Running-Loops.html" rel="alternate" type="text/html" title="Breaking long running loops" /><published>2021-05-05T00:00:00-04:00</published><updated>2021-05-05T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/05/05/Breaking%20Long%20Running%20Loops</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/05/05/Breaking-Long-Running-Loops.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Breaking Long Running Loops&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-05-05T09:50:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-05-05T09:50:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Breaking Long Running Loops&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers can help prevent long-running loops by compiling the code for a loop differently.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At its most basic, a loop is a start-label and an end-label.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;loop&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;x := 1&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;end loop&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, loops are compiled as:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;START:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MOV [X],1&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTO START&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;END:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Loops &lt;i&gt;could&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt; be compiled as&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;START:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MOV [X],1&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;CALL YIELD&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTO START&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;END:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Breaking Long Running Loops</summary></entry></feed>