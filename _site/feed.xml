<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-01-02T08:28:19-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Refactoring</title><link href="https://computingsimplicity.neocities.org/2021/01/02/Refactoring.html" rel="alternate" type="text/html" title="Refactoring" /><published>2021-01-02T00:00:00-05:00</published><updated>2021-01-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/02/Refactoring</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/02/Refactoring.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Refactoring&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-02T08:22:01Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-02T08:22:01Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code is Cheap, Thinking is Expensive&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Purposes of Refactoring&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Refactoring has several purposes&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;change Architecture&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;change, improve, maintainability&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;change, improve, testability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Changing the Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Lift the Architecture out of the code using an SCL&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Refactor the Architecture, not the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Improving Maintainability&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;often, maintainability implies a change to the Architecture (see Changing the Architecture)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;otherwise, refactor the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Improving Testability&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;often, testability implies a change to the Architecture (see Changing the Architecture)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;otherwise, refactor the code&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Refactoring</summary></entry><entry><title type="html">Compile time and runtime</title><link href="https://computingsimplicity.neocities.org/2020/12/27/Compile-Time-and-Runtime.html" rel="alternate" type="text/html" title="Compile time and runtime" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/Compile%20Time%20and%20Runtime</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/Compile-Time-and-Runtime.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Compile Time and Runtime&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T12:42:51Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T12:42:51Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Overview of Comile-time vs. Run-time&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;eliding details&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-12-42-51-Images/CompileTimeAndRuntime-Fiction.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Programmers generalize (think of) 2 phases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-12-42-51-Images/CompileTimeAndRuntime-Reality.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Compiler generates object files and DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Operating system loads object files and DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Operating system &quot;fixes up&quot; holes in DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;App initializes
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;compiler leaves islands of initialization code&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;top-level data, e.g. var x = &quot;abc&quot;;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;App runs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Compile Time and Runtime</summary></entry><entry><title type="html">Peg</title><link href="https://computingsimplicity.neocities.org/2020/12/27/PEG.html" rel="alternate" type="text/html" title="Peg" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/PEG</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/PEG.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;PEG for Lisp&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T22:41:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T22:41:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #118696; -webkit-text-stroke: #118696}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; color: #000000; min-height: 14.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #474747; min-height: 18.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p16 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p18 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p19 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; background-color: #fffc80}
    p.p21 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p22 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; min-height: 10.0px}
    p.p23 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #fffc80}
    p.p24 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #fffc80; min-height: 10.0px}
    p.p25 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p27 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #ffffff}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li12 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000}
    span.s1 {font-kerning: none}
    span.s2 {text-decoration: underline ; font-kerning: none}
    span.s3 {color: #474747}
    span.s4 {font-kerning: none; color: #474747}
    span.s5 {font: 13.0px Symbol; font-kerning: none}
    span.s6 {background-color: #fffc80}
    span.Apple-tab-span {white-space:pre}
    table.t1 {border-collapse: collapse}
    td.td1 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction - Breakthrough Technology&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Times&quot;&gt;&lt;b&gt;PEG is a breakthrough technology.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;In this essay, I explore how to use PEG instead of REGEX.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I create examples of PEG in Ohm-JS and ESRAP (Common Lisp). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;These ideas should easily port to other version of PEG.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;PEG stands for Parsing Expression Grammars.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PhD Thesis&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;Bryan Ford’s Thesis&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;http://pdos.csail.mit.edu/~baford/packrat/thesis&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG Enables SCLs&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG Enables SCLs.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;SCL means &lt;i&gt;Solution Centric Language.&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;SCL is like DSL (but more focussed).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many SCLs for One Project&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;We can use many SCLs for one project.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We are used to the idea that a &lt;i&gt;programming language&lt;/i&gt; is very general.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We are used to the idea that one programming language serves many projects.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Instead, we can use many little languages within one project. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Down Parsing&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Arial&quot;&gt;&lt;b&gt;Top Down Parsing - Recursive Descent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li12&quot;&gt;Top Down Parsing is familiar to anyone who uses a recursive language&lt;/li&gt;
  &lt;li class=&quot;li12&quot;&gt;Until Ford's thesis, TDPLs (Top Down Parsing Language) were either hand-built or used in lesser-known tools, such as S/SL, TXL, etc.&lt;/li&gt;
  &lt;li class=&quot;li12&quot;&gt;Recursive languages are common, e.g. JavaScript, Python, C, etc.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Why Management Disliked SCLs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;DSLs used to be hard to design&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;DSLs are a “whole language” unto themselves&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Needed to budget enormous amounts of time for DSL Development&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Can’t hire replaceable programmers for DSL languages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Need to invest time learning DSL&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cheating - Using Existing Languages&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;What is a “good assembler”?&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Lisp&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;JavaScript&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A good &lt;span class=&quot;s1&quot;&gt;base language, i.e. nice to have:&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;does not need declaration-before-use&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;first-class functions&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;closures&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;no, or l&lt;span class=&quot;s1&quot;&gt;ittle, syntactic sugar&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;dynamic typing&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEGs Are Better Than REGEXPs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs can parse languages that REGEXPs can’t parse&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs use a stack &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; parsing subroutines&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEGs Are Better Than YACC&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs define a &lt;i&gt;parser&lt;/i&gt; in a “top down” manner&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;YACC (LR) defines a &lt;i&gt;language&lt;/i&gt; in a “bottom up” manner&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;LR can be more rigorous but, also, harder to use&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (and recursive descent) can parse matching parentheses, YACC cannot&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG does (some) backtracking, resulting in a “more natural” feeling for programmers  (PROLOG &amp;amp; TXL do full backtracking, more than PEG)&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (packrat) memoizes some sequences, making backtracking tractable&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unity Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (TDPL) makes it possible to easily preserve spaces.&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;YACC does not preserve spaces (easily).&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Unity Grammar === first step towards cheap and dirty transpilers&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;E.g. HTML &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML+&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpilers&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Source-to-source translation&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Easy with PEG&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Hard with YACC&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;example: markdown is a transpiler, e.g. .md syntax &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;example: Shopify’s Liquid is a transpiler, e.g. HTML+restricted syntax &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML+JavaScript&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(see section 2.3.1 of thesis)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Empty String&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Terminal (fancy word for character)&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Non-Terminal (fancy word for a rule)&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;rule&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Sequence&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e1 e2 e3 ...&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Choice&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e1 / e2 / e3 / ...&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;0 or more&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e*&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;1 or more&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e+&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Optional&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e?&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Followed-by&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;amp;e&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not followed-by&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;!e&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Trivial Arithmetic&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;E.g. trivial arithmetic expressions&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;E ← N  /  ‘(‘ E ‘+’ E ‘)’  /  ‘(‘ E ‘)-’ E ‘)’&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;N ← D N / D&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;D ← ‘0’ / … / ‘9’&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(note parsing of nested, matched, parentheses ‘(‘ … ‘)’&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Match One Character&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;OneA = &quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;a&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /a/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (re.test (text)) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Success');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Failure');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text1 &quot;a&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example1-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneA text1))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;a&quot;;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const example1_grammar = '&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;';&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohmParser = ohm.grammar (example1_grammar);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Success&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Failure&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Match Two Characters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG (Ohm-JS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/ab/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /ab/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (re.test (text)) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Success');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Failure'ß);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text2 &quot;ab&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example2-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneB #\b (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneAThenOneB (and oneA oneB) (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneAThenOneB text2))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 18.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const example2_grammar = `&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;Example2 {&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohmParser = ohm.grammar (example2_grammar);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Groups&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG (Ohm-JS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a)(b)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /(a)(b)/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var matchArray = text.match (re);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (matchArray) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var first = matchArray[1];&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var second = matchArray[2];&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (`(javascript) flipped is &quot;${second}${first}&quot;`);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (`pattern failed`);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text &quot;ab&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example3-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneB #\b (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneAThenOneBAndFlip (and oneA oneB)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;(:destructure (a b) (list b a)))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneAThenOneBAndFlip text))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 18.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Unity Grammar for HTML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;title&amp;gt;Top&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;rect { fill:#DAE8FC }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;h1&amp;gt;Top Part (Schematic)&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id7&quot; x=&quot;50&quot; y=&quot;150&quot;&amp;gt;FileSelector&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id8&quot; x=&quot;50&quot; y=&quot;350&quot;&amp;gt;TimeoutTimer&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id9&quot; x=&quot;290&quot; y=&quot;185&quot;&amp;gt;CallbackLogic&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id10&quot; x=&quot;660&quot; y=&quot;150&quot;&amp;gt;Display&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id11&quot; x=&quot;660&quot; y=&quot;320&quot;&amp;gt;ErrorHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id12&quot; x=&quot;660&quot; y=&quot;410&quot;&amp;gt;AbortHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id13&quot; x=&quot;660&quot; y=&quot;490&quot;&amp;gt;NoResponseHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const unityGrammar = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;htmlUnity {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;html = ws* htmlElement headerStuff bodyElement bodyStuff bodyElementEnd htmlEnd&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlElement = &quot;&amp;lt;html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;headerStuff = notBody*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElement = &quot;&amp;lt;body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyStuff = notBodyEnd*&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBody = ~&quot;&amp;lt;body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBodyEnd = ~&quot;&amp;lt;/body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElementEnd = &quot;&amp;lt;/body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlEnd = &quot;&amp;lt;/html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;ws = &quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (unityGrammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addUnity (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('unity ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).unity ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addUnity (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'unity',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;html: function (ws_plural, htmlElement, headerStuff, bodyElement, bodyStuff, bodyElementEnd, htmlEnd) { return ws_plural.unity ().join ('') + htmlElement.unity () + headerStuff.unity () +&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                                    &lt;/span&gt;bodyElement.unity () + bodyStuff.unity () + bodyElementEnd.unity () + htmlEnd.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlElement: function (html, ws_plural) { return html.unity () + ws_plural.unity ().join('');},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;headerStuff: function (notBody_plural) { return notBody_plural.unity ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElement: function (body, ws_plural) { return body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyStuff: function (notBodyEnd_plural) { return notBodyEnd_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBody: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBodyEnd: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElementEnd: function (slash_body, ws_plural) { return slash_body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlEnd: function (slash_html, ws_plural) { return slash_html.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;ws: function (c) { return c.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);};&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;title&amp;gt;Top&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;rect { fill:#DAE8FC }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;h1&amp;gt;Top Part (Schematic)&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id7&quot; x=&quot;50&quot; y=&quot;150&quot;&amp;gt;FileSelector&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id8&quot; x=&quot;50&quot; y=&quot;350&quot;&amp;gt;TimeoutTimer&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id9&quot; x=&quot;290&quot; y=&quot;185&quot;&amp;gt;CallbackLogic&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id10&quot; x=&quot;660&quot; y=&quot;150&quot;&amp;gt;Display&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id11&quot; x=&quot;660&quot; y=&quot;320&quot;&amp;gt;ErrorHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id12&quot; x=&quot;660&quot; y=&quot;410&quot;&amp;gt;AbortHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id13&quot; x=&quot;660&quot; y=&quot;490&quot;&amp;gt;NoResponseHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const unityGrammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;htmlUnity {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;html = ws* htmlElement headerStuff bodyElement bodyStuff bodyElementEnd htmlEnd&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlElement = &quot;&amp;lt;html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;headerStuff = notBody*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElement = &quot;&amp;lt;body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyStuff = notBodyEnd*&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBody = ~&quot;&amp;lt;body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBodyEnd = ~&quot;&amp;lt;/body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElementEnd = &quot;&amp;lt;/body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlEnd = &quot;&amp;lt;/html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;ws = &quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (unityGrammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addUnity (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('unity ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).unity ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addUnity (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'unity',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;html: function (ws_plural, htmlElement, headerStuff, bodyElement, bodyStuff, bodyElementEnd, htmlEnd) { return ws_plural.unity ().join ('') + htmlElement.unity () + headerStuff.unity () +&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                                    &lt;/span&gt;bodyElement.unity () + bodyStuff.unity () + bodyElementEnd.unity () + htmlEnd.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlElement: function (html, ws_plural) { return html.unity () + ws_plural.unity ().join('');},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;headerStuff: function (notBody_plural) { return notBody_plural.unity ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElement: function (body, ws_plural) { return body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyStuff: function (notBodyEnd_plural) { return notBodyEnd_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBody: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBodyEnd: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElementEnd: function (slash_body, ws_plural) { return slash_body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlEnd: function (slash_html, ws_plural) { return slash_html.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;ws: function (c) { return c.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);};&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - SVG Parser&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p25&quot;&gt;(can't do this in REGEXP)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 9.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS Grammar IDE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;(&lt;i&gt;see next instalment&lt;/i&gt;)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar First&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test Cases&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Add Support Code Later&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Transpile Ohm Grammars to Other Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;(&lt;i&gt;see next instalment&lt;/i&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PEG for Lisp</summary></entry><entry><title type="html">The stack 2</title><link href="https://computingsimplicity.neocities.org/2020/12/27/The-Stack-2.html" rel="alternate" type="text/html" title="The stack 2" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/The%20Stack%202</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/The-Stack-2.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T22:34:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T22:34:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 9.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Desired&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I have found that it is convenient to create separate stacks for every type. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I found that I need only 5 basic operations and that I can generate/compile/transpile code to enact these operations.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The &quot;syntax&quot; for talking about types in this manner, drops to something very small (&lt;i&gt;bizarrely, the number 5 comes up again - I can describe the new syntax using only 5 productions&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I describe this method in the following essay.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-22-34-06-Images/isolation-Desired.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Achieving 2 Stacks for Each Type&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCL Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = { ... } &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;--&amp;gt; class with fields def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :string &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;--&amp;gt; string def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :map&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;--&amp;gt; map def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = | ... &lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;--&amp;gt; or type def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ... &lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;--&amp;gt; enum def&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;This syntax was chosen for its regularity since it was originally parsed with manually written code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each construct has a &lt;/i&gt;left handle.&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every construct begins with &quot;id = &quot;, then the next character determines the kind of construct, e.g. &quot;id = {&quot; means that the construct is a class with fields, &quot;id = '&quot; means enum, and so on.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For a prototype of this, see &lt;a href=&quot;https://github.com/guitarvydas/stack-dsl&quot;&gt;https://github.com/guitarvydas/stack-dsl&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Type Specification&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;[&lt;i&gt;comments deleted, for full contents see &lt;/i&gt;&lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/exprtypes.dsl&quot;&gt;&lt;i&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/exprtypes.dsl&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaprogram = { typeDecls situations classes whenDeclarations&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeDecls = :map typeDecl&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situations = :map situationDefinition&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;classes = :map esaclass&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;whenDeclarations = :map whenDeclaration&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeDecl = { name typeName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationDefinition =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaclass = { name fieldMap methodsTable }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;whenDeclaration = { situationReferenceList esaKind methodDeclarationsAndScriptDeclarations }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationReferenceList = :map situationReferenceName&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationReferenceName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodDeclarationsAndScriptDeclarations = :map declarationMethodOrScript&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;declarationMethodOrScript =| methodDeclaration | scriptDeclaration&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodDeclaration = { esaKind name formalList returnType }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;scriptDeclaration = { esaKind name formalList returnType implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnType = { returnKind name }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnKind = 'map' | 'simple' | 'void'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;formalList = :map name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaKind =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;expression = { ekind object }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;ekind = 'true' | 'false' | 'object' | 'calledObject'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;object = { name fieldMap }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fieldMap = :map field&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;field = { name fkind actualParameterList }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fkind = 'map' | 'simple'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;actualParameterList = :map expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;name = :string&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodsTable = :map declarationMethodOrScript&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;externalMethod = { name formalList returnType }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;internalMethod = { name formalList returnType implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;implementation = :map statement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;statement =| letStatement | mapStatement | exitMapStatement | setStatement | createStatement | ifStatement | loopStatement | exitWhenStatement | callInternalStatement | callExternalStatement | returnTrueStatement | returnFalseStatement | returnValueStatement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;letStatement = { varName expression implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;mapStatement = { varName expression implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;exitMapStatement = { filler }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;setStatement = { lval expression }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;createStatement = { varName indirectionKind name implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;ifStatement = { expression thenPart elsePart }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;loopStatement = { implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;exitWhenStatement = { expression }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnTrueStatement = { methodName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnFalseStatement = { methodName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnValueStatement = { methodName name }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;callInternalStatement = { functionReference }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;callExternalStatement = { functionReference }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;lval =| expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;varName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;functionReference =| expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;thenPart =| implementation&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;elsePart =| implementation&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;indirectionKind = 'indirect' | 'direct'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;filler =| name&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;class id = { ... }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;id = { ... }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a class that contains the given fields.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This construct does not explicitly define any methods for the class.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Methods are generated automatically.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;type union id = | ...&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = | ...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be a union of other types.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;enum&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ...&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type to consist of one or more contants (symbols / strings).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;foreign string&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :string&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = :string&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be of a foreign type STRING.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;maybe I should have generalized this to &lt;/i&gt;id = :foreign&lt;i&gt;?&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;foreign list id = :map&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = :map&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be a list of some other type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;maybe I should have named this :&lt;/i&gt;list&lt;i&gt; instead of :&lt;/i&gt;map]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compiling to Separate Stacks&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;I find it useful to have 2 stacks for every type&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;working stack&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;output stack&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The example type specification in Example Type Specification defines 54 types.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This compiles to 54 type definitions and 54 * 2 = 108 stacks.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that there are only 5 possible ways to define a type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that types can be defined as other types.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;name = :string&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that &quot;variable names&quot; are not needed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We simply create a typename for each entity, e.g.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn (a: int, b : int)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;becomes&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn (a, b)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;a =| int&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;b =| int&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(this removes syntactic noise from the declarations and pushes implementation details deeper into the hierarchy).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this example, &lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt; are types (not variables).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Each stack contains enough information to:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;specify the type contained in the stack&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the actual stack of values (of the given type)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign Types&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;There are only 2 types at the bottom:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;a &lt;span class=&quot;s1&quot;&gt;%typed-valu&lt;/span&gt;e: (&lt;span class=&quot;s1&quot;&gt; %type, %value&lt;/span&gt; ) [where &lt;span class=&quot;s1&quot;&gt;%type&lt;/span&gt; is a String and &lt;span class=&quot;s1&quot;&gt;%value&lt;/span&gt; is anything]&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;a list of &lt;/span&gt;%typed-value&lt;span class=&quot;s2&quot;&gt;: ( &lt;/span&gt;%element-type, %ordered-list &lt;span class=&quot;s2&quot;&gt;) [where &lt;/span&gt;%ordered-list&lt;span class=&quot;s2&quot;&gt; contains &lt;/span&gt;%type-values&lt;span class=&quot;s2&quot;&gt;]&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul2&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Both types are foreign and opaque&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Only the implementation knows what is inside of them&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;type checking is done by-name (equality of &lt;span class=&quot;s1&quot;&gt;%type&lt;/span&gt;s)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Operations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;I find that there are 6 basic operations:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;NewScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;EndScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Output&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;SetField_???_from_???&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;AppendFrom_???&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&amp;lt;foreign operation&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The first 5 operations can be automatically generated for every type (and the corresponding stacks).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The 6&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; operation (&amp;lt;foreign operation&amp;gt;) is a catch-all for operations that are specific to the solution.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;In &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/dsl3.pasm&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/dsl3.pasm&lt;/a&gt; (and the other dsl*.pasm files), the stack names are prepended to the operations (followed by two underscores), and the typenames are prefixed with &quot;$&quot; e.g.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;$whenDeclarations__EndScope&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;thus, in the prototype, one will see operations, like:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__NewScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$classes__EndScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__Output&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$scriptDeclaration__SetField_formalList_from_formalList&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__AppendFrom_name&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&amp;lt;foreign operation&amp;gt;: $name__GetName&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NewScope&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__NewScope&lt;/span&gt; pushes an empty item, of the appropriate type, onto the working stack of the type.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;EndScope&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__EndScope&lt;/span&gt; pops the given working stack.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__Output&lt;/span&gt; moves the top item from the working stack to the output stack for the given type.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The working stack is popped (once).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SetField&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__SetField_&amp;lt;fieldName&amp;gt;_from_&amp;lt;other-type&amp;gt; &lt;/span&gt;sets the field &lt;i&gt;fieldName &lt;/i&gt;of &lt;i&gt;type&lt;/i&gt; to the value of the top of the Output stack of &lt;i&gt;other-type&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation checks that the &lt;i&gt;other-type&lt;/i&gt; is of the type required by &lt;i&gt;fieldName&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation pops (once) the Output stack of &lt;i&gt;other-type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AppendFrom&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__AppendFrom_&amp;lt;other-type&amp;gt; &lt;/span&gt;appends the value of the top of the Output stack of &lt;i&gt;other-type&lt;/i&gt; to the top list on the working stack of &lt;i&gt;type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation checks that &lt;i&gt;type&lt;/i&gt; is a list (I've called it :map) and that the element-type of the list matches &lt;i&gt;other-type&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation pops (once) the Output stack of &lt;i&gt;other-type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__??? &lt;/span&gt;performs operation &quot;???&quot; on the given type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation has no arguments (other than &lt;i&gt;type&lt;/i&gt;), but multiple operations can be declared and called, e.g. &lt;i&gt;counter__reset&lt;/i&gt; … &lt;i&gt;counter__increment&lt;/i&gt; … &lt;i&gt;counter__increment_by_2 …&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Compilation (Lisp)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.lisp&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.lisp&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.json&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.json&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-mechanisms.lisp&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-mechanisms.lisp&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;Push these through your favourite pretty-printer&lt;/i&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack</summary></entry><entry><title type="html">Filereader</title><link href="https://computingsimplicity.neocities.org/2020/12/25/FileReader.html" rel="alternate" type="text/html" title="Filereader" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/FileReader</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/FileReader.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;FileReader&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T22:58:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T22:58:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;HTML + JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-58-29-Images/FileReader-HTML + JavaScript.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lasoo&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-58-29-Images/FileReader-Lasso.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Part&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-58-29-Images/FileReader-sensible.png&quot; width=&quot;231px&quot; height=&quot;231px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">FileReader</summary></entry><entry><title type="html">The algol bottleneck</title><link href="https://computingsimplicity.neocities.org/2020/12/25/The-ALGOL-Bottleneck.html" rel="alternate" type="text/html" title="The algol bottleneck" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/The%20ALGOL%20Bottleneck</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/The-ALGOL-Bottleneck.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The ALGOL Bottlenck&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:56:37Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:56:37Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Von Neumann Bottleneck&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;The von Neumann architecture is a hardware architecture.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The von Neumann architecture uses a single bus for both, code and data.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;This architecture gives rise to something called the von Neumann Bottleneck.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The problem is that code cannot execute while data is being transferred.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Other hardware architectures repair this problem by using multiple buses. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Other architectures allow asynchronous (at the same time) transfer of data and code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Can Programming Be Liberated...&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;famous paper &quot;Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs&quot;&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;proposes the idea that the von Neumann &lt;i&gt;hardware &lt;/i&gt;architecture translates directly into the &lt;i&gt;software &lt;/i&gt;domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;ALGOL Bottleneck&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Software has yet another bottleneck that is orthogonal to the underlying hardware&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;I call this the ALGOL Bottleneck&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Lack of asynchrony&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction vs. Reality&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction: Libraries are Independent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;How Programmers Think About Libraries&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-56-37-Images/Libraries-Fiction.png&quot; width=&quot;250px&quot; height=&quot;387px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality: Libraries Share A Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;How Libraries Actually Work&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-56-37-Images/Libraries-Reality.png&quot; width=&quot;250px&quot; height=&quot;389px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is a data structure.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is a global variable.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is shared by all functions.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack records &lt;i&gt;dynamic&lt;/i&gt; call history.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is a &lt;i&gt;dynamic&lt;/i&gt; dependency chain between functions.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; https://dl.acm.org/doi/10.1145/359576.359579&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The ALGOL Bottlenck</summary></entry><entry><title type="html">The stack</title><link href="https://computingsimplicity.neocities.org/2020/12/25/The-Stack.html" rel="alternate" type="text/html" title="The stack" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/The%20Stack</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/The-Stack.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:23:23Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:23:23Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-23-23-Images/isolation-Fiction.png&quot; width=&quot;250px&quot; height=&quot;454px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-23-23-Images/isolation-Reality.png&quot; width=&quot;413px&quot; height=&quot;587px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The stack is a heterogeneous list.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It contains data of different types.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It contains control-flow information.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Desired (not reality yet)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-23-23-Images/isolation-Desired.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack</summary></entry><entry><title type="html">Dlls</title><link href="https://computingsimplicity.neocities.org/2020/12/25/DLLs.html" rel="alternate" type="text/html" title="Dlls" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/DLLs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/DLLs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;DLLs&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:24:26Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:24:26Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Linking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Static linking&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Linked With Library.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic Linking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Dynamic Link Libraries have fixups in one direction only (call).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Linked With DLL.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Full Dynamic Linking (NIY)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Dynamic Linking in both directions (call &amp;amp; return, NIY)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Isolated.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">DLLs</summary></entry><entry><title type="html">The stack is a list</title><link href="https://computingsimplicity.neocities.org/2020/12/24/The-Stack-is-a-List.html" rel="alternate" type="text/html" title="The stack is a list" /><published>2020-12-24T00:00:00-05:00</published><updated>2020-12-24T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/24/The%20Stack%20is%20a%20List</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/24/The-Stack-is-a-List.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack is a List&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-24T20:11:14Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-24T20:11:14Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;List&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-List.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Array&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-array.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unoptimized Stack&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-unoptimized stack.png&quot; width=&quot;241px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Optimized Stack&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-optimized stack.png&quot; width=&quot;121px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack is a List</summary></entry><entry><title type="html">Concurrency bare bones</title><link href="https://computingsimplicity.neocities.org/2020/12/17/concurrency-bare-bones.html" rel="alternate" type="text/html" title="Concurrency bare bones" /><published>2020-12-17T00:00:00-05:00</published><updated>2020-12-17T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/17/concurrency%20bare%20bones</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/17/concurrency-bare-bones.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;concurrency bare bones&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-17T19:14:53Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-17T19:14:53Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I describe the very bare bones for implementing concurrency in any language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I know that this can be implemented in JavaScript - I've done it and will blog about it in further essays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Incidentally, I've also built preliminary versions of this in Common Lisp, C, C++ and assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variations of this technique have been put into production, in multiple projects) &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency is very simple and its implementation should be &quot;obvious&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You might wish to skip over the details, once you get the hang of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Forget what you already know about multitasking and read on …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The point of this essay is to show only the basics of this technique.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use hard-wired code for illustration.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If a more fully-developed version of the code is desired, see my essays about HTML Components - ag-js-1, ag-js-2, and ag-js-3&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The most simple example of concurrency can be summed up in &lt;span class=&quot;s1&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-17-19-14-53-Images/concurrency-basic.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Basic Concurrency&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Overview of Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency, at its most basic, is very simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;part&lt;/i&gt; is a black box with input &lt;i&gt;pins&lt;/i&gt; and output &lt;i&gt;pins&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;part&lt;/i&gt; can send &lt;i&gt;events&lt;/i&gt; to another &lt;i&gt;part. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;The &lt;i&gt;event&lt;/i&gt; is pushed out of the first &lt;i&gt;part's&lt;/i&gt; output &lt;i&gt;pin&lt;/i&gt; and arrives at the other &lt;i&gt;part's&lt;/i&gt; input &lt;i&gt;pin.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events&lt;/i&gt; can only travel on &lt;i&gt;wires&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;part&lt;/i&gt; contains a number of &lt;i&gt;actions&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Every time an &lt;i&gt;event&lt;/i&gt; arrives at the input &lt;i&gt;pin&lt;/i&gt; of a &lt;i&gt;part&lt;/i&gt; some &lt;i&gt;action &lt;/i&gt;is triggered.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are rules for how &lt;i&gt;actions&lt;/i&gt; are triggered, but we'll skip that for now.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are two kinds of &lt;i&gt;parts:&lt;/i&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;a &lt;i&gt;leaf part&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;a &lt;i&gt;schematic&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;A &lt;i&gt;schematic &lt;/i&gt;contains other &lt;i&gt;parts &lt;/i&gt;and a set of &lt;i&gt;wires&lt;/i&gt; (that connect the &lt;i&gt;parts&lt;/i&gt; together).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;In other words, a &lt;i&gt;schematic&lt;/i&gt; &lt;span class=&quot;s2&quot;&gt;can&lt;/span&gt; be broken down further into more &lt;i&gt;parts&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;A &lt;i&gt;leaf part&lt;/i&gt; &lt;span class=&quot;s2&quot;&gt;cannot&lt;/span&gt; be broken down any further.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;i&gt;leaf part&lt;/i&gt; contains actions which might (or might not) produce outputs on the output&lt;i&gt; pins&lt;/i&gt; of the &lt;i&gt;leaf part.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;A &lt;i&gt;schematic &lt;/i&gt;also contains &lt;i&gt;actions&lt;/i&gt;, but those &lt;i&gt;actions&lt;/i&gt; are composed of the &lt;i&gt;actions&lt;/i&gt; of the &lt;i&gt;parts&lt;/i&gt; contained in the &lt;i&gt;schematic&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We can keep breaking &lt;i&gt;parts&lt;/i&gt; down until we hit bottom - i.e. a &lt;i&gt;leaf&lt;/i&gt; part that does something.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the outside, looking in, we see &lt;i&gt;parts&lt;/i&gt; as black boxes - we don't know (or care) whether a &lt;i&gt;part&lt;/i&gt; is a &lt;i&gt;leaf&lt;/i&gt; or if it is a &lt;i&gt;schematic.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We can implement a simulation of concurrent&lt;i&gt; parts&lt;/i&gt; in any programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For this, we need some routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need a dispatcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need a way to transfer data between routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That's about it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Present-day multitasking is inflicted with accidental complexity.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multitasking seems to be difficult.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will describe something much simpler, but just as useful.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;i&gt;Actions&lt;/i&gt; are functions with no user-defined parameters, no return values, no exceptions and no way to call other routines.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;A dispatcher is the only routine that can call other routines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Called routines &lt;i&gt;always&lt;/i&gt; return to the dispatcher.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;We will transfer data using queues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - JavaScript Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;In the following example, I will show how to build a simple system with two components and one dispatcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have used this same technique to build much larger systems (100s and 1,000s of components).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This example probably looks too simple and not complicated enough.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is an &quot;overnight success&quot; - it took me only 30 years to arrive at this conclusion.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The technique has been used to build distributed systems and has been put into production (several times).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[I don't recommend that components, queues and dispatchers be implemented as in this example.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I am trying to be excruciatingly transparent.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The example appears in the rest of this essay and can be found at&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt; … &amp;gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wish to keep this essay very simple, so I will describe an example which contains only two components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One component Sends a string to the other component - the usual &quot;Hello World&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will name the components &quot;sender()&quot; and &quot;receiver()&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In JavaScript, a &lt;i&gt;part&lt;/i&gt; is a function that receives messages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;The function can use a switch statement (or an if-then-else) to examine the message's pin field, and decide which action to invoke.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this simple example, we won't bother with pins, we'll just assume that every part has one input pin and one output pin.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We'll hard-code the wiring table in the JavaScript function that I call Send() (see section Send - JavaScript).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The component producer(), is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;function producer (message) {&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;send (&quot;sender&quot;, &quot;Hello World&quot;);&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and the component consumer() is&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;function consumer (message) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (message);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Points to note:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;producer() does not call consumer() directly&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action&lt;/i&gt; in the producer &lt;i&gt;part&lt;/i&gt; consists of one line of JavaScript code (send (…))&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action &lt;/i&gt;in the consumer &lt;i&gt;part&lt;/i&gt; consists of one line of JavaScript code (console.log (…))&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action&lt;/i&gt; code in producer does not bother to check the message - it just fires its result &quot;Hello World&quot; out of its output &lt;i&gt;pin&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action &lt;/i&gt;code of consumer doesn't bother to look at the incoming message, it just logs it (console.log (message))&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;neither &lt;i&gt;part&lt;/i&gt;, producer nor consumer&lt;i&gt;, &lt;/i&gt;gets to define the parameter list, there is &lt;b&gt;always&lt;/b&gt; one &lt;i&gt;message&lt;/i&gt; parameter passed in to the action code.&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queues&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Each component has a pair of private queues that can be accessed only by the send() an receive() routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[In Javascript, queues are implemented as arrays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An empty queue is [].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A queue can hold mixed elements of any type.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;var sender_input_queue = [];&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;var receiver_input_queue = [];&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatcher - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The dispatcher&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; invokes, arbitrarily, any routine that is &lt;i&gt;ready to run&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A routine is &lt;i&gt;ready to run&lt;/i&gt; if its input queue is non-empty.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;function dispatcher () {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;while (true) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (sender_input_queue.length &amp;gt; 0) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;var message = sender_input_queue.pop ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;sender (message);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else if (receiver_input_queue.length &amp;gt; 0) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;var message = receiver_input_queue.pop ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;receiver (message);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; }&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Send - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The send () function is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;function send (from, data) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (from == &quot;sender&quot;) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;receiver_input_queue.push (data);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else if (from == &quot;receiver&quot;) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;sender_input_queue.push (data); &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fail ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[in this simple example, sender's output is always piped to receiver's input]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Startup&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;sender ();&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Steady State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;dispatcher ();&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JS Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;node basic.js&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;see code in https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/basic.js&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Index.html&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;see &lt;a href=&quot;https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/index.html&quot;&gt;https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;load index.html in a browser, hit the &quot;run&quot; button&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Benefits of Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;I claim that concurrency addresses many issues, including:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;architectural flexibility&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;scalability&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;isolation&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;namespaces&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;type checking&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;thread safety, fairness, and all that …&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;synchronization&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;asynchronous I/O&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;box-and-arrow diagrams (that work)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;machine control instead of calculation&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;readability&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;expressiveness - DI (Design Intent)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;multiple use (augmented reuse)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;removal of exception syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;removal of parameter syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;remove of return value syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;layers, scoping&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;easier scheduling&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;better testabilty&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;compartmentalization of development tasks&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;but, I will not conflate this simple example with such issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will address these issues in other essays.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;see &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;I claim that the accidental complexity comes from premature optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Optimization was necessitated by the ground truth in 1950 - processors were very expensive, memory was expensive and very limited.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; In production, we would write the example code differently.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many optimizations present themselves, for example, we don't need to burn a hole in the processor using a while(true) loop.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">concurrency bare bones</summary></entry></feed>