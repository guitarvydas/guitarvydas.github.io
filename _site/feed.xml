<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-01-07T10:49:44-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Sofware kleenex®</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Sofware-Kleenex.html" rel="alternate" type="text/html" title="Sofware kleenex®" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Sofware%20Kleenex%C2%AE</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Sofware-Kleenex.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Sofware Kleenex®&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T10:49:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T10:49:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 13.0px 0.0px 0.0px 0.0px; font: 28.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;SOFTWARE KLEENEX®&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Kleenex® is a brand name&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Everyone knows what a Kleenex® is. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A facial tissue.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kleenex&quot;&gt;https://en.wikipedia.org/wiki/Kleenex&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Kleenex®&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(a,b) returns r throws e&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Entry&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(3,4);&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Surprise!&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This line of code represents two functionalities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;spin up and invoke a routine called &lt;span class=&quot;s1&quot;&gt;fn&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;transfer data - &lt;span class=&quot;s1&quot;&gt;3 &lt;/span&gt;and&lt;span class=&quot;s1&quot;&gt; 4&lt;/span&gt; - to the routine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that the parameters, both of them - 3 and 4 - &lt;i&gt;must&lt;/i&gt; be transfered to &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; at the same time.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that we will wait for &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to finish its work.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that we will modify a global variable to record who called &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is an optimized list.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is modified by the underlying hardware.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The use of the global variable is pervasive and hidden by most programming languages.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is called &lt;b&gt;The Stack&lt;/b&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Exit&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;x = fn(…);&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This line of code says that we want to spin up and invoke &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, this line of code says that we will wait for &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to finish its work.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, this line of code says that we &lt;i&gt;expect&lt;/i&gt; &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to &lt;i&gt;always&lt;/i&gt; return a value, even if it doesn't need to do so.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Exception&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(…) … {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;throw e;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This code says that &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; encountered an error and &lt;span class=&quot;s1&quot;&gt;Send()&lt;/span&gt;s an error thingie upwards to its caller, or its caller's caller, or the caller's caller's caller, or …&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, the chain of who gets to handle the exception is determined by a runtime global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;You guessed it, &lt;b&gt;The Stack&lt;/b&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This breaks one of the fundamental tenets of Structured Programming.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;One entry, one exit.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://www.ballaghedward.ca/article/when-is-a-trademark-not-a-trademark.php#:~:text=In%20the%20context%20of%20trademarks,exclusive%20rights%20in%20the%20trademark.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Sofware Kleenex®</summary></entry><entry><title type="html">Apple refunded my money because of a bug</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Apple-Refunded-My-Money-Because-of-a-Bug.html" rel="alternate" type="text/html" title="Apple refunded my money because of a bug" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Apple%20Refunded%20My%20Money%20Because%20of%20a%20Bug</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Apple-Refunded-My-Money-Because-of-a-Bug.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Apple Refunded My Money Because ofa Bug&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T10:36:24Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T10:36:24Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;APPLE® REFUNDED MY MONEY DUE TO A BUG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;(&lt;i&gt;disclaimers&lt;/i&gt;)&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;If A Bridge Collapses - Sue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers can be sued if their design fails.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Contractor Forgot To Put A Lock on Your Front Door - Sue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You live in a city and hire a contractor to renovate / build your house.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The contractor &quot;forgot&quot; to put a lock on your front door.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sue the contractor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Refunds For Buggy Software&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Demand a refund if you are sold buggy software.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CI/CD&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CI/CD is an acknowledgement that software is buggy and needs to be frequently fixed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a &lt;i&gt;tell&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automobile Recalls&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automobile Lemon Law&lt;/b&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://www.ballaghedward.ca/article/when-is-a-trademark-not-a-trademark.php#:~:text=In%20the%20context%20of%20trademarks,exclusive%20rights%20in%20the%20trademark.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;https://fairuse.stanford.edu/overview/fair-use/what-is-fair-use/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I allude to any corporation that sells software.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Apple Refunded My Money Because ofa Bug</summary></entry><entry><title type="html">Software ceiling</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Software-Ceiling.html" rel="alternate" type="text/html" title="Software ceiling" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Software%20Ceiling</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Software-Ceiling.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Ceiling&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T09:49:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T09:49:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
    ul.ul3 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Software Ceiling&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Who Uses Software?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;End users (non-programmers)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Domain experts (non-programmers)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Software Professionals (programmers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;End User Expectations&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Apps&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;e.g. Minecraft&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;e.g. Weather&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inexpensive&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simple One-Purpose App&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;e.g. loyalty cards&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;e.g. credit cards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchy&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;End users understand &lt;i&gt;hierarchy&lt;/i&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;&lt;i&gt;&lt;/i&gt;e.g. org charts in business&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;&lt;i&gt;&lt;/i&gt;e.g. government (layers)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Uninterested in Details&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;options unwelcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;don't welcome interruptions
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;where to save file&quot;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;what kid of document to create&quot;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;updates available&quot;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Learn Incrementally&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;learn in a hierarchical / fractal manner&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;learn only a few things at a time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Domain Expert Expectations&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect to be able to snap software together like LEGO® blocks&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect to choose functionality from a palette
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;limited options&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;easily browsed&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. fixed set of functions available in spreadsheets&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Do not care about &lt;i&gt;abstraction&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Understand &lt;i&gt;scripting&lt;/i&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. cooking recipes&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Domain experts use whiteboards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Software Expertise&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Do not want to become software experts&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect the benefits of software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;flexibility&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;easy to design solutions within their domains
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. VisiCalc (spreadsheets)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Simple things are simple to implement&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Call in Software Professionals to handle complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tools&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Spreadsheets&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;AppleScript&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Hypercard&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;(Sikuli?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Professionals&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Software Professionals use:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;git&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;GitHub, etc.&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;libraries&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Result:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;not LEGO® blocks&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;growing complexity&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;decreasing reliability&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Software professionals sketch designs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;The, they transfer the designs to code
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Why?&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Why not use code instead of sketches?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;&quot;Software is Complicated&quot;&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;excuse?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;or, reality?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hardware Advanced Faster Than Software&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Hardware Advanced Faster Than Software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Why?
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;glib answer: software is &quot;just&quot; more complicated&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;possibility: there is an inhibiting technology underlying all of software&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;possibility: is there a new technology?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Something different from what we call &quot;programming&quot;?&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;QWERTY Effect&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Technology lock-in&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Incremental
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;QWERTY vs. other keyboard layouts&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;VHS vs. Beta&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;808x vs. other CPU designs&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;QWERTY Effect&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;New Technology?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Many Uses of Computers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;New Technlogy?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Can QWERY effect mask inhibiting technology?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;does lock-in stop progress?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. QWERTY design did not stop progress on document preparation&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;software improvements decrease QOS&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; over time
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. LibreOffice runs more slowly on new Macs&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. git fails mysteriously sometimes&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. continuous stream of &quot;update available&quot;&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. continuous stream of new PLs&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. Telecom offered four-nines (0.9999 uptime) technology in 1960's, but no more&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. CI/CD (why is this necessary?)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;A completely different paradigm?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Is a technology - minus the inhibitor - the same technology, or is it something completely different?&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Is it &quot;wrong&quot; to think of computing as a single kind of thing or are there multiple kinds of computing?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many Uses of Computers&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Calculators&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Event-driven controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computers as Calculators&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Ballistics&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Cryptography (not Blockchain!)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One-in, one-out&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Synchronous&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Functional Approach&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;CALL RETURN&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Hidden global variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One In One Out&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; one outcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;one input &lt;i&gt;always &lt;/i&gt;leads to one outcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;i&gt;Exceptions&lt;/i&gt; are a &quot;special case&quot; tacked onto the side
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;syntactic sugar&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;each step waits for sub-step to complete&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;dynamic dependency chain
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;who calls what is determined at &lt;span class=&quot;s1&quot;&gt;runtime&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;led to incremental band-aids
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. removing state&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Loop, Recursion allowed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Functional Approach&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&quot;Order Out Of Chaos&quot;, Ilya Prigogene (Nobel laureate)
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;[paraphrased] Functional thinking has set Physics back 100 years&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;FP - Functional Programming&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew Time&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew State&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Time&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Functions are reversible&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;hence, time must be removed, no f(t)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;does not model physical reality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Removing state&lt;/p&gt;
&lt;ul class=&quot;ul3&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;when it's a &lt;span class=&quot;s1&quot;&gt;good&lt;/span&gt; idea
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;building a &lt;i&gt;calculator&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;building a &lt;i&gt;filter&lt;/i&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;when it's a &lt;span class=&quot;s1&quot;&gt;bad&lt;/span&gt; idea
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;needing state for functions of time, f(t)
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. controllers&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. robots&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Implicitly uses the stack&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Creates a &lt;i&gt;dynamic&lt;/i&gt; record of invocations&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;dependency chain &amp;lt;— dynamic record of invocations&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;useful only for &lt;i&gt;calculator&lt;/i&gt; model of computing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;All PLs, incl. FP and Smalltalk, share a global variable&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The Stack&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;CALL / RETURN manipulates this global variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computers for Event-Driven Control&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Asynchronous&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Components run forever&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Multiple outcomes&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew Dependencies&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;How to Implement Synchronous Paradigm in Asynchronous Paradigm&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Examples&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Events can occur at any time
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. sensor&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. GUI&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. browser&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. mouse&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. keyboard&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;Loop, Recursion not allowed&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;not applicable&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;what does it mean to Recur/Loop a &lt;i&gt;system&lt;/i&gt; of independent components?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components Run Forever&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Components run forever&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;implies State&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to receive data&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to send results&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to send exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Outcomes&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; one output&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; multiple outputs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; no outputs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;See also
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Javascript FileReader()&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;[&lt;i&gt;multiple outcomes handled with multiple callbacks&lt;/i&gt;]&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Scalability requires lack of dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing Synchronous Paradigm Using The Asynchronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Blocking
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;ACK / NAK&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Already explored and understood in…
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;networking&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;electronics&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation is more important than encapsulation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Must encapsulate data &lt;i&gt;and&lt;/i&gt; control flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Statecharts
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/StateCharts.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/StateCharts.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;TWO paradigms - not one&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Calculation
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;cryptography&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Event-Driven
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;time-based obfuscation&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;p2p&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Due to choosing wrong paradigm for a problem&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;example
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;threads, multitasking built on top of synchronous paradigm
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;epicycles on top of epicycles&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li2&quot;&gt;e.g. promises&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Mars Pathfinder disaster&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Shuhari&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Shu
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;end users&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Ha
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;domain experts, non-programmers&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Ri&lt;/li&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;software professionals&lt;/li&gt;
    &lt;hr&gt;
    &lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Quality Of Service&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Ceiling</summary></entry><entry><title type="html">The problem</title><link href="https://computingsimplicity.neocities.org/2021/01/07/The-Problem.html" rel="alternate" type="text/html" title="The problem" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/The%20Problem</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/The-Problem.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Untitled&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T09:25:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T09:25:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;THE PROBLEM&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Normal People&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I was invited to advise a lawyer friend.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He wanted a website built for his company.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Two weeks went by and the website project was not yet finished.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He brought the software contractor in and expected to run him over the coals, with my assistance.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When the contractor described the project and his current status, I ended up agreeing with him.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The lawyer was flabbergasted.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Two weeks, for a simple brochure?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Two weeks of paying consulting rates?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I had to explain to my lawyer friend that software development is not built out of black boxes pulled from a shelf.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was a custom job and that he should not expect the job to be finished yet.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My lawyer friend did not like my answer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Programmers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I gave a demo and showed a &lt;i&gt;working&lt;/i&gt; version of some software to a client.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His techie grilled me on how I used mutexes in my software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I told him that I didn’t use mutexes, at which point he declared that the demo was faked. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was a liar and couldn’t possibly have finished the development work in so short a time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Assets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I have a friend who works in the Film &amp;amp; T.V. industry.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He dabbles in software development.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked him how his company manages projects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His response was “Why do you want to know?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These ideas can’t be applied to software development.”&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After more prodding, he told me that Film and T.V. Development was based on a divide and conquer strategy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Work is farmed out to contractors and the contractors return results as assets (3D graphical objects, in this case).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Don't Care&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My friend has created a product for the equestrian world.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The product uses some 40 CPUs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each CPU has only about 16K (K not M) of memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend does not have problems with multitasking.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Order Matters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Order of operation should not matter to produce a given result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, order &lt;i&gt;does&lt;/i&gt; matter in software.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I show this problem in &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In that essay, I show that we cannot rely on the operation of even a simple 2-box system of software.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Real black boxes don’t work that way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we have two black boxes plugged together, then we get the same result every time, regardless of how the innards of the black boxes (and the wiring between them) is implemented.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This does not happen in software.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Black Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Everyone &lt;i&gt;thinks&lt;/i&gt; that software is built using black boxes.&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Non-programmers understand the concept of black boxes and think that software is built from black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Like Engineering.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Software Professionals &lt;i&gt;think&lt;/i&gt; that they are using black boxes&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;libraries&lt;/i&gt; are not black boxes&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;TDD (Test Driven Development) tries to fit black-box-like thinking onto software, but ultimately fails&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Functional programming throws the baby out with the bathwater to achieve black-box-like behaviour.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This only achieves black-box-like behaviour for a narrow range of problems (one-in-one-out problems - filters, calculators)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;Tells&lt;/i&gt; - we see problems at the edges of the software universe - called &lt;i&gt;epicycles&lt;/i&gt; in Ptolemaic cosmology - such as the continual churn of fixes applied to &lt;i&gt;threads&lt;/i&gt; (e.g. &lt;i&gt;promises&lt;/i&gt; are one of the latest fads) and fixes applied to fixes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Threads&lt;/i&gt; are &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; essential complexity.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Promises &lt;/i&gt;fix threads for only a certain class of problems.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(&lt;i&gt;I discuss more &lt;/i&gt;tells&lt;i&gt; for broken software in another essay).&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Mars Pathfinder Disaster&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;https://www.rapitasystems.com/blog/what-really-happened-software-mars-pathfinder-spacecraft&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priority Inversion is Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Mars Pathfinder problem was caused by &lt;i&gt;priority inversion&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This problem was caused by the use of an RTOS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An RTOS is a stripped-down operating system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The RTOS was built using “best practices”, but, these best practices led to a hoary, intermittent bug.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The cause of the bug was not understood at the time of construction of the Pathfinder software, but it was always there.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priorities are Epicycles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Priorities were invented to ameliorate the problems of time-sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time-sharing was invented to ameliorate the problems of CPU expense.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Priority inheritance was invented to ameliorate the problems of priorities. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Q: Why was it possible to enable/disable priority inheritance?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What niggly problem was that supposed to solve?&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Epicycles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To read more about Epicycles, read Arthur Koestler’s “The Sleepwalkers”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The book documents the switch from Ptolemaic Cosmology to Copernican Cosmology.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Ptolemaic scientists formalized the concept of adding baubles to the existing theory without fixing the root problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They called this formalism &lt;i&gt;Epicycles&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Avoiding Multitasking Problems&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How To Avoid The Thread Safety Issue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To avoid thread safety issues, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When CPUs are isolated from one another - they cannot interact, except via very constrained channels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are no thread safety issues.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is accidental complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is not essential complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is caused by an optimization - the attempt to share memory across many tasks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This attempt at premature optimization leads to new problems, i.e. accidental complexity.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Avoid The Fairness Issue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To avoid fairness issues, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When CPUs are isolated from one another - they cannot interact, except via very constrained channels - there are no fairness issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each CPU runs at its own speed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is accidental complexity caused by an optimization (sharing the CPU for many tasks).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is not essential complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The only issue is: are the CPUs &lt;i&gt;fast enough&lt;/i&gt; to accomplish the given task?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Conquer Multitasking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To conquer multitasking and to make multitasking easy to use, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs cannot share memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs cannot time-share.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Deprecate Recursion and Loop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Computer Science clings to the notion of using Recursion and Loops.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Threads&lt;/i&gt; were invented to accomodate time-sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To accomodate deep recursion and loops when using threads, Computer Science invented &lt;i&gt;full preemption&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ironically, loops make no sense on the internet.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You cannot “loop” a pair of distributed computers, you can only send messages between them.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Getting Rid of Full Preemption&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Full Preemption was invented to accommodate loops (and recursion) on &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Full preemption causes many accidental complexities,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;e.g. allocating a stack (memory) for each thread&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;e.g. thread safety, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Full preemption is only needed to &lt;i&gt;simulate&lt;/i&gt; multiple CPUs on a single computer.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;To get rid of full preemption, just give each thread its own isolated CPU and its own isolated memory space.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Cores&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We, ultimately, want true distributed computing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We could do anything if CPUs were free.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multi-core CPUs are but a half-measure towards achieving the above goal of truly distributed computing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores were invented by hardware designers who were tired of waiting for software to catch up.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simulation On Too Few CPUs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If we don’t have enough CPUs to go around, we end up simulating CPUs by using VMs and Threads, or, better yet, we can simulate &lt;i&gt;isolated&lt;/i&gt; CPUs (something software professionals tend &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; to do, out of a zeal for premature optimization).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs used to be very expensive in the 1950’s. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simulation of multiple CPUs was invented early to ameliorate this expense. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of simulation - we call it &lt;i&gt;threads&lt;/i&gt; - has led to a myriad of accidental complexities. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These complexities &lt;i&gt;only&lt;/i&gt; exist in the simulations, and disappear entirely if we allocate enough CPUs to the problem.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computer Science&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A large portion of Computer Science consists of the analysis of accidental complexities caused by the imposition of the epicycle we call &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Early Computer Science, also, tackled the ideas of how to structure data and wrestled that issue to the ground.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yet, the issue of &lt;i&gt;threads&lt;/i&gt; continues to wriggle out of Computer Science’s grasp. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a &lt;i&gt;tell&lt;/i&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;If TDD had succeeded, then all software professionals would be using TDD exclusively.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They don’t.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Untitled</summary></entry><entry><title type="html">The primary issue</title><link href="https://computingsimplicity.neocities.org/2021/01/02/The-Primary-Issue.html" rel="alternate" type="text/html" title="The primary issue" /><published>2021-01-02T00:00:00-05:00</published><updated>2021-01-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/02/The%20Primary%20Issue</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/02/The-Primary-Issue.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Primary Issue&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-02T08:32:26Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-02T08:32:26Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 10.0px Palatino}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 13.0px Palatino}
    span.s2 {text-decoration: underline}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
    ul.ul3 {list-style-type: diamond}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Primary Issue: What is a Computer Used For?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is one issue in software that all other issues follow from:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;What is a computer used for?&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computing&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Calculation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A computer can be used to calculate mathematical results.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this perspective, a piece of software is a function with one input and one output.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Error conditions are glued onto this perspective as an after-thought.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This was the primary purpose behind the invention of computers. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Computers were invented to calculate ballistic trajectories of projectiles.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This perspective is inherently synchronous.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I posit that computing, and software development, has outgrown this perspective.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Machine Control&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Another perspective for using a computer is to control machinery, such as DAWs (Digital Audio Workstations), injection molding machines, printing machines, etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this perspective, each function can have more than one outcome.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this perspective, the computer receives inputs from outside sensors and produces control outputs to the outside world.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input from sensors can come &quot;at any time&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This perspective is inherently asynchronous.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Distributed Computing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Distributed computers come in two flavors&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;client&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;Some computers perform both of the above roles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Distributed computers receive asynchronous inputs from&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;users&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;other computers on the network&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(&lt;/span&gt;&lt;i&gt;other stuff omitted for brevity&lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;)&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous vs. Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Several issues are important when discussing synchronicity:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;data delivery&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;code invocation&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;order of operations&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;order of data arrival&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous Behaviour&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Devliery&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;parameters deliver input data&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;output data is sent - only to the caller - via RETURN statements&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;error data is sent - only up the &lt;span class=&quot;s2&quot;&gt;dynamic&lt;/span&gt; call chain - via exception statements, e.g. &lt;i&gt;throw&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Invocation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;actions are invoked by the CALL statement&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;actions use input data (from parameters)&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;actions produce output data and exceptions&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ordering&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;(1) inputs are delivered (via parameters), then (2) code is invoked - all of this is subsumed into the CALL statement&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;(3) actions produce outputs or exceptions&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;caller &lt;i&gt;waits&lt;/i&gt; for callee to perform its action&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous Behaviour&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Devliery&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;data is delivered via Send()&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;there is no difference between parameters, return values and exceptions - they are all data delivered by Send()&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;data can be directed (Send()) to any component, not just the caller and the dynamic call-chain&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Invocation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;at its most basic, actions are invoked for each piece of data received from Send() operations, e.g. fn(a,b,c) would invoke 3 actions - fn(a), fn(b) and fn(c)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;various permutations of this behaviour have been posited,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;for example, the misleadingly-named, &lt;i&gt;dataflow&lt;/i&gt; model invokes actions &lt;i&gt;only&lt;/i&gt; after all inputs have arrived&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;for example, FBP (Flow-Based Programming) invokes actions only when a &lt;i&gt;read&lt;/i&gt; statement is waiting for input on a particular &lt;i&gt;port&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ordering&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;in the asynchronous model, data delivery and action invocation are not tied together, e.g. many pieces of data can be sent before any action is invoked&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;CALL does not exist&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;parameter delivery is divorced from action invocation&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;RETURN values are delivered via Send() and imply no action invocation(s)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;exception values are delivered via Send() and imply no action invocation(s) ; since Send() supplants syntactic sugar like &lt;i&gt;throw&lt;/i&gt;, error data can be sent to any component and does not imply immediate action invocation&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Ordering is &quot;arbitrary&quot; and controlled only by a &lt;i&gt;dispatcher&lt;/i&gt; function [&lt;i&gt;N.B. dispatchers are commonly used in operating system threads, but, operating systems impose a synchronous behaviour style on all contained actions - such threading protocol is not necessary, despite commonly-held beliefs&lt;/i&gt;]&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simplicity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Simplicity is &lt;i&gt;the lack of nuance&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simplicity results when an appropriate programming paradigm is used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How To Pick A Paradigm?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;How does one decide which paradigm to use?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Firstly, one must ask the right questions, then apply the principles of Divide &amp;amp; Conquer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: Synchronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;To build a calculator: the synchronous paradigm is appropriate. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;We have seen this paradigm - the synchronous paradigm - evolve into what we call Functional Programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: Aynshcronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;To build a controller, use the asynchronous paradigm. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;See also: Harel Statecharts http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Using the wrong paradigm will lead to accidental complexity.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;E.G. Threads grafted onto the synchronous paradigm.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt; We have seen this evolve into the commonly-held belief that multitasking is hard.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples of Synchronous and Asynchronous Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss concrete examples below.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: Cryptography&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Cryptography is a mathematical function of one input which produces one output.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Cryptography is a calculator.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;synchronous paradigm&lt;/i&gt; is appropriate for cryptography.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: DAW&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A DAW - digital audio workstation - is a controller.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It takes inputs from the user and from a clock and produces outputs, e.g. MIDI, that control various devices (sound generators, envelope generators, etc.)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;asynchronous paradigm&lt;/i&gt; is most suited to programming a DAW.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GUI&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Graphical User Interface - accepts inputs from a user, then performs actions based on those inputs.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;The inputs come at unpredictable times.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Use &lt;i&gt;asynchronous paradigm&lt;/i&gt;.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Using more than one paradigm is OK
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;e.g. if the actions, that a GUI performs, are sufficiently complex, one might switch to programming the actions in the &lt;i&gt;synchronous paradigm&lt;/i&gt;).&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Current practice: We currently don't favour programming in anything but the &lt;i&gt;synchronous paradigm&lt;/i&gt;, hence, GUIs tend to be programmed in the &lt;i&gt;synchronous paradigm&lt;/i&gt; with bandaids that allow programmers access to &lt;i&gt;asynchronous &lt;/i&gt;behaviours.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;P2P - Peer To Peer&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;P2P - Peer-to-Peer sharing, was popularized by Napster and SETI.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;primarily an asynchronous protocol that shares data and resources between several computers.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Asynchronous Data
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;The primary activity of p2p is to listen for asynchronous communications and to accept data (asynchronously) from other peer computers on the network. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Timers:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;Another activity of p2p is to push chunks of resources to other peer computers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To achieve resource pushing without flooding the network and exhausting its own upload bandwidth, p2p must use timers, which, from the software perspective, raise timeout events asynchronously.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;asynchronous paradigm&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;2 paradigms
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;Synchronous
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li5&quot;&gt;cryptography&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;Asynchronous
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li5&quot;&gt;protocols between distributed computers.&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;calculations performed in the &lt;i&gt;synchronous&lt;/i&gt; &lt;i&gt;paradigm&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;distributed protocols performed in the &lt;i&gt;asynchronous paradigm&lt;/i&gt;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;essentially p2p.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Browsers, HTML, Internet&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Browser are the new manifestation of GUIs.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Asynchronous
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;Browsers communicate with server computers in a distributed fashion.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Practice:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;popular programming tools and languages for the &lt;i&gt;asynchronous paradigm&lt;/i&gt; are not common, hence, internet programming is performed with a grab-bag of low-level operations, including JavaScript, node.js, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;The GO language has been evolved to provide better access to low-level functionality in the &lt;i&gt;asynchronous paradigm&lt;/i&gt;, but GO is based on &lt;i&gt;synchronous&lt;/i&gt; belief structures and, is, thus, not the simplest solution to the problem(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Text Editing &amp;amp; Layout&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul3&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Text editing tools tend to be one-in-one-out programs.
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;e.g. the UNIX® tools&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;e.g. LaTeX,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;Synchronous paradigm&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Multitasking is hard only if one attempts to solve the multitasking problem using the synchronous paradigm.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Primary Issue</summary></entry><entry><title type="html">Refactoring</title><link href="https://computingsimplicity.neocities.org/2021/01/02/Refactoring.html" rel="alternate" type="text/html" title="Refactoring" /><published>2021-01-02T00:00:00-05:00</published><updated>2021-01-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/02/Refactoring</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/02/Refactoring.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Refactoring&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-02T08:22:01Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-02T08:22:01Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code is Cheap, Thinking is Expensive&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Purposes of Refactoring&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Refactoring has several purposes&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;change Architecture&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;change, improve, maintainability&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;change, improve, testability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Changing the Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Lift the Architecture out of the code using an SCL&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Refactor the Architecture, not the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Improving Maintainability&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;often, maintainability implies a change to the Architecture (see Changing the Architecture)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;otherwise, refactor the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Improving Testability&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;often, testability implies a change to the Architecture (see Changing the Architecture)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;otherwise, refactor the code&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Refactoring</summary></entry><entry><title type="html">Peg</title><link href="https://computingsimplicity.neocities.org/2020/12/27/PEG.html" rel="alternate" type="text/html" title="Peg" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/PEG</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/PEG.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;PEG for Lisp&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T22:41:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T22:41:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #118696; -webkit-text-stroke: #118696}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; color: #000000; min-height: 14.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #474747; min-height: 18.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p16 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p18 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p19 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; background-color: #fffc80}
    p.p21 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p22 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; min-height: 10.0px}
    p.p23 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #fffc80}
    p.p24 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #fffc80; min-height: 10.0px}
    p.p25 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p27 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #ffffff}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li12 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000}
    span.s1 {font-kerning: none}
    span.s2 {text-decoration: underline ; font-kerning: none}
    span.s3 {color: #474747}
    span.s4 {font-kerning: none; color: #474747}
    span.s5 {font: 13.0px Symbol; font-kerning: none}
    span.s6 {background-color: #fffc80}
    span.Apple-tab-span {white-space:pre}
    table.t1 {border-collapse: collapse}
    td.td1 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction - Breakthrough Technology&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Times&quot;&gt;&lt;b&gt;PEG is a breakthrough technology.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;In this essay, I explore how to use PEG instead of REGEX.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I create examples of PEG in Ohm-JS and ESRAP (Common Lisp). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;These ideas should easily port to other version of PEG.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;PEG stands for Parsing Expression Grammars.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PhD Thesis&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;Bryan Ford’s Thesis&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;http://pdos.csail.mit.edu/~baford/packrat/thesis&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG Enables SCLs&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG Enables SCLs.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;SCL means &lt;i&gt;Solution Centric Language.&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;SCL is like DSL (but more focussed).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many SCLs for One Project&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;We can use many SCLs for one project.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We are used to the idea that a &lt;i&gt;programming language&lt;/i&gt; is very general.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We are used to the idea that one programming language serves many projects.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Instead, we can use many little languages within one project. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Down Parsing&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Arial&quot;&gt;&lt;b&gt;Top Down Parsing - Recursive Descent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li12&quot;&gt;Top Down Parsing is familiar to anyone who uses a recursive language&lt;/li&gt;
  &lt;li class=&quot;li12&quot;&gt;Until Ford's thesis, TDPLs (Top Down Parsing Language) were either hand-built or used in lesser-known tools, such as S/SL, TXL, etc.&lt;/li&gt;
  &lt;li class=&quot;li12&quot;&gt;Recursive languages are common, e.g. JavaScript, Python, C, etc.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Why Management Disliked SCLs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;DSLs used to be hard to design&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;DSLs are a “whole language” unto themselves&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Needed to budget enormous amounts of time for DSL Development&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Can’t hire replaceable programmers for DSL languages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Need to invest time learning DSL&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cheating - Using Existing Languages&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;What is a “good assembler”?&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Lisp&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;JavaScript&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A good &lt;span class=&quot;s1&quot;&gt;base language, i.e. nice to have:&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;does not need declaration-before-use&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;first-class functions&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;closures&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;no, or l&lt;span class=&quot;s1&quot;&gt;ittle, syntactic sugar&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;dynamic typing&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEGs Are Better Than REGEXPs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs can parse languages that REGEXPs can’t parse&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs use a stack &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; parsing subroutines&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEGs Are Better Than YACC&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs define a &lt;i&gt;parser&lt;/i&gt; in a “top down” manner&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;YACC (LR) defines a &lt;i&gt;language&lt;/i&gt; in a “bottom up” manner&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;LR can be more rigorous but, also, harder to use&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (and recursive descent) can parse matching parentheses, YACC cannot&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG does (some) backtracking, resulting in a “more natural” feeling for programmers  (PROLOG &amp;amp; TXL do full backtracking, more than PEG)&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (packrat) memoizes some sequences, making backtracking tractable&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unity Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (TDPL) makes it possible to easily preserve spaces.&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;YACC does not preserve spaces (easily).&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Unity Grammar === first step towards cheap and dirty transpilers&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;E.g. HTML &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML+&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpilers&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Source-to-source translation&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Easy with PEG&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Hard with YACC&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;example: markdown is a transpiler, e.g. .md syntax &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;example: Shopify’s Liquid is a transpiler, e.g. HTML+restricted syntax &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML+JavaScript&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(see section 2.3.1 of thesis)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Empty String&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Terminal (fancy word for character)&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Non-Terminal (fancy word for a rule)&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;rule&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Sequence&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e1 e2 e3 ...&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Choice&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e1 / e2 / e3 / ...&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;0 or more&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e*&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;1 or more&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e+&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Optional&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e?&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Followed-by&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;amp;e&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not followed-by&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;!e&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Trivial Arithmetic&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;E.g. trivial arithmetic expressions&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;E ← N  /  ‘(‘ E ‘+’ E ‘)’  /  ‘(‘ E ‘)-’ E ‘)’&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;N ← D N / D&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;D ← ‘0’ / … / ‘9’&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(note parsing of nested, matched, parentheses ‘(‘ … ‘)’&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Match One Character&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;OneA = &quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;a&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /a/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (re.test (text)) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Success');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Failure');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text1 &quot;a&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example1-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneA text1))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;a&quot;;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const example1_grammar = '&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;';&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohmParser = ohm.grammar (example1_grammar);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Success&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Failure&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Match Two Characters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG (Ohm-JS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/ab/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /ab/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (re.test (text)) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Success');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Failure'ß);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text2 &quot;ab&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example2-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneB #\b (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneAThenOneB (and oneA oneB) (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneAThenOneB text2))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 18.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const example2_grammar = `&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;Example2 {&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohmParser = ohm.grammar (example2_grammar);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Groups&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG (Ohm-JS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a)(b)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /(a)(b)/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var matchArray = text.match (re);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (matchArray) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var first = matchArray[1];&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var second = matchArray[2];&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (`(javascript) flipped is &quot;${second}${first}&quot;`);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (`pattern failed`);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text &quot;ab&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example3-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneB #\b (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneAThenOneBAndFlip (and oneA oneB)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;(:destructure (a b) (list b a)))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneAThenOneBAndFlip text))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 18.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Unity Grammar for HTML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;title&amp;gt;Top&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;rect { fill:#DAE8FC }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;h1&amp;gt;Top Part (Schematic)&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id7&quot; x=&quot;50&quot; y=&quot;150&quot;&amp;gt;FileSelector&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id8&quot; x=&quot;50&quot; y=&quot;350&quot;&amp;gt;TimeoutTimer&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id9&quot; x=&quot;290&quot; y=&quot;185&quot;&amp;gt;CallbackLogic&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id10&quot; x=&quot;660&quot; y=&quot;150&quot;&amp;gt;Display&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id11&quot; x=&quot;660&quot; y=&quot;320&quot;&amp;gt;ErrorHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id12&quot; x=&quot;660&quot; y=&quot;410&quot;&amp;gt;AbortHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id13&quot; x=&quot;660&quot; y=&quot;490&quot;&amp;gt;NoResponseHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const unityGrammar = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;htmlUnity {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;html = ws* htmlElement headerStuff bodyElement bodyStuff bodyElementEnd htmlEnd&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlElement = &quot;&amp;lt;html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;headerStuff = notBody*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElement = &quot;&amp;lt;body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyStuff = notBodyEnd*&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBody = ~&quot;&amp;lt;body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBodyEnd = ~&quot;&amp;lt;/body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElementEnd = &quot;&amp;lt;/body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlEnd = &quot;&amp;lt;/html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;ws = &quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (unityGrammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addUnity (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('unity ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).unity ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addUnity (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'unity',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;html: function (ws_plural, htmlElement, headerStuff, bodyElement, bodyStuff, bodyElementEnd, htmlEnd) { return ws_plural.unity ().join ('') + htmlElement.unity () + headerStuff.unity () +&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                                    &lt;/span&gt;bodyElement.unity () + bodyStuff.unity () + bodyElementEnd.unity () + htmlEnd.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlElement: function (html, ws_plural) { return html.unity () + ws_plural.unity ().join('');},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;headerStuff: function (notBody_plural) { return notBody_plural.unity ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElement: function (body, ws_plural) { return body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyStuff: function (notBodyEnd_plural) { return notBodyEnd_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBody: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBodyEnd: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElementEnd: function (slash_body, ws_plural) { return slash_body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlEnd: function (slash_html, ws_plural) { return slash_html.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;ws: function (c) { return c.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);};&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;title&amp;gt;Top&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;rect { fill:#DAE8FC }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;h1&amp;gt;Top Part (Schematic)&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id7&quot; x=&quot;50&quot; y=&quot;150&quot;&amp;gt;FileSelector&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id8&quot; x=&quot;50&quot; y=&quot;350&quot;&amp;gt;TimeoutTimer&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id9&quot; x=&quot;290&quot; y=&quot;185&quot;&amp;gt;CallbackLogic&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id10&quot; x=&quot;660&quot; y=&quot;150&quot;&amp;gt;Display&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id11&quot; x=&quot;660&quot; y=&quot;320&quot;&amp;gt;ErrorHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id12&quot; x=&quot;660&quot; y=&quot;410&quot;&amp;gt;AbortHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id13&quot; x=&quot;660&quot; y=&quot;490&quot;&amp;gt;NoResponseHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const unityGrammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;htmlUnity {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;html = ws* htmlElement headerStuff bodyElement bodyStuff bodyElementEnd htmlEnd&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlElement = &quot;&amp;lt;html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;headerStuff = notBody*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElement = &quot;&amp;lt;body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyStuff = notBodyEnd*&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBody = ~&quot;&amp;lt;body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBodyEnd = ~&quot;&amp;lt;/body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElementEnd = &quot;&amp;lt;/body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlEnd = &quot;&amp;lt;/html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;ws = &quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (unityGrammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addUnity (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('unity ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).unity ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addUnity (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'unity',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;html: function (ws_plural, htmlElement, headerStuff, bodyElement, bodyStuff, bodyElementEnd, htmlEnd) { return ws_plural.unity ().join ('') + htmlElement.unity () + headerStuff.unity () +&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                                    &lt;/span&gt;bodyElement.unity () + bodyStuff.unity () + bodyElementEnd.unity () + htmlEnd.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlElement: function (html, ws_plural) { return html.unity () + ws_plural.unity ().join('');},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;headerStuff: function (notBody_plural) { return notBody_plural.unity ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElement: function (body, ws_plural) { return body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyStuff: function (notBodyEnd_plural) { return notBodyEnd_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBody: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBodyEnd: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElementEnd: function (slash_body, ws_plural) { return slash_body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlEnd: function (slash_html, ws_plural) { return slash_html.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;ws: function (c) { return c.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);};&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - SVG Parser&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p25&quot;&gt;(can't do this in REGEXP)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 9.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS Grammar IDE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;(&lt;i&gt;see next instalment&lt;/i&gt;)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar First&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test Cases&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Add Support Code Later&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Transpile Ohm Grammars to Other Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;(&lt;i&gt;see next instalment&lt;/i&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PEG for Lisp</summary></entry><entry><title type="html">Compile time and runtime</title><link href="https://computingsimplicity.neocities.org/2020/12/27/Compile-Time-and-Runtime.html" rel="alternate" type="text/html" title="Compile time and runtime" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/Compile%20Time%20and%20Runtime</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/Compile-Time-and-Runtime.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Compile Time and Runtime&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T12:42:51Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T12:42:51Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Overview of Comile-time vs. Run-time&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;eliding details&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-12-42-51-Images/CompileTimeAndRuntime-Fiction.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Programmers generalize (think of) 2 phases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-12-42-51-Images/CompileTimeAndRuntime-Reality.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Compiler generates object files and DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Operating system loads object files and DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Operating system &quot;fixes up&quot; holes in DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;App initializes
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;compiler leaves islands of initialization code&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;top-level data, e.g. var x = &quot;abc&quot;;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;App runs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Compile Time and Runtime</summary></entry><entry><title type="html">The stack 2</title><link href="https://computingsimplicity.neocities.org/2020/12/27/The-Stack-2.html" rel="alternate" type="text/html" title="The stack 2" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/The%20Stack%202</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/The-Stack-2.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T22:34:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T22:34:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 9.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Desired&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I have found that it is convenient to create separate stacks for every type. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I found that I need only 5 basic operations and that I can generate/compile/transpile code to enact these operations.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The &quot;syntax&quot; for talking about types in this manner, drops to something very small (&lt;i&gt;bizarrely, the number 5 comes up again - I can describe the new syntax using only 5 productions&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I describe this method in the following essay.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-22-34-06-Images/isolation-Desired.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Achieving 2 Stacks for Each Type&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCL Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = { ... } &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;--&amp;gt; class with fields def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :string &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;--&amp;gt; string def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :map&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;--&amp;gt; map def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = | ... &lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;--&amp;gt; or type def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ... &lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;--&amp;gt; enum def&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;This syntax was chosen for its regularity since it was originally parsed with manually written code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each construct has a &lt;/i&gt;left handle.&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every construct begins with &quot;id = &quot;, then the next character determines the kind of construct, e.g. &quot;id = {&quot; means that the construct is a class with fields, &quot;id = '&quot; means enum, and so on.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For a prototype of this, see &lt;a href=&quot;https://github.com/guitarvydas/stack-dsl&quot;&gt;https://github.com/guitarvydas/stack-dsl&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Type Specification&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;[&lt;i&gt;comments deleted, for full contents see &lt;/i&gt;&lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/exprtypes.dsl&quot;&gt;&lt;i&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/exprtypes.dsl&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaprogram = { typeDecls situations classes whenDeclarations&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeDecls = :map typeDecl&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situations = :map situationDefinition&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;classes = :map esaclass&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;whenDeclarations = :map whenDeclaration&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeDecl = { name typeName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationDefinition =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaclass = { name fieldMap methodsTable }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;whenDeclaration = { situationReferenceList esaKind methodDeclarationsAndScriptDeclarations }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationReferenceList = :map situationReferenceName&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationReferenceName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodDeclarationsAndScriptDeclarations = :map declarationMethodOrScript&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;declarationMethodOrScript =| methodDeclaration | scriptDeclaration&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodDeclaration = { esaKind name formalList returnType }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;scriptDeclaration = { esaKind name formalList returnType implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnType = { returnKind name }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnKind = 'map' | 'simple' | 'void'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;formalList = :map name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaKind =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;expression = { ekind object }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;ekind = 'true' | 'false' | 'object' | 'calledObject'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;object = { name fieldMap }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fieldMap = :map field&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;field = { name fkind actualParameterList }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fkind = 'map' | 'simple'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;actualParameterList = :map expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;name = :string&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodsTable = :map declarationMethodOrScript&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;externalMethod = { name formalList returnType }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;internalMethod = { name formalList returnType implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;implementation = :map statement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;statement =| letStatement | mapStatement | exitMapStatement | setStatement | createStatement | ifStatement | loopStatement | exitWhenStatement | callInternalStatement | callExternalStatement | returnTrueStatement | returnFalseStatement | returnValueStatement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;letStatement = { varName expression implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;mapStatement = { varName expression implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;exitMapStatement = { filler }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;setStatement = { lval expression }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;createStatement = { varName indirectionKind name implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;ifStatement = { expression thenPart elsePart }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;loopStatement = { implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;exitWhenStatement = { expression }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnTrueStatement = { methodName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnFalseStatement = { methodName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnValueStatement = { methodName name }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;callInternalStatement = { functionReference }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;callExternalStatement = { functionReference }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;lval =| expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;varName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;functionReference =| expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;thenPart =| implementation&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;elsePart =| implementation&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;indirectionKind = 'indirect' | 'direct'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;filler =| name&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;class id = { ... }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;id = { ... }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a class that contains the given fields.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This construct does not explicitly define any methods for the class.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Methods are generated automatically.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;type union id = | ...&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = | ...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be a union of other types.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;enum&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ...&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type to consist of one or more contants (symbols / strings).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;foreign string&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :string&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = :string&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be of a foreign type STRING.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;maybe I should have generalized this to &lt;/i&gt;id = :foreign&lt;i&gt;?&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;foreign list id = :map&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = :map&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be a list of some other type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;maybe I should have named this :&lt;/i&gt;list&lt;i&gt; instead of :&lt;/i&gt;map]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compiling to Separate Stacks&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;I find it useful to have 2 stacks for every type&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;working stack&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;output stack&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The example type specification in Example Type Specification defines 54 types.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This compiles to 54 type definitions and 54 * 2 = 108 stacks.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that there are only 5 possible ways to define a type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that types can be defined as other types.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;name = :string&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that &quot;variable names&quot; are not needed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We simply create a typename for each entity, e.g.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn (a: int, b : int)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;becomes&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn (a, b)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;a =| int&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;b =| int&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(this removes syntactic noise from the declarations and pushes implementation details deeper into the hierarchy).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this example, &lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt; are types (not variables).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Each stack contains enough information to:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;specify the type contained in the stack&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the actual stack of values (of the given type)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign Types&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;There are only 2 types at the bottom:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;a &lt;span class=&quot;s1&quot;&gt;%typed-valu&lt;/span&gt;e: (&lt;span class=&quot;s1&quot;&gt; %type, %value&lt;/span&gt; ) [where &lt;span class=&quot;s1&quot;&gt;%type&lt;/span&gt; is a String and &lt;span class=&quot;s1&quot;&gt;%value&lt;/span&gt; is anything]&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;a list of &lt;/span&gt;%typed-value&lt;span class=&quot;s2&quot;&gt;: ( &lt;/span&gt;%element-type, %ordered-list &lt;span class=&quot;s2&quot;&gt;) [where &lt;/span&gt;%ordered-list&lt;span class=&quot;s2&quot;&gt; contains &lt;/span&gt;%type-values&lt;span class=&quot;s2&quot;&gt;]&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul2&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Both types are foreign and opaque&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Only the implementation knows what is inside of them&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;type checking is done by-name (equality of &lt;span class=&quot;s1&quot;&gt;%type&lt;/span&gt;s)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Operations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;I find that there are 6 basic operations:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;NewScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;EndScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Output&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;SetField_???_from_???&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;AppendFrom_???&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&amp;lt;foreign operation&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The first 5 operations can be automatically generated for every type (and the corresponding stacks).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The 6&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; operation (&amp;lt;foreign operation&amp;gt;) is a catch-all for operations that are specific to the solution.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;In &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/dsl3.pasm&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/dsl3.pasm&lt;/a&gt; (and the other dsl*.pasm files), the stack names are prepended to the operations (followed by two underscores), and the typenames are prefixed with &quot;$&quot; e.g.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;$whenDeclarations__EndScope&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;thus, in the prototype, one will see operations, like:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__NewScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$classes__EndScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__Output&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$scriptDeclaration__SetField_formalList_from_formalList&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__AppendFrom_name&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&amp;lt;foreign operation&amp;gt;: $name__GetName&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NewScope&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__NewScope&lt;/span&gt; pushes an empty item, of the appropriate type, onto the working stack of the type.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;EndScope&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__EndScope&lt;/span&gt; pops the given working stack.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__Output&lt;/span&gt; moves the top item from the working stack to the output stack for the given type.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The working stack is popped (once).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SetField&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__SetField_&amp;lt;fieldName&amp;gt;_from_&amp;lt;other-type&amp;gt; &lt;/span&gt;sets the field &lt;i&gt;fieldName &lt;/i&gt;of &lt;i&gt;type&lt;/i&gt; to the value of the top of the Output stack of &lt;i&gt;other-type&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation checks that the &lt;i&gt;other-type&lt;/i&gt; is of the type required by &lt;i&gt;fieldName&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation pops (once) the Output stack of &lt;i&gt;other-type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AppendFrom&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__AppendFrom_&amp;lt;other-type&amp;gt; &lt;/span&gt;appends the value of the top of the Output stack of &lt;i&gt;other-type&lt;/i&gt; to the top list on the working stack of &lt;i&gt;type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation checks that &lt;i&gt;type&lt;/i&gt; is a list (I've called it :map) and that the element-type of the list matches &lt;i&gt;other-type&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation pops (once) the Output stack of &lt;i&gt;other-type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__??? &lt;/span&gt;performs operation &quot;???&quot; on the given type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation has no arguments (other than &lt;i&gt;type&lt;/i&gt;), but multiple operations can be declared and called, e.g. &lt;i&gt;counter__reset&lt;/i&gt; … &lt;i&gt;counter__increment&lt;/i&gt; … &lt;i&gt;counter__increment_by_2 …&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Compilation (Lisp)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.lisp&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.lisp&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.json&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.json&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-mechanisms.lisp&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-mechanisms.lisp&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;Push these through your favourite pretty-printer&lt;/i&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack</summary></entry><entry><title type="html">Dlls</title><link href="https://computingsimplicity.neocities.org/2020/12/25/DLLs.html" rel="alternate" type="text/html" title="Dlls" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/DLLs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/DLLs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;DLLs&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:24:26Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:24:26Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Linking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Static linking&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Linked With Library.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic Linking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Dynamic Link Libraries have fixups in one direction only (call).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Linked With DLL.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Full Dynamic Linking (NIY)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Dynamic Linking in both directions (call &amp;amp; return, NIY)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Isolated.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">DLLs</summary></entry></feed>