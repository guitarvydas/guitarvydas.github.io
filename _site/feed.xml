<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-24T08:01:27-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Glue manual</title><link href="https://computingsimplicity.neocities.org/2021/03/24/Glue-Manual.html" rel="alternate" type="text/html" title="Glue manual" /><published>2021-03-24T00:00:00-04:00</published><updated>2021-03-24T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/24/Glue%20Manual</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/24/Glue-Manual.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Glue Manual&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-24T08:01:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-24T08:01:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 9.0px Palatino}
    span.s3 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; converts one language into another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue &lt;/i&gt;goes one step further than REGEXs and I believe that it is as easy to use as REGEXs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue &lt;/i&gt;is a tool for building &lt;i&gt;transpilers&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As an example, in another essay,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; I use &lt;i&gt;glue &lt;/i&gt;to convert SVG diagams into Bash programs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Technically, &lt;i&gt;glue &lt;/i&gt;is a PEG&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; to help in writing PEGs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Basics&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The little language, that the I call &lt;i&gt;glue,&lt;/i&gt; is used to generate JavaScript code to be used with transpilers constructed with Ohm-JS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; specifications consist of one &quot;statement&quot; for every matching Ohm-JS grammar &lt;i&gt;rule&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each specification statement gives the expected Ohm-JS grammar plus variables that hold the sub-matches. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each specification statement defines a mapping from sub-matches to output format.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each specification statement can include setup code and access to a dynamically scoped set of variables.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Glue &lt;/i&gt;emits code to create variable frames for each each grammar rule at runtime.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss efficiency of this approach.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This little language could use a better name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At the time of creation &quot;glue&quot; had meaning (to me).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In retrospect, this little language has more to do with generating semantic code for Ohm-JS and might need to be renamed to something more appropriate.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OTOH, I would think that, if this little language were to be used frequently, it would be rolled into a single tool workflow and combined with Ohm-JS and that the rolled-together workflow would be given its own, unique, name.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Working Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To ease discussion, we will consider an actual use-case&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; of &lt;i&gt;glue&lt;/i&gt;:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlHeader [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlEnd [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;bodyHeader [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;bodyEnd [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;docTypeHeader [_1 @stuff _2 @ws] = ${_1}${stuff}${_2}${ws}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;element [e] = ${e}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svgElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;     &lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[ svgbox(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;${elements}]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rectElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;rect(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;${elements} ]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;text(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;${elements}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;string(${name}, &quot;${text}&quot;). ]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;basicElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] = ${_1}${_2}${ws}${attributes}${_5}${_6}${elements}${text}${_9}${_10}${_11}${_12}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;widthAttribute [_ _eq str @_ws] = [[width_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;heightAttribute [_ _eq str @_ws] = [[height_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xAttribute [_ _eq str @_ws] = [[x_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;yAttribute [_ _eq str @_ws] = [[y_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;fillAttribute [_ _eq str @_ws] = [[fill(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;genericAttribute [_ _eq str @_ws] = \n&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text [x] = ${x}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name [c @cs] = ${c}${cs}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string [_1 @cs _2] = &quot;${cs}&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notQ [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ws [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Formatted Strings&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; produces one formatted string for each grammar rule.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;LHS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Each statement corresponds to a &lt;i&gt;rule&lt;/i&gt; in the accompanying Ohm-JS grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first line of our example is&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;which we will elide in phases:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlsvg … = …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first line corresponds to an Ohm-JS grammar &lt;i&gt;rule&lt;/i&gt; named &quot;htmlsvg&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar parses&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;7 sub-matches, given in our specification inside brackets:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;… [@ws docH htmlH bodyH @elements bodyE htmlE] = …&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Here, we have defined 7 JavaScript variables (parameters, actually) — ws, docH, htmlH, bodyH, elements, bodyE and htmlE.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All variables prefixed with &quot;@&quot; are multiple-match items generated by the Ohm-JS grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case, &lt;span class=&quot;s1&quot;&gt;ws&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;elements&lt;/span&gt; are the multiple-match items.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multiple-match items correspond to the use of &quot;?&quot;, &quot;*&quot; and &quot;+&quot; operations in the grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The LHS creates, roughly, a JavaScript function, eg.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function htmlsvg (ws, docH, htmlH, bodyH, elements, bodyE, htmlE) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The parameters are evaluated in the body of the function, as required by Ohm-JS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple-match items are evaluated one step further in the body of the function (multiple-matches return an array of CSTs&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;, and evaluation consists of flattening the arrays into single strings using the .join('') operator of JavaScript).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;RHS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The right-hand-side is a block of characters that are combined into JavaScript back-tick strings.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;… = ${elements}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This RHS results in JavaScript code&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;`${elements}`&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If we look at the whole 1&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt; statement:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;we see that the specification says to flatten and format the &lt;span class=&quot;s1&quot;&gt;elements&lt;/span&gt; parameter and discard the other 6 parameters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The second line of the example,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;htmlHeader [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;says that when an htmlHeader grammar rule is matched, it should be mapped to a string containing the first&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; (&quot;_&quot;) and second (&quot;ws&quot;) parameters. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most of the &lt;i&gt;glue &lt;/i&gt;specifications have this form&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;match, format. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The exceptions are specifications 8, 9 and 10.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specification 8&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svgElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;     &lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[ svgbox(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;${elements}]]&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;has the form&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;ruleName [ parameters ] =  [[ formatting ]]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, the &lt;span class=&quot;s1&quot;&gt;format&lt;/span&gt; specification is wrapped by double brackets [[ … ]] (whereas in most other lines, it does not need to be wrapped with double brackets).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is extra code wrapped in double-braces  on the RHS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This code is copied verbatim to the transpiled output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This code is meant to contain local variables, and, scoped variables (see separate section).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specification 8 says&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svgElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;     &lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[[ svgbox(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;${elements}]]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;to create a JavaScript variable &quot;name&quot; and to add two scoped variables to the scope stack (&quot;path&quot; and &quot;counter&quot;). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, the usual formatting occurs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Everything inside the double-brackets is wrapped in a JavaScript back-tick string, e.g. `&lt;span class=&quot;s1&quot;&gt;svgbox(${name},&quot;&quot;)…&lt;/span&gt;`.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JavaScript variables and scoped variables can be included in the format back-string.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scoped Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, the &lt;i&gt;glue&lt;/i&gt; transpiler inserts code at all rule entry and exit points&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;_ruleEnter (&quot;rule name&quot;);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;_ruleExit (&quot;rule name&quot;);&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These enter/exit functions push and pop stack frames for dynamically scoped variables.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rule names are passed in as strings, if debugging code is added to the enter/exit functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As it stands, the mainline function must call&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;_ruleInit ();&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;to initialize the dynamic variable scope stack.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic variables act somewhat like inheritance in graphical systems, e.g. when a variable is pushed onto the stack (scopeAdd()), it shadows all other variables with that same name, when a variable is dereferenced (scopeGet()), the top-most value is returned.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The API for dynamic variables is:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;scopeAdd (&quot;name&quot;, value)
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;pushes &lt;i&gt;value&lt;/i&gt; onto the stack under the name &lt;i&gt;name&lt;/i&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;scopeGet (&quot;name&quot;)
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;returns the top-most value on the stack with the given name&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;scopeModify (&quot;name&quot;, value)
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;outlier for special cases - modifies the top-most variable of the given name&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;in the example code, this is used to create a &quot;global&quot; counter used for creating unique formatted variable names&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;_ruleInit ()
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;must be called once before parsing&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this example, I've place all &quot;outside&quot; functions into a file called &lt;span class=&quot;s1&quot;&gt;foreign.js&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a form of fractal eliding.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The code is needed to satisfy the JavaScript compiler, but its implementation is uninteresting at the DI layer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;It is the Architect's responsibility to make the design clear and understandable to readers.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this example, there is but one foreign function — &lt;span class=&quot;s1&quot;&gt;gen()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I chose to put the &lt;span class=&quot;s1&quot;&gt;gen()&lt;/span&gt; function into a separate file and to call it from the &lt;i&gt;glue&lt;/i&gt; specification.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Other Architects might choose to do this differently.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IMO, the &lt;span class=&quot;s1&quot;&gt;gen() &lt;/span&gt;function contains implementation details and, IMO, such details must be pushed out of the specification and elided.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Efficiency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue &lt;/i&gt;tool is used only by the grammar programmer. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, &lt;i&gt;glue&lt;/i&gt; is used infrequently in the programmer's workflow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, efficiency of &lt;i&gt;glue&lt;/i&gt; is not a major issue.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The only &quot;rule&quot; is &quot;is it fast enough for use?&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I suspect, but haven't even bothered to measure, that the implementation of scoped dynamic variables would be considered &quot;inefficient&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I stick to the YAGNI principle — the &lt;i&gt;glue&lt;/i&gt; tool works &quot;fast enough&quot; on my laptop (there is no perceived time taken by the &lt;i&gt;glue&lt;/i&gt; tool — it appears to operate instantly with no delay — that is &quot;good enough&quot; and no time has been spent making it faster).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Error Handling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; does not check for any errors and leaves all error handling to the support language — JavaScript and Ohm-JS, in this case.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS does sufficient error checking (more than JavaScript).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One needs to &quot;know&quot; how Ohm-JS works to use the &lt;i&gt;glue&lt;/i&gt; tool, in its present form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Postscript - Architectural Reuse&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal was to build something &quot;as quickly as&quot; building an editor macro instead of building a full-blown DSL or building a full-blown PL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This tool would not have been built if its construction was estimated to take longer than a few hours.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;SCLs based on PEG are meant to be one-use-only DSLs, like REGEXPs are in other existing languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The semantics of &lt;i&gt;glue&lt;/i&gt; are quite uncomplicated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There was just enough work put in &quot;to get the job done&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I can throw &lt;i&gt;glue&lt;/i&gt; away and build something bigger and more complicated if the situation arises. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I would retain the experience from building this tool and use this experience when building the next one.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A case of Architectural Reuse instead of plain code reuse.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using fractal-design principles, I would keep chopping a problem down into sub-components until I could implement it in whatever way I choose (using &lt;i&gt;glue&lt;/i&gt; or ignoring &lt;i&gt;glue&lt;/i&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See &quot;SVG to Code (1)&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Don't worry if you don't understand this statement or you don't know what a PEG is.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See my essay &quot;SVG to Code&quot;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;CST means Concrete Syntax Tree — basically the AST (Abstract Syntax Tree) instantiated with actual matches.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;In JavaScript, underscore &quot;_&quot; is an ordinary character, hence, _ is a variable name that is one character long.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Glue Manual</summary></entry><entry><title type="html">Everything is a fractal</title><link href="https://computingsimplicity.neocities.org/2021/03/23/Everything-is-a-Fractal.html" rel="alternate" type="text/html" title="Everything is a fractal" /><published>2021-03-23T00:00:00-04:00</published><updated>2021-03-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/23/Everything%20is%20a%20Fractal</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/23/Everything-is-a-Fractal.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Everything is a Fractal&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-23T14:31:57Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-23T14:31:57Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Everything is a Fractal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;In my mind, every problem can be subdivided. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I call such problems &lt;i&gt;fractals.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Every sub-division of a problem can be further sub-divided. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Composite and Leaf Nodes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I see a solution-to-a-problem as a tree, branching downards.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A &lt;i&gt;composite&lt;/i&gt; is a fractal.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A &lt;i&gt;composite&lt;/i&gt; represents something that is sub-divided.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A &lt;i&gt;leaf&lt;/i&gt; represents something that doesn't need to be sub-divided further.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Most current PLs&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; do not encourage fractal-thinking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is a &lt;i&gt;problem&lt;/i&gt; and a lump of &lt;i&gt;code&lt;/i&gt;.&lt;i&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt; There is no tree of sub-divisions.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;It is &lt;i&gt;possible&lt;/i&gt; to write code in just about any PL by sub-dividing it, but, most PLs do not &lt;i&gt;encourage&lt;/i&gt; this style.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Likewise, note that it is &lt;i&gt;possible&lt;/i&gt; to write FP&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; code in assembler, but assembler does not &lt;i&gt;encourage &lt;/i&gt;the FP style.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Most PLs attempt to achieve fractal-thinking by using &lt;i&gt;libraries&lt;/i&gt; of code, but this hasn't worked out so well.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Libraries are rife with dependencies (see below).&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Layers are Fractal Thinking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Fractal thinking leads to &lt;i&gt;layered&lt;/i&gt; design.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Programming Code Should Be a Fractal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;Compilers know how to inline function calls.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Nothing more than function calls and collections are needed at any &lt;i&gt;composite &lt;/i&gt;level.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Low-level operations, like, &quot;+&quot;, &quot;cons&quot;, &lt;i&gt;arrays&lt;/i&gt;, etc., are only needed at the leaf level.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Documentation Should Be a Fractal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;Documentation should be arranged in a layered — need to know&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; — manner.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Today, we have UNIX man pages + source code, or, 200-page documents like the gnu-make manual.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These provide the top layers and bottom layers of documentation, but, nothing in between.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;YAGNI Means Fractal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YAGNI means &quot;you aren't going to need it&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YAGNI implies deferring work (operations).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YAGNI all the way down.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YAGNI at every layer.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Humans are bad at YAGNI layering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They need languages / notations that encourage layering.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Dependencies are Anti-Fractal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Layers that depend on one-another are invisibly &quot;at the same level&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;They are not layers.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Fractal-thinking requires &lt;i&gt;lack of dependencies&lt;/i&gt;, &lt;i&gt;isolation &lt;/i&gt;and &lt;i&gt;superposition&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/24/superposition-2.html&quot;&gt;https://guitarvydas.github.io/2021/01/24/superposition-2.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/Superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/Superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Scalability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Scalability can be achieved only through the lack of dependencies.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;UNIX Man Pages - top level layer 1-2 pages, but no fractals beneath (refer to source code)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Tabbed Views - &lt;i&gt;across &lt;/i&gt;but no &lt;i&gt;in&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Cascading Menus — fractal wannabes, with lousy UX&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Hierarchical File Systems — assembler for fractals&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Tree Widgets — fractals screaming to get out ; text-based solution to a problem which is not fundamentally text-based&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Code Libraries — failed fractals&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Theorem Provers — tends towards anti-fractal — all rules tend to be described at a single level without layering (it could be argued that each rule is a layer unto itself, but the result is a big lump of rules with no appreciable funnelling/choke points -- See Peter Lee for example of nesting)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Peter Lee &quot;Realistic Compiler Generator&quot; — shows fractal design applied to Denotational Semantics — sub-divides domains into multiple layers&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Functions and Inlining — optimizations that &lt;i&gt;should&lt;/i&gt; lead to more layering&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Macros — attempt to manipulate syntax skins in a language (see PEG) — too &quot;flat&quot; — macros constitute another bag of operations added to the &quot;flat&quot; operations provided by the language(s) ; macros &lt;i&gt;could&lt;/i&gt; alleviate efficiency concerns for layered designs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;PEG — a way to make skins (SCLs) for facts&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Elm — flat message structure&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;PLs — too many operators all at one level, only one syntax per language&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Scripts — bash supports isolation (&amp;amp;) and layering but only at a low level&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Backtraces — core dumps under a new name ; a way to escape having to provide good error messages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Data Structures — premature optimization&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; ; implementation details&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Relational Programming — PROLOG, miniKanren, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;— a step in the right direction, but only a step&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;O(n) Analysis — avoids the real issue (human UX is most important, emphasis on computer run-time is less important (or, is a component of UX analysis, necessary but not sufficient))&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;GNU-anything — kitchen-sink approach, not layered&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;open-source — not fractal, maintenance of code is a chore&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;ORG-charts — business attempt at fractal-thinking&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;OO — attempt at layering — unfortunately uses global stack for so-called &quot;message passing&quot;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Structured Programming — attempt at layering ; attacks GOTOs but not design in general (GOTOs are not a problem, but &lt;i&gt;unstructured &lt;/i&gt;use of GOTOs is the problem ; CPS is GOTOs-on-steroids (very useful for denotational semantics)).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Global Variables — tamed by layering (scoped local variables instead of globals - again, the problem is not variables, but the unstructured use of variables)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Packages — attempt at layering, attacking symptoms but not the underlying problem (the problem is how to layer DI,&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; not how to cope with dependencies)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Visual Programming — One doesn't need to think about pixels, except at the lowest level&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;PDF — too low level ; only 2 layers - (1) text and (2) Forth (aka PostScript)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;DAWs — multiple tracks are only 1-level deep ; addition of &lt;i&gt;buses&lt;/i&gt; supplies a 2&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;nd&lt;/sup&gt;&lt;/span&gt; level — but that's not enough&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;S/SL — demonstration of layering to build non-toy code (e.g. how to build a Pascal compiler in '80s)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;HTML — low-level operations for layering ; HTML (XML) is but an assembler for layering&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Integers — not fractal&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Real Numbers — fractal ; floats (doubles) are just an approximation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Measuring Tape and Rulers — fractal — every mark on a ruler can be further sub-divided&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Bottom Level&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If your code uses &quot;+&quot;, &quot;cons&quot;, &lt;i&gt;arrays&lt;/i&gt;, etc., it is at the bottom level (a &lt;i&gt;leaf&lt;/i&gt; node).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is &lt;i&gt;flat&lt;/i&gt; and non-structured.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;See also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;need to know (n2k)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;superposition&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/24/superposition-2.html&quot;&gt;https://guitarvydas.github.io/2021/01/24/superposition-2.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/Superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/Superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;isolation&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;S/SL&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://archive.org/details/technicalreportc118univ&quot;&gt;https://archive.org/details/technicalreportc118univ&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Peter Lee&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;see also&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/14/References.html&quot;&gt;https://guitarvydas.github.io/2021/01/14/References.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;E.g. Python, JavaScript, C, etc.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Feel free to substitute your favourite paradigm here, instead of FP.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OO, Structured Programming, etc.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Data structures should be built only at runtime.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Computing power is &quot;cheap&quot;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Data structures should only appear at the leaf level, everything else should only &lt;i&gt;refer&lt;/i&gt; to data.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;DI means Design Intent&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Everything is a Fractal</summary></entry><entry><title type="html">Programming pradigms vs syntax</title><link href="https://computingsimplicity.neocities.org/2021/03/23/Programming-Pradigms-vs-Syntax.html" rel="alternate" type="text/html" title="Programming pradigms vs syntax" /><published>2021-03-23T00:00:00-04:00</published><updated>2021-03-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/23/Programming%20Pradigms%20vs%20Syntax</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/23/Programming-Pradigms-vs-Syntax.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Fractal- Programming Pradigms vs SYntax&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-23T20:22:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-23T20:22:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;I view all current PLs as mere assembly languages and use PEG to build SCLs on top of them. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Some PLs make &quot;better&quot; targets for automation than others &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;It boils down to unnecessary edge-cases&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; and unnecessary syntactic sugar. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;It is not possible to create a syntax that fits all use-cases. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Paradigms and syntax should be treated orthogonally. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Experimenting with paradigms is not the same as experimenting with syntax&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;An example of PEG being used to help create a PEG-based transpiler is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/18/Little-Language.html&quot;&gt;https://guitarvydas.github.io/2021/03/18/Little-Language.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;e.g. declaration before use&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;This is another instance of fractal-thinking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What we generally consider to be PLs, can be broken down into two sub-components - paradigm and syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Fractal- Programming Pradigms vs SYntax</summary></entry><entry><title type="html">Breaking free of the cell paradigm</title><link href="https://computingsimplicity.neocities.org/2021/03/22/Breaking-Free-of-the-Cell-Paradigm.html" rel="alternate" type="text/html" title="Breaking free of the cell paradigm" /><published>2021-03-22T00:00:00-04:00</published><updated>2021-03-22T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/22/Breaking%20Free%20of%20the%20Cell%20Paradigm</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/22/Breaking-Free-of-the-Cell-Paradigm.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Diagram Languages (SVG)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-22T08:39:22Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-22T08:39:22Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 13.0px Palatino}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px 'Lucida Grande'}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    span.s4 {font: 12.0px Helvetica}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;All Programming Languages are Based on Cells&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;All current PLs are all based on the notions of:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Non-overlapping grids of cells (aka Characters)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Cells are arranged in (Line,offset) space&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Cells imply sequential ordering of statements based on (Line,_) of statements in (Line,offset) space&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Breaking Free&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Diagrammatic syntax can break free of this arrangement, e.g.,&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Shapes can overlap&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Shapes are arranged in (x,y) space&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;No default for statement ordering&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Shapes are few in number, e.g. rects, ellipses, text, lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;SVG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Using SVG as a concrete example…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SVG elements &lt;i&gt;can&lt;/i&gt; take the place of characters in PLs.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SVG implies that &lt;i&gt;text&lt;/i&gt; is not special.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Text&lt;/i&gt; is but one of the possible shapes that can be used in a PL.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Relations might include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;contains&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;intersects&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;color (shape, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SVG has &quot;too much&quot; syntactic noise, for use in a language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is possible to strip the noise from SVG, leaving only enough for the above relationships.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Literate Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Are SVG diagrams a model for&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;literate diagrammatic programming&lt;/i&gt;?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Concurrency Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A suggestion for a language of concurrency:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-03-22-08-39-22-Images/component diagrams-two comonents 2 connections.png&quot; width=&quot;200px&quot; height=&quot;56px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;palegreen rectangles are &lt;i&gt;input ports&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lightyellow rectangles are &lt;i&gt;output ports&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;&lt;/i&gt;any rectangle that is not a port is a software component&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text contained in a rectangle (the smallest enclosing rectangle) is the &lt;i&gt;name&lt;/i&gt; of shape
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;each &lt;i&gt;input&lt;/i&gt; &lt;i&gt;port&lt;/i&gt; must have a name distinct from all other input ports on the diagram&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;each &lt;i&gt;output&lt;/i&gt; &lt;i&gt;port&lt;/i&gt; must have a name distinct from all other output ports on the diagram (input port names can overlap with output port names),&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;&lt;/i&gt;any rectangle that is not a port is a software component
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;all software components must have a name&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;the name of software components is their &lt;i&gt;kind&lt;/i&gt; (aka &lt;i&gt;type&lt;/i&gt;)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lines can begin and end only on ports
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;lines can use &lt;i&gt;path&lt;/i&gt; properties to add eye-pleasing noise (ignored)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;all other shapes are &quot;noise&quot; and are ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/06/Components-(again).html&quot;&gt;https://guitarvydas.github.io/2021/03/06/Components-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Hierarchical State Machine Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;A suggestion for a Hierarchical State Machine&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PL:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;ellipses are states&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text in the middle of an ellipse is the state name&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text at the top of an ellipse is the &lt;i&gt;entry code&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text at the bottom of an ellipse is the &lt;i&gt;exit code&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;arrows can begin and end only on states (incl. nested HSMs)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text on arrows is the &lt;i&gt;transition code&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;circles represent a default entry point
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;only one circle may appear on an HSM diagram&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a transition arrow from a circle &lt;i&gt;must&lt;/i&gt; begin on the circle and end on a state
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;What does text on the default entry transition represent?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Possibility:&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; default entry transition code is executed (once) when the default transition is taken.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;⁃&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;There can only be one transition arrow from a circle&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;an ellipse with a shadow represents a nested state machine (HSM)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;every HSM must list its input ports and output ports explicitly
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;ports (palegreen and lightyellow) can appear anywhere on the diagram and are not explicitly connected to any other PL shapes&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2021-03-22-08-39-22-Images/HSM.png&quot; width=&quot;200px&quot; height=&quot;89px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&quot;&gt;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=j_bN4ZXbCHU&quot;&gt;https://www.youtube.com/watch?v=j_bN4ZXbCHU&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Hybrid Diagrams+Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams may contain text. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Text can express some relationships &quot;better&quot; than diagrams, e.g. mathematical one-in-one-out relationships.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams can express some relationships &quot;better&quot; than text, e.g. network diagrams.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;So-called &quot;visual programming&quot; is often based on the notion of pixels.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams are based on shapes.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Composition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Current PLs encourage thinking in only 2 directions: X &amp;amp; Y.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Tabs&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; are borne of X/Y thinking — tabs go &lt;i&gt;across&lt;/i&gt; but not &lt;i&gt;in.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;HTML hyper-links provide access to the Z (&lt;i&gt;in&lt;/i&gt;) dimension, but this hasn't been fully exploited in PLs.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;Bash&lt;/i&gt; allows composition of concurrent components, but only in a linear manner.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams encourage thinking in 3 dimensions X/Y/Z.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can view a page of diagrams and mouse-over any component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Double-clicking on a component should open a new editor showing the composition of the selected component. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For example,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;If the selected component is composed of a network of other components, then a diagram editor is opened,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;If the selected component is implemented as an HSM&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;, then an HSM diagram editor is opened&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;If the selected component is implemented in some textual 3GL (e.g. Python, JavaScript, etc.), then a code editor is opened.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Old-Fashioned Concepts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The notion of Line/Offset (maybe with footnotes) is borne out of the contraints of using pen and paper.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We, now, have computers that can represent expression (writing, drawing) in 3 dimension X/Y/Z.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Our use of computers is limited by old-fashioned 2D notions, such as &lt;i&gt;desktops, filing cabinets, &lt;/i&gt;etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;IMO, the way to break free from such old-fashioned concepts is to use isolated components that are concurrent.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;3D&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Note that the concept of 3D is, here, taken to be in a simple form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Adding a Z axis does not imply that we need to show diagrams in the Y/Z plane, but only allows us to push into (out out of) components.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We already use 3D in things like tree widgets and hierarchical file systems (especially icon-view) and HTML browsers (links).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Writing of prose is constrained to a mostly-2D paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can write character cells in Line/Offset space and one can only go 1-level deep in Z using footnotes.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Isolation&lt;/span&gt;:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Concurrency&lt;/span&gt;:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/17/concurrency-bare-bones.html&quot;&gt;https://guitarvydas.github.io/2020/12/17/concurrency-bare-bones.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;New Breed HLLs&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/New-Breed-HLLs.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/New-Breed-HLLs.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Drakon&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;http://drakon-editor.sourceforge.net/&quot;&gt;http://drakon-editor.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;IMO, the 3 PDFs are well worth reading&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part1_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part1_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part2_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part2_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part3_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part3_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;(line,offset) instead of (x,y) in pixel space&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; HSMs are StateCharts without orthogonal states.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Orthogonal states can be represented in the above concurrency PL.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; In Drakon, such entry text is used to declare local variables.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;span class=&quot;s4&quot;&gt;Aka filters.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; shapes at pixel coordinates&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; &lt;span class=&quot;s4&quot;&gt;Tabbed views.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Tabbed dialogs.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Bash may provide other dimensions, but does not &lt;span class=&quot;s2&quot;&gt;encourage&lt;/span&gt; their use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Bash pipelines are restricted by character-based thinking.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Hierarchical State Machine (StateCharts sans orthogonal states)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Diagram Languages (SVG)</summary></entry><entry><title type="html">Racket peg</title><link href="https://computingsimplicity.neocities.org/2021/03/19/Racket-PEG.html" rel="alternate" type="text/html" title="Racket peg" /><published>2021-03-19T00:00:00-04:00</published><updated>2021-03-19T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/19/Racket%20PEG</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/19/Racket-PEG.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;PEG&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-19T19:38:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-19T19:38:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    table.t1 {border-collapse: collapse}
    td.td1 {width: 111.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {width: 115.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td3 {width: 108.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td4 {width: 111.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Comparison — REGEX vs PEG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(enough to get started)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;REGEX&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;PEG (Ohm-JS)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Racket (#lang peg)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/abc/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;abc&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'abc'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a*/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; *&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a' *&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;0 or more&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a?/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot;?&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a'?&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;optional (0&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;or 1)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a+/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot;+&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a'+&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;1 or more&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a)(bc)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;(&quot;a&quot;) (&quot;bc&quot;)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;('a') ('bc')&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;grouping / memo&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;\1\2&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;i&gt;rule&lt;/i&gt;:&lt;i&gt; &lt;/i&gt;function (v1, v2) { … }&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;v1:('a') v2:('bc')&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;naming matches&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/[a-z]/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; .. &quot;z&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;[a-z]&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;character class&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/./&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;any&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;.&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;any&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a|b|c)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;('a' / 'b' / 'c')&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;alternates (original thesis used &quot;/&quot;)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; rule&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;v1:('a') v2:rule&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;call rule (in context)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;!&quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;~'a'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;not&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;rule = …&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;rule &amp;lt;— … ;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;define callable rule&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;_&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;whitespace (convention)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&amp;amp;&quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;addOperation ('…',{ …})&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;-&amp;gt; &lt;i&gt;lisp&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;{&quot; … &quot;{&quot; … &quot;}&quot; … &quot;}&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'{' … '{' … '}' … '}'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;nesting&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The most interesting differences between PEG and REGEX are&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;not&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;nested rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The most interesting difference between Racket #lang peg and Ohm-JS is in the naming of matches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In Racket (most PEGs) matches are explicitly tagged with variable names in the PEG grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In Ohm, all matches are tagged as parameters to rules in the semantics section.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;In my opinion, the Ohm idea is better.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It leaves the grammar intact and more readable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One of the problems with REGEX syntax is that it has collected noise over the years, making it even less readable than it originally was.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG vs. YACC&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YACC was built from LR(k) theory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches CFG languages.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG builds recursive-descent parsers.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG can match balanced brackets.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YACC cannot.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YACC is theoretically &quot;more sound&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG is more practical.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The main breakthrough in PEG was the idea of using backtracking during the pattern matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This used to be a &lt;i&gt;verbotten&lt;/i&gt; concept in the late 1900's, but with advances in hardware, the use of backtracking has become practical.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;REGEX is also based on theory and is also &quot;sound&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YACC and REGEX produce state machines.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG produces a TDPL (top down parser, recursive descent).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Pattern Macthing DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEX and PEG are DSLs for pattern matching.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There is little reason to use REGEX instead of PEG, if both are equally available.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;For simple, one-line matches, REGEX might be preferred because&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;it is available in many tools (e.g. sed, awk)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;it is available in many languages (e.g. JavaScript)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;it has a more succinct syntax for small matches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEX syntax often results in unreadable patterns.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEX cannot match nested constructs,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; for example when matching text in programming languages.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;PEG rules are like multiple REGEX patterns that can call each other.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If only one rule is required, REGEX might be a good choice.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In general, though, it is better to use PEG, which allows for later expansion.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When REGEX is grown through maintenance and fixing edge-cases, it usually results in unreadable code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Racket PEG Documentation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;https://docs.racket-lang.org/peg/index.html&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS PEG Documentation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG Thesis&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;You don't need to read this …&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://bford.info/pub/lang/peg.pdf&quot;&gt;https://bford.info/pub/lang/peg.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;REGEX probably can be made to match nested constructs, but requires more effort.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PEG</summary></entry><entry><title type="html">Learning about compilers quickly</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Learning-About-Compilers-Quickly.html" rel="alternate" type="text/html" title="Learning about compilers quickly" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Learning%20About%20Compilers%20Quickly</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Learning-About-Compilers-Quickly.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Learning About Compilers Quickly&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T12:39:37Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T12:39:37Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px Helvetica}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Smallc&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I learned just about everything I needed to know about compilers in only a few hours at CSRI&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I subscribed to Dr. Dobb's Journal of Computer Calisthenics &amp;amp; Orthodontia.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In it was published the source code to Small C (Ron Cain).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was before open source existed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Finding the source code to &lt;i&gt;anything&lt;/i&gt; was a delight.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; was an MSc student and I was but a lowly undergrad.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My friend invited me to CSRI for the evening and we typed in &lt;i&gt;all &lt;/i&gt;of the source code for the C compiler into the Unix V7 system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Around 2am in the morning, we were finished and I typed in my first line of C code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I knew 8080 (nee Z80) assembler at the time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I typed something like:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;a = b + c;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and SmallC responded with something like:&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;; a = b + c;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV L,(name of b)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CLR H&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV C,(name of c)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CLR B&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DAD B&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV (name of a),L&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV (name of a + 1),H&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;from this, I could see what &quot;a = b + c&quot; compiled into.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This basically says:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Load one byte into register L&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Clear the H register (which is paired with L to make at 16-bit quantity HL)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Load one byte into register C&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Clear the B register (BC is paired, as above for HL)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;DAD B — 16bit add HL = HL + BC&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Move the lower byte from L into memory (at a)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Move the higher byte from H into memory (at a+1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(and, it says, to do the steps in the given sequence (not, say, in parallel)).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The code above is quite simple — it is raw 8080 code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It avoids all details, such as startup and shutdown,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It was easy to see what the compiler was doing for me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Basically, the compiler was like an editor macro.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Smoke Test&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I went on to do a 6-month project for one of my courses.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was intending to install a better parser&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;, but I ended up rewriting the whole thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the end of the course, my compiler was running, but needed testing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I, carefully, applied one test after another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend asked me to send him the source code.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On Friday, before the weekend.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;On Sunday, he sent me a list of about 100 bugs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was astounded.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I fixed the bugs and the compiler quickly took shape.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked my friend how he found so many bugs in only 2 days.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He replied that he simply poured the compiler source code into itself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In EE, this is called a &quot;smoke test&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You build the alpha version of a circuit, turn on the power and watch for smoke.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If there's no smoke, you do more careful testing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Software testing could benefit from using this same technique for divide-and-conquer:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;smoke test&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;careful (unit) testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The smoke test — a lot of tests all at once — can be used to find blunders and typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is not worth running unit tests until the blunders have been cleared away.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Computing Systems Research Facility at the University of Toronto&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Dr._Dobb%27s_Journal&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Chris Lewis&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;My memory is hazy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Someone will correct me…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Note that K&amp;amp;R was more forgiving at the time — I didn't need to declare a, b, and c before asking the compiler to give me code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Note that the 8080 was little-endian, the low-byte ended up in the lower (numerically) address and the high byte ended up in the address+1.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; &lt;span class=&quot;s2&quot;&gt;twot-threet&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The compiler was written in C for Unix V7 running on a PDP-11.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My compiler emitted code for the 8080, running CP/M&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Learning About Compilers Quickly</summary></entry><entry><title type="html">How to design an scl</title><link href="https://computingsimplicity.neocities.org/2021/03/18/How-To-Design-An-SCL.html" rel="alternate" type="text/html" title="How to design an scl" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/How%20To%20Design%20An%20SCL</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/How-To-Design-An-SCL.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;How To Design An SCL&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T18:08:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T18:08:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Design a Good SCL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Q: How do you design a good SCL?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;find a good toolbox language &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;learn PEG&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;practice (How does a musician get to Carnegie Hall?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Practice)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It used to take years to write one language, even a DSL.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;With PEG, you can crank out an SCL in about one day.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The more iterations you make, the better you will become.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ice Wine&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Germany invented Ice Wine, but Canada makes better Ice Wine. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Why?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;You need 3 days of -8C weather before picking Ice Wine grapes.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In Germany, they get this kind of cold spell about twice per decade.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In southern Ontario, Canada, they get this kind of cold spell every year.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Canadian wineries make Ice Wine 5X more often than German wineries.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;You learn through making mistakes. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Canadians get to make mistakes more frequently than Germans.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Hence, Canadians came down the learning curve in less elapsed time.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Hence, Canadian Ice Wine is better.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies are bad.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Learn how to build SCL's that don't have dependencies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use the n2k principle &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you build a little language that wants to do type-checking across files, don't.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Build a transpiler that does what it can with what it's got (i.e. only one file).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Defer the type check.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Build another SCL that joins two files and does the type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Both SCLs will be simpler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you want to &quot;practice&quot; eschewing dependencies, try not using &lt;i&gt;make, npm, &lt;/i&gt;or any of the other bandaids.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See how your thinking changes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Write SCLs that defer dependency checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How about the call stack?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It makes dynamic, global, data structure to track dependencies at run time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How can you not use the call stack?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Or, use it less?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&quot;&gt;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You can't&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;build a flexible system if it's not layered.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the details sink to the bottom and the user — who wants the flexibility to modify — is faced with a wall of detail&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Emacs is like that.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I bought a hard copy of the emacs manual some 3 decades ago.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was only 600 pages back then.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;TL;DR.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs is totally customizable, but it's hard to know where to start.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You learn emacs looking over someone else's shoulder — YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I know only enough emacs commands to get me through, and you can bet that I won't bother switching editors, lest I get another steep learning curve.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Common Lisp is a wall of detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Common Lisp does everything.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And everything is standardized and documented.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You have to love reading legalese, though.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I know only enough Common Lisp to get me through.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I lean on the CLHS a lot, even after a couple of decades of use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You'd think that I would be an expert now, but I learn something new every time I talk to another lisper.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;open source&lt;/i&gt; movement is a wall of detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Sure, I can download just about everything from github, but, fixing any of it is a serious commitment.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The UNIX® manuals were &lt;i&gt;not &lt;/i&gt;like that.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;1 or 2 pages each.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Just enough to get you started.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Books and more details on request.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It &lt;i&gt;is&lt;/i&gt; possible to use layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Structured Programming gave us layers over GOTO-full programming.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Global variables fell to locally-scoped variables.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OO gave us modular design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FP hides state.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What about types?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How do you hierarchicalize types?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What about message-passing?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use diagrams and composition (instead of inheritance) to make hierarchical message-based systems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OSI told us to build layered messages.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pipes - Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;One of the ideas the UNIX® pipes brought is elusively simple — isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can't convert a shell script to a &amp;lt;pick-your-language&amp;gt; program.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Because most languages use the stack.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The stack is a global variable and there's only one stack.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread Safety is an accidental complexity caused by trying to use the calculator paradigm to solve a non-calculator problem (e.g. sequencing).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bash has ugly syntax, and suffers from feature-itis.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Strip all of the gunk away, until you are left only with pipes — no variables, no string concatenation, no conditionals, no environment variables.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bash, also, makes multi-tasking harder to use, than necessary, because of its insistence on the rendezvous model and textual code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can draw a diagram on a whiteboard of a network.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You can't draw a diagram of a bash script on a whiteboard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Strip everything away and build only an SCL that gives you pipes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want variables, build another SCL at another level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want environment variables, build another SCL at another level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Don't slam the kitchen sink into the SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Make it do only one thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Start by build an SCL which is a like a shell that gives you multiple processes (threads) and lets you join them up with pipes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use a diagram as your syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(You are allowed to hand compile the diagram, but it is easy enough to compile diagrams to code).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that &quot;+&quot; and &quot;cons&quot; and &quot;arrays&quot; don't figure in such a simple whiteboard-SCL.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Design the SCL ; Don't Use Existing Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Write your target problem out in its minimal form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You are not allowed to use Python, JavaScript or any other programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The problem with DSLs is that they are too general.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An SCL is meant to be one-time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One problem, one SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Not a DSL&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Your target problem does not include a general solution for something, e.g. how to use A.I, how to use a database, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Your target problem is &quot;what does the user want and how will you solve it?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part of the target problem is a UX - that's one SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part of the target problem is how you will store the information - that's another SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part of the target problem is how you are going to process the information to produce a useful (to your user) result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That's at least one SCL, if not more than one SCL.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Happy Path&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Most PL creators want to make it &quot;simple&quot; to express the &lt;i&gt;happy path&lt;/i&gt; while eliding details such as error conditions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A good starting point for this kind of thinking is the set of rules for creating Drakon diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part1_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part1_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part2_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part2_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part3_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part3_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I favour a different notation, but Drakon is a good place to start to widen one's horizons&lt;/i&gt;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Possiblities&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Textual notation is good for one-in-one-out operations, like functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Everything else isn't handled well with textual notation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Structured Programming prescribed one input and one output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule was broken by languages that support syntax for exceptions (one in, two outs).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that bash syntax flatlines at one-in, two-out (stdin, stdout, stderr).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Real life operations don't follow the above rules.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, lowly JavaScript has this very problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JavaScript defines a FileReader object with &lt;i&gt;six&lt;/i&gt; possible outcomes&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; (called events) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/FileReader&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The textual code for handling these events is a mess.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, it is easy to draw a diagram of this object…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-03-18-18-08-06-Images/FileReader.png&quot; width=&quot;100px&quot; height=&quot;119px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Just the act of drawing it out got me to reduce the API down to 4 useful outcomes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The happy path is &lt;span class=&quot;s1&quot;&gt;req—&amp;gt;resp&lt;/span&gt; (request, response).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the user hits CANCEL, we get an ABORT event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If there is some internal error (e.g. file not found), we get an ERR event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the network times out, we get a TIMEOUT event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I posit that this is easier to understand than the textual version.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can you use this &lt;i&gt;right now&lt;/i&gt;?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Yes, just draw it on a whiteboard.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can we build SCLs like this?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Yes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will show how to compile SVG to code in an upcoming essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is actually easier if you don't already know how to build compilers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Drakon was built using Tcl/Tk.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I suggest something even simpler.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;and so does assembler&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;One stack per CPU, one stack per CPU&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Not to mention the other 3 properties.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This paradigm does not map easily onto CALL/RETURN paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Having a Dispatcher will make things easier.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You can map this onto bash using &quot;&amp;amp;&quot; syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most other languages need the use of thread libraries to make this work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Trying to build components using CALL/RETURN languages (just about every language) will end up in accidental complexity (CALL/RETURN uses the stack, the stack is a global variable built into the hardware, going this route is possible, but runs into issues like thread safety (because of the global variable)).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This can also be implemented using closures (anonymous functions with state).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">How To Design An SCL</summary></entry><entry><title type="html">Divide and conquer in pls</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Divide-and-Conquer-in-PLs.html" rel="alternate" type="text/html" title="Divide and conquer in pls" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Divide%20and%20Conquer%20in%20PLs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Divide-and-Conquer-in-PLs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Divide and Conquer in PLs&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T08:46:04Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T08:46:04Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Divide and Conquer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I think that the current crop of PLs — e.g. Python, JavaScript, etc. — show a distinct lack of divide-and-conquer mentality. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IMO, everything should be a function call until the termination case is encountered in the recursive design. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It should not be possible to use operators other than function calls except at the leaf levels. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, &quot;+&quot; should not appear in any code except the very lowest-level code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Likewise, &quot;cons&quot; and array operations. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers can optimize-away function calls by making them into inline (macro) calls. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;AFAICT, most PLs allow unrestricted use of low-level operations (like &quot;+&quot;, cons, arrays) at any level of the design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Low-level operations are like GOTOs — they should be avoided and &lt;i&gt;structured&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Divide and Conquer in PLs</summary></entry><entry><title type="html">Testing</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Testing.html" rel="alternate" type="text/html" title="Testing" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Testing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Testing.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Testing&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T17:28:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T17:28:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I describe some of the testing techniques I encountered.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some of these techniques were for hardware testing, but might give ideas for software testing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Back to Back Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Mitel built PBXs.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the very end of testing, we took two &quot;finished&quot; PBXs and pointed them at each other. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The PBXs would self-test by calling each other many times.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One should be able to do this with a class.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Make two instances, then have the instances talk to one another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If this sounds hard and undoable, your organization needs a Test Engineer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Someone whose job it is to kibitz designers on how to make their classes more testable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If this becomes a UX issue, look at sikulix, &lt;a href=&quot;http://sikulix.com/&quot;&gt;http://sikulix.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Regression Testing (HP Trace Analyzer)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We used regression testing on hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CI tools do this now.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For hardware, we took a &quot;golden&quot; known-to-be-working board and used an HP Trace Analyzer on it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It recorded repeatable signatures (collapsed down to some kind of hash value) for certain input streams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Boards/circuits-under-test were deemed &quot;good&quot; if they generated the same signatures (for the same inputs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the signatures were wrong, the circuit-under-test would be put aside for further testing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Coverage Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;When alpha-testing software, we used &lt;i&gt;coverage testing&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We created an input dataset that hit every piece of code at least once.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This got rid of blunders and typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Designers also discovered dead code with this test.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using SCLs makes this option particularly attractive.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Since the code is generated, we could modify the transpilers to insert anything into the generated code and have it automagically appear.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NorTel&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;NorTel used to have a policy about bug fixes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bug fixes did not remove code, they just added edge-cases that were specialized to find and shunt only the conditions that made the bugs appear.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The fixes went into the shunt.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The original code was mostly left alone.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Telecoms, like NorTel, Mitel and Bell used to pride themselves on &lt;i&gt;four nines &lt;/i&gt;guarantees.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They guaranteed that their systems would have uptimes of 99.99%.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Banking Y2K&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We worked on the Y2K problem at some big banks.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;They had a policy that they would not test during the work week.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Testing could only be done on Saturdays, leaving Sundays for reverting back to the previous code if problems occurred.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Furthermore, one weekend was reserved for month-end consolidation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Another weekend was reserved for &quot;maintenance&quot; upgrades.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I forget what the third weekend was reserved for, but we were left with one day every month (1 Saturday for new code, 1 Sunday for reverting if needed).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, there was year-end.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data spread was uneven, because month-ends came at different times.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We couldn't just generate fake data in a repetitive manner, we had to fake the calendar and all month-ends.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Generating the fake data needed as much compute-power as was used for live banking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Starting in, say 1996, the Banks needed to generate 4 years worth of fake data but could only test it on one day of every month. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most of the code was written in COBOL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some in assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Not all source code could be found.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some of the &quot;date&quot; affected code had names like &quot;Nancy&quot;, &quot;Jane&quot;, etc.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Banks were set up to touch maybe 5% of their code per year.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Y2K problem affected something like 30% of the code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;testing&lt;/i&gt; problem turned out to be harder than the actual &lt;i&gt;fixing&lt;/i&gt; problem.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We started by trying to auto-fix the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This affected too much of the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the end, we just generated reports and let the maintainers fix the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Their wetware made the effort possible — they could tell which things really needed to be fixed and which were red herrings.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Fancy computer-controlled telephone switches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Telephone lines were mostly analogue at the time.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; &lt;span class=&quot;s1&quot;&gt;This is not a new idea.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Testers would come back to designers and ask how to push the code so that it hit certain routines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;After scratching their heads, designers would - sometimes - realize that certain code was unreachable and would lance such unreachable code from the codebase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was always a surprise when dead code was found - it looked useful, but couldn't be reached and the compilers couldn't detect the problem.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;/span&gt;The original programmer's female dates.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Names that were suggestive enough to raise the eyebrows of the auto-detection software.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Only about 200 programmers were allocated to the job of fixing bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Testing</summary></entry><entry><title type="html">The f**k program</title><link href="https://computingsimplicity.neocities.org/2021/03/18/The-F-k-Program.html" rel="alternate" type="text/html" title="The f**k program" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/The%20F**k%20Program</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/The-F-k-Program.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The F**k Program&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T12:40:05Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T12:40:05Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;F**K.C&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At CSRI, I learned that there was a program called f**k&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.c.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I looked at the source code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It contained all sorts of harmful actions that would, literally, break physical devices (such as printers, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the code was carefully commented out.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;End of Session&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;After some playing around, I typed&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;gt; f**k me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My session ended abruptly.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;That word was very verbotten at the time.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The F**k Program</summary></entry></feed>