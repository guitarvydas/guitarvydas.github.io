<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-04-26T18:23:57-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Factbases 101</title><link href="https://computingsimplicity.neocities.org/2021/04/26/Factbases-101.html" rel="alternate" type="text/html" title="Factbases 101" /><published>2021-04-26T00:00:00-04:00</published><updated>2021-04-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/26/Factbases%20101</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/26/Factbases-101.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Factbases 101&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-26T12:11:30Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-26T12:11:30Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: lower-alpha}
    ol.ol2 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I show two very simple factbases and their implementation in JavaScript, PROLOG and Lisp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Incidentally, the discussion shows how to begin compiling diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;id1 is a rectangle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id1 is at (x,y) position (20,10).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id1 has width 120.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id1 has height 80.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-04-26-12-11-30-Images/Rectangles-OneRectangle.png&quot; width=&quot;121px&quot; height=&quot;81px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Triples&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A triple is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;relation (subject, object)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;no noise format:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle id1 null&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x id1 20&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y id1 10&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width id1 120&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height id1 80&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;var id1 = {kind: &quot;rect&quot;, x: 20, y: 10, width: 120, height: 80};&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var fb = [{id: &quot;id1&quot;, kind: &quot;rect&quot;, x: 20, y: 10, width: 120, height: 80}];&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var fb = [&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;rect&quot;, subject: &quot;id1&quot;, object: null},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;x&quot;, subject: &quot;id1&quot;, object: 20},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;y&quot;, subject: &quot;id1&quot;, object: 10},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;width&quot;, subject: &quot;id1&quot;, object: 120},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;height&quot;, subject: &quot;id1&quot;, object: 80}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PROLOG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id1,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id1,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id1,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id1,15).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id1,15).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;(rectangle id1 nil)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(x id1 10)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(y id1 10)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(width id1 15)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(height id1 15)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase With 2 Rectangles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;id1 is a rectangle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id1 is at (x,y) position (10,10).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id1 has width 15.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id1 has height 15.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id2 is a rectangle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id2 is at (x,y) position (9,15).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id2 has width 2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;id2 has height 2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-04-26-12-11-30-Images/Rectangles-TwoRectangles.png&quot; width=&quot;131px&quot; height=&quot;81px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Triples With 2 Rectangles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle id1 null&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x id1 10&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y id1 10&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width id1 15&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height id1 15&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle id2 null&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x id2 9&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y id2 15&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width id2 2&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height id2 2&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript With 2 Rectangles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;var id1 = {kind: &quot;rect&quot;, x: 10, y: 10, width: 15, height: 15};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var id2 = {kind: &quot;rect&quot;, x: 9, y: 15, width: 2, height: 2};&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var fb = [&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{id: &quot;id1&quot;, kind: &quot;rect&quot;, x: 10, y: 10, width: 15, height: 15},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{id: &quot;id2&quot;, kind: &quot;rect&quot;, x: 9, y: 15, width: 2, height: 2},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;];&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var fb = [&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;rect&quot;, subject: &quot;id1&quot;, object: null},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;x&quot;, subject: &quot;id1&quot;, object: 10},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;y&quot;, subject: &quot;id1&quot;, object: 10},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;width&quot;, subject: &quot;id1&quot;, object: 15},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;height&quot;, subject: &quot;id1&quot;, object: 15}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;rect&quot;, subject: &quot;id2&quot;, object: null},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;x&quot;, subject: &quot;id2&quot;, object: 9},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;y&quot;, subject: &quot;id2&quot;, object: 15},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;width&quot;, subject: &quot;id2&quot;, object: 2},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{relation: &quot;height&quot;, subject: &quot;id2&quot;, object: 2}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PROLOG With 2 Rectangles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id1,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id2,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id1,20).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id2,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id1,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id2,40).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id1,120).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id2,20).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id1,80).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id2,20).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In PROLOG, &quot;or&quot; relationships are most often written as multiple versions of a rule (PROLOG also has semi-colon syntax, but I won't discuss it here).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG wants all rules with the same name, bunched together.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® &lt;i&gt;sort&lt;/i&gt; can be used to group rules together.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above factbase is sorted, e.g. all &lt;span class=&quot;s1&quot;&gt;rectangle&lt;/span&gt; rules appear sequentially, all &lt;span class=&quot;s1&quot;&gt;width&lt;/span&gt; rules appear sequentially, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no requirement about the order in which rules must appear (e.g &lt;span class=&quot;s1&quot;&gt;width&lt;/span&gt; rules could appear before &lt;span class=&quot;s1&quot;&gt;rectangle&lt;/span&gt; rules, and so on).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the above example, sort has put rules in strict alphabetic order — this is not necessary, but is convenient (&lt;span class=&quot;s1&quot;&gt;sort&lt;/span&gt; ensures that all rules are grouped together (required) &lt;i&gt;and &lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;sort&lt;/span&gt; ensures that groups appear in alphabetic order (not required, but there is no harm in accepting what &lt;span class=&quot;s1&quot;&gt;sort&lt;/span&gt; does)).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp With 2 Rectangles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;(rectangle id1 nil)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(x id1 10)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(y id1 10)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(width id1 15)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(height id1 15)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(rectangle id2 nil)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(x id2 9)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(y id2 12)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(width id2 2)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(height id2 2)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Obervations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;All forms encode the same information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;JavaScript form 1 is human readable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The factbase form is less human readable (aka &lt;i&gt;ugly&lt;/i&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.G. JavaScript form 1 is more human-readable than JavaScript form 3.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: which forms are easier to automate? (aka to &lt;i&gt;script&lt;/i&gt;)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;sub-Q: which forms are more machine-readable?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Keep these questions in mind as we look at some queries&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;We will deal only with the 2-rectangle factbases.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Layer 0 queries:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;What id's are rectangles?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Is rectangle id1 bigger than rectangle id2?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Is rectangle id2 bigger than rectangle id1?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Does id1 intersect id2?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Does id2 intersect id1?&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Answers:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;id1, id2&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;yes&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;no&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;yes&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;yes&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sub-Query - Bounding Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Answering query (d) and (e) is easier if we create a bounding box for all rectangles first.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A bounding box is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;left x&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;top y&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;right x&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;bottom y.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var id1 = {kind: &quot;rect&quot;, x: 10, y: 10, width: 15, height: 15};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var id2 = {kind: &quot;rect&quot;, x: 9, y: 15, width: 2, height: 2};&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;answerA = [];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;if (id1.kind === &quot;rect&quot;) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;answerA.push (id1);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;if (id2.kind === &quot;rect&quot;) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;answerA.push (id2);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;//console.log (answerA);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;/////&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var id1 = {id: &quot;id1&quot;, kind: &quot;rect&quot;, x: 10, y: 10, width: 15, height: 15};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var id2 = {id: &quot;id2&quot;, kind: &quot;rect&quot;, x: 9, y: 15, width: 2, height: 2};&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;answerAprimed = [];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;if (id1.kind === &quot;rect&quot;) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;answerAprimed.push (id1);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;if (id2.kind === &quot;rect&quot;) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;answerAprimed.push (id2);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;console.log (answerAprimed);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;for (r of answerAprimed) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (r.id);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;///////&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var fb = [&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{id: &quot;id1&quot;, kind: &quot;rect&quot;, x: 10, y: 10, width: 15, height: 15},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{id: &quot;id2&quot;, kind: &quot;rect&quot;, x: 9, y: 15, width: 2, height: 2},&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;for (obj of fb) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (obj.kind === &quot;rect&quot;) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (obj.id);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;/// query b ///&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;/// is rectangle id1 bigger than rectangle id2? ///&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function area (obj) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var width = obj.width;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var height = obj.height;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return width * height;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function bigger (obj1, obj2) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var area1 = area (obj1);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var area2 = area (obj2);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return (area1 &amp;gt; area2);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function fetch (id) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return fb.find (obj =&amp;gt; id === obj.id);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;console.log ();&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;console.log (`(b) id1 is bigger than id1: ${bigger(fetch (&quot;id1&quot;), fetch (&quot;id2&quot;))}`);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;/// query (c)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;console.log (`(c) id2 is bigger than id1: ${bigger(fetch (&quot;id2&quot;), fetch (&quot;id1&quot;))}`);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;//////// sub-query - bounding boxes //////////&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;for (obj of fb) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (obj.kind === &quot;rect&quot;) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;obj.bounding_box_left = obj.x;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;obj.bounding_box_top = obj.y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;obj.bounding_box_right = obj.x + obj.width;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;obj.bounding_box_bottom = obj.y + obj.height;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;//console.log (obj);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function intersects (subject, object) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// left side&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (subject.bounding_box_left &amp;lt;= object.bounding_box_left) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;if (subject.bounding_box_right &amp;gt;= object.bounding_box_left) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return true;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// right side&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (subject.bounding_box_left &amp;lt;= object.bounding_box_right) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;if (subject.bounding_box_right &amp;gt;= object.bounding_box_right) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return true;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// top&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (subject.bounding_box_top &amp;lt;= object.bounding_box_top) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;if (subject.bounding_box_bottom &amp;gt;= object.bounding_box_top) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return true;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// bottom&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (subject.bounding_box_top &amp;lt;= object.bounding_box_bottom) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;if (subject.bounding_box_bottom &amp;gt;= object.bounding_box_bottom) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return true;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return false;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;console.log (`(d) id1 intersects id2: ${intersects (fetch (&quot;id1&quot;), fetch (&quot;id2&quot;))}`);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;console.log (`(e) id1 intersects id2: ${intersects (fetch (&quot;id2&quot;), fetch (&quot;id1&quot;))}`);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PROLOG Queries&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id1,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id2,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id1,20).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id2,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id1,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id2,40).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id1,120).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id2,20).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id1,80).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id2,20).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;main(Intersections) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;setof([IDa,IDb],intersects(IDa,IDb),Intersections).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;area(Subject,A) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;width(Subject,W),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;height(Subject,H),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;A is H * W.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bigger(Subject, Object) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;area(Subject,As),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;area(Object,Os),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;As &amp;gt; Os.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;left(R,X1) :- x(R,X1).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;top(R,Y1) :- y(R,Y1).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;right(R,X2) :- x(R,X1),width(R,W),X2 is X1 + W.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bottom(R,Y2) :- y(R,Y1),height(R,H),Y2 is Y1 + H.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;% left side&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;intersects(Subject,Object) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;dif(Subject,Object),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;left(Subject,SubjX1),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;left(Object,ObjX1),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjX1 =&amp;lt; ObjX1,&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;right(Subject,SubjX2),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjX2 &amp;gt;= ObjX1.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;% right side&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;intersects(Subject,Object) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;dif(Subject,Object),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;left(Subject,SubjX1),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;right(Object,ObjX2),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjX1 =&amp;lt; ObjX2,&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;right(Subject,SubjX2),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjX2 &amp;gt;= ObjX2.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;% top&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;intersects(Subject,Object) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;dif(Subject,Object),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;top(Subject,SubjY1),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;top(Object,ObjY1),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjY1 =&amp;lt; ObjY1,&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bottom(Subject,SubjY2),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjY2 =&amp;lt; ObjY1.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;% bottom&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;intersects(Subject,Object) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;dif(Subject,Object),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;top(Subject,SubjY1),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bottom(Object,ObjY2),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjY1 =&amp;lt; ObjY2,&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bottom(Subject,SubjY2),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;SubjY2 =&amp;lt; ObjY2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Basics&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - Capitalization&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG uses capitalization to differentiate between Logic Variables and everything else.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Logic Variables begin with capital letters, and everything else begins with lower-case letters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A Logic Variable is much like a variable in most languages, but, Logic Variables take on possibly many different values during exhaustive search.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Logic Variables capture snapshots during matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A single logic variable can hold only one value at a time, but that value might change during each wave of pattern matching (see below).&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - Exhaustive Search&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG matches patterns in waves.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each wave matches one specific instance of the pattern.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each wave sets Logic Variables to single specific values, but the values might be different in each wave.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, let us consider the query&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(ID,Value).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first pattern-matching wave returns X=id1 and Value = 20.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The second pattern-matching wave returns X=id2 and Value = 10.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;At the REPL, we can ask to see successive waves using a semi-colon.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - Rules&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG programs consist of &lt;i&gt;rules&lt;/i&gt; of the form&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;head(…) :- body(…).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rules are almost like &lt;i&gt;functions&lt;/i&gt; in other languages, except that &lt;i&gt;low-level&lt;/i&gt; &lt;i&gt;operations&lt;/i&gt; can appear in the left-hand side as well as in the right-hand side.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rules specify assertions about the problem space and allow the PROLOG engine to decide how to implement the details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Assertions are &lt;i&gt;declarative&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, the definition of the &lt;i&gt;member&lt;/i&gt; rule in PROLOG might be&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;member(X, [X|_]).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;member(X, [_|Rest]) :- member(X, Rest).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Here, we assert that there are two OR'ed-together rules that define list membership.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The first rule says that X is a member of a list if X is the head of a list.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Otherwise, recur using the second rule.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The second rule says that X is a member of a list, if X is the member of the smaller list &quot;Rest&quot; (the head is peeled off leaving a smaller list).&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - AND&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In PROLOG, the AND of two rules is signified by a comma (,).&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - OR&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In PROLOG, the OR of two rules is signified by repetition of the rule with slightly different body code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - Rule Clustering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In PROLOG, all rules that have the same name must be clustered together.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - Arity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In PROLOG, rules are denoted by the number of arguments they take.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The number of arguments is call &lt;i&gt;arity&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Internally, rules are denoted as name/N, where N is the &lt;i&gt;arity.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in the above member rules, the rules are internally called &lt;span class=&quot;s1&quot;&gt;member/2&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Because rules are name-mangled to include their arity, it is possible to have rules that look the same in the source code, but have different arities.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PROLOG Basics - Two-Way Evaluation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Because PROLOG rules&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; cannot specify implementation, PROLOG rules can run in two directions.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This seems unusual, at first, to programmers who are accustomed to using popular languages like Python, Javascript, /bin/sh, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An extreme form of the use of relational two-way evaluation can be seen in the Barliman project&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A less-extreme version is the ability to create various queries at the PROLOG REPL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, we could write&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(ID,_).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and get two results (ID=id1 and ID=id2) at the REPL&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reading&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Declarations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first 10 lines define the facts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each fact is of the form &lt;span class=&quot;s1&quot;&gt;relation(Subject,Object)&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id1,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle(id2,nil).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id1,20).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(id2,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id1,10).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(id2,40).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id1,120).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(id2,20).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id1,80).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(id2,20).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;span class=&quot;s1&quot;&gt;rectangle&lt;/span&gt; facts declare the existence of two rectangles, &lt;span class=&quot;s1&quot;&gt;id1&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;id2&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;object&lt;/i&gt; is &lt;span class=&quot;s1&quot;&gt;nil&lt;/span&gt; in these cases — no further data is supplied in the declarations.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The x(), y(), width() and height() facts associate an integer with each of the dimensions of the rectangles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In imperative languages, we might have written&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;var id1 : rectangle;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;id1.x = 20;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;id1.y = 10;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;id1.width = 120;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;id1.height = 80;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;but, that would have been too structured for my liking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(PROLOG lets one express these relationships more succinctly, but I desire a machine-readable normal form, and like with assembler, human-readability is secondary).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that the ID (id1 and id2) in a factbase acts like an&lt;i&gt; object-pointer&lt;/i&gt; in other languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Using &lt;i&gt;object+attributes&lt;/i&gt; makes sense from a &lt;i&gt;human&lt;/i&gt;-readability perspective, but normalizing &lt;i&gt;everything&lt;/i&gt; makes more sense from a &lt;i&gt;machine&lt;/i&gt;-readability perspective.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case, the &lt;i&gt;pointer&lt;/i&gt; is the &lt;i&gt;Subject&lt;/i&gt; of most facts, and, everything is expressed in &lt;span class=&quot;s1&quot;&gt;relation(Subject,Object)&lt;/span&gt; form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is no concept of &lt;i&gt;pointers&lt;/i&gt; vs. &lt;i&gt;attributes&lt;/i&gt; in the &lt;i&gt;machine&lt;/i&gt;-readable version&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Bounding Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The rules &lt;i&gt;left, top, right&lt;/i&gt; and &lt;i&gt;bottom&lt;/i&gt; define the rules for bounding boxes for rectangles (we might need to embellish these rules if we were to add ellipses and other kinds of shapes).&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Area&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The rule &lt;i&gt;area&lt;/i&gt; defines a way to calculate the area of a rectangle.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Bigger&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The rule &lt;i&gt;bigger&lt;/i&gt; shows one way&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; to determine if one rectangle is bigger than another.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Intersects&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;intersects&lt;/i&gt; rule is defined in 4 variants.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first variant fires and succeeds if:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;Subject and Object are not the same rectangle (dif())&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;subject.x1 &amp;lt;= object.x1, and,&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;subject.x2 &amp;gt;= object.x1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The other variants are similar.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;Again, the rules are, intentionally, over-simplifications.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See my further essay(s) on this subject for a more detailed description of the calculation and design rules for intersection.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Running the PROLOG Query&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To run the PROLOG factbase queries:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&amp;gt; swipl&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;?- consult(fb).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;?- main(X).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Exhaustive Search is a Strange Beast&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Exhaustive search can provide some surprises to mortal programmers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, if we change main to:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;main(Intersections) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bagof([IDa,IDb],intersects(IDa,IDb),Intersections).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;we get&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Intersections = [[id2, id1], [id1, id2], [id2, id1]].&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;noting that [id2, id1] appears twice in the result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;We changed &lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;setof&lt;/span&gt;&lt;i&gt; to &lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;bagof&lt;/span&gt;&lt;i&gt;, that's all.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why does [id2,id1] appear twice?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Id2 intersects id1 with id2's top and id2's bottom.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Exhaustive search gives us &lt;i&gt;all&lt;/i&gt; of the possible answers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;setof&lt;/i&gt; call sorts and unique-ifies the answer set.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We could also have used PROLOG &lt;i&gt;cut&lt;/i&gt; (see PROLOG documentation) to stop matching after the first successful result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BTW, we could have just written a query at the REPL:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;intersects(IDa,IDb).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(and ask for multiple results by hitting the semi-colon key, until there are no more results).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;FYI - the Haskell language and friends, riff on this idea of pattern matching and exhaustive search.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compiler technology — parsing in particular — riffed on the ideas of pattern matching decades ago.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG is pattern matching with backtracking.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers must consider details that are glossed-over by Architects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(This is not a bad thing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Architects need to elide details to be able to think about the designs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Engineers dot the I's and cross the T's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This same kind of elision happens in other fields, for example mathematics — math equations are usually kept terse (using single-letter names) to allow thinking about the bigger picture.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, engineers must consider…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What if either rectangle is a point? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What if any line is a point?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What if lines are parallel? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;Top and Bottom should be parallel. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Left and Right should be parallel. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;What if Top is parallel to Left? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;Side note: Currently, programmers do all of the tasks, Architecture, Engineering, Implementation, Testing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some people are better at Architecture.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some are better at Engineering. Some are better at Implementation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some are better (more evil) at testing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, we pay programmers at a high rate to consider all of the tasks &quot;at once&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This could be cost-reduced by introducing stratification and layering to the organizations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An example would be the stratification that has evolved in building construction.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Optimization Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What about efficiency? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rearrange lines to give better performance? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use cut?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Cut is considered to be impure).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Meta-Question&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The answers to the above queries are &quot;obvious&quot; — we just eye-ball the factbase — but, how can we write code such that the computer can derive these answers for us? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When we get into production level factbases, we might have lots of rectangles and we might miss eye-balling some relationships and queries.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Humans are notoriously bad at repetitive tasks such as this.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Computers are great at doing repetitive tasks. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How can we write programs that will answer these repetitive queries, so we don't have to do the work ourselves? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Answer: automate, write scripts, write pipelines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use automation stacked upon other automation stacked upon other automation and so on.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Layers and layers of automation. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So, the meta-meta-question becomes — what makes it easy to write automation scripts? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We are lazy — what is the easiest way to stack scripts?&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Side note: whatever we are doing now doesn't stack very well, and we are hitting a wall.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;APIs are just too complicated to stack effectively.&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We've tried structuring data to make it understandable, but that has its limits, too. The more that the data is structured, the less machine-readable it becomes, hence, the harder it becomes to write scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Edge-cases kill opportunities for automation.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Compiler-writers have been figuring this stuff out, but they are interested in job security and want to make it look too complicated for use by mere mortals.&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Someone released REGEX from its compiler-writers' cage and it is useful. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What's next?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries - Components&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Gedanken experiment:&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let us &lt;i&gt;adopt&lt;/i&gt; the &lt;i&gt;convention&lt;/i&gt; that only the biggest rectangles represent software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Queries:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;What are the ids of all of the software components?&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Answers&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;id1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;How did we arrive at this answer?&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Sub-queries:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;A rectangle is big if it has no&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; other rectangles bigger than it.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;forall rectangles R&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;forall rectangles X, &lt;i&gt;different&lt;/i&gt; from R&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if isBigger(X,R) then&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;R is definitely not a Component, and,&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;X might be a Component&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;then, forall rectangles Y&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;if mightBeAComponent(Y) then&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;Y is a Component&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;FYI - exhaustive search of the first set of foralls guarantees that all left-overs must be Components&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;i&gt;meta-question&lt;/i&gt;: can you do the above queries without using flags? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;i&gt;answer&lt;/i&gt;: no, you &lt;span class=&quot;s2&quot;&gt;have&lt;/span&gt; to use flags, but, maybe you can &lt;span class=&quot;s2&quot;&gt;elide&lt;/span&gt; the flags (different wording: maybe the computer can set the flags for you, because humans are bad at this sort of thing)&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;spoiler: PROLOG does this kind of exhaustive search and sets bookmarks, but you don't have to worry about the bookmarking, PROLOG does it for you&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;MiniKanren (core.logic) does bookmarking, too.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[PROLOG and miniKanren create bookmarks in different ways, but you don't need to worry about this kind of detail. [Lisp (…/cc, &quot;On Lisp&quot;, etc.) gives you the raw materials for creating bookmarks, but you still have to write the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Assembler gives you the raw materials, too, but you have to write even more code.]]&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queries - Ports&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Gedanken experiment (continued):&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let us &lt;i&gt;adopt&lt;/i&gt; the &lt;i&gt;convention&lt;/i&gt; that only smaller rectangles are ports. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(N.B. port-ness is still inconclusive — we will want to know whether a port is &lt;i&gt;input &lt;/i&gt;or &lt;i&gt;output&lt;/i&gt;, but I regress).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Queries:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;What are the ids of all of the ports?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Who &quot;owns&quot; which ports?&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Answers&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;id2.&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;id2 is a port of id1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In other words: id1 owns port id2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;How did we arrive at this answer?&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In PROLOG, we can write&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;port(Port,Owner) :-&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;rectangle(Port,_),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;rectangle(Owner,_),&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bigger(Owner,Port).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;and use the query&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;port(P,O).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;to find all ports and their owners.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Searching&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;miniKanren: &lt;a href=&quot;http://minikanren.org&quot;&gt;http://minikanren.org&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Scheme - miniKanren&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Scheme - a simple version of PROLOG is available at &lt;a href=&quot;https://www.t3x.org/bits/prolog6.html&quot;&gt;https://www.t3x.org/bits/prolog6.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;JavaScript - &lt;a href=&quot;https://github.com/guitarvydas/js-match&quot;&gt;https://github.com/guitarvydas/js-match&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Clojure - core.logic&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG - &lt;a href=&quot;https://www.swi-prolog.org/&quot;&gt;https://www.swi-prolog.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Getting started with PROLOG pattern matching - https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=195s&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Github Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/factbases-101&quot;&gt;https://github.com/guitarvydas/factbases-101&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Compiling Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Compiling diagrams consists of 2 steps:&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;normalize the diagram to a factbase&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;query the factbase, recursively, to create more-and-more-interesting facts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the above, I have shown how to represent rectangles in a factbase.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let us assume that we are using a notation that needs only:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;rectangles&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;lines&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FYI — I have found this simple combination enough to express concurrency…&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;rectangles represent concurrent Software Components&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;lines represent messages&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt; (data flow) between Software Components&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;text represents code and comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;N.B. Software Components are not implemented using CALL / RETURN only.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See my other essay &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt;]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Questions:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;How to internally represent rectangles (see &lt;i&gt;bounding boxes&lt;/i&gt; above)?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;How to internally represent lines?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(We only care about the start points of lines and the end points of lines ; do we create bounding boxes for lines or use special edge-case code for lines?]&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;How to internally represent code (code is not automatically sequential, blocks of code are found at various (x,y) points, what does &lt;i&gt;that&lt;/i&gt; mean?).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We can compile diagrams in successive layers:&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;layer 0 is the actual drawing converted to FB (factbase) form&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;layer 1 infers bounding boxes and augments the FB with this information&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;layer 2 infers which rectangles are Software Components and augments the FB with this information&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;layer 3 infers which rectangles are Ports and augments the FB&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;layer 4 infers the Owner for each Port&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;layer 5 visits every Port and infers whether the port is &lt;i&gt;input&lt;/i&gt; or &lt;i&gt;output&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Q: What is the convention for this?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The shape of the port (e.g. circles for inputs, squares for outputs) or, maybe the colour (green for inputs, yellow for outputs) and so on.&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Q: How much information must be in the FB before we can emit code using information in the FB?&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Q: Is this information language-specific?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.G. if we know that we are going to emit code in Lisp, do we need more/less information than if we are going to emit code in, say, Python? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Q: Do we grow the FB knowledge-base over time or design it in one-fell-swoop at the beginning of the project(s)?&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Rules specify only the result (the assertions).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; &lt;/span&gt;https://www.youtube.com/watch?v=er_lLvkklsk&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;In SWIPL, one needs to enter the semi-colon to receive successive match waves and to see the various results of each wave.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;pseudo-code&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;If we wanted to look at objects + attributes, we could just write an SCN that gave us that view (aka skin) on the data.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Again, I am simplifying in an attempt to maintain readability.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A production version of the rules in this essay would need to handle more edge-cases and shapes.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Furthermore, we might choose to include other kinds of objects, e.g. ellipses.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;meta-meta-observation: we solve complicated problems by adding complication.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;meta-meta-question: Why do we do DRY by hand?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Why can't git detect code clones for us?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Beginners like RY - they want to copy/paste cookbook code.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Notice that our convention is that diagrams of components cannot contain other diagrams in-place.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We need to switch to other diagrams to show deep-ness.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this notation, every diagram has 2 layers: (1) the top level and (2) an inner level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is never an inner-inner level (such a thing can exist but cannot be shown on the same diagram - the editor should allow us to dive into and out-of diagram layers - much like the BACK button on browsers).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Dynamically changing data flow is a bad thing IMO.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dynamic &amp;lt;anything&amp;gt; leads to trouble (esp. maintenance and debugging). https://guitarvydas.github.io/2021/03/06/Dynamic-Anything-is-Bad.html.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IMO, data flows must be represented explicitly, for example, as arrows.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Factbases 101</summary></entry><entry><title type="html">Recursive design, iterative design by example (3)</title><link href="https://computingsimplicity.neocities.org/2021/04/26/Recursive-Design,-Iterative-Design-By-Example-(3).html" rel="alternate" type="text/html" title="Recursive design, iterative design by example (3)" /><published>2021-04-26T00:00:00-04:00</published><updated>2021-04-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/26/Recursive%20Design,%20Iterative%20Design%20By%20Example%20(3)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/26/Recursive-Design,-Iterative-Design-By-Example-(3).html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;RecursiveDesign, Iterative Design By Example (3)&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;leftovers&quot;&gt;Left Overs&lt;/h1&gt;

&lt;h2 id=&quot;openingbalance&quot;&gt;Opening Balance&lt;/h2&gt;

&lt;p&gt;I need a line for opening balance.&lt;/p&gt;

&lt;p&gt;It should be input as:&lt;/p&gt;

&lt;p&gt;{ opening: date balance }&lt;/p&gt;

&lt;p&gt;I will skip this for now — until the tools are better — and will enter it directly into the spreadsheet.&lt;/p&gt;

&lt;p&gt;This puts me into the manual work mode and the work that I do now will be unrecoverable and will need to be re-done every time I generate new data.&lt;/p&gt;

&lt;p&gt;This is, also, a maintenance problem — I need to remember to re-do all of the manual work.&lt;/p&gt;

&lt;p&gt;For now, I choose to do manual work and hope that I will remember what to re-do.&lt;/p&gt;

&lt;p&gt;When the amount of re-doing reaches some critical mass, I will re-cast this work in automatable form. What is the &amp;#8220;critical mass&amp;#8221;? I have no hard definition for it — probably a factor of my boredom when re-doing work.&lt;/p&gt;

&lt;h2 id=&quot;m4&quot;&gt;M4&lt;/h2&gt;

&lt;p&gt;I need to include files.&lt;/p&gt;

&lt;p&gt;I want to to create an output format for each parsed Transaction, and, I want these to be slightly different for the Transaction types (two). I want to use an editor to mass edit these output formats. (I ended up using a spreadsheet as the editor)l.&lt;/p&gt;

&lt;p&gt;The SCN I&amp;#8217;m using doesn&amp;#8217;t have an include statement built into (i.e. there is no grammar rule for include)&lt;/p&gt;

&lt;p&gt;Instead of extending the grammar with an include statement, I consider two simpler options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;use cat from the command line (and create file snippets that can be combined)&lt;/li&gt;
&lt;li&gt;use a macro processor tool, such as M4.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I choose to use M4 for this solution. I think of using an include statement to include the output-gl*.inc files into their corresponding grasem files. M4 supports an include statement (M4 has many other features, all of which I can ignore in this solution).&lt;/p&gt;

&lt;h2 id=&quot;usingaspreadsheetforroughformat&quot;&gt;Using a Spreadsheet For Rough Format&lt;/h2&gt;

&lt;p&gt;I used LibreOffice calc to rough-in the output formats for the parser.&lt;/p&gt;

&lt;p&gt;I ended up with two files — output-gl.inc and output-glcsv.inc — due to the (slight) differences between the way that my financial institution provides statements to me.&lt;/p&gt;

&lt;h2 id=&quot;negativeamounts&quot;&gt;Negative Amounts&lt;/h2&gt;

&lt;p&gt;My financial institution delivers account statements with negative amounts — in some cases, but not others.&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t figured out what the pattern is, yet.&lt;/p&gt;

&lt;p&gt;For now, I will fix this directly in output-glcsv.inc. All accounts will grow in the +ve direction.&lt;/p&gt;

&lt;p&gt;Maybe I need to figure out — again — the difference between credit and debit and liability accounts and asset accounts. For now, I will continue to use + and -.&lt;/p&gt;

&lt;h1 id=&quot;parserruleduplication&quot;&gt;Parser Rule Duplication&lt;/h1&gt;

&lt;p&gt;It should be noted that I used parse rule duplication (RY).&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I let the computer do more work instead of trying to abstract my work and save computer time.&lt;/p&gt;

&lt;p&gt;Parser Rule Duplication is the idea of using the same parse under multiple different names.&lt;/p&gt;

&lt;p&gt;The name tells me what the parser parsed and dictates the final format of the output.&lt;/p&gt;

&lt;p&gt;In this case, see where ${amt} appears. It appears in slightly different places depending on the transaction account (e.g. &amp;#8220;rbc&amp;#8221; &amp;#8220;lit&amp;#8221; vs. &amp;#8220;rbc&amp;#8221; &amp;#8220;pro&amp;#8221;). In typical programming languages, one would be encouraged to write complex if-then-else-code to figure out in which field the ${amt} data fits, but, using a pattern-matcher, it is easier (for me, the human) to duplicate the parser rule and make a slight change to the output format.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;RY means Repeat Yourself. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">RecursiveDesign, Iterative Design By Example (3)</summary></entry><entry><title type="html">Fdd example workflow</title><link href="https://computingsimplicity.neocities.org/2021/04/26/FDD-Example-Workflow.html" rel="alternate" type="text/html" title="Fdd example workflow" /><published>2021-04-26T00:00:00-04:00</published><updated>2021-04-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/26/FDD%20Example%20Workflow</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/26/FDD-Example-Workflow.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;FDD Example Workflow&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this essay, I discuss a simple problem and its FDD workflow and tools.&lt;/p&gt;

&lt;p&gt;The problem is that of gathering bank/credit card/expense statements and producing a single trial balance in .CSV format.&lt;/p&gt;

&lt;h1 id=&quot;twopartsofprogramming&quot;&gt;Two Parts of Programming&lt;/h1&gt;

&lt;p&gt;Programming breaks down, broadly, into two phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;gathering information&lt;/li&gt;
&lt;li&gt;outputting information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will discuss this breakdown in more detail.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;In another essay, I call these two phases &amp;#8220;breathe in&amp;#8221; and &amp;#8220;breathe out&amp;#8221;&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/18/TOE-for-Software-Development.html&quot;&gt;https://guitarvydas.github.io/2021/03/18/TOE-for-Software-Development.html&lt;/a&gt;&lt;/em&gt;]&lt;/p&gt;

&lt;h2 id=&quot;gather&quot;&gt;Gather&lt;/h2&gt;

&lt;p&gt;In the &lt;em&gt;gather&lt;/em&gt; phase, we collect and parse information.&lt;/p&gt;

&lt;p&gt;Ideally, we want to gather information and convert it into a single format.&lt;/p&gt;

&lt;p&gt;I.E. we want to &lt;em&gt;normalize&lt;/em&gt; the data.&lt;/p&gt;

&lt;p&gt;We want to capture information in small phrases.&lt;/p&gt;

&lt;h2 id=&quot;output&quot;&gt;Output&lt;/h2&gt;

&lt;p&gt;In the output phase, we want to re-arrange captured data and surround it by extra text as appropriate.&lt;/p&gt;

&lt;p&gt;Some of the output will be in &lt;em&gt;textual&lt;/em&gt; form and some will be in the form of &lt;em&gt;control&lt;/em&gt; information&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;An overview of the system is found in Fig. 1.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/2021-04-26-18-23-56-Images/FDDWorkflow-Overview.png&quot; alt=&quot;&quot; id=&quot;fddworkflow-overview&quot; width=&quot;200&quot; height=&quot;127&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Fig. 1 Overview&lt;/p&gt;

&lt;p&gt;We have three input files (yellow) and generate an output file (red) in spreadsheet format.&lt;/p&gt;

&lt;h1 id=&quot;simplicityallthewaydown&quot;&gt;Simplicity All The Way Down&lt;/h1&gt;

&lt;p&gt;The overview is fairly simple.&lt;/p&gt;

&lt;p&gt;That is the intention.&lt;/p&gt;

&lt;p&gt;Goal: Simplicity all-the-way-down, if possible.&lt;/p&gt;

&lt;p&gt;This goal is kept in mind and drives choices in the design process.&lt;/p&gt;

&lt;p&gt;The &amp;#8220;API&amp;#8221; for the input files is: structured text.&lt;/p&gt;

&lt;p&gt;The &amp;#8220;API&amp;#8221; for the output file is: spreadsheet format (.CSV text file).&lt;/p&gt;

&lt;p&gt;Details are deferred to lower layers. The sub-goal is to maintain simplicity at all levels of the design &amp;#8212; using automation, but automating processing of very simple formats. Building up type information using layers instead of using a one-fell-swoop-style type-checker commonly found in most PLs.&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;A key point to notice is that we do not assume a 1&amp;#8211;2 breakdown &amp;#8212; input format vs. typed API format. We will use multiple layers and try to keep each layer &amp;#8220;simple&amp;#8221;&lt;/em&gt;&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; (yet fully typed).]&lt;/p&gt;

&lt;h2 id=&quot;layeredtypechecking&quot;&gt;Layered Type Checking&lt;/h2&gt;

&lt;p&gt;IMO, typing is over-rated.&lt;/p&gt;

&lt;p&gt;The real measure is ease-of-understanding.&lt;/p&gt;

&lt;p&gt;Complex type systems are needed in languages that do not allow all solution code to fit in one small window.&lt;/p&gt;

&lt;p&gt;An answer to this problem is to create &lt;em&gt;layers&lt;/em&gt; of code. Each layer is made to be simple enough and to be stand-alone and to fit in one screen.&lt;/p&gt;

&lt;p&gt;This may seem to be facile solution, but, it is not easy to devise a way to layer code so that each layer remains simple.&lt;/p&gt;

&lt;p&gt;In a layered system, where each layer is understandable in a stand-alone manner, automated typing becomes less of an issue.&lt;/p&gt;

&lt;p&gt;BASIC, et al, tried to use relaxed typing, but failed when programs became too large to fit in a small window.&lt;/p&gt;

&lt;p&gt;Layering allows us to create simple-enough layers while making the typing &amp;#8220;obvious&amp;#8221; (or easily checked by automation).&lt;/p&gt;

&lt;h3 id=&quot;incrementalloadingandtypechecking&quot;&gt;Incremental Loading and Typechecking&lt;/h3&gt;

&lt;p&gt;One might think of type-checkers as part of the incremental loaders.&lt;/p&gt;

&lt;p&gt;Each invocation of a loader type-checks the layer-in-question, but no more.&lt;/p&gt;

&lt;p&gt;One might think of type-checking and loading as a recursive process - each step in the process whittles the problem down, and leaves &amp;#8220;the rest&amp;#8221; to other incremental loaders and incremental type-checkers in the pipeline.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Actually, the pipeline is not a 1-D chain, but a tree of layers, each incrementally checkable&lt;/em&gt;. &lt;em&gt;The most-final loader simply bolts together incrementally-type-checked pieces and finishes the left-over type-checking.&lt;/em&gt;]&lt;/p&gt;

&lt;h1 id=&quot;gathering&quot;&gt;Gathering&lt;/h1&gt;

&lt;h2 id=&quot;ref1&quot;&gt;Gather&lt;/h2&gt;

&lt;p&gt;In the &lt;em&gt;gather&lt;/em&gt; phase, we collect and parse information.&lt;/p&gt;

&lt;p&gt;Ideally, we want to gather information and convert it into a single format.&lt;/p&gt;

&lt;p&gt;I.E. we want to &lt;em&gt;normalize&lt;/em&gt; the data.&lt;/p&gt;

&lt;p&gt;As a first attempt at normalization, I would suggest the use of factbases. &lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt; and &lt;a href=&quot;https://guitarvydas.github.io/2021/04/26/Factbases-101.html&quot;&gt;https://guitarvydas.github.io/2021/04/26/Factbases-101.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;normalization&quot;&gt;Normalization&lt;/h3&gt;

&lt;p&gt;Normalizing data means to convert &lt;em&gt;all&lt;/em&gt; data into a common format.&lt;/p&gt;

&lt;h4 id=&quot;factbases&quot;&gt;Factbases&lt;/h4&gt;

&lt;p&gt;I favour the use of &lt;em&gt;factbases&lt;/em&gt;&lt;a href=&quot;#fn:4&quot; id=&quot;fnref:4&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; for normalization.&lt;/p&gt;

&lt;p&gt;Further discussion of &lt;em&gt;factbases&lt;/em&gt; can be found at https://guitarvydas.github.io/2021/01/17/Factbases.html.&lt;/p&gt;

&lt;h4 id=&quot;text&quot;&gt;Text&lt;/h4&gt;

&lt;p&gt;Another simple normalized data format is &lt;em&gt;text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The UNIX® tools achieved much of their utility from the fact that all input and output consisted of &lt;em&gt;lines of text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The UNIX® tools worked with &lt;em&gt;lines of text&lt;/em&gt; but became hard-to-use when the text was structured in some manner (e.g. scoped programming languages).&lt;/p&gt;

&lt;p&gt;Parsing technologies, such as PEG parsing, are a way to parse lightly-structured text.&lt;/p&gt;

&lt;p&gt;Note that &lt;em&gt;lines of text&lt;/em&gt; and PEG-parsable &lt;em&gt;text&lt;/em&gt; are very simple in format &amp;#8212; i.e. they have little semantic content.&lt;/p&gt;

&lt;p&gt;Type-checking and other forms of checking for semantic content is missing from the lowest levels of UNIX® tools.&lt;/p&gt;

&lt;p&gt;Type checking can be added incrementally by inserting &lt;em&gt;filters&lt;/em&gt; into the text-to-text pipelines.&lt;/p&gt;

&lt;p&gt;Type-checking can be done on an as-needed basis, by cascading a number of &lt;em&gt;filters&lt;/em&gt; between the source and the destination ports of components.&lt;/p&gt;

&lt;p&gt;Software based on APIs is hard to bolt-together because APIs contain too much detail. This information is not discarded but is elided and deferred to &lt;em&gt;filters.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;spreadsheetcells&quot;&gt;Spreadsheet Cells&lt;/h4&gt;

&lt;p&gt;In this simple example, we want to convert general ledgers (GLs) from text format to spreadsheet format.&lt;/p&gt;

&lt;p&gt;Our intended output format is &lt;em&gt;anything&lt;/em&gt; that fits in a spreadsheet cell, e.g. numbers, currency, dates, strings, booleans, etc.&lt;/p&gt;

&lt;h1 id=&quot;outputting&quot;&gt;Outputting&lt;/h1&gt;

&lt;p&gt;Outputting can be quite simple.&lt;/p&gt;

&lt;p&gt;I would suggest the use of Javascript back-tick syntax (which appears to have been inspired by /bin/sh, etc.).&lt;/p&gt;

&lt;p&gt;The utility of using &lt;em&gt;only&lt;/em&gt; back-tick syntax can be seen in the Glue tool &lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/a&gt; (and the follow-on Grasem tool &lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I show an example of using the back-tick notation to perform real work, in 3 essays: &lt;a href=&quot;https://guitarvydas.github.io/2021/04/12/Recursive-Iterative-Design-By-Example.html&quot;&gt;https://guitarvydas.github.io/2021/04/12/Recursive-Iterative-Design-By-Example.html&lt;/a&gt; and &lt;a href=&quot;https://guitarvydas.github.io/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html&quot;&gt;https://guitarvydas.github.io/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html&lt;/a&gt; and &lt;a href=&quot;https://guitarvydas.github.io/2021/04/26/Recursive-Design,-Iterative-Design-By-Example-(3).html)&quot;&gt;https://guitarvydas.github.io/2021/04/26/Recursive-Design,-Iterative-Design-By-Example-(3).html)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Javascript&amp;#8217;s back-tick notation is capable of calling functions and other complicated behaviours. It appears that the majority of use-cases simply need the text substitution capabilities of back-tick notation.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;E.G. to control a machine, a robot, a device, etc. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;PL means Programming Language. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;E.G. simple format is (1) factbases, or, (2) flat text, or, (3) structured text which is parsable using automation (e.g. with PEG). &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Further discussion at https://guitarvydas.github.io/2021/01/17/Factbases.html. &lt;a href=&quot;#fnref:4&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">FDD Example Workflow</summary></entry><entry><title type="html">What if making a compiler was easy?</title><link href="https://computingsimplicity.neocities.org/2021/04/26/What-If-Making-A-Compiler-Was-Easy.html" rel="alternate" type="text/html" title="What if making a compiler was easy?" /><published>2021-04-26T00:00:00-04:00</published><updated>2021-04-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/26/What%20If%20Making%20A%20Compiler%20Was%20Easy</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/26/What-If-Making-A-Compiler-Was-Easy.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;What If Compilers Were Easy?&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-26T18:07:09Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-26T18:07:09Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What If?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What if it was easy to create compilers and languages?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Say, 10 minutes instead of several years?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How would your approach to programming change?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Does your favourite programming language have REGEX built in?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Or, does it have a REGEX library?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What if writing a new language, a new DSL, were as easy as writing a REGEX?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Paradigms, Not Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Paradigms, e.g. OO, FP, message-passing, etc. would still be important.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages and syntax would no longer be important, if you could build languages as easily as writing REGEXs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You could easily wrap a language around &lt;i&gt;any&lt;/i&gt; given paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you didn't like a particular language, you would throw it away and build a new one to suit your needs (10 minutes, not years) .&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;A Language for Every Problem&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If languages were cheap to build, you could build a new language every time you started a project.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This would be different, even, from creating DSLs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normally, we think of DSLs as being tied to particular technologies, like SQL is a DSL for database queries.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Instead, we could just invent a DSL for &lt;i&gt;every&lt;/i&gt; project.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, if we used a database for Project XYZ, we could have a XYZ-DSL for the project.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It would generate SQL queries based on what the Project XYZ needed.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;XYZ-DSL would not be general.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It would be specific &lt;i&gt;only&lt;/i&gt; to project XYZ.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We already do that, when we build code in a programming language, but we don't separate the code details from the architectural needs of the project. &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The code to solve a problem is like a custom-fitted DSL for solving the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;From a maintenance perspective, it is just as &quot;hard&quot; to learn what the code is doing as it is to learn a DSL geared for the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Actually, it might be easier to understand a solution if only the meat was shown, less all of the nitty-gritty details of how the details were force-fitted into a chosen language (or DSL).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We use a language, and a DSL, which is sufficiently general, then we write code in that language until we solve the XYZ problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;By using an existing language, we use a &lt;i&gt;notation&lt;/i&gt; that is specific to some &lt;i&gt;other&lt;/i&gt; problem — not the problem-at-hand.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sometimes, we don't need all to use all of the fancy features of a language. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sometimes, the details (is this a list?, is this an array?, is this an int?, is this a double?, etc.) obscure the real meat of the solution.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;REGEX&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REGEX is a simple DSL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEX was, originally, compiler technology.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Today, it is possible for non-specialists to use REGEX.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What can REGEX do? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;It can match strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What can't REGEX do?&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;It can't match nested strings. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;It can't match across lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Is there something that can do what REGEX can do &lt;i&gt;and&lt;/i&gt; what REGEX can't do?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Yes.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;PEG.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Is it built into other languages?&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;No,&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; not yet.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCNs - Little DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I use the mnemonic SCN — Solution Centric Notation — to mean little DSLs that are specific to a solution.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pipelines Instead of Hacking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What if we could &lt;i&gt;just leave well-enough alone&lt;/i&gt;? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What if, when a piece of software works, we leave it alone?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When we hack on a piece of already-working software, we often get unintended consequences. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Hidden dependencies cause unintended consequences.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; attempts to alleviate unintended consequences.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, we already had this problem licked in the 1970's without all of the restrictions imposed by FP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What we really want is called &lt;i&gt;isolation&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX®, for one, gave us &lt;i&gt;isolation&lt;/i&gt; (in the form of processes and pipes).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Running FP on top of Linux is over-kill, from the above perspective.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Management Hates DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Management hates DSLs because of the feeling that DSLs take a long time to build (years instead of 10's of minutes).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Management doesn't notice that it takes a long time to understand a production program. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This time would be reduced (or, worst case, be the same) if the program were well-documented. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Documentation Doesn't Work&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Documentation &quot;doesn't work&quot;, because it goes out of date, because it is not automatically tied to the final code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can we repair this problem?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Efficiency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If N=10, O(N) is 10, O(N**2) is 100 and O(N**3) is 1000.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So what?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A human perceives a keystroke to be sluggish if it takes more than 20msec. to register. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The human user doesn't care about O(_) performance.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The human user only cares that it takes less than 20msec. per keystroke.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How many CPU cycles are needed for 20msec?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What is N?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It depends.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The answer is different on a cheap rPi than on a modern MacBook.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Hardware Engineers perform &lt;i&gt;worst-case analysis&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers perform O(N) calculations. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most programmers don't even know what the latency of Linux is on the target hardware (nor on their own development system).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using Rust isn't going to speed up Linux context switches.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How many context switches happen when a customer pushes a key or clicks a mouse button? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is the cost of using a thread? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is the cost of a function call?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Structures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is only one data structure: the triple.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Everything else can be reconstructed from triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Building data structures at compile-time is an optimization, developed at a time when CPUs and Memory were expensive.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many apps run on modern hardware, where CPUs don't need to be time-shared and we are not allowed to think of memory sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data structure building at compile-time is but an optimization. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Do we need such optimizations?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Should we pay for such optimizations with time spent in development?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The answer to these questions depends on what the final hardware will be.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Developing such optimizations in an app should be performed by Software Optimization Engineers, not Software Architects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Are we paying for such optimizations?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Yes — these optimizations bring baggage that we call &quot;thread safety&quot;, &quot;full preemption&quot;, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Do we need these optimizations in every app?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Only a few apps need to worry about time-sharing, e.g. Linux, Windows, MacOS, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Running Linux on rPis means that we are putting these optimizations into &lt;i&gt;every&lt;/i&gt; app that we run on the rPi, regardless of whether we actually need time-sharing and memory sharing in the app.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Could we approach apps differently and do away with the above accidental complexities?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Anonymous functions (aka closures) do a lot of what operating systems do, but at a much lower cost.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How To Improve Programmer Efficiency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Improving &lt;i&gt;programmer &lt;/i&gt;efficiency is different from improving &lt;i&gt;program &lt;/i&gt;efficiency.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Early Lisps were geared towards improving &lt;i&gt;programmer&lt;/i&gt; efficiency, with concepts like the &lt;i&gt;REPL&lt;/i&gt;, built-in debugging,&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; debuggers&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some of this programmer-efficiency attitude was lost when CL was standardized (CL includes features that make Lisp easier to compile[sic], which tend towards eroding debugability).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We know that &lt;i&gt;comments&lt;/i&gt; don't work, because they go out of date, because they are not automatically connected to the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When the code changes, one has to remember to change the comments.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When delivery deadlines loom, comment improvement suffers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The solution is to automatically tie comments to code and to make comments &quot;write the code&quot; — no change to the system can be made without changing the comments.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(N.B. this also means prohibiting round-trip — the comments must be the &lt;i&gt;only&lt;/i&gt; way to change the code).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can this be done?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I think that SCNs&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; can serve in this capacity at almost no increase in cost.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Capture the thinking in an SCN, have the SCN generate executable code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rebol programmers love Rebol because of its similarity in this regard — Rebol &lt;i&gt;dialects&lt;/i&gt; capture thinking as SCNs that hide details from dialect users.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Rebol users see pure utility, containing very little noise.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Ohm Editor&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I debugged a lot of grammars manually.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most of them were recursive-descent grammars (often written in S/SL).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Grammars made hard problems easier to solve.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Debugging grammars generally took about a day or two.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm Editor — &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;https://ohmlang.github.io/editor/&lt;/a&gt; — is an IDE for debugging grammars.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Grammar debugging is about an order of magnitude faster with the Ohm Editor (compared to debugging grammars manually, using generate-compile-edit-test cycles).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm Editor is useful for any PEG, although it has slight syntactic differences.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that using the Ohm Editor for developing a non-Ohm PEG grammar is faster than trying to develop the grammar in the usual way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The major difference between Ohm and other PEGs, is Ohm's treatment of upper-case vs. lower-case grammar names.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This difference can be easily overcome by using lower-case names for all PEG rules.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(There are, then, minor syntactic differences, but they are minor, e.g. &quot;=&quot; instead of &quot;:&quot; for rule definition, and so on) .&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm Editor Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A screenshot of the Ohm Editor is show in &lt;span class=&quot;s1&quot;&gt;Fig. 1.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-04-26-18-07-09-Images/Screen Shot 2021-04-26 at 5.48.37 PM.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Ohm Editor screenshot.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The screen is divided into 4 sections — upper left, upper right, the middle and the bottom.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The upper left section holds the grammar under development. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The upper right section hold various test cases.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Test cases can be add using the &quot;+Add&quot; button or by double-clicking on a specific case.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The middle section (here showing &quot;2 * * 4 2 - 1 ) / 9&quot;) shows the string being parsed.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The bottom section shows the resulting CST&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The CST is gray when the parse is successful and red when the parse fails.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hovering over a node in the parse tree highlights the corresponding grammar rule.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The most common problem encountered when debugging a PEG grammar is the that of incorrect parsing of whitespace.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Ohm Editor lets you see what the parser is doing and can give you hints as to where the parse is failing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Thoughts About PEG in Editors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REGEX is found in many editors, namely Vim and Emacs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: How could we wire PEG into editors?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The main difference between PEG and REGEX is in the number of lines for a specification.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;REGEXs are usually one line long and PEG specifications are usually many lines long.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Awk&lt;/i&gt; faced this same issue when compared with &lt;i&gt;grep &lt;/i&gt;and &lt;i&gt;sed.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS works inside of HTML.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(See the Ohm documentation for further details)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Other Languages with PEG&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Racket&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://racket-lang.org/&quot;&gt;https://racket-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;#lang peg&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;(require peg)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;REBOL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REBOL's &lt;i&gt;parse&lt;/i&gt; is PEG or very much like PEG.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rebol&quot;&gt;https://en.wikipedia.org/wiki/Rebol&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros are not PEG, but they show what can be done if you build a language that is machine-readable (vs. human-readable).&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Actually, other parser technologies like ANTRL do this.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG feels more &quot;light weight&quot; to me.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;There is Rebol and its Parse function.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is #lang peg in Racket.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There seems to be no Perl for PEG, though.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;REGEXs are built-into JS and Python. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Can PEG be built into those languages?&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;FP is Functional Programming&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;For example, CL defines BREAK as part of the language, etc.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Lispworks has a better debugger than emacs (e.g. emacs+SBCL, etc.).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They both appear to have the same features, but debugging flows more smoothly in LW.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;and PEG&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;A CST is often called an AST.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When fractalized, a grammar breaks down into two parts - the AST and the CST (abstract syntax tree and concrete syntax tree, resp.).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The AST shows what&lt;i&gt; can &lt;/i&gt;parsed, which the CST shows what &lt;i&gt;was&lt;/i&gt; parsed (in concrete terms).&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">What If Compilers Were Easy?</summary></entry><entry><title type="html">Regex</title><link href="https://computingsimplicity.neocities.org/2021/04/24/REGEX.html" rel="alternate" type="text/html" title="Regex" /><published>2021-04-24T00:00:00-04:00</published><updated>2021-04-24T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/24/REGEX</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/24/REGEX.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;REGEX&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-24T06:28:55Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-24T06:28:55Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;REGEX is a production version of The Dragon Book DFA's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Actually, regex goes even further back, but I regress). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Henry Spencer wrote regex.c (while working in the Biology building at UofT, IIRC). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Kleene opened our eyes to REGEX principles.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Henry Spencer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Henry_Spencer&quot;&gt;https://en.wikipedia.org/wiki/Henry_Spencer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">REGEX</summary></entry><entry><title type="html">Incompleteness</title><link href="https://computingsimplicity.neocities.org/2021/04/24/Incompleteness.html" rel="alternate" type="text/html" title="Incompleteness" /><published>2021-04-24T00:00:00-04:00</published><updated>2021-04-24T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/24/Incompleteness</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/24/Incompleteness.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Imcompleteness&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;codeeditingsubdivided&quot;&gt;Code Editing Subdivided&lt;/h1&gt;

&lt;p&gt;It must be possible to edit (and save) incomplete, incorrect code.&lt;/p&gt;

&lt;p&gt;Coding can be subdivided into two activities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;development - code is incomplete&lt;/li&gt;
&lt;li&gt;maintenance - code is meant to be complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Should the same editor be used for both phases?&lt;/p&gt;

&lt;p&gt;Emacs indents code automatically.&lt;/p&gt;

&lt;p&gt;During development, this activity &amp;#8212; automatic indentation &amp;#8212; can be annoying. During development, the editor should be &amp;#8220;dumb&amp;#8221; and indentation be performed only when explicitly asked for. Maybe, the developer wants &amp;#8220;some&amp;#8221; indentation, but not enough to be annoying.&lt;/p&gt;

&lt;p&gt;During maintenance, though, indentation should be automatic. Indentation is based on language syntax and offers a first-line-of-defence against entering incorrect code.&lt;/p&gt;

&lt;p&gt;This subdivision and argument boils down to the idea of two syntaxes for every language &amp;#8212; a &lt;em&gt;writing&lt;/em&gt; syntax and a &lt;em&gt;reading&lt;/em&gt; syntax.&lt;/p&gt;

&lt;h1 id=&quot;appendix-twosyntaxesforeverylanguage&quot;&gt;Appendix - Two Syntaxes For Every Language&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/10/Two-Syntaxes-for-Every-Language.html&quot;&gt;https://guitarvydas.github.io/2021/04/10/Two-Syntaxes-for-Every-Language.html&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Imcompleteness</summary></entry><entry><title type="html">Relational programming and the kitchen sink</title><link href="https://computingsimplicity.neocities.org/2021/04/23/Relational-Programming-and-the-Kitchen-Sink.html" rel="alternate" type="text/html" title="Relational programming and the kitchen sink" /><published>2021-04-23T00:00:00-04:00</published><updated>2021-04-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/23/Relational%20Programming%20and%20the%20Kitchen%20Sink</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/23/Relational-Programming-and-the-Kitchen-Sink.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Relational Programming and the Kitchen Sink&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;everythingbutthekitchensink&quot;&gt;Everything But The Kitchen Sink&lt;/h1&gt;

&lt;p&gt;I use the phrase &amp;#8220;everything but the kitchen sink&amp;#8221; as an analogy.&lt;/p&gt;

&lt;p&gt;In my words, the phrase means trying to do everything at once instead of partitioning the work.&lt;/p&gt;

&lt;p&gt;Emacs is everything but the kitchen sink.&lt;/p&gt;

&lt;p&gt;Most PLs are everything but the kitchen sinks.&lt;/p&gt;

&lt;p&gt;IMO, everything is a fractal. Everything can be subdivided into smaller pieces.&lt;/p&gt;

&lt;p&gt;IMO, programming tasks should be subdivided into smaller pieces.&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;relationalprogramming&quot;&gt;Relational Programming&lt;/h1&gt;

&lt;p&gt;I argue that we can strip &lt;em&gt;relational programming&lt;/em&gt; down to its basics and that this will help us create code that creates code that &amp;#8230;&lt;/p&gt;

&lt;p&gt;The basics of &lt;em&gt;relational programming&lt;/em&gt; are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;exhaustive search&lt;/li&gt;
&lt;li&gt;triples.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Everything else is unnecessary complexity.&lt;/p&gt;

&lt;p&gt;We already know how to express both basics: (a) as loops of loops (but, the syntax is horrible) and (b) functions of exactly two arguments (not 0, not 1, not more than 2).&lt;/p&gt;

&lt;p&gt;PROLOG, also, suggests a concise, human-readable, syntax for exhaustive search.&lt;/p&gt;

&lt;p&gt;The easiest introduction to PROLOG that I have encountered is Nils Holm&amp;#8217;s &amp;#8220;Prolog Control in Six Slides&amp;#8221;.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;In &amp;#8220;Ohm in Small Steps&amp;#8221;, I show one way to transpile Holm&amp;#8217;s Scheme code to Javascript. The transpiler should port easily to other output languages that support anonymous functions.&lt;/em&gt;]&lt;/p&gt;

&lt;h1 id=&quot;thesoftwareatom&quot;&gt;The Software ATOM&lt;/h1&gt;

&lt;p&gt;In &amp;#8220;Everything is a Fractal&amp;#8221;, I mention &lt;em&gt;relational programming&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My interest is in finding the &lt;em&gt;atom&lt;/em&gt; of software.&lt;/p&gt;

&lt;p&gt;Many languages have been invented, and each one purports to be The Answer (to software development).&lt;/p&gt;

&lt;p&gt;Projectional editing consists of research into creating different views on code.&lt;/p&gt;

&lt;p&gt;I believe that if we had an &lt;em&gt;atom&lt;/em&gt; of software, we could create multiple views on the code (and the data) and we could create multiple languages for the same code and data. We could re-skin code at will.&lt;/p&gt;

&lt;p&gt;I call such &lt;em&gt;skins&lt;/em&gt; &amp;#8220;SCNs&amp;#8221; - Solution Centric Notations.&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;theatomofsoftware&quot;&gt;The ATOM of Software&lt;/h2&gt;

&lt;p&gt;I &amp;#8212; currently &amp;#8212; believe that &lt;em&gt;triples&lt;/em&gt; are the &lt;em&gt;ATOM&lt;/em&gt; of code and that &lt;em&gt;relational programming&lt;/em&gt; shows us how to write low-level code and data in triple format.&lt;/p&gt;

&lt;p&gt;In my words, an &lt;em&gt;Atom&lt;/em&gt; is the smallest indivisible sub-part of a system.&lt;/p&gt;

&lt;p&gt;In my view, everything is a fractal, so I believe that &lt;em&gt;Atoms&lt;/em&gt; can be further subdivided.&lt;/p&gt;

&lt;p&gt;From this perspective, an &lt;em&gt;Atom&lt;/em&gt; is only meaningful in terms of a &lt;em&gt;solution&lt;/em&gt;. An &lt;em&gt;Atom&lt;/em&gt; is a point where the Architect / Engineer chose (&lt;em&gt;v: to choose&lt;/em&gt;) to quit subdividing a sub-problem and chose to implement the solution to the sub-problem.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Corollary: Different Architects might choose different sets of Atoms&lt;/em&gt;.]&lt;/p&gt;

&lt;h2 id=&quot;assembleratoms-isthereahigherlevel&quot;&gt;Assembler ATOMS - Is There a Higher Level?&lt;/h2&gt;

&lt;p&gt;Assembler is a triple-based language.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;p&gt;MOV R1, R0&lt;/p&gt;

&lt;p&gt;is a triple (!).&lt;/p&gt;

&lt;p&gt;Techniques have been devised to write code that writes code, given assembler. Such techniques have been buried in &lt;em&gt;compiler technology&lt;/em&gt; literature. I think that such tools and techniques need to be brought out and made available to all programmers, not just compiler-writers.&lt;/p&gt;

&lt;p&gt;It is &lt;em&gt;much&lt;/em&gt; easier to write code that writes code when the input has been normalized to triple form.&lt;/p&gt;

&lt;p&gt;Some compiler technologies have leaked out to mortal programmers &amp;#8212; e.g. REGEX.&lt;/p&gt;

&lt;p&gt;Most compiler technology, though, remains shrouded in mystery.&lt;/p&gt;

&lt;p&gt;Most programmers recognize and use the technology called &lt;em&gt;gcc&lt;/em&gt;, but few know that it is based on early compiler peepholing techniques explored by Fraser and Davidson. That technology is called RTL.&lt;/p&gt;

&lt;p&gt;Technologies, that look similarly useful, include Cordy&amp;#8217;s &lt;em&gt;OCG&lt;/em&gt; and Holt&amp;#8217;s &lt;em&gt;Data Descriptors&lt;/em&gt;. Holt&amp;#8217;s/Cordy&amp;#8217;s/Wortman&amp;#8217;s &lt;em&gt;S/SL&lt;/em&gt; is a forerunner of PEG-like technologies. Cordy&amp;#8217;s TXL uses backtracking to parse programming languages.&lt;/p&gt;

&lt;p&gt;I believe that compiler parsing technologies&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; are ripe for picking making available to mortal programmers. Such technology needs to be REGEX&amp;#8217;ed.&lt;/p&gt;

&lt;p&gt;Since inventing assembler, we (the royal we) have found utility in inventing 1&lt;sup&gt;st&lt;/sup&gt;-class functions, and, garbage collection, and, relational programming, and, &amp;#8230;&lt;/p&gt;

&lt;p&gt;Is there a triple-like notation that employs 1&lt;sup&gt;st&lt;/sup&gt;-class functions and garbage collection? Early Lisp&lt;a href=&quot;#fn:4&quot; id=&quot;fnref:4&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; was an early form of this kind of thing. Relational Programming might give us some clues. OO and FP might give us clues. Closures and anonymous functions (found in Lisp, and more recent languages like JavaScript and Python) give us clues. Hierarchical filesystems might give us a clue.&lt;/p&gt;

&lt;p&gt;Of course, assembler can do any of the above, but it needs to be skinned for human readability and complexity management.&lt;/p&gt;

&lt;p&gt;I favour the use of &lt;em&gt;toolbox languages&lt;/em&gt; for building skins. Are there a toolbox languages that make building skins &amp;#8212; SCNs &amp;#8212; easier than using assembler?&lt;/p&gt;

&lt;p&gt;We (the royal we) have spent a great deal of effort developing language skins aimed at human readability, and we have not spent much effort on developing languages for machine readability (Rebol and TXL are different takes on this subject).&lt;/p&gt;

&lt;h1 id=&quot;codethatwritescode&quot;&gt;Code That Writes Code&lt;/h1&gt;

&lt;p&gt;Note that I do not believe that the discovering the &lt;em&gt;software atom&lt;/em&gt; will result in human-readable code.&lt;/p&gt;

&lt;p&gt;I want to write code that writes code.&lt;/p&gt;

&lt;p&gt;Machine-readable code is better than human-readable code, if one is trying to write code that writes code.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;software atom&lt;/em&gt; will result in advances in machine-readable code.&lt;/p&gt;

&lt;h1 id=&quot;fdd-failuredrivendesign&quot;&gt;FDD - Failure Driven Design&lt;/h1&gt;

&lt;p&gt;In another essay, I discuss FDD &amp;#8212; Failure Driven Design.&lt;/p&gt;

&lt;p&gt;When software works, we abandon it (&amp;#8220;release&amp;#8221; it).&lt;/p&gt;

&lt;p&gt;When software doesn&amp;#8217;t work, we work on it.&lt;/p&gt;

&lt;p&gt;Most of the time, we work on failed code (design, code, etc.).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relational programming&lt;/em&gt; ties in with FDD as one of the possible technologies for writing code that writes code.&lt;/p&gt;

&lt;h1 id=&quot;whatsmissingwhattothrowout&quot;&gt;What&amp;#8217;s Missing? What to Throw Out?&lt;/h1&gt;

&lt;p&gt;The current forms of relational programming &amp;#8212; PROLOG and miniKanren &amp;#8212; have &lt;em&gt;nothing&lt;/em&gt; missing.&lt;/p&gt;

&lt;p&gt;I believe that current relational programming languages encourage the use of &lt;em&gt;too much&lt;/em&gt; detail.&lt;/p&gt;

&lt;p&gt;Details kill.&lt;/p&gt;

&lt;p&gt;A programming language, to be useful, needs to elide details (but not ignore them).&lt;/p&gt;

&lt;p&gt;No language can be The One Language to Rule Them All.&lt;/p&gt;

&lt;p&gt;We need multiple skins &amp;#8212; SCLs &amp;#8212; that help us elide details in a problem-specific way.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;good part&lt;/em&gt; of relational programming is the notion that pattern-matching can be done automatically and under-the-hood.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;bad parts&lt;/em&gt; of relational programming are everything else.&lt;/p&gt;

&lt;p&gt;For example, I would rather use &lt;em&gt;printf&lt;/em&gt; to format output strings than trying to fit formatting into the relational paradigm (it is &lt;em&gt;possible&lt;/em&gt;, but it is not pretty).&lt;/p&gt;

&lt;p&gt;Relational programming should stick to triples only. Functors that have more than 2 arguments should not be used. (In fact, functors that have 0 or 1 arguments are questionable, too. Machines like repetitive code. No edge-cases. Everything in the form of &lt;em&gt;relation(subject,object)&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&quot;patternmatching&quot;&gt;Pattern Matching&lt;/h1&gt;

&lt;p&gt;The latest crop of FP (functional programming) skins use &lt;em&gt;pattern matching&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This technology was invented and explored in the 1960&amp;#8217;s under the name of &lt;em&gt;parsers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Is FP the modern manifestation of pattern matching?&lt;/p&gt;

&lt;p&gt;To use FP, you have to expunge &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s a big hit.&lt;/p&gt;

&lt;p&gt;FP, also, is based on a very old skin called &lt;em&gt;mathematics&lt;/em&gt;. Mathematics was invented when all that we had was paper (and pencils and pens). We can build 2D skins using computers. We can build 3D skins using 3D printers (we can &lt;em&gt;model&lt;/em&gt; 3D skins using CAD software).&lt;/p&gt;

&lt;p&gt;IMO, PEG is the modern manifestation of pattern matching.&lt;/p&gt;

&lt;p&gt;You can keep &lt;em&gt;f(t)&lt;/em&gt; using parsers and PEG.&lt;/p&gt;

&lt;p&gt;In fact, S/SL showed how to build &lt;em&gt;f(t)&lt;/em&gt; processors.&lt;/p&gt;

&lt;p&gt;(One can use pipelines to chain FP beads together into &lt;em&gt;f(t)&lt;/em&gt; handlers).&lt;/p&gt;

&lt;h1 id=&quot;isolation-encapsulationisnotenough&quot;&gt;Isolation - Encapsulation is Not Enough&lt;/h1&gt;

&lt;p&gt;We (the royal we) invented &lt;em&gt;isolation&lt;/em&gt; in the form of UNIX® processes and pipelines.&lt;/p&gt;

&lt;p&gt;Then, we threw such &lt;em&gt;isolation&lt;/em&gt; away and settled for &lt;em&gt;encapsulation&lt;/em&gt; in the form of OO, etc.&lt;/p&gt;

&lt;p&gt;We now know that &lt;em&gt;encapsulation&lt;/em&gt; is not enough &amp;#8212; we cannot bolt programs together in a care-free manner using only &lt;em&gt;encapsulation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We want to &lt;em&gt;build-and-forget&lt;/em&gt; programs. We need to expunge inter-program dependencies. In other words, we want &lt;em&gt;isolation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Worse, yet, our present-day hardware creates dynamic dependency chains under-the-hood.&lt;/p&gt;

&lt;p&gt;Our hardware just about forces us to produce CALL/RETURN Spaghetti.&lt;/p&gt;

&lt;p&gt;Relational programming (and FP) gives us a way to talk about solutions that create no dependency chains.&lt;/p&gt;

&lt;p&gt;Is that enough? No. But it&amp;#8217;s a start.&lt;/p&gt;

&lt;p&gt;Do we already have all of the pieces and Atoms that we need to propel programming into the future? Maybe.&lt;/p&gt;

&lt;h1 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h1&gt;

&lt;p&gt;To be able to bolt software components together, we must make use concurrent software components.&lt;/p&gt;

&lt;p&gt;CALL /RETURN Spaghetti encourages edge-cases and thwarts attempts at &lt;em&gt;easy&lt;/em&gt; machine-readability.&lt;/p&gt;

&lt;p&gt;We (the royal we) have been dealing with concurrency in the wrong manner &amp;#8212; optimizing for memory sharing and time-sharing. This approach has generated a multitude of accidental complexities.&lt;/p&gt;

&lt;p&gt;We (the royal we) don&amp;#8217;t need memory sharing and time-sharing built into &lt;em&gt;every&lt;/em&gt; app. Only a few apps need these features (e.g. operating systems,&lt;a href=&quot;#fn:5&quot; id=&quot;fnref:5&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; like Linux, Window and MacOS). Making apps that include concurrency (but don&amp;#8217;t really use it) is asking for trouble.&lt;/p&gt;

&lt;h1 id=&quot;scns-onelanguagedoesnotfitall&quot;&gt;SCNs - One Language Does Not Fit All&lt;/h1&gt;

&lt;p&gt;Languages are skins.&lt;/p&gt;

&lt;p&gt;I have a cavalier attitude towards languages, because I know that we can build notations (languages) in only a few hours.&lt;/p&gt;

&lt;p&gt;I view notations like a bowl of candy sprinkles. Sprinkle several notations on every problem, to make the solution simpler to express, and, to program.&lt;/p&gt;

&lt;h1 id=&quot;humanreadabilityvs.machinereadability&quot;&gt;Human Readability vs. Machine Readability&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;key&lt;/em&gt; to writing code that writes code is to cleave &amp;#8220;Programming Languages&amp;#8221; into two camps (maybe more, recursively):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programming Languages for Humans&lt;/li&gt;
&lt;li&gt;Programming Languages for Machines.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Programming Languages for Machines can lead to code that writes code, to projectional editing, etc.&lt;/p&gt;

&lt;p&gt;A lot of techniques for writing code that writes code were explored in the early days of computing, under the name of &lt;em&gt;compiler technologies&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Lisp &lt;em&gt;macros&lt;/em&gt; are another manifestation of such technology.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;The problem with Lisp macros is that we tried to include compiler technology into the skins. This raised the (accidental) complexity of the problem. Combining technologies &amp;#8212; flattening them &amp;#8212; is almost always a bad idea.&lt;/em&gt;]&lt;/p&gt;

&lt;h1 id=&quot;thegoalofprogramming&quot;&gt;The Goal of Programming&lt;/h1&gt;

&lt;p&gt;The point of programming is to automate processes, using a computer.&lt;/p&gt;

&lt;p&gt;All technologies for programming should strive to answer the question of how to automate a process using a computer.&lt;/p&gt;

&lt;h1 id=&quot;completenesstheoreticalapproachesprogramming&quot;&gt;Completeness, Theoretical Approaches, Programming&lt;/h1&gt;

&lt;p&gt;Many programmers feel that the &amp;#8220;best&amp;#8221; way to automate processes is to delve into all of the details in excruciating detail, in a non-hierarchical (flat) manner. I.E. language theories and skins for &amp;#8220;proving&amp;#8221; language designs.&lt;/p&gt;

&lt;p&gt;We have seen progress on this front, but, it is obvious that this does not result in programming skins that are accessible to mortal programmers.&lt;/p&gt;

&lt;p&gt;Language theory provides a solid description of the &lt;em&gt;universe&lt;/em&gt; of programming languages, but, tends not to address the problems of finding expressible versions of skins that are &amp;#8220;walks&amp;#8221; through the &lt;em&gt;universe&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/2021-04-23-18-38-46-Images/WalkingtheUniverse-Page-1.png&quot; alt=&quot;&quot; id=&quot;walkingtheuniverse-page-1&quot; width=&quot;200&quot; height=&quot;219&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Fig. 1 Walks Through The Language Universe&lt;/p&gt;

&lt;p&gt;Relational programming is (but) one manifestation of language theory.&lt;/p&gt;

&lt;p&gt;Making something simpler is usually begun by starting out simple instead of by adding complexity.&lt;a href=&quot;#fn:6&quot; id=&quot;fnref:6&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;throwingstuffout&quot;&gt;Throwing Stuff Out&lt;/h1&gt;

&lt;p&gt;To make language theory, and relational programming, &lt;em&gt;useful&lt;/em&gt; to mortal programmers, we (the royal we) need to &lt;em&gt;throw stuff out&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I suggest that we remove just about &lt;em&gt;everything&lt;/em&gt; from relational programming, and leave only &lt;em&gt;triples&lt;/em&gt; and exhaustive search.&lt;/p&gt;

&lt;h1 id=&quot;denotationalsemantics-realisticcompilergeneration&quot;&gt;Denotational Semantics - Realistic Compiler Generation&lt;/h1&gt;

&lt;p&gt;Peter Lee&amp;#8217;s book &amp;#8220;Realistic Compiler Generation&amp;#8221; shows how he managed an overtly complex technology &amp;#8212; Denotational Semantics &amp;#8212; by chopping it up into pieces, and pipelining the pieces.&lt;/p&gt;

&lt;p&gt;Further work on this idea was performed by Uwe Pleban.&lt;/p&gt;

&lt;p&gt;There is no need to devolve all of computing to the expression of Natural Numbers. Except in theoretical expressions of the Universe of Programming.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;goal&lt;/em&gt; of creating &lt;em&gt;useful&lt;/em&gt; skins is to build a Component using hierarchies of isolated components and finding notations for the &lt;em&gt;input&lt;/em&gt; and the &lt;em&gt;output&lt;/em&gt; of each subdivision.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Realistic Compiler Generation&amp;#8221; shows but one kind of possible skin for expressing denotational semantics in a &lt;em&gt;useful&lt;/em&gt; form.&lt;/p&gt;

&lt;h1 id=&quot;engineering&quot;&gt;Engineering&lt;/h1&gt;

&lt;p&gt;Engineering is not coding.&lt;/p&gt;

&lt;p&gt;Implementation is coding.&lt;/p&gt;

&lt;p&gt;Engineering is the process of defining the details that lie between the Architecture and the Implementation.&lt;/p&gt;

&lt;p&gt;As such, relational programming might lead to a skin(s) for expressing &lt;em&gt;engineering&lt;/em&gt; concerns (in a hierarchical &amp;#8212; divide-and-conquer &amp;#8212; manner, composing isolated components together into a solution).&lt;/p&gt;

&lt;h1 id=&quot;noneedtowaitforcompleterigour&quot;&gt;No Need To Wait For Complete Rigour&lt;/h1&gt;

&lt;p&gt;Complete Rigour is certainly something to strive for, but, complete rigor is not necessary for delivering product.&lt;/p&gt;

&lt;p&gt;In fact, if we&amp;#8217;d waited for theoretically complete rigour, we would not have an electronics industry.&lt;a href=&quot;#fn:7&quot; id=&quot;fnref:7&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Re-using what we&amp;#8217;ve learned from various forms of Engineering &amp;#8212; Civil, Structural, etc. Engineering &amp;#8212; we see that we &lt;em&gt;can&lt;/em&gt; deliver products without having an overall rigorous theory for the given domain.&lt;/p&gt;

&lt;p&gt;My first full-time job was as a Software Test Engineer with Mitel Corp.&lt;/p&gt;

&lt;p&gt;Mitel is a Telecom company (like Bell and NorTel, etc.). At the time, all Telecoms professed the four-nines principle &amp;#8212; 99.99% uptime. People would telephone each other during power failures and not even notice that the telephone networks were still working, although the power grid had failed.&lt;/p&gt;

&lt;p&gt;All of this was done with early computing technologies, and with software written in assembler and early programming languages &amp;#8212; long before the advent of FP, Haskell, etc.&lt;/p&gt;

&lt;p&gt;Testing. Most theorists look down on testing, but, testing &lt;em&gt;can&lt;/em&gt; be used to create useful, and, saleable, and, guarantee-able products. To deliver products using only testing instead of rigorous theories, one needs to apply many layers of testing. CI/CD is only &lt;em&gt;one&lt;/em&gt; form of testing (regression testing). Mitel used, at least, automated testing, analogue testing, back-to-back testing, trace analysis testing, etc., etc.&lt;/p&gt;

&lt;p&gt;For Telecoms, and for current companies, rigorous theories can only serve to cost-reduce products by reducing testing costs (while increasing development costs and narrowing the kinds of programmers that can perform development tasks).&lt;/p&gt;

&lt;p&gt;Can theories provide order-of-magnitude benefits, like PEG vs. YACC? Maybe, but, we are still waiting.&lt;/p&gt;

&lt;h1 id=&quot;das-diagramsassyntax&quot;&gt;DaS - Diagrams as Syntax&lt;/h1&gt;

&lt;p&gt;Relations make parsing diagrams &amp;#8220;easy&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Parsing a diagram consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;normalizing the elements of a diagram (e.g. rectangles, ellipses, lines, text &amp;#8212; in other words SVG simplified (see &lt;a href=&quot;#throwingstuffout&quot;&gt;Throwing Stuff Out&lt;/a&gt;))&lt;/li&gt;
&lt;li&gt;pattern-matching the elements&lt;/li&gt;
&lt;li&gt;formatting output code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, a rectangle can be described as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a declaration of a unique ID&lt;/li&gt;
&lt;li&gt;4 lines&lt;/li&gt;
&lt;li&gt;x for each line&lt;/li&gt;
&lt;li&gt;y for each line&lt;/li&gt;
&lt;li&gt;width for each line&lt;/li&gt;
&lt;li&gt;height for each line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do this, we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;an editor &amp;#8212; a &lt;em&gt;simple&lt;/em&gt;&lt;a href=&quot;#fn:8&quot; id=&quot;fnref:8&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; diagram editor that allows creation rectangles, ellipses, lines (straight, curvy, arrow-headed), text&lt;/li&gt;
&lt;li&gt;a transpiler that normalizes the output of the editor&lt;/li&gt;
&lt;li&gt;a pattern matcher&lt;/li&gt;
&lt;li&gt;an output code formatter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step (2) converts the editor output into relational triples &amp;#8212; a &lt;em&gt;factbase&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Step (3) uses relational programming &amp;#8212; e.g. PROLOG or miniKanren &amp;#8212; to infer information about the diagram and the programming conventions.&lt;/p&gt;

&lt;p&gt;Using modern-day computers, we can expend CPU power to perform step (3) at runtime, saving head-scratching during design- and compile- times.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Q: Why do I champion triples instead of structured forms? A: Triples are more easily machine-readable than more elaborate data structures.&lt;/em&gt;]&lt;a href=&quot;#fn:9&quot; id=&quot;fnref:9&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-everythingisafractal&quot;&gt;Appendix - Everything is a Fractal&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/23/Everything-is-a-Fractal.html&quot;&gt;https://guitarvydas.github.io/2021/03/23/Everything-is-a-Fractal.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-prologprogrammingforprogrammers&quot;&gt;Appendix - PROLOG Programming for Programmers&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&quot;&gt;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-factbases&quot;&gt;Appendix - Factbases&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-triples&quot;&gt;Appendix - Triples&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-languagesareskins&quot;&gt;Appendix - Languages Are Skins&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-scns-solutioncentricnotations&quot;&gt;Appendix - SCNs - Solution Centric Notations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/10/SCN.html&quot;&gt;https://guitarvydas.github.io/2021/04/10/SCN.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/DSL-Manifesto.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/DSL-Manifesto.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-rtl&quot;&gt;Appendix - RTL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&quot;&gt;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-peg&quot;&gt;Appendix - PEG&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/PEG.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&quot;&gt;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ohm-JS (PEG for Javascript):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PEG for Lisp:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scymtym.github.io/esrap/&quot;&gt;https://scymtym.github.io/esrap/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PEG for JS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pegjs.org/&quot;&gt;https://pegjs.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thesis, etc.:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bford.info/packrat/&quot;&gt;https://bford.info/packrat/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I believe that the Ohm Editor is a breakthrough tool: &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;https://ohmlang.github.io/editor/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;The Ohm Editor is an IDE for rapidly debugging PEG pattern-matching specs (aka grammars)&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;What I do with Ohm-JS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Glue Tool (a PEG to help writing PEGs):

&lt;ul&gt;
&lt;li&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Recursive Design

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/12/Recursive-Iterative-Design-By-Example.html&quot;&gt;https://guitarvydas.github.io/2021/04/12/Recursive-Iterative-Design-By-Example.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html&quot;&gt;https://guitarvydas.github.io/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ASON parser (most of one):

&lt;ul&gt;
&lt;li&gt;https://guitarvydas.github.io/2021/04/10/ASON-Notation-Pipeline.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GRASEM Tool

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;appendix-ocg&quot;&gt;Appendix - OCG&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&quot;&gt;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-ssl&quot;&gt;Appendix - S/SL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-datadescriptors&quot;&gt;Appendix - Data Descriptors&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/24039.24051&quot;&gt;https://dl.acm.org/doi/abs/10.1145/24039.24051&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-minikanren&quot;&gt;Appendix - MiniKanren&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://minikanren.org/&quot;&gt;http://minikanren.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(must see, if you haven&amp;#8217;t already heard about Barliman: &lt;a href=&quot;https://www.youtube.com/watch?v=er_lLvkklsk&quot;&gt;https://www.youtube.com/watch?v=er_lLvkklsk&lt;/a&gt; (&lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;https://github.com/webyrd/Barliman&lt;/a&gt;))&lt;/p&gt;

&lt;h1 id=&quot;appendix-prolog&quot;&gt;Appendix - PROLOG&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=199s&quot;&gt;https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=199s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;modern PROLOG:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swi-prolog.org/&quot;&gt;https://www.swi-prolog.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(gprolog uses WAM: &lt;a href=&quot;http://www.gprolog.org/&quot;&gt;http://www.gprolog.org/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(beginnings of a WAM: &lt;a href=&quot;https://github.com/guitarvydas/wam&quot;&gt;https://github.com/guitarvydas/wam&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(WAM tutorial: &lt;a href=&quot;http://wambook.sourceforge.net/&quot;&gt;http://wambook.sourceforge.net/&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&quot;appendix-parsingdiagrams&quot;&gt;Appendix - Parsing Diagrams&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Compiling-Diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Compiling-Diagrams.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/Transpiling-Diagrams-to-Code-101.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/Transpiling-Diagrams-to-Code-101.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/24/Compiling-Diagrams-2.html&quot;&gt;https://guitarvydas.github.io/2021/01/24/Compiling-Diagrams-2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&quot;&gt;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/10/Transpiling-Diagrams-Overview.html&quot;&gt;https://guitarvydas.github.io/2021/01/10/Transpiling-Diagrams-Overview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Parsing-and-Compiling-Diagrams.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Parsing-and-Compiling-Diagrams.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Editor-for-Gratoms.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Editor-for-Gratoms.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-toolboxlanguages&quot;&gt;Appendix - Toolbox Languages&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-txl&quot;&gt;Appendix - TXL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.txl.ca/&quot;&gt;https://www.txl.ca/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-rebolason&quot;&gt;Appendix - Rebol, ASON&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rebol&quot;&gt;https://en.wikipedia.org/wiki/Rebol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rebol.com/&quot;&gt;http://www.rebol.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rebol/rebol&quot;&gt;https://github.com/rebol/rebol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/red/red/blob/master/README.md#red-programming-language&quot;&gt;https://github.com/red/red/blob/master/README.md#red-programming-language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ASON&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://altscript.com/&quot;&gt;https://altscript.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-detailskill&quot;&gt;Appendix - Details Kill&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-isolation&quot;&gt;Appendix - Isolation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Scalability.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-thestack&quot;&gt;Appendix - The Stack&lt;/h1&gt;

&lt;p&gt;ALGOL Bottleneck:&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=NTdA4OljwVE&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Stack:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/The-Stack-2.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/The-Stack-2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-Stack.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-Stack.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&quot;&gt;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/24/The-Stack-is-a-List.html&quot;&gt;https://guitarvydas.github.io/2020/12/24/The-Stack-is-a-List.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Type-Stacks.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Type-Stacks.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Two-Stacks-For-Every-Type.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Two-Stacks-For-Every-Type.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-realisticcompilergeneration&quot;&gt;Appendix - Realistic Compiler Generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-continuumbetweencompile-timeandrun-time&quot;&gt;Appendix - Continuum Between Compile-time and Run-time&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Efficiency.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Efficiency.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-codethatwritescode&quot;&gt;Appendix - Code That Writes Code&lt;/h1&gt;

&lt;p&gt;[&lt;em&gt;essay to come, for now see examples&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ref1&quot;&gt;Appendix - Toolbox Languages&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-callreturnspaghetti&quot;&gt;Appendix - Call Return Spaghetti&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-fdd-failuredrivendevelopment&quot;&gt;Appendix - FDD - Failure Driven Development&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/23/Failure-Driven-Design.html&quot;&gt;https://guitarvydas.github.io/2021/04/23/Failure-Driven-Design.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-prologcontrolin6slides&quot;&gt;Appendix - Prolog Control in 6 Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.t3x.org/bits/prolog6.html&quot;&gt;https://www.t3x.org/bits/prolog6.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-concurrency&quot;&gt;Appendix - Concurrency&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Computing-Then-and-Now.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Computing-Then-and-Now.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-diagram-basedvisualprogramming&quot;&gt;Appendix - Diagram-Based Visual Programming&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2uw2W0w5oU8&quot;&gt;https://www.youtube.com/watch?v=2uw2W0w5oU8&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-otherreferences&quot;&gt;Appendix - Other References&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&quot;&gt;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/References.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/References.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FBP (Flow-Based Programming, concurrency, diagrams)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;https://jpaulm.github.io/fbp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;noFlo&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://noflojs.org/&quot;&gt;https://noflojs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;(experimental code, many branches)
&lt;a href=&quot;https://github.com/bmfbp/bmfbp&quot;&gt;https://github.com/bmfbp/bmfbp&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Arrowgrams (experimental code, many branches)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bmfbp/bmfbp&quot;&gt;https://github.com/bmfbp/bmfbp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/guitarvydas/vsh&quot;&gt;https://github.com/guitarvydas/vsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;appendix-everythingbutthekitchensink&quot;&gt;Appendix - Everything but the Kitchen Sink&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theidioms.com/everything-but-the-kitchen-sink/&quot;&gt;https://www.theidioms.com/everything-but-the-kitchen-sink/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Until the pieces are so small that they can be implemented in only a few hours. (Two weeks is too long &amp;#8211; and indicates that more subdivision is necessary). &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;I believe that SCNs are orders&amp;#8211;of&amp;#8211;magnitude cheaper to build than DSLs and PLs (Domain&amp;#8211;Specific Languages and Programming Languages, resp.). I discuss this elsewhere (see appendix). &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;I argue that we need PEG with backtracking and tokenizing. &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;But, then, Lisp was beat into the ground with complexity&amp;#8211;hammers and became Common Lisp. &lt;a href=&quot;#fnref:4&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;In fact, we don't even need operating systems. Operating systems are just code libraries. &lt;a href=&quot;#fnref:5&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Although simplication is a factor https://en.wikipedia.org/wiki/William_Bushnell_Stout#:~:text=published%20in%201951.&amp;#8211;,Legacy,Colin%20Chapman%20of%20Lotus%20Cars.&lt;/p&gt;

&lt;p&gt;Computers are &amp;#8220;complex&amp;#8221; to begin with. They need to be skinned to allow access to them by mere mortals. Simplication. Likewise, CPUs are complex and are simplicated (from various kinds of rust to ICs by electronics chip manufacturers) for use by programmers. &lt;a href=&quot;#fnref:6&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Aside: Scientists like to talk about a TOE (a Theory of Everything), but, this will not be possible until Science can explain consciousness (among other factors) without hand&amp;#8211;waving arguments like &amp;#8220;emergent properties&amp;#8221;. &lt;a href=&quot;#fnref:7&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:8&quot;&gt;
&lt;p&gt;Most existing diagram editors are much too complex. Details kill. &lt;a href=&quot;#fnref:8&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:9&quot;&gt;
&lt;p&gt;Machines can structure data for us, at runtime. I think of a continuum between compile&amp;#8211;time and run&amp;#8211;time. In fact, all software is interpreted, anyway (a CPU is an interpreter). The only question is &amp;#8220;when does the interpretation happen?&amp;#8221; &lt;a href=&quot;#fnref:9&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Relational Programming and the Kitchen Sink</summary></entry><entry><title type="html">Failure Driven Design</title><link href="https://computingsimplicity.neocities.org/2021/04/23/Failure-Driven-Design.html" rel="alternate" type="text/html" title="Failure Driven Design" /><published>2021-04-23T00:00:00-04:00</published><updated>2021-04-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/23/Failure-Driven-Design</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/23/Failure-Driven-Design.html">&lt;p&gt;Failure Driven Design&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-23-FDD/index.html&quot;&gt;FDD&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Failure Driven Design</summary></entry><entry><title type="html">Scoping rebol</title><link href="https://computingsimplicity.neocities.org/2021/04/23/Scoping-Rebol.html" rel="alternate" type="text/html" title="Scoping rebol" /><published>2021-04-23T00:00:00-04:00</published><updated>2021-04-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/23/Scoping%20Rebol</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/23/Scoping-Rebol.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Scoping Rebol&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;rebolisstaticallyscoped&quot;&gt;Rebol is Statically Scoped&lt;/h1&gt;

&lt;p&gt;Rebol has static scoping,&lt;/p&gt;

&lt;p&gt;but,&lt;/p&gt;

&lt;p&gt;The question is not &amp;#8220;&lt;em&gt;what&lt;/em&gt; scoping does Rebol employ?&amp;#8221;, but, &amp;#8220;&lt;em&gt;when&lt;/em&gt; is a Rebol scoping determined, &lt;em&gt;when&lt;/em&gt; is a Rebol program compiled?&amp;#8221;.&lt;/p&gt;

&lt;h1 id=&quot;rebol-statictypingdynamiccompilation&quot;&gt;Rebol - Static Typing, Dynamic Compilation&lt;/h1&gt;

&lt;p&gt;Rebol has static typing, but dynamic compilation.&lt;/p&gt;

&lt;p&gt;We are accustomed to there being &lt;em&gt;one&lt;/em&gt; compilation time and &lt;em&gt;one&lt;/em&gt; runtime.&lt;/p&gt;

&lt;p&gt;Rebol has &lt;em&gt;multiple&lt;/em&gt; compilation times.&lt;/p&gt;

&lt;p&gt;The compilation of Rebol code depends on the &lt;em&gt;context&lt;/em&gt; that exists at the time of compilation.&lt;/p&gt;

&lt;p&gt;Rebol code is compiled at different times, within different contexts. This means that Rebol functions might be compiled differently at different times.&lt;/p&gt;

&lt;h1 id=&quot;appendix-rebolscoping&quot;&gt;Appendix - REBOL Scoping&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red&quot;&gt;https://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.hostilefork.com/rebol-vs-lisp-macros/&quot;&gt;http://blog.hostilefork.com/rebol-vs-lisp-macros/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.hostilefork.com/core-rebol-concept-flexible-series/&quot;&gt;http://blog.hostilefork.com/core-rebol-concept-flexible-series/&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Scoping Rebol</summary></entry><entry><title type="html">Variable names are not good enough</title><link href="https://computingsimplicity.neocities.org/2021/04/22/Variable-Names-Are-Not-Good-Enough.html" rel="alternate" type="text/html" title="Variable names are not good enough" /><published>2021-04-22T00:00:00-04:00</published><updated>2021-04-22T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/22/Variable%20Names%20Are%20Not%20Good%20Enough</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/22/Variable-Names-Are-Not-Good-Enough.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Variable Names Are Not Good Enough&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-22T11:39:14Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-22T11:39:14Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Variable Names Are Not Good Enough&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Variable names are a notational convenience.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, one should be able to explore variable names recursively.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in the formula:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y = mx + b&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;what is &quot;m&quot; and what is &quot;b&quot;?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If we rewrite the formula as:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y = slope * x + intercept&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;the equation becomes less readable (at least, for &quot;experts&quot;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchical Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Our editors should allow us to explore — expand — variable names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in the above formula, we should be able to click on &quot;m&quot; and ask for a lengthier name. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;From there, we should be able to push down and get even more detail, e.g. an explanation of the term &quot;slope&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;m —&amp;gt; slope —&amp;gt; description of &lt;i&gt;slope&lt;/i&gt; —&amp;gt; etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tooltips are Not Enough&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Tooltips, as they currently exist — hover over an item to get a longer phrase — are not &quot;enough&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need tooltips for tooltips.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need tooltips for tooltips for tooltips for …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Variable Names Are Not Good Enough</summary></entry></feed>