<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-26T18:51:14-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Test old with diagram</title><link href="https://computingsimplicity.neocities.org/2021/03/26/Test-old-with-diagram.html" rel="alternate" type="text/html" title="Test old with diagram" /><published>2021-03-26T00:00:00-04:00</published><updated>2021-03-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/26/Test%20old%20with%20diagram</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/26/Test-old-with-diagram.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Test old with diagram&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-26T18:50:59Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-26T18:50:59Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;qq qq&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram a&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;qwerty&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;qwerty&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-26-18-50-59-Images/patterns-Client Server With Router.png&quot; width=&quot;571px&quot; height=&quot;431px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Client Server With Router&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram 2a&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-26-18-50-59-Images/patterns-Daisy Chain.png&quot; width=&quot;300px&quot; height=&quot;111px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Daisy Chain&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(prioritized at the Architectural level)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Test old with diagram</summary></entry><entry><title type="html">Test text no diagrams</title><link href="https://computingsimplicity.neocities.org/2021/03/26/Test-text-no-diagrams.html" rel="alternate" type="text/html" title="Test text no diagrams" /><published>2021-03-26T00:00:00-04:00</published><updated>2021-03-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/26/Test%20text%20no%20diagrams</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/26/Test-text-no-diagrams.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Test text no diagrams&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-26T18:46:13Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-26T18:46:13Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;ppp&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;asdf&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Test text no diagrams</summary></entry><entry><title type="html">Message passing</title><link href="https://computingsimplicity.neocities.org/2021/03/26/Message-Passing.html" rel="alternate" type="text/html" title="Message passing" /><published>2021-03-26T00:00:00-04:00</published><updated>2021-03-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/26/Message%20Passing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/26/Message-Passing.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Message Passing&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;messagepassing&quot;&gt;Message Passing&lt;/h1&gt;

&lt;p&gt;In my opinion, the term &amp;#8220;message passing&amp;#8221; means &amp;#8220;fire and forget&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A single, atomic operation.&lt;/p&gt;

&lt;p&gt;Send ().&lt;/p&gt;

&lt;p&gt;Asynchronous.&lt;/p&gt;

&lt;p&gt;AFAICT, most current, so-called forms of message-passing consist of two atomic operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send ()&lt;/li&gt;
&lt;li&gt;Wait ().&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;which results in synchronous operation.&lt;/p&gt;

&lt;p&gt;Step 2. is usually implied by the use of CALL / RETURN.&lt;/p&gt;

&lt;p&gt;A gedanken test of true message-passing would be to convert all instances of all classes into separate threads (ignoring efficiency). One will be forced to convert every &amp;#8220;message send&amp;#8221; into two atomic operations â€” Send (), Wait ().&lt;/p&gt;

&lt;p&gt;Synchrony is so pervasive that we have sought ways to force-fit synchrony into inherently asynchronous paradigms (e.g. by using envelopes called threads, by implementing synchronous RPC, etc.).&lt;/p&gt;

&lt;h1 id=&quot;hardwaresupportglobalvariable&quot;&gt;Hardware Support Global Variable&lt;/h1&gt;

&lt;p&gt;It should be noted that our hardware, since The Stack was invented,&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; implicitly supports the synchronous CALL / RETURN paradigm by making The Stack into a global variable that records the dynamic call-chain.&lt;/p&gt;

&lt;p&gt;CALL modifies The Stack.&lt;/p&gt;

&lt;p&gt;RETURN modifies The Stack.&lt;/p&gt;

&lt;p&gt;Threads hide the fact The Stack is a global variable, by wrapping envelopes around it.&lt;/p&gt;

&lt;p&gt;See, also,
https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html
https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/p&gt;

&lt;h1 id=&quot;future&quot;&gt;Future&lt;/h1&gt;

&lt;p&gt;I believe that part of the future of computing lies in removing the redundant Wait ().&lt;/p&gt;

&lt;p&gt;We see it beginning to happen with distributed languages like HTML&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We see it beginning to happen with the exploration of languages based on relations, etc.&lt;/p&gt;

&lt;p&gt;We see the need for this arising in technologies like p2p and blockchain (which tend to be concerned with asynchronous operations and network protocols).&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Early IBM 360s did not have a Stack. Programmers needed to use the BALR instruction. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;See https://guitarvydas.github.io/2020/12/09/CALL&amp;#8211;RETURN&amp;#8211;Spaghetti.html for an idea on how to implement wait&amp;#8211;less Send() on current hardware. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Message Passing</summary></entry><entry><title type="html">Test with diagram</title><link href="https://computingsimplicity.neocities.org/2021/03/26/Test-With-Diagram.html" rel="alternate" type="text/html" title="Test with diagram" /><published>2021-03-26T00:00:00-04:00</published><updated>2021-03-26T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/26/Test%20With%20Diagram</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/26/Test-With-Diagram.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Test With Diagram&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;text&quot;&gt;text&lt;/h1&gt;

&lt;p&gt;cccc&lt;/p&gt;

&lt;p&gt;It should be noted that our hardware, since The Stack was invented,&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; implicitly supports the synchronous CALL / RETURN paradigm by making The Stack into a global variable that records the dynamic call-chain.&lt;/p&gt;

&lt;p&gt;CALL modifies The Stack.&lt;/p&gt;

&lt;p&gt;RETURN modifies The Stack.&lt;/p&gt;

&lt;p&gt;Threads hide the fact The Stack is a global variable, by wrapping envelopes around it.&lt;/p&gt;

&lt;p&gt;See, also,
https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html
https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/p&gt;

&lt;h1 id=&quot;diagram&quot;&gt;diagram&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-03-26-18:03:33-Images/&quot;patterns-UNIXpipeline.png&quot; alt=&quot;&quot; id=&quot;patterns-unixpipeline&quot; width=&quot;300&quot; height=&quot;68&quot; /&gt;
Fig. 1 UNIXÂ® Pipeline&lt;/p&gt;

&lt;h1 id=&quot;diagram2&quot;&gt;diagram 2&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-03-26-18:03:33-Images/&quot;patterns-Concentrator.png&quot; alt=&quot;&quot; id=&quot;patterns-concentrator&quot; width=&quot;300&quot; height=&quot;157&quot; /&gt;
Fig. 2 Concentrator&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Early IBM 360s did not have a Stack. Programmers needed to use the BALR instruction. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Test With Diagram</summary></entry><entry><title type="html">Patterns</title><link href="https://computingsimplicity.neocities.org/2021/03/25/Patterns.html" rel="alternate" type="text/html" title="Patterns" /><published>2021-03-25T00:00:00-04:00</published><updated>2021-03-25T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/25/Patterns</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/25/Patterns.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Patterns&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-25T15:45:38Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-25T15:45:38Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Patterns of Software Components&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Filter&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Filter.png&quot; width=&quot;100px&quot; height=&quot;56px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1Filter&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Filter With Exceptions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Filter with Exceptions.png&quot; width=&quot;100px&quot; height=&quot;56px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2Filter With Exceptions&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pipeline&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Pipeline.png&quot; width=&quot;303px&quot; height=&quot;25px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3Pipeline&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;UNIXÂ® Pipeline&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-UNIX pipeline.png&quot; width=&quot;300px&quot; height=&quot;68px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4UNIXÂ® Pipeline&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Feedback&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Feedback.png&quot; width=&quot;100px&quot; height=&quot;59px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5Feedback&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Feedback With Feedforward&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Feedback With Feedforward.png&quot; width=&quot;150px&quot; height=&quot;38px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6Feedback With Feedforward&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Client / Server&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Client Server.png&quot; width=&quot;200px&quot; height=&quot;74px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 7Client Server&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Client / Server With Router&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Client Server With Router.png&quot; width=&quot;300px&quot; height=&quot;225px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 8Client Server With Router&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Concentrator&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Concentrator.png&quot; width=&quot;300px&quot; height=&quot;157px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 9Concentrator&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Daisy Chain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Daisy Chain.png&quot; width=&quot;300px&quot; height=&quot;111px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 10Daisy Chain&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(prioritized at the Architectural level)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bus&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Bus Chain.png&quot; width=&quot;300px&quot; height=&quot;101px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 11Bus&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pull&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Pull.png&quot; width=&quot;200px&quot; height=&quot;62px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 12Pull&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Push&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-25-15-45-38-Images/patterns-Push.png&quot; width=&quot;200px&quot; height=&quot;65px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 13Push&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Patterns</summary></entry><entry><title type="html">Bootstrapping</title><link href="https://computingsimplicity.neocities.org/2021/03/25/Bootstrapping.html" rel="alternate" type="text/html" title="Bootstrapping" /><published>2021-03-25T00:00:00-04:00</published><updated>2021-03-25T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/25/Bootstrapping</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/25/Bootstrapping.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Bootstrapping&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-25T07:43:57Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-25T07:43:57Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bootstrapping&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Bootstrapping is a technique used by language designers (including compiler writers).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The idea is to &quot;test&quot; a language design by having it compile itself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a form of regression testing + agile-like testing.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Bootstrapping goes beyond just code testing, but also tests the basic concepts and UX of the language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Who is the customer?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In the case of a language, the customer is usually other programmers.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Bootstrapping tests the language design against a target customer (but only one such customer)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What code tests can be performed?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The largest code base for a newly-minted language is, usually, the language implementation, itself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bootstrapping can occur in two stages:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;test generated code against the manual implementation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;use the generated code to generate code (again) and diff the generated code against the generated-generated code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Language Evolution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Bootstrapping can show weak points in the language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The language design is tested and can evolve during bootstrapping.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation Evolution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Bootstrapping can show implementation gotchas and cause the implementation to evolve.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example: as I bootstrap the &lt;i&gt;glue&lt;/i&gt; language, I find places wherein I optimized. A compiler would have generated more-normalized code.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In particular, I used Ohm-JS's capitalization rules and whitespace elimination. Explicit whitespace would have sufficed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The goal of producing an identity transform pointed this out.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Compiler writers never produce identity transforms â€” they optimize whitespace away early (during the lexing phase). &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This simple change â€” striving for an identity transform â€” has made it possible to think &quot;out of the box&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Seeing it in this light, shows that the addition of capitalized-uncapitalized rule names in Ohm-JS is a bandaid optimization that does not help automation.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;This change &quot;sucks&quot; users into using it and to not being able to see possibilities for automation (much like the existence of fast registers sucked assembler programmers into manually-writing assembler code instead of automating the process bu using stack variables instead of register variables).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Bootstrapping</summary></entry><entry><title type="html">Cps considered to be a goto</title><link href="https://computingsimplicity.neocities.org/2021/03/25/CPS-Considered-to-be-a-GOTO.html" rel="alternate" type="text/html" title="Cps considered to be a goto" /><published>2021-03-25T00:00:00-04:00</published><updated>2021-03-25T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/25/CPS%20Considered%20to%20be%20a%20GOTO</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/25/CPS-Considered-to-be-a-GOTO.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;CPS Considered to be a GOTO&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-25T09:40:51Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-25T09:40:51Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GOTO&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CPS â€” continuation passing style â€” is just a generalization of GOTO.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;First-class functions, too, are just generalizations of GOTOs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;GOTO changes the program flow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;First-class functions, hence, CPS, allow one to pass program flow around as first-class objects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One can call a first-class function object, hence invoke a continuation via CPS, at any point, well-away from its origin. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In FORTRAN, there was a construct called a &quot;computed GOTO&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;CPS is even more &quot;powerful&quot; than this FORTRAN concept.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Spaghetti Flow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CPS (and first-class functions) &lt;i&gt;can &lt;/i&gt;lead to spaghetti coding, much like GOTO did.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Self-disciplined assembler programmers produced well-structured code in assembler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Average programmers needed &quot;help&quot; from Structured Programming languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Self-disciplined assembler programmers complained about Structured Programming languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;No one bothered to write code in assembler â€” structured or spaghetti â€” after the self-disciplined assembler programmers retired.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Self-disciplined FP programmers can produce well-structured code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Uses for CPS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CPS is a low-level operation, like GOTO.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, CPS is useful in building control-flow constructs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPS is used in Denotational Semantics â€” which is a method for building languages and control-flow constructs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPS should not be used for regular programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Unstructured used of first-class functions should not be used for regular programming, either.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Threads&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When FP breaks out of its sweet-spot, we have to resort to constructs like threads. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Threads are &lt;i&gt;envelopes&lt;/i&gt; that allow the calculator-like paradigm to continue to be used â€” each calculator being wrapped in its own envelope VM.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Threads are based on &lt;i&gt;state.&lt;/i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Thread envelopes hide this state, but do not eliminate state.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In some use-cases,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; this kind of &lt;i&gt;state&lt;/i&gt; is important enough that it should not be hidden from view.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is &lt;i&gt;possible&lt;/i&gt; to extend the FP paradigm beyond its sweet-spot, but the question that needs to be asked is whether this is a good idea.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Questions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The questions to be asked are:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;What are we trying to accomplish?&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Why do we need to extend our notation to include CPS?&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;What paradigm(s) is FP good for?&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;What paradigm(s) is FP not so good for?&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;The question is not: &quot;how do we paper-over the FP paradigm, once we have found a fault in it?&quot;&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Fix&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Structured Scaffolds&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;GOTOs were &quot;fixed&quot; by creating structured scaffolding around them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP creates structured scaffolding around constructs using its strict one-in-one-out rule (function-call-and-function-return (I won't mention exceptions, which are based on a dynamic global variable&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;)).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The FP paradigm is useful in one-in-one-out situations â€” e.g. fancy calculators&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;More Quesions&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Is &lt;i&gt;state&lt;/i&gt; The Problem?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Or, is &lt;i&gt;unstructured use of state&lt;/i&gt; a problem?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;State &lt;/i&gt;can be easily structured using StateCharts:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/25/statecharts-(again).html&quot;&gt;https://guitarvydas.github.io/2021/02/25/statecharts-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/StateCharts.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/StateCharts.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Were global variables The Problem?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Or was &lt;i&gt;unstructured use of variables&lt;/i&gt; a problem?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The solution was to invent scoped variables, and, local variables.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This implies that global variables were not actually the problem, but that unstructured use of variables was the problem.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Locality&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;Lambda calculus gives us &lt;i&gt;free variables&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At what point do &lt;i&gt;free variables&lt;/i&gt; become &lt;i&gt;global variables&lt;/i&gt;? &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When a closure fits on one line, the variables don't appear to be global.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When a closure fits on one window, the variables don't appear to be global.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When a closure is large and doesn't fit into one viewport of one window, the &lt;i&gt;free variables&lt;/i&gt; appear to be like &lt;i&gt;global variables&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It appears, to me, that &lt;i&gt;locality&lt;/i&gt; is more important than global-ness.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I could use&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; a mini-language that had &lt;span class=&quot;s1&quot;&gt;no&lt;/span&gt; local variables â€” and allowed only 26 variables at maximum.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;As long as lumps of that kind of code were well-isolated&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;, the global-ness of the variables did not bother me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, &lt;i&gt;types&lt;/i&gt; and &lt;i&gt;functions&lt;/i&gt; are in a &lt;i&gt;flat space&lt;/i&gt; and are not localized / structured. &lt;i&gt;Packaging &lt;/i&gt;systems are bandaids for this broader problem (of locality).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: How does one Structure the use of &lt;i&gt;types&lt;/i&gt;?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;How does one Structure the use of &lt;i&gt;functions&lt;/i&gt;?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Without causing new/hidden dependencies?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Is &lt;i&gt;packaging&lt;/i&gt; enough or is it a bandaid?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inheritance&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Inheritance&lt;/i&gt; breaks locality, much like CPS does.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is possible to invoke a method well-away from the original source point.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Inheritance &lt;/i&gt;for structuring code leads to debugging problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;One finds it hard to understand which methods can be overridden and where they are.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Composition&lt;/i&gt; exhibits less of this kind of problem.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: Can &lt;i&gt;inheritance&lt;/i&gt; be cleaved into two pieces?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The &quot;good&quot; inheritance vs. the &quot;bad&quot; kind?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: What is &lt;i&gt;code reuse&lt;/i&gt;?&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;A: An implementation detail.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: What is &lt;i&gt;architectural reuse&lt;/i&gt;?&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Calculators and Desktops&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Calculators are like desktops â€” old-fashioned concepts that act like bridges into new paradigms.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;It is my understanding that electric motors were first used to pump water uphill to create artificial streams that could power water wheels for mills and factories.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Paradigms for Each Solution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that it is important to use paradigms that fit the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I believe in using multiple paradigms to solve any one problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;IMO, force-fitting the same paradigm onto all problems is old-fashioned thinking.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I believe that programming can break through its asymptote only through the development of muti-paradigm workflows.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;FYI - I, also, believe that diagrams should be raised to the same level of syntax as text.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Diagrams show nesting in ways that is harder-to-read in text.&lt;/i&gt;]&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;e.g. sequencers, DAWs, machine control, robots&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; e.g. ballistics calculations&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;span class=&quot;s3&quot;&gt;and, once, implemented&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Reuse.html&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot;
        repo=&quot;guitarvydas/guitarvydas.github.io&quot;
        issue-term=&quot;pathname&quot;
        theme=&quot;github-light&quot;
        crossorigin=&quot;anonymous&quot;
        async&gt;
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">CPS Considered to be a GOTO</summary></entry><entry><title type="html">Svg to code (1)</title><link href="https://computingsimplicity.neocities.org/2021/03/24/SVG-to-Code-(1).html" rel="alternate" type="text/html" title="Svg to code (1)" /><published>2021-03-24T00:00:00-04:00</published><updated>2021-03-24T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/24/SVG%20to%20Code%20(1)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/24/SVG-to-Code-(1).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;SVG to Code (1)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-24T14:54:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-24T14:54:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I describe the first four phases of converting an SVG diagram to code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This example is &lt;i&gt;very&lt;/i&gt; simple, but the technique has been used on large problems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The example uses an SVG diagram containing one &lt;i&gt;rect &lt;/i&gt;and two &lt;i&gt;text &lt;/i&gt;elements.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I convert the diagram to PROLOG rules, using PEG.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In this particular case I use a PEG to generate another PEG that forms a JavaScript program that outputs relations.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use SWIPL to perform inferencing over the relations to output various results.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;One could use &lt;i&gt;any &lt;/i&gt;language to do the inferencing&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  Â  Â  Â  Â  Â  &lt;/span&gt;I hope to show relations in a very basic form that needs no knowledge of PROLOG.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The code for this essay can be found in&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/svgtranspile&quot;&gt;https://github.com/guitarvydas/svgtranspile&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and the code for the PEG-&amp;gt;PEG transpiler tool, called&lt;i&gt; glue&lt;/i&gt;, is documented at:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/18/Little-Language.html&quot;&gt;https://guitarvydas.github.io/2021/03/18/Little-Language.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(code for &lt;i&gt;glue: &lt;/i&gt;&lt;a href=&quot;https://github.com/guitarvydas/glue&quot;&gt;https://github.com/guitarvydas/glue&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SVG File&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The SVG used in this essay is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;600&quot; height=&quot;510&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;&amp;lt;rect width=&quot;200&quot; height=&quot;100&quot; fill=&quot;lightyellow&quot; style=&quot;stroke-width:1;stroke:black&quot; &amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;&amp;lt;text x=&quot;100&quot; y=&quot;55&quot; fill=&quot;black&quot;&amp;gt;output&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;&amp;lt;text x=&quot;300&quot; y=&quot;55&quot; fill=&quot;black&quot;&amp;gt;floating&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Sorry, your browser does not support inline SVG. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When viewed in a browser, the SVG shows one rectangle (lightyellow) and two text fragments (&quot;output&quot; and &quot;floating&quot;).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One text fragment â€” &quot;output&quot; â€” appears to be inside the rectangle.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The other text fragment is not enclosed by any rectangle.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-03-24-14-54-12-Images/Screen Shot 2021-03-23 at 3.17.38 PM.png&quot; width=&quot;200px&quot; height=&quot;115px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SVG to Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The conversion from SVG to factbase format &lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is performed by using the &lt;i&gt;glue &lt;/i&gt;tool.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This can be seen in &lt;span class=&quot;s1&quot;&gt;run.bash.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The conversion is done in two steps (an arbitrary choice, but saves me time and maintains the DI&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The steps require:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;a pattern for SVG files&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;a specification of how to emit code for matches.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The SVG pattern is found in the file &lt;span class=&quot;s1&quot;&gt;svg.ohm&lt;/span&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Typically, a pattern is fed into the Ohm-JS tool after which one writes JavaScript code&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; to &lt;i&gt;do&lt;/i&gt; something with the resulting matches.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I chose to write another SCL (aka DSL) instead of writing raw JavaScript code manually.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I let the SCL&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; write the JavaScript for me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Basic Facts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The starting set of facts, gleaned from the SVG file, are:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;fill&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height_str&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rect&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;svgbox&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;string&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;text&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width_str&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x_str&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y_str.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &quot;â€¦_str&quot; facts remind me that values in the triples are strings, not numbers.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Strings to Numbers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;As it stands, the factbase triples contain numeric data in the form of strings.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The file &lt;span class=&quot;s1&quot;&gt;num.pl &lt;/span&gt;converts these strings into numbers.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anti-Abstraction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The pattern actually &lt;i&gt;over-specifies&lt;/i&gt; the SVG pattern matching, for example &lt;span class=&quot;s1&quot;&gt;element&lt;/span&gt; is broken down as four basic matches, where it could have specified with only one match.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is an idiom for using pattern-matchers â€” let the matcher supply the matching context.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;This is exactly the opposite of &lt;i&gt;abstraction&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I wrote redundant rules, letting the pattern matcher do more work for me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automation - Using Code to Write Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You can create SCLs (DSLs) more easily if:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;You use PEG pattern matchers&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;You make the output code very repetitive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code that is &quot;not repetitive&quot; creates edge-cases that need to be handled.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Removing such edge-cases is vital to allowing quick construction of little languages â€” SCLs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine using a REGEX library in your favourite PL.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;REGEX is a DSL, but you rarely stop to think of it as a full-blown DSL, you just use it.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;REGEX's work well for line-oriented data with few &quot;edge cases&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The ideal situation is to use pattern matchers like one uses REGEXs.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Compiler technologies and DSLs have been steeped in mysticism, taking many months to build.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;PEG brings &quot;compiler technology&quot; into the realm of programming, taking only a day to build an SCL instead of taking months/years.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The &quot;tricks&quot; for getting such rapid turn-around are the same as for REGEXs â€” don't try do to type-checking, don't accomodate many edge-cases.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Let the underlying language handle type-checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Get rid of edge-cases by looking for highly repetitive code sequences&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEX likes input that is arranged in lines of text.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG likes input that is arranged in nested blocks of text.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Patterns in REGEX are called &lt;i&gt;REGEXs&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Patterns in PEG are called &lt;i&gt;grammars&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote a PEG pattern matcher for SVG and I wrote another PEG pattern matcher for my &lt;i&gt;glue&lt;/i&gt; SCL. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The job of &lt;i&gt;glue&lt;/i&gt; is straight-forward and has almost no edge-cases.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The idea is that Ohm-JS needs a block of JavaScript functions â€” one function for each &lt;i&gt;rule&lt;/i&gt; in the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In this case, I needed code that would rearrange matching code bits and format them for output.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;JavaScript back-tick strings (and C format strings, and &lt;i&gt;bash &lt;/i&gt;strings, etc.) would be enough to do the job, so I wrote a simple tool that created &lt;i&gt;semantics&lt;/i&gt; JavaScript code for me, using JavaScript back-tick strings.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have used Ohm-JS many times before.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I knew that I would encounter simple formatting problems like this again, so the 1-day development effort was deemed acceptable.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I would not have built this SCL if I knew that it would take some months or years.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My thinking has changed since I realized that I could cut development time down by about a factor of 10.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I cut corners â€” instead of automatically inserting the generated code into my Ohm-JS pattern matcher, I simply use my editor's COPY/PASTE function.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In fact, I used the command-line &lt;i&gt;cat&lt;/i&gt; program to paste the code into the Ohm-JS pattern matcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;If this was used very frequently, I would look at tools like &lt;i&gt;m4&lt;/i&gt; to help with COPY/PASTING&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DI&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If you look at the generated code generated by the &lt;i&gt;glue &lt;/i&gt;tool, all of the simplicity, of simply formatting the output, is hidden in a sea of JavaScript coding details. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The ideal of DI&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; is to show only what matters, eliding coding details.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The &lt;i&gt;specification&lt;/i&gt; of mapping SVG matches into formatted output is captured in the file svg2p.glue, while the rest of the details - JavaScript code - are deferred (and in this case, generated by a small tool).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;svg2p&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The specification for mapping SVG to formatted output is in file &lt;span class=&quot;s1&quot;&gt;svg2p.glue&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, the first line:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;says that when an htmlsvg pattern is matched (see &lt;span class=&quot;s1&quot;&gt;svg.ohm&lt;/span&gt;), it will have 7 sub-matches, named ws, docH, htmlH, bodyH, elements, bodyE and htmlE (resp.). &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The spec says that &lt;span class=&quot;s1&quot;&gt;ws&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;elements&lt;/span&gt; may contain multiple matches (i.e. these multiple-matches are returned by Ohm-JS in JavaScript arrays). &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After the pattern-matching is finished, the matches in &lt;span class=&quot;s1&quot;&gt;elements&lt;/span&gt; are simply printed out and the rest of the matches are ignored. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The right-hand-side of the &quot;=&quot; is taken to be a JavaScript back-tick string, in this case &lt;span class=&quot;s1&quot;&gt;${elements}&lt;/span&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The whole right-hand-side is wrapped with back-ticks and emitted as a JavaScript string, e.g.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;return `${elements}`. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; tool also does some housekeeping for me and evaluates the sub-matches as required by Ohm-JS&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hand-Optimization Urge&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The formatted code, output by my use of the &lt;i&gt;glue&lt;/i&gt; tool, is very repetitive. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most programmers would &lt;span class=&quot;s2&quot;&gt;not&lt;/span&gt; create such repetitive code and would feel compelled to &quot;optimize&quot; it, thereby, creating more edge-cases for formatting. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This urge-to-hand-optimize happened, also, during the transition from &lt;i&gt;assembler&lt;/i&gt; programming to HLLs (like C and Pascal).&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Assembler programmers could not resist the urge to write &quot;better&quot; code.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Compilers continued to emit very repetitive code, which was &quot;worse&quot; than that created by assembler programmers.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Then &lt;i&gt;gcc&lt;/i&gt; came along.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;&lt;i&gt;Gcc&lt;/i&gt; optimized the repetitive code sequences and bettered most hand-written assembler code (at worst, it matched the &quot;best&quot; hand-written code).&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;After that, few programmers bothered to write code in assembler any moreÂ¡.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I view all current PLs as mere assembly languages and use PEG to build SCLs on top of them.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Some PLs make &quot;better&quot; targets for automation than others &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;It boils down to unnecessary edge-cases&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; and unnecessary syntactic sugar.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In this essay, I treat JavaScript and PROLOG as assembler languages and automatically transpile code into their syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;IMO, paradigms, such as OO and FP and relations, are often conflated with syntactic sugar.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;It is not possible to create a syntax that fits all use-cases.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Paradigms and syntax should be treated orthogonally.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Experimenting with paradigms is not the same as experimenting with syntax&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sorting&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG requires that rules be clumped together.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIXÂ® &lt;i&gt;sort&lt;/i&gt; is enough to produce this clumping.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I leave the factbase unsorted for ease-of-reading.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I call &lt;i&gt;sort&lt;/i&gt; to create factbases for use with PROLOG.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bounding Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We want to &quot;normalize&quot; data so that it is easier to search.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To this end, we want &lt;i&gt;all&lt;/i&gt; shapes to have the same form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have learned, through experience, that creating a bounding box for every shape is a useful normalization&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are some shapes that do not fit the bounding-box model, notably lines.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;We'll treat lines differently.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In this example, there are no lines at all, so â€” problem solved :-).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;SVG specifies &lt;i&gt;rect&lt;/i&gt;s in (x,y,width,height) form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A bounding box for &lt;i&gt;rect&lt;/i&gt;s would be (left,top,right,bottom) form,&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;which means that we need to expand width and height in some way.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;SVG &lt;i&gt;text&lt;/i&gt; elements are specified only as (x,y).&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;We would need to know the font-size and the string size of each string to create bounding boxes for &lt;i&gt;text&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;This is not impossible to do, but we will avoid it in this example&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;For now, we will not create bounding boxes for strings and will use only their (x,y) points.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Later, we can decide if this approximation causes us problems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So, we will create bounding boxes for &lt;i&gt;rect&lt;/i&gt;s (only).&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;To do this, we are going to need to write code that converts (x,y,w,h) into (l,t,r,b), something like:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;left = x&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;top = y&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;right = x + width&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bottom = y + width&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So, for &lt;i&gt;every&lt;/i&gt; &lt;i&gt;rect&lt;/i&gt;, we will need to lookup its (x,y,w,h) and create a new bounding-box fact that contains (l,t,r,b).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We store all information in normalized triple form, so we need to find all&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rect(R,&quot;&quot;)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x(R,X)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y(R,Y)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width(R,W)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height(R,H)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and convert this information into bounding box triples, such as&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bbleft(R,X)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bbtop(R,Y)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bbright(R,X+W)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;bbbottom(R,Y+H)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Obviously, we could use a &lt;i&gt;loop&lt;/i&gt; or &lt;i&gt;recursion&lt;/i&gt; to perform such searches an insertions.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I have done this many times and have found that PROLOG gives me an easy way to write this kind of searching-and-inserting-code.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I will use PROLOG&lt;a id=&quot;fnlink13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn13&quot;&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note: there is no need to optimize the contents of the factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;We can just keep adding facts to the factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Defer optimization until later (I have done this many times and have never needed to optimize the factbase â€” a demonstration of the power of procrastination!).&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The searching algorithms simply skip over unneeded facts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, the above pseudo-code is almost PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I need to add comma (instead of semi-colons as in some other language) to the end of phrases and, I need to check that PROLOG variables are written beginning with upper-case letters and everything else is written beginning with lower-case letters&lt;a id=&quot;fnlink14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn14&quot;&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The end of each rule needs to end with a period (.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The resulting code can be seen in &lt;span class=&quot;s1&quot;&gt;bb.pl&lt;/span&gt; and it is executed in &lt;span class=&quot;s1&quot;&gt;run.bash&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Names for Rects&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Next, we want to assign names to every &lt;i&gt;rect&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Every &lt;i&gt;text&lt;/i&gt; element contains text and we will simply look for &lt;i&gt;text&lt;/i&gt; (x,y)s that are &lt;i&gt;inside&lt;/i&gt; rectangles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my expected use-case for this kind of diagram, I will have big rectangles that represent software components and smaller rectangles that represent &lt;i&gt;port&lt;/i&gt;s for the components (coloured palegreen for &lt;i&gt;input ports&lt;/i&gt; and lightyellow for &lt;i&gt;output ports&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All &lt;i&gt;ports&lt;/i&gt; and all &lt;i&gt;components&lt;/i&gt; will have a name. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will use a simple check to determine names for &lt;i&gt;rect&lt;/i&gt;s â€” &quot;is the (x,y) of the &lt;i&gt;text&lt;/i&gt; enclosed in the (l,t,r,b) of the &lt;i&gt;rect?&lt;/i&gt;&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This simple check makes it possible that one &lt;i&gt;text&lt;/i&gt; element will be inside &lt;span class=&quot;s2&quot;&gt;more than one&lt;/span&gt; rectangle, e.g. a port name inside the &lt;i&gt;port&lt;/i&gt; and inside the &lt;i&gt;component&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;To ensure that we don't map the same name to a &lt;i&gt;port&lt;/i&gt; and its &lt;i&gt;component&lt;/i&gt;, we will use the simple rule that a &lt;i&gt;text&lt;/i&gt; matches with only the &lt;i&gt;smallest&lt;/i&gt; &lt;i&gt;rect&lt;/i&gt; that can be found.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;This check might not be enough, but it will suffice for this example and will show the general gist of how to build PLs based on DaS&lt;a id=&quot;fnlink15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn15&quot;&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The code for finding such matches is in &lt;span class=&quot;s1&quot;&gt;names.pl&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;See, also &lt;span class=&quot;s1&quot;&gt;run.bash&lt;/span&gt;, for how to execute this code and append its output to the factbase.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Design Rule Check (Example)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At various points in the workflow, we will want to throw-in various design rule checks.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Existing, text-based PLs, tend to do all of the checks at once. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is called &quot;type checking&quot;, &quot;semantic analysis&quot;, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In our case, we are creating a workflow that is a pipeline of fact-creators that ends with code formatters.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;We can add checks at any point in the workflow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As (only) one example of this kind of checking, I've built a filter that checks for floating &lt;i&gt;text&lt;/i&gt; â€” text that is not enclosed in any &lt;i&gt;rect&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The code for this one design rule checker is in &lt;span class=&quot;s1&quot;&gt;uncontainednames.pl&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We would want to add more checks to create a more useful version of this example.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Again, see &lt;span class=&quot;s1&quot;&gt;run.bash&lt;/span&gt;, to see how I decided to run the checker.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;e.g. Scheme, JavaScript using loops-within-loops or with my js-prolog library https://github.com/guitarvydas/js-prolog, or any other language.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;DI means Design Intent (often called Architecture).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Called the &quot;semantics&quot;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;I call the SCL tool &quot;glue&quot;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;This is what compiler-writers do.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;They generate &quot;some&quot; code, then &quot;optimize&quot; it with other tools.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;In fact, m4 does a lot of what OO is meant for.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I haven't tried, but I think that m4 could be used to implement Bennett's Frames.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;DI is Design Intent.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;All of this emits JavaSCript code.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;e.g. declaration before use&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;This is another instance of fractal-thinking.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;What we generally consider to be PLs, can be broken down into two sub-components - paradigm and syntax.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;YMMV&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;For example, a reasonable first approximation imight be to assume that all text is in 12-point font.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;We won't deal with this problem in this example and will defer it to later.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink13&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[13]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;You don't have to use PROLOG, if you don't want to.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn14&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink14&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[14]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;The pseudo-code is already written that way.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink15&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[15]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;DaS means Disagrams as Syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">SVG to Code (1)</summary></entry><entry><title type="html">Glue manual</title><link href="https://computingsimplicity.neocities.org/2021/03/24/Glue-Manual.html" rel="alternate" type="text/html" title="Glue manual" /><published>2021-03-24T00:00:00-04:00</published><updated>2021-03-24T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/24/Glue%20Manual</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/24/Glue-Manual.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Glue Manual&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-24T15:49:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-24T15:49:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 9.0px Palatino}
    span.s3 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; converts one language into another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue &lt;/i&gt;goes one step further than REGEXs and I believe that it is as easy to use as REGEXs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue &lt;/i&gt;is a tool for building &lt;i&gt;transpilers&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As an example, in another essay,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; I use &lt;i&gt;glue &lt;/i&gt;to convert SVG diagams into programs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Technically, &lt;i&gt;glue &lt;/i&gt;is a PEG&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; to help in writing PEGs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Basics&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The little language, that the I call &lt;i&gt;glue,&lt;/i&gt; is used to generate JavaScript code to be used with transpilers constructed with Ohm-JS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; specifications consist of one &quot;statement&quot; for every matching Ohm-JS grammar &lt;i&gt;rule&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each specification statement gives the expected Ohm-JS grammar plus variables that hold the sub-matches. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each specification statement defines a mapping from sub-matches to output format.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each specification statement can include setup code and access to a dynamically scoped set of variables.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;&lt;i&gt;Glue &lt;/i&gt;emits code to create variable frames for each each grammar rule at runtime.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss efficiency of this approach.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This little language could use a better name.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;At the time of creation &quot;glue&quot; had meaning (to me).&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In retrospect, this little language has more to do with generating semantic code for Ohm-JS and might need to be renamed to something more appropriate.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;OTOH, I would think that, if this little language were to be used frequently, it would be rolled into a single tool workflow and combined with Ohm-JS and that the rolled-together workflow would be given its own, unique, name.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Working Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To ease discussion, we will consider an actual use-case&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; of &lt;i&gt;glue&lt;/i&gt;:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlHeader [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlEnd [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;bodyHeader [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;bodyEnd [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;docTypeHeader [_1 @stuff _2 @ws] = ${_1}${stuff}${_2}${ws}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;element [e] = ${e}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;svgElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; Â  Â  &lt;/span&gt;{{ var name = &quot;svg&quot;; scopeAdd (&quot;path&quot;, name); scopeAdd (&quot;counter&quot;, 0); }}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;[[ svgbox(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;${elements}]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;rectElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;{{ var name = scopeGet (&quot;path&quot;) + &quot;_rect_&quot; + gen (); scopeAdd (&quot;path&quot;, name); }}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;[[&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  &lt;/span&gt;rect(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  &lt;/span&gt;${elements} ]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;textElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;{ var name = scopeGet (&quot;path&quot;) + &quot;_text_&quot; + gen (); scopeAdd (&quot;path&quot;, name); }}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;[[&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  Â  &lt;/span&gt;text(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  Â  &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  Â  &lt;/span&gt;${elements}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â  Â  Â  &lt;/span&gt;string(${name}, &quot;${text}&quot;). ]]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;basicElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] = ${_1}${_2}${ws}${attributes}${_5}${_6}${elements}${text}${_9}${_10}${_11}${_12}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;attribute [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;widthAttribute [_ _eq str @_ws] = [[width_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;heightAttribute [_ _eq str @_ws] = [[height_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;xAttribute [_ _eq str @_ws] = [[x_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;yAttribute [_ _eq str @_ws] = [[y_str(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;fillAttribute [_ _eq str @_ws] = [[fill(${scopeGet (&quot;path&quot;)},${str}).\n]]&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;genericAttribute [_ _eq str @_ws] = \n&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;text [x] = ${x}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;name [c @cs] = ${c}${cs}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;name1st [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;nameFollow [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;stuff [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;string [_1 @cs _2] = &quot;${cs}&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;notQ [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;ws [c] = ${c}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Formatted Strings&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; produces one formatted string for each grammar rule.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;LHS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Each statement corresponds to a &lt;i&gt;rule&lt;/i&gt; in the accompanying Ohm-JS grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first line of our example is&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;which we will elide in phases:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlsvg â€¦ = â€¦&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first line corresponds to an Ohm-JS grammar &lt;i&gt;rule&lt;/i&gt; named &quot;htmlsvg&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar parses&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;7 sub-matches, given in our specification inside brackets:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;â€¦ [@ws docH htmlH bodyH @elements bodyE htmlE] = â€¦&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Here, we have defined 7 JavaScript variables (parameters, actually) â€” ws, docH, htmlH, bodyH, elements, bodyE and htmlE.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All variables prefixed with &quot;@&quot; are multiple-match items generated by the Ohm-JS grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;In this case, &lt;span class=&quot;s1&quot;&gt;ws&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;elements&lt;/span&gt; are the multiple-match items.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Multiple-match items correspond to the use of &quot;?&quot;, &quot;*&quot; and &quot;+&quot; operations in the grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The LHS creates, roughly, a JavaScript function, eg.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function htmlsvg (ws, docH, htmlH, bodyH, elements, bodyE, htmlE) {&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;â€¦&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The parameters are evaluated in the body of the function, as required by Ohm-JS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple-match items are evaluated one step further in the body of the function (multiple-matches return an array of CSTs&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;, and evaluation consists of flattening the arrays into single strings using the .join('') operator of JavaScript).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;RHS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The right-hand-side is a block of characters that are combined into JavaScript back-tick strings.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;â€¦ = ${elements}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This RHS results in JavaScript code&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;`${elements}`&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If we look at the whole 1&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt; statement:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlsvg [@ws docH htmlH bodyH @elements bodyE htmlE] = ${elements}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;we see that the specification says to flatten and format the &lt;span class=&quot;s1&quot;&gt;elements&lt;/span&gt; parameter and discard the other 6 parameters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The second line of the example,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;htmlHeader [_ @ws] = ${_}${ws}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;says that when an htmlHeader grammar rule is matched, it should be mapped to a string containing the first&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; (&quot;_&quot;) and second (&quot;ws&quot;) parameters. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most of the &lt;i&gt;glue &lt;/i&gt;specifications have this form&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;match, format. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The exceptions are specifications 8, 9 and 10.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specification 8&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;svgElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; Â  Â  &lt;/span&gt;{{ var name = &quot;svg&quot;; scopeAdd (&quot;path&quot;, name); scopeAdd (&quot;counter&quot;, 0); }}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;[[ svgbox(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;${elements}]]&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;has the form&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;ruleName [ parameters ] = {{ JavaScript code }} [[ formatting ]]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, the &lt;span class=&quot;s1&quot;&gt;format&lt;/span&gt; specification is wrapped by double brackets [[ â€¦ ]] (whereas in most other lines, it does not need to be wrapped with double brackets).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is extra code wrapped in double-braces {{ â€¦ }} on the RHS.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;This code is copied verbatim to the transpiled output.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;This code is meant to contain local variables, and, scoped variables (see separate section).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specification 8 says&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;svgElement [_1 _2 @ws @attributes _5 @_6 @elements @text _9 _10 _11 @_12] =&lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;Â Â &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; Â  Â  &lt;/span&gt;{{ var name = &quot;svg&quot;; scopeAdd (&quot;path&quot;, name); scopeAdd (&quot;counter&quot;, 0); }}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;[[ svgbox(${name},&quot;&quot;).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;${attributes}&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;Â  Â  &lt;/span&gt;${elements}]]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;to create a JavaScript variable &quot;name&quot; and to add two scoped variables to the scope stack (&quot;path&quot; and &quot;counter&quot;). &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, the usual formatting occurs.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Everything inside the double-brackets is wrapped in a JavaScript back-tick string, e.g. `&lt;span class=&quot;s1&quot;&gt;svgbox(${name},&quot;&quot;)â€¦&lt;/span&gt;`.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;JavaScript variables and scoped variables can be included in the format back-string.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scoped Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, the &lt;i&gt;glue&lt;/i&gt; transpiler inserts code at all rule entry and exit points&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;_ruleEnter (&quot;rule name&quot;);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;_ruleExit (&quot;rule name&quot;);&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These enter/exit functions push and pop stack frames for dynamically scoped variables.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The rule names are passed in as strings, if debugging code is added to the enter/exit functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As it stands, the mainline function must call&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;_ruleInit ();&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;to initialize the dynamic variable scope stack.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic variables act somewhat like inheritance in graphical systems, e.g. when a variable is pushed onto the stack (scopeAdd()), it shadows all other variables with that same name, when a variable is dereferenced (scopeGet()), the top-most value is returned.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The API for dynamic variables is:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;scopeAdd (&quot;name&quot;, value)
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;pushes &lt;i&gt;value&lt;/i&gt; onto the stack under the name &lt;i&gt;name&lt;/i&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;scopeGet (&quot;name&quot;)
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;returns the top-most value on the stack with the given name&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;scopeModify (&quot;name&quot;, value)
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;outlier for special cases - modifies the top-most variable of the given name&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;in the example code, this is used to create a &quot;global&quot; counter used for creating unique formatted variable names&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;_ruleInit ()
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;must be called once before parsing&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this example, I've place all &quot;outside&quot; functions into a file called &lt;span class=&quot;s1&quot;&gt;foreign.js&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a form of fractal eliding.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The code is needed to satisfy the JavaScript compiler, but its implementation is uninteresting at the DI layer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;It is the Architect's responsibility to make the design clear and understandable to readers.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this example, there is but one foreign function â€” &lt;span class=&quot;s1&quot;&gt;gen()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I chose to put the &lt;span class=&quot;s1&quot;&gt;gen()&lt;/span&gt; function into a separate file and to call it from the &lt;i&gt;glue&lt;/i&gt; specification.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;Other Architects might choose to do this differently.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IMO, the &lt;span class=&quot;s1&quot;&gt;gen() &lt;/span&gt;function contains implementation details and, IMO, such details must be pushed out of the specification and elided.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Efficiency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue &lt;/i&gt;tool is used only by the grammar programmer. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, &lt;i&gt;glue&lt;/i&gt; is used infrequently in the programmer's workflow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, efficiency of &lt;i&gt;glue&lt;/i&gt; is not a major issue.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;The only &quot;rule&quot; is &quot;is it fast enough for use?&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I suspect, but haven't even bothered to measure, that the implementation of scoped dynamic variables would be considered &quot;inefficient&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I stick to the YAGNI principle â€” the &lt;i&gt;glue&lt;/i&gt; tool works &quot;fast enough&quot; on my laptop (there is no perceived time taken by the &lt;i&gt;glue&lt;/i&gt; tool â€” it appears to operate instantly with no delay â€” that is &quot;good enough&quot; and no time has been spent making it faster).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Error Handling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Glue&lt;/i&gt; does not check for any errors and leaves all error handling to the support language â€” JavaScript and Ohm-JS, in this case.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS does sufficient error checking (more than JavaScript).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One needs to &quot;know&quot; how Ohm-JS works to use the &lt;i&gt;glue&lt;/i&gt; tool, in its present form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Postscript - Architectural Reuse&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal was to build something &quot;as quickly as&quot; building an editor macro instead of building a full-blown DSL or building a full-blown PL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This tool would not have been built if its construction was estimated to take longer than a few hours.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;SCLs based on PEG are meant to be one-use-only DSLs, like REGEXPs are in other existing languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The semantics of &lt;i&gt;glue&lt;/i&gt; are quite uncomplicated.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;There was just enough work put in &quot;to get the job done&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;I can throw &lt;i&gt;glue&lt;/i&gt; away and build something bigger and more complicated if the situation arises. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I would retain the experience from building this tool and use this experience when building the next one.&lt;span class=&quot;Apple-converted-space&quot;&gt;Â  &lt;/span&gt;A case of Architectural Reuse instead of plain code reuse.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using fractal-design principles, I would keep chopping a problem down into sub-components until I could implement it in whatever way I choose (using &lt;i&gt;glue&lt;/i&gt; or ignoring &lt;i&gt;glue&lt;/i&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See &quot;SVG to Code (1)&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Don't worry if you don't understand this statement or you don't know what a PEG is.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See my essay &quot;SVG to Code&quot;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;CST means Concrete Syntax Tree â€” basically the AST (Abstract Syntax Tree) instantiated with actual matches.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;In JavaScript, underscore &quot;_&quot; is an ordinary character, hence, _ is a variable name that is one character long.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Glue Manual</summary></entry><entry><title type="html">Regex vs peg</title><link href="https://computingsimplicity.neocities.org/2021/03/24/REGEX-vs-PEG.html" rel="alternate" type="text/html" title="Regex vs peg" /><published>2021-03-24T00:00:00-04:00</published><updated>2021-03-24T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/24/REGEX%20vs%20PEG</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/24/REGEX-vs-PEG.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;REGEX vs PEG&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-24T09:09:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-24T09:09:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;REGEXs came from compiler technology. &lt;span class=&quot;Apple-converted-space&quot;&gt;Â &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;PEGs come from compiler technology.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">REGEX vs PEG</summary></entry></feed>