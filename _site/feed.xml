<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-01-23T11:18:49-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">The case for fanout</title><link href="https://computingsimplicity.neocities.org/2021/01/23/The-Case-For-Fanout.html" rel="alternate" type="text/html" title="The case for fanout" /><published>2021-01-23T00:00:00-05:00</published><updated>2021-01-23T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/23/The%20Case%20For%20Fanout</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/23/The-Case-For-Fanout.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Case For Fanout&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-23T11:18:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-23T11:18:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fan Out&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Fanout means that the output from one port can be split to several components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP does not allow fanout.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;AG does allow fanout.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I show the difference between these methods, in this essay.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;A simple &quot;hello world&quot; example is shown in Fig. 1.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing.png&quot; width=&quot;200px&quot; height=&quot;101px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Hello World&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing1.png&quot; width=&quot;200px&quot; height=&quot;101px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 FBP Hello World&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Copies of FBP Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing2.png&quot; width=&quot;200px&quot; height=&quot;182px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 FBP Hello World Twice&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP Lasso Subnets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing3.png&quot; width=&quot;200px&quot; height=&quot;220px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Lasso FBP Subnets&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP Subcomponent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing4.png&quot; width=&quot;200px&quot; height=&quot;330px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5 FBP Subcomponent&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AG Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing5.png&quot; width=&quot;200px&quot; height=&quot;92px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6 AG Hello World&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Copies of AG Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing6.png&quot; width=&quot;200px&quot; height=&quot;200px&quot; alt=&quot;Image&quot;&gt;Fig. 7 AG Hello World Twice&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AG Lasso Subnets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing7.png&quot; width=&quot;200px&quot; height=&quot;160px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 8 AG Lasso Subnets&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AG Subcomponent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing8.png&quot; width=&quot;200px&quot; height=&quot;160px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 9 AG Subcomponent&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Case For Fanout</summary></entry><entry><title type="html">Superposition 2</title><link href="https://computingsimplicity.neocities.org/2021/01/23/superposition-2.html" rel="alternate" type="text/html" title="Superposition 2" /><published>2021-01-23T00:00:00-05:00</published><updated>2021-01-23T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/23/superposition%202</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/23/superposition-2.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;superposition&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-23T10:20:55Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-23T10:20:55Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    span.s1 {font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Superposition is a fancy word for something that everyone understands by intuition.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will try to show a simple example of a system, then show how one intuitively understands the system.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will discuss why superposition is important, later.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Example of Superposition:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine that we have a circuit with two batteries, one that puts out +5v and another that puts out +5v.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I show the situation in &lt;span class=&quot;s1&quot;&gt;Fig. 1 5 + 5 = ?.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to know the resulting voltage when we connect both batteries up together.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is not tricky - the answer is &quot;obvious&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;We want to be able to understand &lt;i&gt;all &lt;/i&gt;of our designs this way, regardless of how complicated they are.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing.png&quot; width=&quot;300px&quot; height=&quot;168px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 5 + 5 = ?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We can understand (aka &quot;analyze&quot;) this situation in steps.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Step 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing1.png&quot; width=&quot;300px&quot; height=&quot;81px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Step 1. 5 + ? = ?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Step 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing2.png&quot; width=&quot;300px&quot; height=&quot;81px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 Step 2. ? + 5 = ?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Answer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing3.png&quot; width=&quot;300px&quot; height=&quot;127px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 The Answer. 5 + 5 = 10&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Superposition is used in many fields.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, electronics, quantum physics, geology, Engineering, etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The big question is &quot;can superposition be used in Software Design?&quot;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;See also &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;See, also, &lt;/i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Superposition_principle&quot;&gt;&lt;i&gt;https://en.wikipedia.org/wiki/Superposition_principle&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A simple example of a Hello World software system is shown in &lt;span class=&quot;s1&quot;&gt;Fig. 4&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing4.png&quot; width=&quot;250px&quot; height=&quot;126px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Hello World Diagram&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;One intuitively understands the simple Hello World example in two steps. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Step 1 is shown in &lt;span class=&quot;s1&quot;&gt;Fig. 5.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing5.png&quot; width=&quot;300px&quot; height=&quot;69px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Fig. 5 Superposition Step 1&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;And, the second step in understanding Hello World is in &lt;span class=&quot;s1&quot;&gt;Fig. 6.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-10-20-55-Images/Time sharing6.png&quot; width=&quot;300px&quot; height=&quot;70px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Fig. 6 Superposition Step 2&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;That's it!&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Superposition is a fancy word for something that everyone understands intuitively.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I will discuss later why superposition is important.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Basically, the question becomes &quot;does our technology match with our intuitive understanding?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If it doesn't match up with our intuition, we get bugs that are hard to understand and hard to predict.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Software professionals call that &quot;accidental complexity&quot;.&lt;/i&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">superposition</summary></entry><entry><title type="html">Fbp v actors v erlang</title><link href="https://computingsimplicity.neocities.org/2021/01/22/fbp-v-actors-v-erlang.html" rel="alternate" type="text/html" title="Fbp v actors v erlang" /><published>2021-01-22T00:00:00-05:00</published><updated>2021-01-22T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/22/fbp%20v%20actors%20v%20erlang</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/22/fbp-v-actors-v-erlang.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;erlang&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-22T06:51:57Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-22T06:51:57Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Actors Erlang FBP&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;FBP (Flow-Based Programming) is often conflated with Actors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors are often conflated with Erlang.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss some of the issues in this essay.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL / RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I have found that one can &lt;i&gt;reason&lt;/i&gt; (understand) a program if it doesn't cross the &lt;i&gt;great divide.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;great divide&lt;/i&gt; is delimited by the use of CALL/RETURN.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a program doesn't use CALL/RETURN, one can reason about it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a program uses CALL/RETURN, then all bets are off.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most programming languages expect programmers to implement functions using CALL/RETURN, e.g. &lt;span class=&quot;s1&quot;&gt;f(x);&lt;/span&gt; is usually implemented using CALL / RETURN (the caller calls the function &lt;i&gt;f&lt;/i&gt; and waits for a result).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;N.B. Recursion is CALL/RETURN.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Smalltalk &quot;message passing&quot; is actually CALL / RETURN&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Using CALL/RETURN, it is &quot;natural&quot; to skip over the fire-and-forget (concurrency) paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I discuss this issue further in my essay about CALL RETURN SPAGHETTI &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Uses a Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CALL RETURN uses a global variable to store breadcrumbs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This global variable is created/supported by most modern hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss this issue in my essay ALGOL Bottleneck &lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Closures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Closures are a way to escape the CALL/RETURN handcuffs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, &lt;i&gt;processes&lt;/i&gt; in operating systems, are just honking big closures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Actors vs CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Actor technology does not specify CALL / RETURN.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Erlang vs. CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang implements its processes using its BEAM VM.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang expects programmers to explicitly create processes using &lt;i&gt;spawn&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang also allows creation of &quot;smaller&quot; closures, using &lt;i&gt;fun.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang uses &lt;i&gt;immutable data&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is not strictly necessary, since &lt;i&gt;isolation&lt;/i&gt; hides the inner workings of components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang allows hierarchical decomposition of processes, but does not encourage it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang allows knowing the &lt;i&gt;pid&lt;/i&gt; of a process, hence, allows dynamic reconfiguration of the architecture.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Dynamic reconfiguration is frowned upon from a Maintenance Engineering perspective. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dynamic reconfiguration makes explicit Architecture difficult if not impossible.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Self-modifying code is an example of dynamic reconfiguration and can, also, lead to self-modifying architectures.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang defines a number of basic types.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This encourages programming &lt;i&gt;Implementation&lt;/i&gt; instead of &lt;i&gt;Engineering&lt;/i&gt; and &lt;i&gt;Architecture&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP vs CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;FBP (Flow-Based Programming) encourages CALL RETURN-less construction of systems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP has been implemented on top of other, existing, base languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;As soon as one writes programs in the base language (beyond the FBP paradigm), on returns to CALL/RETURN-full programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP provides Isolation by implementing components as operating-system supports processes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Turtles All The Way Down&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I favour hierarchy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;From this perspective, &lt;i&gt;processes&lt;/i&gt; should be composed of other &lt;i&gt;processes&lt;/i&gt; to a very deep level.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP, Actors and Erlang support hierarchical organization of programs, but do not otherwise &lt;i&gt;encourage&lt;/i&gt; this style.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP goes beyond Actors and Erlang, by providing the concept of sub-nets.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Coordination of child processes is left to the programmer.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">erlang</summary></entry><entry><title type="html">One in how many out?</title><link href="https://computingsimplicity.neocities.org/2021/01/22/One-In-How-Many-Out.html" rel="alternate" type="text/html" title="One in how many out?" /><published>2021-01-22T00:00:00-05:00</published><updated>2021-01-22T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/22/One%20In%20How%20Many%20Out</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/22/One-In-How-Many-Out.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;One In How Many Out?&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-22T08:45:07Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-22T08:45:07Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One In - How Many Out?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A central issue to building controllers, instead of calculators, is the number of outputs that can be produced a single input.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most PLs (Programming Language) encourage the use of functions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Functions have a strict one-in-one-out policy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The function signature specifies the input and output APIs of the function.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;f(x) returns y throws e&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;defines a function which takes one input parameter and almost-always returns one output datum to the caller.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Sometimes, the function returns an exception datum.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The receiver of the exception is usually dependent on the dynamic&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; call-chain.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some PLs relax the strict one-in-one-out rule by silently ignoring the return value.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Returning Void&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;NC is not the same as returning void. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC is determined by the &lt;i&gt;user&lt;/i&gt; of the component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The function &lt;i&gt;signature&lt;/i&gt; might declare the existence of a returned value(s), but only the user determines if that returned value is used. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ignoring the result is a special case of a more general concept.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NC - No Connection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A common idiom in EE is the specification of NC - No Connection.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Inputs can be NC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Outputs can be NC.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Signature vs. Invocation Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Typically, a software function is defined by its signature.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that each call-point should include a signature of how a component is intended to be used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Calling Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that each &lt;i&gt;call-&lt;/i&gt;point should include a signature of how a component is intended to be used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;loader&lt;/i&gt; might &quot;match up&quot; signatures and complete type-checking before running an application.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Interfaces&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Interfaces are meant to provide a way to define multiple signatures for a software component.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The concept of &lt;i&gt;interfaces &lt;/i&gt;does not address the problem in full:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;functions are specified by&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;the way they are defined&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;the way they are called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Duck-Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot;&gt;https://en.wikipedia.org/wiki/Duck_typing&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Duck typing is an attempt to provide calling signatures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Type Checking Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that type signatures should be checked in phases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Phase 1 checks the definition point of a function.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Phase 2 checks the call-points of every function invocation (and determines if all function outputs are to be used).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Intermediate object files could be used for carrying partially-checked types, along with code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DLLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DLLs address the calling signature problem in an epicyclic manner - they solve only part of the larger problem.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The larger problem is that of snipping all dependencies and to use later passes to fill in the details (this could be done in a layered manner instead of doing all of the work in one fell swoop).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote - Eiffel Type Checking in eLisp&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Anecdote:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the late 1980's, I worked with the Eiffel programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I noticed that compile-times were non-linear for large systems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Non-linear and becoming larger with each additional class.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Exponential?&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The problem was that many classes were dependent on other classes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The type checker would check - and re-check - other classes while checking the validity of a unit being compiled.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote an Eiffel type-checker in eLisp. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The new type-checker snipped inter-class dependencies and would generate intermediate object files that contained partial type information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final system-wide type check was performed by a loader that understood the partial type information stored in the intermediate object files.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Dynamic is equated with &quot;bad&quot; IMO.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ask any Maintenance Engineer if it is easy to debug a dynamic system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dynamic reconfiguration used to be called &quot;self modifying code&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">One In How Many Out?</summary></entry><entry><title type="html">Erlang v actors</title><link href="https://computingsimplicity.neocities.org/2021/01/22/Erlang-v-Actors.html" rel="alternate" type="text/html" title="Erlang v actors" /><published>2021-01-22T00:00:00-05:00</published><updated>2021-01-22T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/22/Erlang%20v%20Actors</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/22/Erlang-v-Actors.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Erlang v Actors&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-22T09:00:27Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-22T09:00:27Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Erlang v Actors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang is a subset of Actors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang is weaker than Actors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;See &lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors provides superposition.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang provides superposition, as long as the software components do not use CALL/RETURN to communicate with one another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Isolation is the idea that a software component be encapsulated in terms of:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;data&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;control flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Isolation is vital to superposition.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® pipes provide isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Threads and processes provide isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;OOP provides encapsulation but not isolation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OOP encapsulates data only and hurts encapsulation of control-flow.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Docker provides isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang provides processes, hence, Erlang provides isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(Isolation could be performed more efficiently using closures and /CC&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(current continuations)).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prohibit State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Prohibiting state is not necessary when &lt;i&gt;isolation&lt;/i&gt; exists.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang provides &lt;i&gt;isolation&lt;/i&gt; and, mostly prohibits state through the use of FP (functional programming) techniques.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors do not prohibit state.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I conclude that Erlang is buzzword-compliant but is a subset of Actors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prohibit CALL/RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CALL/RETURN uses underlying hardware to modify a global variable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That variable is The Stack.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss this issue in my essay &quot;The ALGOL Bottleneck&quot; &lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt; and in my essay Call Return Spaghetti &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The use of CALL/RETURN hurts the ability to provide isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors inhibit the use of CALL/RETURN.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang inhibits the use of CALL/RETURN at the component level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Erlang appears to allow CALL/RETURN within a component&lt;/i&gt;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchy&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Hierarchy&lt;/i&gt; is to message-passing as &lt;i&gt;structured programming &lt;/i&gt;is to assembler programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors allow, but do not encourage, hierarchy of components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang allows hierarchy of components as long as CALL/RETURN is not used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang is a subset of Actors, in that Erlang allows a mixture of CALL/RETURN-less and CALL/RETURN-full programming, whereas Actors prescribes only CALL/RETURN-less programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Non-hierarchical message-passing - flat message-passing - has been associated with the apparent failure of message-passing in general.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Target Naming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Explicit naming of a target routine introduces dependencies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, most current PLs (Programming Language) invoke routines through direct calling, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;f(x)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(here, the function &lt;span class=&quot;s1&quot;&gt;f()&lt;/span&gt; is CALLed by directly naming the function&lt;span class=&quot;s1&quot;&gt; f()&lt;/span&gt; that is to be used).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors indirectly name targets by use of a &lt;i&gt;pid&lt;/i&gt; (process id).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang does the same.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Using a PID results in knowledge of the target and results in dependencies (IMO &quot;bad&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Furthermore, using PIDs at runtime causes dynamic dependencies which is akin to self-modifying code (&quot;very bad&quot;)&lt;/i&gt;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Actors imply concurrency.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang implements concurrency using processes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See Rob Pike's talk - Concurrency Is Not Parallelism &lt;a href=&quot;https://www.youtube.com/watch?v=oV9rvDllKEg&quot;&gt;https://www.youtube.com/watch?v=oV9rvDllKEg&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parallelism&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Actors and Erlang allow construction of Software Components using the &lt;i&gt;concurrent&lt;/i&gt; paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Hence, Actor and Erlang programs can be run in parallel.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I don't know if Erlang (and BEAM) provides parallelism &quot;out of the box&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One In - How Many Out?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/One-In-How-Many-Out.html&quot;&gt;https://guitarvydas.github.io/2021/01/22/One-In-How-Many-Out.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Isolated software components can be composed to form a system (e.g. an app).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors and Erlang provide isolation, so they support composition of components.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Inheritance is a good way to organize data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Inheritance, with overrides, is a bad way to organize control flow (e.g. code).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Erlang v Actors</summary></entry><entry><title type="html">Superposition</title><link href="https://computingsimplicity.neocities.org/2021/01/22/superposition.html" rel="alternate" type="text/html" title="Superposition" /><published>2021-01-22T00:00:00-05:00</published><updated>2021-01-22T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/22/superposition</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/22/superposition.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;superpositino&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-22T07:02:50Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-22T07:02:50Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The holy grail of software development is the ability to apply the principle of Superposition to software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &quot;simple&quot; way to look at superposition is to imagine LEGO® blocks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The blocks do not depend on each other.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can build &quot;anything&quot; with the blocks without being constrained by dependencies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL RETURN Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I show the problem caused by dependencies in my essay CALL / RETURN Spaghetti &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The essay CALL / RETURN Spaghetti indirectly discusses superposition. It shows what happens if one doesn't have superposition.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The ALGOL Bottleneck&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CALL RETURN uses a global variable to store breadcrumbs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This global variable is created/supported by most modern hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I try to demonstrate this issue in my essay ALGOL Bottleneck &lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition in EE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I first learned about superposition in EE school.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In EE, one analyzes (understands) a circuit by successively suppressing all voltage sources except one. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the separate, one-source-only, analyses are then glued back together and summed to form the final analysis.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Analogy: Cartoon Movie Cels&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;An analogy of the use of superposition is to imagine how cartoon movies were created before computers became abundant.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An artist would paint a character onto a transparent sheet of plastic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many artists could to their tasks in parallel - without any dependencies between them.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each artist could paint all of the cels for a single cartoon character.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The frames of the final movie would be formed by layering each cel onto a background and photographing the result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The final movie would show frames in sequence.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Animated graphics still works this way today, except with computerized technology.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Animated GIFs work this way, also.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;https://conceptartempire.com/cel-animation/&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;https://en.wikipedia.org/wiki/Cel&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">superpositino</summary></entry><entry><title type="html">What is programming</title><link href="https://computingsimplicity.neocities.org/2021/01/19/What-Is-Programming.html" rel="alternate" type="text/html" title="What is programming" /><published>2021-01-19T00:00:00-05:00</published><updated>2021-01-19T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/19/What%20Is%20Programming</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/19/What-Is-Programming.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;What Is Programming&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-19T15:21:33Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-19T15:21:33Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Palatino}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What Is Programming?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Is mathematics programming?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Is Javascript programming?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is programming?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Is &quot;GOTO Considered Harmful&quot; about programming?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Is The Mythical Man-Month about programming?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Where does &quot;Second System&quot; syndrome fit?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How did Bell achieve four-nines (0.9999 uptime) in the 1900's without using Haskell?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is a &quot;current directory&quot;?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is that related to programming?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is CamelCase?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is that related to programming?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that the field of &lt;i&gt;programming&lt;/i&gt; has not been sufficiently sub-divided.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that &lt;i&gt;pure research&lt;/i&gt; is, currently, being conflated with &lt;i&gt;applied research, &lt;/i&gt;such as &lt;i&gt;architecture, engineering &lt;/i&gt;and &lt;i&gt;implementation&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What is Computing?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For that matter, what is Computing? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Is Computing about making calculations?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Is Computing about controlling machines?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Is Computing more than one thing?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See my thoughts on this in &lt;a href=&quot;https://guitarvydas.github.io/2021/01/02/The-Primary-Issue.html&quot;&gt;https://guitarvydas.github.io/2021/01/02/The-Primary-Issue.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Categories of Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The word &lt;i&gt;programming&lt;/i&gt; is a loaded term.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It can mean many things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As usual, fractal-man comes to the rescue.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can sub-divide a loaded term to gain new insights.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Off the top of my head, I see &lt;i&gt;programming&lt;/i&gt; as four (4) different disciplines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At present our PLs are highly polarized - there are PLs for Pure Research and languages for Implementation, but not much in between (e.g. generally no PLs for Software Architecture and generally no PLs for Software Engineering).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At present, all sub-categories of &lt;i&gt;programming&lt;/i&gt; are conflated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most individual software professionals perform bits of each category. Most software professionals work on intuition.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some individuals are better / more experienced / biased at certain goals and produce imbalanced results.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It might help to think of other&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; disciplines, e.g. bridge construction.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I list further thoughts below and in &lt;span class=&quot;s1&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2021-01-19-15-21-33-Images/Nesting.png&quot; width=&quot;400px&quot; height=&quot;302px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-01-19-15-21-33-Images/Nesting1.png&quot; width=&quot;400px&quot; height=&quot;302px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 1 Software Development Categories&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pure Research&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Pure Research tries to define the boundaries of software design using first principles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ironically, Pure Research defines things like numbers, but does not define what &lt;i&gt;programming&lt;/i&gt; is.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pure Research, for example, does not constrain the use&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; of GOTOs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, Pure Research gives us GOTOs-on-steroids in the form of CPS.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;CPS is useful for Denotational Semantics, but should not be used in day-to-day software applications (e.g. for Maintenance reasons).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Research PLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Agda&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Coq&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Haskell&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(list incomplete and changing over time)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Software Architecture is the embodiment of experience in solving day-to-day application problems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Tools of Software Architecture include:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;RY (as opposed to DRY)&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;reuse of Architecture (as opposed to reuse of code)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;little languages&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UML is an early attempt at Software Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Modeling (vs. compiling) is the domain of Software Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Superposition &lt;/i&gt;is required by Software Architecture. Designing systems is only possible using technologies that provide &lt;i&gt;superposition&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I argue&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; that current software practices and languages inhibit &lt;i&gt;superposition&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architecture PLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;parts of UML&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(list incomplete and changing over time)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tools of Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;RY (as opposed to DRY)&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;reuse of Architecture (as opposed to reuse of code)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;little languages&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is not coding.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is Applied Research.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Best-of-breed research applied to manifesting an architecture - a specific solution to a specific problem, as sketched by a Software Architect.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is about filling in details left open during Architecture and making trade-offs to derive a workable final result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is specialization, not generalization.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is about making trade-offs, using the best (most usable) bits of research to create specific applications.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is about making cost-effective trade-offs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;What does cost-effective mean?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It depends on the specific problem / the specific customer.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering can be further broken down into sub-categories, for example:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;testing&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;optimization [&lt;i&gt;What is being optimized?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Memory, CPU, UX, etc.?&lt;/i&gt;]&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;maintenance&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;UX&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is research&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; that applies to Engineering, for example:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;debuggers&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;restarts&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;packaging, package managers&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;optimization&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;language features - what to keep, what to throw out&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;better editors&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;macro processing&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;IDEs&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;programming techniques, such as Structured Programming, OO, FP, etc.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;programming abstractions&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;DSLs (programming abstractions)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;solution-centric&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt; abstractions&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;testing strategies&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Compiling (vs. modeling) should the domain of Software Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, &lt;i&gt;compiling&lt;/i&gt; means creating &lt;i&gt;implementation&lt;/i&gt; instead of doing Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Statecharts (UML2.0) &lt;/i&gt;is a kind of Software Engineering language (there could be many more tools in this domain).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Drakon &lt;/i&gt;might be another kind of Software Engineering language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DRY&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt; and OO are the domain of Maintenance Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Blueprints&lt;/i&gt; are the domain of Structural Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are few &lt;i&gt;blueprint&lt;/i&gt; technologies for Software Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 2 shows a rough diagram of design iterations that occur during Engineering.&lt;a id=&quot;fnlink13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn13&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-19-15-21-33-Images/Nesting2.png&quot; width=&quot;400px&quot; height=&quot;302px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 2 Engineering Iterations&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Optimization Engineering is also known as Production Engineering.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Tools of Software Engineering include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;little languages&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;RY&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;StateCharts&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;m4&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;pipelines&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;PEG (Ohm-js, ESRAP, etc.)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Engineering PLs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;StateCharts&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;parts of UML&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Drakon&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;(list incomplete and changing over time)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Implementation &lt;i&gt;is &lt;/i&gt;coding.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Implementors should code at the speed of touch-typing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If they stop to think, then they are delving into Engineering and/or Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Implementation can be further sub-divided.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;test&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;CI/CD&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Q/A&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;alpha/beta coding&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;production coding&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation PLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PLs are &lt;i&gt;second sourced&lt;/i&gt; if more than one implementation of the PL is available from different vendors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PLs that have standards allow one to switch between implementations easily.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Such PLs include:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;C&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Common Lisp&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;FORTRAN&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;ECMAscript&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;HTML&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;POSIX, Linux, UNIX®, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most other PLs are single-sourced, e.g.&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Perl&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Python&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Testing PLs / Tools&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;CI tools&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;(list incomplete)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Q/A Testing / Tools&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;(list incomplete)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Frameworks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Rails&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Query&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;React.js&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;no-code&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;(list incomplete and changing over time)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;See also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Mathematic is not reality&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Mathematics-Is-Not-Reality.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Mathematics-Is-Not-Reality.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Software development roles&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&quot;&gt;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pure Research vs. Applied Research&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/14/Pure-Research-vs-Applied-Research.html&quot;&gt;https://guitarvydas.github.io/2021/01/14/Pure-Research-vs-Applied-Research.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;New-Breed HLLs&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/New-Breed-HLLs.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/New-Breed-HLLs.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Looking at other disciplines is &quot;reuse&quot;. High level reuse.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Research into how to constrain GOTOs is the realm of Research into Applied Research.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;CPS means Continuation Passing Style.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Is this correct?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is Haskell a research language or is it a production language?&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Imagine &lt;i&gt;git&lt;/i&gt; for Architecture instead of code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DRY detection and resolution should be automated.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I call little languages SCLs, meaning solution-specific languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SCLs are like DSLs, but more focussed.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html and https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Imagine &lt;i&gt;git&lt;/i&gt; for Architecture instead of code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DRY detection and resolution should be automated.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I call little languages SCLs, meaning solution-specific languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SCLs are like DSLs, but more focussed.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This suggests further sub-divisions of Pure Research in the above diagram.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Solution-centric abstractions are more focussed than domain level abstractions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I used the abbreviation SCL instead of DSL (solution-centric languages vs. domain specific languages)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;DRY means Don't Repeat Yourself.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn13&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink13&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[13]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I was schooled in EE and am biased towards Engineering, hence, my diagram shows more detail in the Engineering phases.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagram should be extended to show phases in other categories and to show further sub-divisions of Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is not a final diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">What Is Programming</summary></entry><entry><title type="html">Factbases</title><link href="https://computingsimplicity.neocities.org/2021/01/17/Factbases.html" rel="alternate" type="text/html" title="Factbases" /><published>2021-01-17T00:00:00-05:00</published><updated>2021-01-17T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/17/Factbases</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/17/Factbases.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Factbases&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-17T09:53:51Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-17T09:53:51Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 9.0px Palatino}
    span.s2 {text-decoration: underline}
    span.s3 {font: 11.0px Menlo}
    span.s4 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbases&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;trick&lt;/i&gt; to automating anything in software is to find a way to &lt;i&gt;normalize &lt;/i&gt;the information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We discovered how to normalize code very early on - we used a notation called &lt;i&gt;assembler&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler is code represented as triples - relation, subject, object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;MOV R0, R1&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The relation is MOV.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The subject is R0.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The object is R1.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the idea of &lt;i&gt;triples&lt;/i&gt; sounds familiar, it's because you've already heard of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;XML is triples&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Semantic Web is triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So, what is the &lt;i&gt;normalized&lt;/i&gt; format of data?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Triples!&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to put data into the form: relation, subject, object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Conveniently, this already exists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a function of two parameters:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;relation(subject,object);&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;fn(id,x);&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why is this a &lt;i&gt;Good Thing&lt;/i&gt;? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Well, because we impose &lt;b&gt;no&lt;/b&gt; structure on the data. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the data has no structure, then it is easy to parse (in an automatic manner). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the data has no structure, then it can be used for other kinds of things.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Things that the original programmer never thought of.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that organizing data into a data structure at compile time is just an optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the 1950's, it seemed like a good idea to preserve CPU power by pre-compiling data into data structures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Today, CPUs are cheap and abundant, we can waste CPU time building data structures at runtime.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We don't have to worry about pre-compiling things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How shall we waste CPU time? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By performing exhaustive search.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By using backtracking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Backtracking was &lt;i&gt;verbotten&lt;/i&gt; in the 1900's, but no more.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I know, from experience, that I will be using PROLOG for doing exhaustive search.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, I will put a period ('.') at the end of each function and call this a &lt;i&gt;fact&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;fn(id,x).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Caution: use the principles of Shuhari here.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Shu: don't expand the definition of &quot;x&quot; in the above.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is one thing and one thing only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, imagine that I have a rectangle R, with top-left (&lt;i&gt;x,y&lt;/i&gt;) and a width, &lt;i&gt;w&lt;/i&gt;, and a height, &lt;i&gt;h&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In factbase notation, this becomes&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;nil&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;top_x(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;x&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;top_y(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;y&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;width(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;w&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;height(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;h&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Resist the urge to do something like:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;x,y,w,h&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,nil).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;top(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;x,y&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;wh(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;w,h&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will use CPU power&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; to glean various relationships about the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, one of the first relationships will be to create a &lt;i&gt;bounding box&lt;/i&gt; for each rectangle (we will see this later).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPU power is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't waste brain power.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't try to predict the various ways in which data will be structured.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG already knows how to deal with triples of the above form. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG knows how to search triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You know how to search triples (loops within loops within …). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It gets boring after a while. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When it gets boring, automate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation done before you know what you're doing is called &lt;i&gt;premature optimization&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can't know what you're doing unless you've done it manually several times&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Corollary: premature optimization happens in anything that is built before the 3&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;rd&lt;/sup&gt;&lt;/span&gt; version.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is cheap, thinking is hard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is cheap, experience is hard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is best to grow the factbase with new facts, rather than culling facts from the factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This allows maximum flexibility during design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Culling is just an optimization and should be left to Optimization Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Recap:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is normalized into triples, e.g. &lt;span class=&quot;s3&quot;&gt;MOV R0,R1&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data is normalized into triples, e.g. &lt;span class=&quot;s3&quot;&gt;top_x(&lt;i&gt;R,x&lt;/i&gt;)&lt;/span&gt;&lt;i&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Factbases &lt;/i&gt;are the normalized (triple-ified) form of data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Further Reading:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;see the Appendix for tools like gprolog, JS prolog, miniKanren, AWK.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;XML has too much syntax to be easily readable.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; exhaustive search&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; &lt;/span&gt;Only tyrants tell you what to think.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Be free.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let others be free.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Fred Brooks says that you need to build something 2 times (and throw the results away).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Then, knowing what you are doing, you build it a 3rd time.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Factbases</summary></entry><entry><title type="html">Transpiling diagrams to code 101</title><link href="https://computingsimplicity.neocities.org/2021/01/16/Transpiling-Diagrams-to-Code-101.html" rel="alternate" type="text/html" title="Transpiling diagrams to code 101" /><published>2021-01-16T00:00:00-05:00</published><updated>2021-01-16T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/16/Transpiling%20Diagrams%20to%20Code%20101</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/16/Transpiling-Diagrams-to-Code-101.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Transpiling Diagrams to Code 101&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-16T07:15:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-16T07:15:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 16.0px Times; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff; min-height: 19.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Times; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff; min-height: 16.0px}
    p.p12 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 16.0px Times; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 16.0px Times; -webkit-text-stroke: #000000; min-height: 19.0px}
    p.p14 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p15 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p16 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p17 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p18 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p19 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 16.0px Times; font-kerning: none; color: #000000; background-color: #ffffff; -webkit-text-stroke: 0px #000000}
    span.s4 {font-kerning: none}
    span.s5 {font-kerning: none; background-color: #ffffff}
    span.s6 {color: #000000}
    span.s7 {text-decoration: underline ; font-kerning: none}
    span.s8 {text-decoration: underline}
    span.s9 {font: 9.0px Palatino}
    span.s10 {font: 12.0px Helvetica}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I show the very basics of transpiling a diagram to code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call this DaS - &lt;i&gt;Diagrams&lt;/i&gt; &lt;i&gt;as Syntax.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you want to follow along, see Appendix - Getting Started.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There's nothing new here - just a combination of already-existing technologies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This should look ridiculously simple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You should find yourself yawning through most of this. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If it doesn't seem simple enough, I haven't done my job well. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am happy to answer questions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;If you are reading the .md form of this essay, then see also, &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt;, or the .pdf form of this essay&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;A Simple Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;See &lt;/span&gt;simple.drawio&lt;span class=&quot;s1&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We see a very simple diagram on Tab 101.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The diagram consists of two boxes, joined by an arrow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-16-07-15-39-Images/simple.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;convert this diagram to text, from .drawio to .xml format&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;convert the .XML to a JavaScript object&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;extract the interesting stuff from the object, and leave the rest behind (&quot;syntactic noise&quot;)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;normalize the interesting stuff into a &lt;i&gt;factbase&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;normalize the graphics - glean bounding boxes for every box&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;stop (that's enough for lesson 101).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;We will do a lot of this manually. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;We can do all of this with just a text editor.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;I will suggest technologies (from direct experience) that automate the boring, repetitive edits.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My goal is to automate everything and not to have to use an editor.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpilation&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Convert the Diagram to Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Load the diagram &lt;span class=&quot;s2&quot;&gt;simple.drawio&lt;/span&gt; into a programmers' text editor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You should see a header (mxfile host=&quot;Electron&quot;…) followed by at least one &lt;span class=&quot;s2&quot;&gt;&amp;lt;diagram&amp;gt;…&amp;lt;/diagram&amp;gt;&lt;/span&gt; in compressed form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Copy the compressed stuff inside of the &amp;lt;diagram&amp;gt; element (zZRNT…A==) and paste it into the drawio diagram decoder &lt;a href=&quot;https://jgraph.github.io/drawio-tools/tools/convert.html&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://jgraph.github.io/drawio-tools/tools/convert.html&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Hit the &lt;i&gt;decode&lt;/i&gt; button (at the bottom).&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;s5&quot;&gt;You should see human-readable XML, e.g. &lt;/span&gt;&lt;span class=&quot;s6&quot;&gt;&amp;lt;mxGraphModel … &amp;gt; … &amp;lt;/mxGraphModel&amp;gt;&lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Copy the XML and paste it into a local file.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;s5&quot;&gt;I saved my copy in &lt;/span&gt;&lt;span class=&quot;s6&quot;&gt;decoded.xml&lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s7&quot;&gt;Further reading:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://drawio-app.com/extracting-the-xml-from-mxfiles/&quot;&gt;https://drawio-app.com/extracting-the-xml-from-mxfiles/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://jgraph.github.io/mxgraph/docs/manual.html&quot;&gt;https://jgraph.github.io/mxgraph/docs/manual.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Convert XML to JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The XML for our diagram is contained in the &lt;span class=&quot;s2&quot;&gt;&amp;lt;root&amp;gt;…&amp;lt;/root&amp;gt;&lt;/span&gt; element.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;0&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;1&quot; parent=&quot;0&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;irZAPYOEPGDIWvvxZr80-1&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;irZAPYOEPGDIWvvxZr80-2&quot; target=&quot;irZAPYOEPGDIWvvxZr80-3&quot; edge=&quot;1&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/mxCell&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;irZAPYOEPGDIWvvxZr80-2&quot; value=&quot;Box 1&quot; style=&quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;mxGeometry x=&quot;40&quot; y=&quot;120&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/mxCell&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;irZAPYOEPGDIWvvxZr80-3&quot; value=&quot;Box 2&quot; style=&quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;mxGeometry x=&quot;280&quot; y=&quot;120&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/mxCell&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This can be converted using an editor (yawn), into Javascript:&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;const graphModel =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;{ element: &quot;mxGraphModel&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attributes: {&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;dx: 940,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;dy: 670,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;grid: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;gridSize: 10,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;guides: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;tooltips: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;connect: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;arrows: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;fold: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;page: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;pageScale: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;pageWidth: 1100,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;pageHeight: 850,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;math: 0,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;shadow: 0&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;content:&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{ element: &quot;root&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;attributes: [],&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;content: [&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;attributes: { 'id', &quot;yqBiCKyfxECIX-FCSyxT-0&quot; },&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;content: []&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;{&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;attributes: { id: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;, parent: &quot;yqBiCKyfxECIX-FCSyxT-0&quot; },&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;content: []&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;attributes: {id: &quot;yqBiCKyfxECIX-FCSyxT-4&quot;, style: &quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot;, edge: &quot;1&quot;, parent: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;, source: &quot;yqBiCKyfxECIX-FCSyxT-2&quot;, target: &quot;yqBiCKyfxECIX-FCSyxT-3&quot; },&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;content: [ { element: &quot;mxGeometry&quot;, attributes: {relative: &quot;1&quot;, as: &quot;geometry&quot; }, content: []} ]&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;element : &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;attributes: {id: &quot;yqBiCKyfxECIX-FCSyxT-2&quot;, value: &quot;Box 1&quot;, style: &quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot;, vertex: &quot;1&quot;, parent: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;content: [ { element: &quot;mxGeometry&quot;, attributes: {x: &quot;40&quot;, y: &quot;120&quot;, width: &quot;120&quot;, height: &quot;60&quot;, as: &quot;geometry&quot;}, content: [] } ]&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;attributes: {id: &quot;yqBiCKyfxECIX-FCSyxT-3&quot;, value: &quot;Box 2&quot;, style: &quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot;, vertex: &quot;1&quot;, parent: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;content: [ { element: &quot;mxGeometry&quot;, attributes: {x: &quot;280&quot;, y: &quot;120&quot;, width: &quot;120&quot;, height: &quot;60&quot;, as: &quot;geometry&quot;}, content: [] } ]&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I stored the converted file in &lt;span class=&quot;s2&quot;&gt;graphmodel.js&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s8&quot;&gt;Further reading:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The conversion from XML to JS can be done automatically (e.g. essay 201).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This &lt;span class=&quot;s8&quot;&gt;looks&lt;/span&gt; like a job for REGEXP, but it isn't. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP creates a &lt;i&gt;finite automata&lt;/i&gt;, but we need a &lt;i&gt;pushdown finite automata&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a job for [&lt;i&gt;rip open shirt:&lt;/i&gt;] &lt;span class=&quot;s8&quot;&gt;PEG&lt;/span&gt; - Parsing Expression Grammars. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't worry about the fancy name - this stuff is as simple to use as REGEXP, but better.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We should be able to write a &lt;i&gt;grammar&lt;/i&gt; (pattern match) for the mxGraphModel XML and a set of &lt;i&gt;semantics &lt;/i&gt;(i.e. code) that returns a Javascript object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are a lot of implementations of PEG for various languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I happen to use Ohm-js when I use Javascript and ESRAP when I use Common Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;REBOL's &lt;i&gt;parse&lt;/i&gt; is PEG-like.&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Interesting Stuff&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The graph model contains mostly 2D graphics information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can skip most of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We just want to know what the boxes are and what the arrows are.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to know &lt;i&gt;where&lt;/i&gt; the boxes and arrows are.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to know what boxes are connected by arrows.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The source box and the target box.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We, probably, want to remember the parent/child relationships of these graphical entities.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that we are discussing DaS (&lt;i&gt;diagrams as syntax&lt;/i&gt;). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many people confabulate the notion of &lt;i&gt;visual programming&lt;/i&gt; with understanding pixels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We don't want to go as deep.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We don't care about pixels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We only want to add a few items to our grab-bag - boxes, arrows, text.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will want to store this &quot;want to know&quot; stuff in some sort of data thingie - a database, a data structure, or something even easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I favour the idea of &lt;span class=&quot;s8&quot;&gt;factbases&lt;/span&gt; instead of using heavy-weight concepts like databases and data structures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will diverge, momentarily, on a discussion of factbases.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbases&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;trick&lt;/i&gt; to automating anything in software is to find a way to &lt;i&gt;normalize &lt;/i&gt;the information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We discovered how to normalize code very early on - we used a notation called &lt;i&gt;assembler&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler is code represented as triples - relation, subject, object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;MOV R0, R1&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The relation is MOV.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The subject is R0.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The object is R1.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the idea of &lt;i&gt;triples&lt;/i&gt; sounds familiar, it's because you've already heard of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;XML is triples&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Semantic Web is triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So, what is the &lt;i&gt;normalized&lt;/i&gt; format of data?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Triples!&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to put data into the form: relation, subject, object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Conveniently, this already exists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a function of two parameters:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;relation(subject,object);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;fn(id,x);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why is this a &lt;i&gt;Good Thing&lt;/i&gt;? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Well, because we impose &lt;b&gt;no&lt;/b&gt; structure on the data. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the data has no structure, then it is easy to parse (in an automatic manner). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the data has no structure, then it can be used for other kinds of things.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Things that the original programmer never thought of.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that organizing data into a data structure at compile time is just an optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the 1950's, it seemed like a good idea to preserve CPU power by pre-compiling data into data structures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Today, CPUs are cheap and abundant, we can waste CPU time building data structures at runtime.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We don't have to worry about pre-compiling things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How shall we waste CPU time? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By performing exhaustive search.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By using backtracking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Backtracking was &lt;i&gt;verbotten&lt;/i&gt; in the 1900's, but no more.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I know, from experience, that I will be using PROLOG for doing exhaustive search.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, I will put a period ('.') at the end of each function and call this a &lt;i&gt;fact&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;fn(id,x).&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Caution: use the principles of Shuhari here.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Shu: don't expand the definition of &quot;x&quot; in the above.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is one thing and one thing only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, imagine that I have a rectangle R, with top-left (&lt;i&gt;x,y&lt;/i&gt;) and a width, &lt;i&gt;w&lt;/i&gt;, and a height, &lt;i&gt;h&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In factbase notation, this becomes&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;nil&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;top_x(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;x&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;top_y(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;y&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;width(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;w&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;height(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;h&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Resist the urge to do something like:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;x,y,w,h&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,nil).&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;top(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;x,y&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;wh(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;w,h&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will use CPU power&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; to glean various relationships about the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, one of the first relationships will be to create a &lt;i&gt;bounding box&lt;/i&gt; for each rectangle (we will see this later).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPU power is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't waste brain power.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't try to predict the various ways in which data will be structured.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG already knows how to deal with triples of the above form. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG knows how to search triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You know how to search triples (loops within loops within …). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It gets boring after a while. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When it gets boring, automate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation done before you know what you're doing is called &lt;i&gt;premature optimization&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can't know what you're doing unless you've done it manually several times&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Corollary: premature optimization happens in anything that is built before the 3&lt;span class=&quot;s9&quot;&gt;&lt;sup&gt;rd&lt;/sup&gt;&lt;/span&gt; version.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thinking is hard, code is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Experience is hard, code is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is best to grow the factbase with new facts, rather than culling facts from the factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This allows maximum flexibility during design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Culling is just an optimization and should be left to Optimization Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s8&quot;&gt;Recap:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is normalized into triples, e.g. &lt;span class=&quot;s2&quot;&gt;MOV R0,R1&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data is normalized into triples, e.g. &lt;span class=&quot;s2&quot;&gt;top_x(&lt;i&gt;R,x&lt;/i&gt;)&lt;/span&gt;&lt;i&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Factbases &lt;/i&gt;are the normalized (triple-ified) form of data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s8&quot;&gt;Further Reading:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;see the Appendix for tools like gprolog, JS prolog, miniKanren, AWK.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Normalize - Create a Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Now that we know what a factbase is, we will see it in action.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yawn.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Look at &lt;span class=&quot;s2&quot;&gt;main.js&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It contains the following code:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createParentFact (element);&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createNameFact (element);&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createArrowFact (element);&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createRectFact (element);&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It appears that we are interested in only 4 things - and we throw away the rest of the graphical details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Later, we will deal with text inside of boxes and stuff like that.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need to write a bit of - very easy - JS code to extract the interesting information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can look at the file &lt;span class=&quot;s2&quot;&gt;facts.js&lt;/span&gt; to see how I chose to implement the extraction.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YMMV.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Yawn.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bounding Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Now, we want to do something with the factbase and the graphical items.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to do as little as possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, we want to wrap and isolate that bit and never have to think about it again.&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first step in transpiling a diagram is to normalize all of the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This will allow us to create more-and-more interesting interpretations of the data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have put the factbase into a form that is acceptable to PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YMMV.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use PROLOG to do exhaustive searches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You might want to use something else, like miniKanren (core.logic in Clojure-speak) or just loops within loops in your favourite language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I have created a PROLOG for Javascript using Nils Holm's Prolog Control In 6 Slides&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the appendix.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was an exercise in transpiling from one language to another using PEG - Scheme to JS using ohm-js.]&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My exhaustive search, written in gprolog, is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;% calculate_bounding_boxes :-&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;bb(ID,Left,Top,Right,Bottom) :-&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;x(ID, X),&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;y(ID, Y),&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;width(ID,W),&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;height(ID,H),&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Left is X,&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Top is Y,&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Right is X + W,&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Bottom is Y + H.&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Prolog, identifiers that begin with a capital letter are &quot;logic variables&quot; - basically holes that get filled in by the exhaustive search engine.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Everything else begins with a lower-case letter.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I could have cut out half of the code, but I wanted to be excruciatingly clear.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This says:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;match any ID that has an X value&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;and&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;has a Y value&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;and&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;has a width value&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;and&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;has a height value&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;then&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;calculate the Left/Top/Right/Bottom values of the bounding box and leave these values in the logic variables Left, Top, Right and Bottom.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Clearly, we could have done this using Loops (recursion) in our favourite language, but the code would not have been so concise.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Another PROLOG file - &lt;span class=&quot;s2&quot;&gt;main.pl&lt;/span&gt; - uses the &lt;span class=&quot;s2&quot;&gt;forall&lt;/span&gt; function of PROLOG to perform the search over-and-over again and performs the magic incantations to output the results as new facts for the factbase.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specifically, the new facts are poured out into &lt;span class=&quot;s2&quot;&gt;stderr &lt;/span&gt;where the new facts are glued onto the input factbase as the result.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Stop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I will stop &quot;Transpiling Diagrams to Code 101&quot; here.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will expand, later.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I hope that the basics have been easy to understand and to riff on, after one goes beyond the Shu and Ha phases of Shuhari.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There's nothing new here - just a combination of already-existing technologies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Getting Started&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;1. Get the code &lt;a href=&quot;https://github.com/guitarvydas/transpiling-diagrams&quot;&gt;https://github.com/guitarvydas/transpiling-diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;2. git checkout 101&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;3. See the essay in &quot;Transpiling Diagrams to Code 101.md/Transpiling Diagrams to Code 101.md&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;4. Get Ohm-js from &lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;&lt;span class=&quot;s2&quot;&gt;https://github.com/harc/ohm&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;and put a copy of ohm.js alongside of this code, or, better see &lt;a href=&quot;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&quot;&gt;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&lt;/a&gt; or the .pdf form of this essay.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;5. Examine and run &lt;span class=&quot;s2&quot;&gt;run.bash&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;If you are reading the .md form of this essay, , see &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt; or the .pdf form of this essay.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Automation&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Decoding DRAWIO Files&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The code for the decoder is: &lt;a href=&quot;https://github.com/jgraph/drawio-tools&quot;&gt;https://github.com/jgraph/drawio-tools&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We should be able to decode .drawio files using Javascript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At time of writing, I haven't figured out how to do this using, say, node.js.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Suggestions welcome.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Converting mxGraphModel to JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Use PEG to pattern-match the xml and then emit it (a &lt;i&gt;semantic &lt;/i&gt;action)&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; as Javascript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I expect to write about this transformation step in later essays.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Tools&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG - Ohm In Small Steps&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Everyone knows how to use REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is better than REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use PEG instead of REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(the HTML version doesn't have page numbers.)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://bford.info/pub/lang/peg/&quot;&gt;https://bford.info/pub/lang/peg/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-js: (PEG for Javascript)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;ESRAP: (PEG for Common Lisp)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/scymtym/esrap&quot;&gt;https://github.com/scymtym/esrap&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GProlog&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG ain't scary.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG is just a pattern matcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG has a convenient syntax for pattern matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Identifiers that begin with an upper-case letter are &quot;logic variables&quot; - i.e. match-capturing doo-dads.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Everything else begins with lower-case letters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP uses a horrible syntax for match-capturing - e.g. '\(…\)'.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PROLOG uses a less-horrible syntax for this. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP works on characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PROLOG works on higher-level things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG becomes scary if you try to use it for &lt;i&gt;everything&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A single paradigm does not suit all problems, nor all parts of a problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get into the habit of using many paradigms for a single solution&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get into the habit of building many little languages for a single solution.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(I call these SCLs - Solution Centric Languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SCLs are like DSLs, but more focussed and less hassle to build (if you use PEGs)).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://www.gprolog.org/&quot;&gt;http://www.gprolog.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JS Prolog&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/js-match&quot;&gt;https://github.com/guitarvydas/js-match&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/js-prolog&quot;&gt;https://github.com/guitarvydas/js-prolog&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;miniKanren&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://minikanren.org&quot;&gt;http://minikanren.org&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(In Clojure, this is called core.logic).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AWK&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AWK&quot;&gt;https://en.wikipedia.org/wiki/AWK&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.gnu.org/software/gawk/manual/gawk.html&quot;&gt;https://www.gnu.org/software/gawk/manual/gawk.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I first used AWK to build a peephole optimizer for a C compiler I wrote (around 1980/1981).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The C code produced normalized code - aka assembler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nils Holm PROLOG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.t3x.org/bits/prolog6.html&quot;&gt;https://www.t3x.org/bits/prolog6.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I used Nils' Scheme code and converted it into Javascript using PEG (ohm-js).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Documentation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Drawio decoder:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://drawio-app.com/extracting-the-xml-from-mxfiles/&quot;&gt;https://drawio-app.com/extracting-the-xml-from-mxfiles/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;MxGraph User Manual:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://jgraph.github.io/mxgraph/docs/manual.html&quot;&gt;https://jgraph.github.io/mxgraph/docs/manual.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;XML has too much syntax to be easily readable.&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; exhaustive search&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; &lt;/span&gt;Only tyrants tell you what to think.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Be free.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let others be free.&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Fred Brooks says that you need to build something 2 times (and throw the results away).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Then, knowing what you are doing, you build it a 3rd time.&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;YMMV means Your Mileage Might Vary.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It means this even in metric countries.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s10&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; That's called &lt;i&gt;The Principle of Superposition.&lt;/i&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;i&gt;Superposition is taught in other Engineering disciplines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I learned about it in EE school, tangled up with Kirchoff's Laws.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Superposition makes EE a lot easier to design, even though everything in a circuit is concurrent.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The last time I saw Superposition at work in software was when I looked at a bash script&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;[7]&lt;/a&gt; &lt;/span&gt;Obviously, we could use a language that helped us add facts to the input factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I haven't figured out how to do this easily in PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;But, why would I care?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I can leave the cleanup to someone who specializes in Maintenance Engineering. [I have figured out how to do this not-so-easily in PROLOG, but it ain't pretty, see https://github.com/bmfbp/bmfbp].&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s10&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Semantic action is just a fancy word that you may ignore.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In ohm-js, a semantic action is a lump of Javascript that where pattern-matching-capture is passed in as function parameters.&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;[9]&lt;/a&gt; &lt;/span&gt;Lispers &quot;get&quot; this idea.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That's why they love Lisp and the freedom of thought that it brings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Javascript comes close (first-class functions, dynamic typing).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Static typing is just a DSL that uses dynamic typing and pushes all of the interpretation of types to the so-called &quot;compile time&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Compile time&quot; is an arbitrary concept (e.g. loaders finalize code at the beginning of runtime, even when static typing is used).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Transpiling Diagrams to Code 101</summary></entry><entry><title type="html">Pure research vs applied research</title><link href="https://computingsimplicity.neocities.org/2021/01/16/Pure-Research-vs-Applied-Research.html" rel="alternate" type="text/html" title="Pure research vs applied research" /><published>2021-01-16T00:00:00-05:00</published><updated>2021-01-16T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/16/Pure%20Research%20vs%20Applied%20Research</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/16/Pure-Research-vs-Applied-Research.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Untitled&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-16T09:09:53Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-16T09:09:53Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Times; color: #0000e9; -webkit-text-stroke: #0000e9}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; color: #0000e9; -webkit-text-stroke: #0000e9; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p13 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; color: #000080}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9}
    span.s1 {text-decoration: underline ; font-kerning: none}
    span.s2 {text-decoration: underline}
    span.s3 {text-decoration: underline ; color: #000080}
    span.s4 {font: 12.0px Helvetica}
    span.s5 {font: 11.0px Menlo}
    span.s6 {text-decoration: underline ; -webkit-text-stroke: 0px #000000}
    span.s7 {font: 12.0px Times; text-decoration: underline ; -webkit-text-stroke: 0px #000000}
    span.s8 {font: 12.0px Helvetica; color: #000000}
    span.s9 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pure Research&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Agda is Pure Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;LR(k) theory is Pure Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;LL(k) theory is Pure Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Finite Automata theory is Pure Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Lexical Analysis is Pure Research&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pure Research in software means creating the envelope / environment / context in which practical languages can be built.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Applied Research&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;C is Applied Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Yacc is Applied Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;LEX is Applied Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;PEG is Applied Research.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Javascript is Applied Research&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Common Lisp is Applied Research (as opposed to Lisp).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A university degree in Applied Research is called a BASc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Applied research is also known as &lt;i&gt;Engineering&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pure Research Is Not Programming&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;What is Programming?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Programming is about finding Russian Dolls.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Nesting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GOTOs - Structured Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Structured Programming gave us nesting of GOTOs.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Variables - Scoping&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Scoping gave us nesting of global variables.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Denotational Semantics - Phases&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Denotational Semantics is tamed using passes/phases. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Aka &lt;i&gt;nesting&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Peter Lee and Uwe Pleban&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Docker&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Docker nests environments.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Docker provides &lt;i&gt;isolation. &lt;/i&gt;[&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;S/SL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Syntax Semantic Language (not Secure Sockets Layer).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SL is the gem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;S/SL report&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://archive.org/details/technicalreportc118univ&quot;&gt;https://archive.org/details/technicalreportc118univ&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;source code:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;S/xL is the &lt;i&gt;syntax&lt;/i&gt; portion.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A little language for parsing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;About 14 operations.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;x/SL is the &lt;i&gt;semantics&lt;/i&gt; portion.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A little language for expressing operations on data.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;x/SL is the &lt;span class=&quot;s2&quot;&gt;real gem.&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li10&quot;&gt;SL shows how to talk &lt;i&gt;about&lt;/i&gt; data without using any built-in operators&lt;/li&gt;
  &lt;li class=&quot;li10&quot;&gt;SL is &lt;i&gt;dataless&lt;/i&gt;. (!). &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.G. there is no '+' operator.&lt;/li&gt;
  &lt;li class=&quot;li10&quot;&gt;FP is SL wannabe. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li10&quot;&gt;SL shows how to chunk Software Architecture.&lt;/li&gt;
  &lt;li class=&quot;li10&quot;&gt;See, also, Peter Lee's work Denotational Semantics - Phases - it chunks Denotational Semantics in a way that resembles SL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;UNIX® Pipes&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Sledgehammer approach - when a process dies (or is killed), the O/S cleans up all data and control flow (The Stack).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rust&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Rust provides UNIX® like &lt;i&gt;isolation&lt;/i&gt; of data.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Data ownership was explored and implemented in FBP&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; and variants of Visual Frameworks&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; and, probably, other technologies.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;UNIX® pipes don't need data ownership, because data is transfered by-value via pipes.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Ownership is just an optimization that allows memory sharing&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bash&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Uses UNIX® Pipes.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Nesting occurs when a .bash script calls another .bash script&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Composite node: script&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Leaf node: command (e.g. written in, say, C).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Tools&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;a href=&quot;https://books.google.ca/books/about/Software_Tools.html?id=kIxQAAAAMAAJ&amp;amp;redir_esc=y&quot;&gt;https://books.google.ca/books/about/Software_Tools.html?id=kIxQAAAAMAAJ&amp;amp;redir_esc=y&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;IMO: maybe the best book on programming ever written&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Nesting is possible even with FORTRAN&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Diagrams show nesting&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Unclean: rectangle that intersects another rectangle - intuition says that this needs to be cleaned up&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Diagrams show scoping, yet textual code labors with this concept&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example &lt;span class=&quot;s4&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;img src=&quot;/assets/2021-01-16-09-09-53-Images/Nesting.png&quot; width=&quot;200px&quot; height=&quot;112px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;Fig. 1 Nested Diagram&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is more expressive than&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(especially when deep nesting occurs, and when problems are &quot;complex&quot;).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Trees&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Trees are data structures that express nesting&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Non-overlapping&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Lisp expresses nesting using (...)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Lisp can express lists inside of lists&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Composite node: list&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Leaf node: atom&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;PL&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; Syntax is a way to wrap nesting, to make it &quot;prettier&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s5&quot;&gt;if…then…else…&lt;/span&gt; can be expressed as&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;(if (…) (…) (…))&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;if (…) then&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;else&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;end if&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Syntax can be used to enable syntax checking.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;E.g. Pascal-like languages can be syntax checked, while Lisp cannot.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Syntax checking is only good for simple error checks, e.g. typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;After such initial checking, syntax checking is no longer needed.&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;In documents, nesting is supported by &lt;i&gt;footnotes.&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Footnotes handle only one level of nesting (what about footnotes in footnotes in …?)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;HTML&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;HTML is (strictly) nested.&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;HTML is no-code for GUI building.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Callbacks&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Callbacks are textual nestings.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Callbacks are a good example of where text-only fails.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Functions are one-in-one-out nestings of code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Javascript FileReader () is an example of where more nesting needs to be expressed and where text-only fails to express such concepts in a simple way.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s6&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;&lt;span class=&quot;s6&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s7&quot;&gt;https://jpaulm.github.io/fbp/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s6&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;&lt;span class=&quot;s6&quot;&gt; &lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s8&quot;&gt;An OEM product, now defunct.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s9&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s9&quot;&gt; &lt;/span&gt;Note that the concept of memory sharing makes no sense if one tries to design a language for distributed computing.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s9&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s9&quot;&gt; &lt;/span&gt;PL means Programming Language&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s9&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s9&quot;&gt; &lt;/span&gt;Lisp tends to use kludges added to the editor to provide syntax checking.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s9&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s9&quot;&gt; &lt;/span&gt;Except for checking syntax of newly added code.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s9&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s9&quot;&gt; &lt;/span&gt;Exceptions are another text-only kludge.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Untitled</summary></entry></feed>