<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-22T08:39:38-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Breaking free of the cell paradigm</title><link href="https://computingsimplicity.neocities.org/2021/03/22/Breaking-Free-of-the-Cell-Paradigm.html" rel="alternate" type="text/html" title="Breaking free of the cell paradigm" /><published>2021-03-22T00:00:00-04:00</published><updated>2021-03-22T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/22/Breaking%20Free%20of%20the%20Cell%20Paradigm</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/22/Breaking-Free-of-the-Cell-Paradigm.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Diagram Languages (SVG)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-22T08:39:22Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-22T08:39:22Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 13.0px Palatino}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px 'Lucida Grande'}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    span.s4 {font: 12.0px Helvetica}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;All Programming Languages are Based on Cells&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;All current PLs are all based on the notions of:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Non-overlapping grids of cells (aka Characters)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Cells are arranged in (Line,offset) space&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Cells imply sequential ordering of statements based on (Line,_) of statements in (Line,offset) space&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Breaking Free&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Diagrammatic syntax can break free of this arrangement, e.g.,&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Shapes can overlap&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Shapes are arranged in (x,y) space&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;No default for statement ordering&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Shapes are few in number, e.g. rects, ellipses, text, lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;SVG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Using SVG as a concrete example…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SVG elements &lt;i&gt;can&lt;/i&gt; take the place of characters in PLs.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SVG implies that &lt;i&gt;text&lt;/i&gt; is not special.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Text&lt;/i&gt; is but one of the possible shapes that can be used in a PL.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Relations might include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;contains&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;intersects&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;color (shape, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;SVG has &quot;too much&quot; syntactic noise, for use in a language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is possible to strip the noise from SVG, leaving only enough for the above relationships.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Literate Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Are SVG diagrams a model for&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;literate diagrammatic programming&lt;/i&gt;?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Concurrency Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A suggestion for a language of concurrency:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-03-22-08-39-22-Images/component diagrams-two comonents 2 connections.png&quot; width=&quot;200px&quot; height=&quot;56px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;palegreen rectangles are &lt;i&gt;input ports&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lightyellow rectangles are &lt;i&gt;output ports&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;&lt;/i&gt;any rectangle that is not a port is a software component&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text contained in a rectangle (the smallest enclosing rectangle) is the &lt;i&gt;name&lt;/i&gt; of shape
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;each &lt;i&gt;input&lt;/i&gt; &lt;i&gt;port&lt;/i&gt; must have a name distinct from all other input ports on the diagram&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;each &lt;i&gt;output&lt;/i&gt; &lt;i&gt;port&lt;/i&gt; must have a name distinct from all other output ports on the diagram (input port names can overlap with output port names),&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;&lt;/i&gt;any rectangle that is not a port is a software component
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;all software components must have a name&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;the name of software components is their &lt;i&gt;kind&lt;/i&gt; (aka &lt;i&gt;type&lt;/i&gt;)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lines can begin and end only on ports
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;lines can use &lt;i&gt;path&lt;/i&gt; properties to add eye-pleasing noise (ignored)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;all other shapes are &quot;noise&quot; and are ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/06/Components-(again).html&quot;&gt;https://guitarvydas.github.io/2021/03/06/Components-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Hierarchical State Machine Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;A suggestion for a Hierarchical State Machine&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PL:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;ellipses are states&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text in the middle of an ellipse is the state name&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text at the top of an ellipse is the &lt;i&gt;entry code&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text at the bottom of an ellipse is the &lt;i&gt;exit code&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;arrows can begin and end only on states (incl. nested HSMs)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;text on arrows is the &lt;i&gt;transition code&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;circles represent a default entry point
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;only one circle may appear on an HSM diagram&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a transition arrow from a circle &lt;i&gt;must&lt;/i&gt; begin on the circle and end on a state
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;What does text on the default entry transition represent?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Possibility:&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; default entry transition code is executed (once) when the default transition is taken.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;⁃&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;There can only be one transition arrow from a circle&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;an ellipse with a shadow represents a nested state machine (HSM)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;every HSM must list its input ports and output ports explicitly
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;ports (palegreen and lightyellow) can appear anywhere on the diagram and are not explicitly connected to any other PL shapes&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2021-03-22-08-39-22-Images/HSM.png&quot; width=&quot;200px&quot; height=&quot;89px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&quot;&gt;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=j_bN4ZXbCHU&quot;&gt;https://www.youtube.com/watch?v=j_bN4ZXbCHU&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Hybrid Diagrams+Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams may contain text. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Text can express some relationships &quot;better&quot; than diagrams, e.g. mathematical one-in-one-out relationships.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams can express some relationships &quot;better&quot; than text, e.g. network diagrams.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;So-called &quot;visual programming&quot; is often based on the notion of pixels.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams are based on shapes.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Composition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Current PLs encourage thinking in only 2 directions: X &amp;amp; Y.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Tabs&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; are borne of X/Y thinking — tabs go &lt;i&gt;across&lt;/i&gt; but not &lt;i&gt;in.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;HTML hyper-links provide access to the Z (&lt;i&gt;in&lt;/i&gt;) dimension, but this hasn't been fully exploited in PLs.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;Bash&lt;/i&gt; allows composition of concurrent components, but only in a linear manner.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Diagrams encourage thinking in 3 dimensions X/Y/Z.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can view a page of diagrams and mouse-over any component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Double-clicking on a component should open a new editor showing the composition of the selected component. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For example,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;If the selected component is composed of a network of other components, then a diagram editor is opened,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;If the selected component is implemented as an HSM&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;, then an HSM diagram editor is opened&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;If the selected component is implemented in some textual 3GL (e.g. Python, JavaScript, etc.), then a code editor is opened.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Old-Fashioned Concepts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The notion of Line/Offset (maybe with footnotes) is borne out of the contraints of using pen and paper.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;We, now, have computers that can represent expression (writing, drawing) in 3 dimension X/Y/Z.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Our use of computers is limited by old-fashioned 2D notions, such as &lt;i&gt;desktops, filing cabinets, &lt;/i&gt;etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;IMO, the way to break free from such old-fashioned concepts is to use isolated components that are concurrent.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;3D&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Note that the concept of 3D is, here, taken to be in a simple form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Adding a Z axis does not imply that we need to show diagrams in the Y/Z plane, but only allows us to push into (out out of) components.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We already use 3D in things like tree widgets and hierarchical file systems (especially icon-view) and HTML browsers (links).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Writing of prose is constrained to a mostly-2D paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can write character cells in Line/Offset space and one can only go 1-level deep in Z using footnotes.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Isolation&lt;/span&gt;:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Concurrency&lt;/span&gt;:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/17/concurrency-bare-bones.html&quot;&gt;https://guitarvydas.github.io/2020/12/17/concurrency-bare-bones.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;New Breed HLLs&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/New-Breed-HLLs.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/New-Breed-HLLs.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Drakon&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;http://drakon-editor.sourceforge.net/&quot;&gt;http://drakon-editor.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;IMO, the 3 PDFs are well worth reading&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part1_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part1_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part2_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part2_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part3_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part3_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;(line,offset) instead of (x,y) in pixel space&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; HSMs are StateCharts without orthogonal states.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Orthogonal states can be represented in the above concurrency PL.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; In Drakon, such entry text is used to declare local variables.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;span class=&quot;s4&quot;&gt;Aka filters.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; shapes at pixel coordinates&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; &lt;span class=&quot;s4&quot;&gt;Tabbed views.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Tabbed dialogs.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Bash may provide other dimensions, but does not &lt;span class=&quot;s2&quot;&gt;encourage&lt;/span&gt; their use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Bash pipelines are restricted by character-based thinking.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Hierarchical State Machine (StateCharts sans orthogonal states)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Diagram Languages (SVG)</summary></entry><entry><title type="html">Racket peg</title><link href="https://computingsimplicity.neocities.org/2021/03/19/Racket-PEG.html" rel="alternate" type="text/html" title="Racket peg" /><published>2021-03-19T00:00:00-04:00</published><updated>2021-03-19T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/19/Racket%20PEG</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/19/Racket-PEG.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;PEG&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-19T19:38:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-19T19:38:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    table.t1 {border-collapse: collapse}
    td.td1 {width: 111.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {width: 115.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td3 {width: 108.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td4 {width: 111.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Comparison — REGEX vs PEG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(enough to get started)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;REGEX&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;PEG (Ohm-JS)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Racket (#lang peg)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/abc/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;abc&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'abc'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a*/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; *&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a' *&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;0 or more&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a?/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot;?&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a'?&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;optional (0&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;or 1)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a+/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot;+&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'a'+&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;1 or more&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a)(bc)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;(&quot;a&quot;) (&quot;bc&quot;)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;('a') ('bc')&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;grouping / memo&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;\1\2&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;i&gt;rule&lt;/i&gt;:&lt;i&gt; &lt;/i&gt;function (v1, v2) { … }&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;v1:('a') v2:('bc')&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;naming matches&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/[a-z]/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; .. &quot;z&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;[a-z]&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;character class&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/./&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;any&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;.&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;any&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a|b|c)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;('a' / 'b' / 'c')&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;alternates (original thesis used &quot;/&quot;)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;a&quot; rule&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;v1:('a') v2:rule&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;call rule (in context)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;!&quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;~'a'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;not&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;rule = …&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;rule &amp;lt;— … ;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;define callable rule&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;_&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;whitespace (convention)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&amp;amp;&quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;addOperation ('…',{ …})&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;-&amp;gt; &lt;i&gt;lisp&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&quot;{&quot; … &quot;{&quot; … &quot;}&quot; … &quot;}&quot;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;'{' … '{' … '}' … '}'&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;nesting&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The most interesting differences between PEG and REGEX are&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;not&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;nested rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The most interesting difference between Racket #lang peg and Ohm-JS is in the naming of matches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In Racket (most PEGs) matches are explicitly tagged with variable names in the PEG grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In Ohm, all matches are tagged as parameters to rules in the semantics section.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;In my opinion, the Ohm idea is better.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It leaves the grammar intact and more readable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One of the problems with REGEX syntax is that it has collected noise over the years, making it even less readable than it originally was.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG vs. YACC&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YACC was built from LR(k) theory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches CFG languages.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG builds recursive-descent parsers.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG can match balanced brackets.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YACC cannot.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YACC is theoretically &quot;more sound&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG is more practical.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The main breakthrough in PEG was the idea of using backtracking during the pattern matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This used to be a &lt;i&gt;verbotten&lt;/i&gt; concept in the late 1900's, but with advances in hardware, the use of backtracking has become practical.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;REGEX is also based on theory and is also &quot;sound&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;YACC and REGEX produce state machines.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;PEG produces a TDPL (top down parser, recursive descent).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Pattern Macthing DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEX and PEG are DSLs for pattern matching.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There is little reason to use REGEX instead of PEG, if both are equally available.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;For simple, one-line matches, REGEX might be preferred because&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;it is available in many tools (e.g. sed, awk)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;it is available in many languages (e.g. JavaScript)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;it has a more succinct syntax for small matches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEX syntax often results in unreadable patterns.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEX cannot match nested constructs,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; for example when matching text in programming languages.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;PEG rules are like multiple REGEX patterns that can call each other.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If only one rule is required, REGEX might be a good choice.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In general, though, it is better to use PEG, which allows for later expansion.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When REGEX is grown through maintenance and fixing edge-cases, it usually results in unreadable code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Racket PEG Documentation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;https://docs.racket-lang.org/peg/index.html&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS PEG Documentation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG Thesis&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;You don't need to read this …&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://bford.info/pub/lang/peg.pdf&quot;&gt;https://bford.info/pub/lang/peg.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;REGEX probably can be made to match nested constructs, but requires more effort.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PEG</summary></entry><entry><title type="html">Learning about compilers quickly</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Learning-About-Compilers-Quickly.html" rel="alternate" type="text/html" title="Learning about compilers quickly" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Learning%20About%20Compilers%20Quickly</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Learning-About-Compilers-Quickly.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Learning About Compilers Quickly&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T12:39:37Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T12:39:37Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px Helvetica}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Smallc&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I learned just about everything I needed to know about compilers in only a few hours at CSRI&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I subscribed to Dr. Dobb's Journal of Computer Calisthenics &amp;amp; Orthodontia.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In it was published the source code to Small C (Ron Cain).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was before open source existed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Finding the source code to &lt;i&gt;anything&lt;/i&gt; was a delight.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; was an MSc student and I was but a lowly undergrad.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My friend invited me to CSRI for the evening and we typed in &lt;i&gt;all &lt;/i&gt;of the source code for the C compiler into the Unix V7 system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Around 2am in the morning, we were finished and I typed in my first line of C code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I knew 8080 (nee Z80) assembler at the time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I typed something like:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;a = b + c;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and SmallC responded with something like:&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;; a = b + c;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV L,(name of b)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CLR H&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV C,(name of c)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CLR B&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DAD B&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV (name of a),L&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MOV (name of a + 1),H&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;from this, I could see what &quot;a = b + c&quot; compiled into.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This basically says:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Load one byte into register L&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Clear the H register (which is paired with L to make at 16-bit quantity HL)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Load one byte into register C&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Clear the B register (BC is paired, as above for HL)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;DAD B — 16bit add HL = HL + BC&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Move the lower byte from L into memory (at a)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Move the higher byte from H into memory (at a+1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(and, it says, to do the steps in the given sequence (not, say, in parallel)).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The code above is quite simple — it is raw 8080 code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It avoids all details, such as startup and shutdown,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It was easy to see what the compiler was doing for me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Basically, the compiler was like an editor macro.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Smoke Test&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I went on to do a 6-month project for one of my courses.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was intending to install a better parser&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;, but I ended up rewriting the whole thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the end of the course, my compiler was running, but needed testing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I, carefully, applied one test after another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend asked me to send him the source code.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On Friday, before the weekend.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;On Sunday, he sent me a list of about 100 bugs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was astounded.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I fixed the bugs and the compiler quickly took shape.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked my friend how he found so many bugs in only 2 days.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He replied that he simply poured the compiler source code into itself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In EE, this is called a &quot;smoke test&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You build the alpha version of a circuit, turn on the power and watch for smoke.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If there's no smoke, you do more careful testing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Software testing could benefit from using this same technique for divide-and-conquer:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;smoke test&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;careful (unit) testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The smoke test — a lot of tests all at once — can be used to find blunders and typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is not worth running unit tests until the blunders have been cleared away.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Computing Systems Research Facility at the University of Toronto&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Dr._Dobb%27s_Journal&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Chris Lewis&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;My memory is hazy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Someone will correct me…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Note that K&amp;amp;R was more forgiving at the time — I didn't need to declare a, b, and c before asking the compiler to give me code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Note that the 8080 was little-endian, the low-byte ended up in the lower (numerically) address and the high byte ended up in the address+1.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; &lt;span class=&quot;s2&quot;&gt;twot-threet&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The compiler was written in C for Unix V7 running on a PDP-11.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My compiler emitted code for the 8080, running CP/M&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Learning About Compilers Quickly</summary></entry><entry><title type="html">How to design an scl</title><link href="https://computingsimplicity.neocities.org/2021/03/18/How-To-Design-An-SCL.html" rel="alternate" type="text/html" title="How to design an scl" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/How%20To%20Design%20An%20SCL</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/How-To-Design-An-SCL.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;How To Design An SCL&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T18:08:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T18:08:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Design a Good SCL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Q: How do you design a good SCL?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;find a good toolbox language &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;learn PEG&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;practice (How does a musician get to Carnegie Hall?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Practice)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It used to take years to write one language, even a DSL.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;With PEG, you can crank out an SCL in about one day.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The more iterations you make, the better you will become.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ice Wine&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Germany invented Ice Wine, but Canada makes better Ice Wine. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Why?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;You need 3 days of -8C weather before picking Ice Wine grapes.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In Germany, they get this kind of cold spell about twice per decade.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In southern Ontario, Canada, they get this kind of cold spell every year.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Canadian wineries make Ice Wine 5X more often than German wineries.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;You learn through making mistakes. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Canadians get to make mistakes more frequently than Germans.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Hence, Canadians came down the learning curve in less elapsed time.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Hence, Canadian Ice Wine is better.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies are bad.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Learn how to build SCL's that don't have dependencies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use the n2k principle &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Need-To-Know.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you build a little language that wants to do type-checking across files, don't.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Build a transpiler that does what it can with what it's got (i.e. only one file).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Defer the type check.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Build another SCL that joins two files and does the type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Both SCLs will be simpler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you want to &quot;practice&quot; eschewing dependencies, try not using &lt;i&gt;make, npm, &lt;/i&gt;or any of the other bandaids.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See how your thinking changes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Write SCLs that defer dependency checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How about the call stack?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It makes dynamic, global, data structure to track dependencies at run time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How can you not use the call stack?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Or, use it less?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&quot;&gt;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You can't&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;build a flexible system if it's not layered.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the details sink to the bottom and the user — who wants the flexibility to modify — is faced with a wall of detail&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Emacs is like that.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I bought a hard copy of the emacs manual some 3 decades ago.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was only 600 pages back then.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;TL;DR.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs is totally customizable, but it's hard to know where to start.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You learn emacs looking over someone else's shoulder — YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I know only enough emacs commands to get me through, and you can bet that I won't bother switching editors, lest I get another steep learning curve.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Common Lisp is a wall of detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Common Lisp does everything.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And everything is standardized and documented.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You have to love reading legalese, though.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I know only enough Common Lisp to get me through.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I lean on the CLHS a lot, even after a couple of decades of use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You'd think that I would be an expert now, but I learn something new every time I talk to another lisper.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;open source&lt;/i&gt; movement is a wall of detail.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Sure, I can download just about everything from github, but, fixing any of it is a serious commitment.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The UNIX® manuals were &lt;i&gt;not &lt;/i&gt;like that.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;1 or 2 pages each.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Just enough to get you started.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Books and more details on request.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It &lt;i&gt;is&lt;/i&gt; possible to use layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Structured Programming gave us layers over GOTO-full programming.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Global variables fell to locally-scoped variables.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OO gave us modular design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FP hides state.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What about types?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How do you hierarchicalize types?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What about message-passing?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use diagrams and composition (instead of inheritance) to make hierarchical message-based systems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OSI told us to build layered messages.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pipes - Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;One of the ideas the UNIX® pipes brought is elusively simple — isolation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can't convert a shell script to a &amp;lt;pick-your-language&amp;gt; program.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Because most languages use the stack.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The stack is a global variable and there's only one stack.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread Safety is an accidental complexity caused by trying to use the calculator paradigm to solve a non-calculator problem (e.g. sequencing).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bash has ugly syntax, and suffers from feature-itis.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Strip all of the gunk away, until you are left only with pipes — no variables, no string concatenation, no conditionals, no environment variables.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bash, also, makes multi-tasking harder to use, than necessary, because of its insistence on the rendezvous model and textual code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can draw a diagram on a whiteboard of a network.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You can't draw a diagram of a bash script on a whiteboard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Strip everything away and build only an SCL that gives you pipes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want variables, build another SCL at another level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want environment variables, build another SCL at another level.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Don't slam the kitchen sink into the SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Make it do only one thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Start by build an SCL which is a like a shell that gives you multiple processes (threads) and lets you join them up with pipes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use a diagram as your syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(You are allowed to hand compile the diagram, but it is easy enough to compile diagrams to code).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that &quot;+&quot; and &quot;cons&quot; and &quot;arrays&quot; don't figure in such a simple whiteboard-SCL.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Design the SCL ; Don't Use Existing Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Write your target problem out in its minimal form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You are not allowed to use Python, JavaScript or any other programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The problem with DSLs is that they are too general.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An SCL is meant to be one-time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One problem, one SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Not a DSL&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Your target problem does not include a general solution for something, e.g. how to use A.I, how to use a database, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Your target problem is &quot;what does the user want and how will you solve it?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part of the target problem is a UX - that's one SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part of the target problem is how you will store the information - that's another SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part of the target problem is how you are going to process the information to produce a useful (to your user) result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That's at least one SCL, if not more than one SCL.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Happy Path&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Most PL creators want to make it &quot;simple&quot; to express the &lt;i&gt;happy path&lt;/i&gt; while eliding details such as error conditions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A good starting point for this kind of thinking is the set of rules for creating Drakon diagrams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part1_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part1_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part2_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part2_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://drakonhub.com/files/drakon_part3_eng.pdf&quot;&gt;https://drakonhub.com/files/drakon_part3_eng.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I favour a different notation, but Drakon is a good place to start to widen one's horizons&lt;/i&gt;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Possiblities&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Textual notation is good for one-in-one-out operations, like functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Everything else isn't handled well with textual notation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Structured Programming prescribed one input and one output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule was broken by languages that support syntax for exceptions (one in, two outs).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that bash syntax flatlines at one-in, two-out (stdin, stdout, stderr).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Real life operations don't follow the above rules.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, lowly JavaScript has this very problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JavaScript defines a FileReader object with &lt;i&gt;six&lt;/i&gt; possible outcomes&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; (called events) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/FileReader&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The textual code for handling these events is a mess.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, it is easy to draw a diagram of this object…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-03-18-18-08-06-Images/FileReader.png&quot; width=&quot;100px&quot; height=&quot;119px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Just the act of drawing it out got me to reduce the API down to 4 useful outcomes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The happy path is &lt;span class=&quot;s1&quot;&gt;req—&amp;gt;resp&lt;/span&gt; (request, response).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the user hits CANCEL, we get an ABORT event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If there is some internal error (e.g. file not found), we get an ERR event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the network times out, we get a TIMEOUT event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I posit that this is easier to understand than the textual version.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can you use this &lt;i&gt;right now&lt;/i&gt;?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Yes, just draw it on a whiteboard.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can we build SCLs like this?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Yes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will show how to compile SVG to code in an upcoming essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is actually easier if you don't already know how to build compilers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Drakon was built using Tcl/Tk.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I suggest something even simpler.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;and so does assembler&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;One stack per CPU, one stack per CPU&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Not to mention the other 3 properties.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This paradigm does not map easily onto CALL/RETURN paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Having a Dispatcher will make things easier.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You can map this onto bash using &quot;&amp;amp;&quot; syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most other languages need the use of thread libraries to make this work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Trying to build components using CALL/RETURN languages (just about every language) will end up in accidental complexity (CALL/RETURN uses the stack, the stack is a global variable built into the hardware, going this route is possible, but runs into issues like thread safety (because of the global variable)).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This can also be implemented using closures (anonymous functions with state).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">How To Design An SCL</summary></entry><entry><title type="html">Divide and conquer in pls</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Divide-and-Conquer-in-PLs.html" rel="alternate" type="text/html" title="Divide and conquer in pls" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Divide%20and%20Conquer%20in%20PLs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Divide-and-Conquer-in-PLs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Divide and Conquer in PLs&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T08:46:04Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T08:46:04Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Divide and Conquer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I think that the current crop of PLs — e.g. Python, JavaScript, etc. — show a distinct lack of divide-and-conquer mentality. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IMO, everything should be a function call until the termination case is encountered in the recursive design. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It should not be possible to use operators other than function calls except at the leaf levels. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, &quot;+&quot; should not appear in any code except the very lowest-level code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Likewise, &quot;cons&quot; and array operations. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers can optimize-away function calls by making them into inline (macro) calls. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;AFAICT, most PLs allow unrestricted use of low-level operations (like &quot;+&quot;, cons, arrays) at any level of the design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Low-level operations are like GOTOs — they should be avoided and &lt;i&gt;structured&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Divide and Conquer in PLs</summary></entry><entry><title type="html">Testing</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Testing.html" rel="alternate" type="text/html" title="Testing" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Testing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Testing.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Testing&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T17:28:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T17:28:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I describe some of the testing techniques I encountered.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some of these techniques were for hardware testing, but might give ideas for software testing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Back to Back Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Mitel built PBXs.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the very end of testing, we took two &quot;finished&quot; PBXs and pointed them at each other. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The PBXs would self-test by calling each other many times.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One should be able to do this with a class.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Make two instances, then have the instances talk to one another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If this sounds hard and undoable, your organization needs a Test Engineer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Someone whose job it is to kibitz designers on how to make their classes more testable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If this becomes a UX issue, look at sikulix, &lt;a href=&quot;http://sikulix.com/&quot;&gt;http://sikulix.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Regression Testing (HP Trace Analyzer)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We used regression testing on hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CI tools do this now.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For hardware, we took a &quot;golden&quot; known-to-be-working board and used an HP Trace Analyzer on it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It recorded repeatable signatures (collapsed down to some kind of hash value) for certain input streams.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Boards/circuits-under-test were deemed &quot;good&quot; if they generated the same signatures (for the same inputs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the signatures were wrong, the circuit-under-test would be put aside for further testing.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Coverage Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;When alpha-testing software, we used &lt;i&gt;coverage testing&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We created an input dataset that hit every piece of code at least once.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This got rid of blunders and typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Designers also discovered dead code with this test.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using SCLs makes this option particularly attractive.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Since the code is generated, we could modify the transpilers to insert anything into the generated code and have it automagically appear.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NorTel&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;NorTel used to have a policy about bug fixes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bug fixes did not remove code, they just added edge-cases that were specialized to find and shunt only the conditions that made the bugs appear.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The fixes went into the shunt.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The original code was mostly left alone.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Telecoms, like NorTel, Mitel and Bell used to pride themselves on &lt;i&gt;four nines &lt;/i&gt;guarantees.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They guaranteed that their systems would have uptimes of 99.99%.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Banking Y2K&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We worked on the Y2K problem at some big banks.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;They had a policy that they would not test during the work week.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Testing could only be done on Saturdays, leaving Sundays for reverting back to the previous code if problems occurred.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Furthermore, one weekend was reserved for month-end consolidation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Another weekend was reserved for &quot;maintenance&quot; upgrades.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I forget what the third weekend was reserved for, but we were left with one day every month (1 Saturday for new code, 1 Sunday for reverting if needed).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, there was year-end.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data spread was uneven, because month-ends came at different times.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We couldn't just generate fake data in a repetitive manner, we had to fake the calendar and all month-ends.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Generating the fake data needed as much compute-power as was used for live banking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Starting in, say 1996, the Banks needed to generate 4 years worth of fake data but could only test it on one day of every month. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most of the code was written in COBOL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some in assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Not all source code could be found.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some of the &quot;date&quot; affected code had names like &quot;Nancy&quot;, &quot;Jane&quot;, etc.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Banks were set up to touch maybe 5% of their code per year.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Y2K problem affected something like 30% of the code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;testing&lt;/i&gt; problem turned out to be harder than the actual &lt;i&gt;fixing&lt;/i&gt; problem.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We started by trying to auto-fix the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This affected too much of the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the end, we just generated reports and let the maintainers fix the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Their wetware made the effort possible — they could tell which things really needed to be fixed and which were red herrings.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Fancy computer-controlled telephone switches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Telephone lines were mostly analogue at the time.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; &lt;span class=&quot;s1&quot;&gt;This is not a new idea.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Testers would come back to designers and ask how to push the code so that it hit certain routines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;After scratching their heads, designers would - sometimes - realize that certain code was unreachable and would lance such unreachable code from the codebase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was always a surprise when dead code was found - it looked useful, but couldn't be reached and the compilers couldn't detect the problem.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;/span&gt;The original programmer's female dates.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Names that were suggestive enough to raise the eyebrows of the auto-detection software.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Only about 200 programmers were allocated to the job of fixing bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Testing</summary></entry><entry><title type="html">The f**k program</title><link href="https://computingsimplicity.neocities.org/2021/03/18/The-F-k-Program.html" rel="alternate" type="text/html" title="The f**k program" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/The%20F**k%20Program</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/The-F-k-Program.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The F**k Program&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T12:40:05Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T12:40:05Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;F**K.C&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At CSRI, I learned that there was a program called f**k&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.c.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I looked at the source code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It contained all sorts of harmful actions that would, literally, break physical devices (such as printers, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the code was carefully commented out.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;End of Session&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;After some playing around, I typed&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;gt; f**k me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My session ended abruptly.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;That word was very verbotten at the time.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The F**k Program</summary></entry><entry><title type="html">Toe for software development</title><link href="https://computingsimplicity.neocities.org/2021/03/18/TOE-for-Software-Development.html" rel="alternate" type="text/html" title="Toe for software development" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/TOE%20for%20Software%20Development</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/TOE-for-Software-Development.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;TOE for Software Development&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T00:34:05Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T00:34:05Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;TOE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;TOE means Theory of Everything.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I don't have the answers, but I have some observations…&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Code boils down to two operations:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe in&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;i&gt;Breath in&lt;/i&gt; usually involves pattern matching.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;i&gt;Breathing out&lt;/i&gt; usually means rearranging the stuff that got breathed in.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Pattern matching: use PEG. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;PEG is &quot;better&quot; than REGEXPs in that PEG can match nested patterns.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The theoretical name for pattern matching is &lt;i&gt;parser, &lt;/i&gt;and PDFA.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Theory gave us YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG is not YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG is easier than YACC.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;REGEXP theory is called &lt;i&gt;scanners&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Theory gave us LEX.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG makes LEX obsolete.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;FP languages use pattern matching.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Data boils down to one universal data structure - the &lt;i&gt;triple.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All other data structures are ways to rearrange and optimize triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In 1950's-thinking, it was a good idea to optimize data structures. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I'm not so sure that it's a good idea to optimize data structures in the 202x's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Certainly not during &quot;compile time&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We used to believe that optimizing memory and CPU usage was critical.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that optimizing human-thought-effort is more critical, now.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My further thoughts on this subject are:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Boring - The Essential Ingredient&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Optimizations thwart efforts to automate processes. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We saw this problem happen in the early days of C and Pascal.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Assembler programmers thought that they could optimize better than compilers could.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Then GCC came along.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Now, we all use HLL's and don't imagine writing code in assembler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Make it boring. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Make it repetitive. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then write code that automates and optimizes the boring and repetitive parts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We already know how to do that, e.g. peephole optimizers, compiler technologies, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How do you make data boring?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Deconstruct it into triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How do you make code boring?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Deconstruct it into triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;MOV R0,R1&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function(subject,object)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;is a triple&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and PROLOG can write triples&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;father(justin,paul).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple in PROLOG-ese.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Boring.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Not a Triple&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;But,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;parents(justin,paul,ilona).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is &lt;i&gt;not &lt;/i&gt;a triple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't use triples if you think that your optimizer needs more edge-cases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inferencing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;How do you get more-interesting data structures if everything is reduced to triples? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Inferencing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Backtracking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pattern-matching.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">TOE for Software Development</summary></entry><entry><title type="html">The rain god</title><link href="https://computingsimplicity.neocities.org/2021/03/18/The-Rain-God.html" rel="alternate" type="text/html" title="The rain god" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/The%20Rain%20God</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/The-Rain-God.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Rain God&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T10:11:54Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T10:11:54Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Rain God&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, also, crashed the University of Toronto's computing facility.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It was my first assembler course.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I imagined that we were using an assembler VM&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; and that the computer system was totally protected from having any harm caused to it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the time, we used card decks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My program was, maybe, about 10-20 cards long.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I would drop my assignment into the card-reading hopper and stand in line waiting for my turn at the line printer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Every&lt;/i&gt; time I stepped up to the printer, the system would crash and the line printer would auto-open its hatch (about the size of a hatchback on a modern automobile).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lousy luck.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I kept doing this&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; until the overseer got a phone call from downtown.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He looked at my code and told me to stop trying to run my assignment.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Later, I found the bug in my code and was surprised that the VM hadn't protected the system from my mistake.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I learned that there was no VM, I was running raw IBM 360 hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I learn from mistakes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've learned a lot.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/List_of_The_Hitchhiker%27s_Guide_to_the_Galaxy_characters#Rob_McKenna&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;There was no term such as &quot;VM&quot; at the time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;VM means virtual machine.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;One card was one line of code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; It was on the Scarborough Campus, closest to my home, but I was enrolled in the downtown campus.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Rain God</summary></entry><entry><title type="html">Little language</title><link href="https://computingsimplicity.neocities.org/2021/03/18/Little-Language.html" rel="alternate" type="text/html" title="Little language" /><published>2021-03-18T00:00:00-04:00</published><updated>2021-03-18T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/18/Little%20Language</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/18/Little-Language.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Little Language&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-18T12:40:32Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-18T12:40:32Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {text-decoration: underline}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: lower-alpha}
    ol.ol2 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I develop a little language (SCL)&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; in about 1 day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then I use the little language (SCL) to filter SVG files to help me build another essay.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This SCL was built in &lt;i&gt;layers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;glue&lt;/i&gt; SCL layer reads a spec, then generates code that can be used in a lower layer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Both layers happen to use Ohm-JS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This example is very simple, hence it contains only 2 layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ideally, all SCLs should be this simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The code associated with this essay can be found at&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/glue/tree/master&quot;&gt;https://github.com/guitarvydas/glue/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The various branches — dev0, dev1, dev2, and dev3 — show the project at different stages (described below).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final test is in branch foreignFilter.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All branches have been collapsed into branch master.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Quick&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; language and tool was developed in less than one day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goal of this SCL is to help me write PEG grammars and associated code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to use parsers the way the most people use REGEXPs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that REGEXPs are not &quot;type checked&quot; in most languages and editors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, pattern matching in this SCL is not &quot;type checked&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The programmer is responsible for writing the code correctly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that pattern-matching is already a kind of type check (pattern matching is use in FP languages), so, the lack of type-checking is not as big a problem here as it might be in general purpose programming languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a fundamental principle of SCL design - YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Save development time by skipping hoary operations, like type-checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The goal is to create something that will generate useful code in less than a day of work (undercutting one of the principle reasons why DSLs are not used frequently).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Type checking&quot; will come later, if this tool gets used frequently.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that it will be easier to type-check Glue programs than it would be to type-check REGEXPs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Emitter&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I want to write a little language — and SCL — that lets me pattern match a text file, then rearrange it and output it in some other way.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, I have the problem that I'm writing essays that include diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use &lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt; to create my diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt; does not save in SVG format.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must ask &lt;a href=&quot;http://Draw.io&quot;&gt;Draw.io&lt;/a&gt; nicely to export the drawing in SVG format.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The exported SVG diagram contains a lot of noise.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I just want to see pure SVG, without the noise.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The exported SVG file contains &quot;&amp;lt;switch&amp;gt;…&amp;lt;/switch&amp;gt;&quot; clauses that contain &quot;&amp;lt;foreignObject&amp;gt;…&amp;lt;/foreignObject&amp;gt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This stuff overwhelms the .SVG file and I can't see the stuff that I really want to see (the rects, the ellipses, the paths, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can I write a &lt;i&gt;filter&lt;/i&gt; to remove the noise? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That is my goal.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Write a filter.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Delete the noise.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Divide and Conquer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Divide and conquer — on steroids — is recursive design.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Chop every problem up into two pieces.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Treat each piece separately.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you don't know how to solve a piece, chop it up into two pieces.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Keep doing this until you know how to accomplish every piece.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As you go, new ideas will pop up.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The new ideas can modify the problem at any level.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My divide &amp;amp; conquer for this (simple) problem went something like this:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;0&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;main problem / main goal - remove &amp;lt;switch&amp;gt; and &amp;lt;foreignObject&amp;gt; elements from the Drawio generated SVG files&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;This can't be done in REGEXP, so I decided to use something more powerful — a &lt;i&gt;parser &lt;/i&gt;— which allowed me to use nesting&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;1&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;SVG grammar&lt;/b&gt; — I know how to do this (PEG grammar in Ohm-JS)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;2&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;other stuff&lt;/b&gt; - I need to write the JavaScript to accompany the grammar&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;2.0 &lt;b&gt;invent&lt;/b&gt; a sub-language (I call it &lt;i&gt;glue&lt;/i&gt;) to help me write the JavaScript&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;2.0 is simpler than the original problem&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;&lt;b&gt;chop&lt;/b&gt; 2.0 into up 2 pieces&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;2.1&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;invent&lt;/b&gt; a helper grammar that works with Ohm-JS
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;li class=&quot;li4&quot;&gt;2.1.1&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;implement&lt;/b&gt; that helper grammar
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;the first cut is in branch dev1&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;implement glue.js that reads in the grammar, reads the helper language code&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;run the grammar parser and write &quot;successful&quot; or not (in which case, I use Ohm-JS's grammar tracer)&lt;/li&gt;
          &lt;/ul&gt;&lt;/li&gt;
          &lt;li class=&quot;li4&quot;&gt;2.1.2&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;write&lt;/b&gt; the javascript support code for the helper language&lt;/li&gt;
        &lt;/ul&gt;
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;this is straight-forward, so I wrote the JS code directly (branch dev3)&lt;/li&gt;
            &lt;li class=&quot;li4&quot;&gt;2.1.2.0&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;b&gt;feedback&lt;/b&gt;: while building this, I realized that I could make the helper tool even simpler&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/ul&gt;
        &lt;ul class=&quot;ul2&quot;&gt;
          &lt;ul class=&quot;ul2&quot;&gt;
            &lt;li class=&quot;li4&quot;&gt;2.1.2.1 &lt;b&gt;re-invent&lt;/b&gt; the grammar for the helper tool, using the already-built grammar and JS code&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/ul&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;li class=&quot;li4&quot;&gt;2.2 &lt;b&gt;decide&lt;/b&gt; how to incorporate the generated helper code into the glue.js tool
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li4&quot;&gt;2.2.0 I decided to take the easiest route - I would simply COPY/PASTE the generated code into the Ohm-JS boilerplate&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
        &lt;li class=&quot;li4&quot;&gt;The resulting code is in branch dev3.&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above is recursive design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each step reduces the original problem until the termination case is encountered.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Recursive break-down is used (recursively) on each branch of the problem — there are many termination cases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I think that the current crop of PLs — e.g. Python, JavaScript, etc. — show a distinct lack of divide-and-conquer mentality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IMO, everything should be a function call until the termination case is encountered in the recursive design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It should not be possible to use operators other than function calls except at the leaf levels.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, &quot;+&quot; should not appear in any code except the very lowest-level code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, &quot;cons&quot; and array operations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compilers can optimize-away function calls by making them into inline (macro) calls.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;AFAICT, most PLs allow unrestricted use of low-level operations (like &quot;+&quot;, cons, arrays) at any level of the design.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The SVG Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote a first cut of the grammar in &lt;a href=&quot;https://github.com/guitarvydas/glue&quot;&gt;https://github.com/guitarvydas/glue&lt;/a&gt; (branch: dev0).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I got it running.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That was a &quot;major&quot; hurdle, since it required me to understand how to use Ohm-JS, how to read a file in JS, etc., etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The &quot;hurdle&quot; decreases every time I use Ohm-JS and JavaScript, but I didn't need to wait to go down the respective learning curves.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I started to &lt;i&gt;use&lt;/i&gt; Ohm-JS and JavaScript right away.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Ohm-JS knows how to do its magic in HTML scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I've explored that possibility in &lt;/i&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;&lt;i&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/i&gt;&lt;/a&gt;&lt;i&gt;.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, I refined my ideas and re-cut the SVG grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Branch: dev3.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Final SVG Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;SVGSwitchAndForeign {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; EmptyDefs Element+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element = ElementWithSwitch | ElementWithForeign | ElementWithElements | ElementWithoutElements&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; Element Element &quot;&amp;lt;/switch&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; Element &quot;&amp;lt;/foreignObject&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; (Element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1st&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The glue Tool&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Problem (2.1) is that of creating an &lt;i&gt;identity&lt;/i&gt; grammar for SVG.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I break this problem down into 2 parts&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;match SVG and leave hooks&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rearrange the matches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Using Ohm-JS, I need to&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;write a grammar (for SVG)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;write so-called &quot;semantics&quot; code to do the rearranging.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I want a tool which makes it easy to pattern-match SVG and to re-arrange the matched bits.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;In Ohm-JS, you write a grammar to do the pattern-matching, and you write some JavaScript code to do the re-arranging.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is one JavaScript function for each rule in the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The matches are passed in as function parameters.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Roughly, I want a tool that does something like:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;pattern matcher —&amp;gt; javascript code&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The pattern matcher portion is handled by Ohm-JS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It's called the &lt;i&gt;grammar.&lt;/i&gt; The syntax is well-documented in &lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The javascript re-arranging code is just a mess of JavaScript code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is called the &lt;i&gt;semantics&lt;/i&gt; in Ohm-JS documentation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I've done this before.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Writing the semantics code can be very repetitive and boring.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, all that I need is some way to tie grammar rules to JavaScript `…${v}…` strings.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I want:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;.SVG —&amp;gt; Ohm-JS grammar —&amp;gt; string-language —&amp;gt; same .SVG&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Actually, I would be happy if the string-language was simply the same as JavaScript `…${v}…` strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, I would settle for:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;.SVG —&amp;gt; Ohm-JS grammar —&amp;gt; JavaScript `…` strings —&amp;gt; same .SVG&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;OK, so I want to write a grammar in Ohm-JS, then I want a mini-language that lets me rewrite pattern matches using JavaScript strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I &lt;i&gt;could &lt;/i&gt;have done this in raw JavaScript, but I didn't want to write details when I could automate&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS gives me each match (in some internal format)&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; as function parameters.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, what I want is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;.SVG —&amp;gt; Ohm-JS grammar —&amp;gt; JavaScript variables —&amp;gt; JavaScript `…` strings —&amp;gt; same as original .SVG&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, my requirements boil down to:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;use Ohm-JS to write a grammar for SVG (YAGNI, I don't need to handle &lt;i&gt;all &lt;/i&gt;of SVG, just enough for my current problem, I can get away with 95% of SVG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The last 5% is a killer, usually.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So avoid it.)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;use another tool to build my JavaScript re-arranger code&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;run Ohm-JS+JS-rearranger-code to input a .SVG and spit it back out unchanged (but leaving me hooks for later).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I need to write a tool in Ohm-JS to spit out code that could be used with Ohm-JS to eat and spit out .SVG files.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;My tool syntax is something like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;grammarRuleName variables —&amp;gt; javascript&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;One more complication: some of the grammar rules match one thing, but some grammar rules match multiple-things.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The +/*/? operators in the grammar match multiple things. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In Ohm-JS, single matches are returned as JavaScript variables, and multiple matches are returned as JavaScript arrays (see the appendix).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, for this mini-language, I need to differentiate between the two kinds of things and generate different code for each kind of thing (single vs. multiple).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If the grammar has +/*/? in it, then we need more JavaScript code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If there is no +/*/?, then we still need JavaScript code, but less of it.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If we choose to use strings, then JavaScript has the .join('') operator, which makes handling of arrays of strings particularly easy.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;One grammar rule can have both types of matches (singles and arrays).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, for example, for the grammar rule:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = A B+ C&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;we need to create a function like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = function (a, bArray, c) { return a.semcode () + bArray.semcode (). join('') + c.semcode (); },&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;There are more details, but I'm going to skip over them for now.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the final source code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Details kill.&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Note that I like to leave spaces before parameter lists (it results in cleaner-looking code after you get used to it).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I write &quot;&lt;/i&gt;&lt;span class=&quot;s2&quot;&gt;&lt;i&gt;fn(a,b)&quot;&lt;/i&gt;&lt;/span&gt;&lt;i&gt; as &quot;&lt;/i&gt;&lt;span class=&quot;s2&quot;&gt;&lt;i&gt;fn (a, b)&quot;&lt;/i&gt;&lt;/span&gt;&lt;i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compressing whitespace is so 1950's.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;My first cut at the SCL (mini language) was to imagine a language where statements like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader [1 2s 3] = $1 @2s $3&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;would generate JavaScript, like:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader = function (p1, p2s, p3) { return p1.glue () + p2s.glue.join('') + p3.glue () };&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I generated a prototype and made it run.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Branches &quot;dev0&quot; and &quot;dev1&quot;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Why did I use brackets instead of parentheses for the parameter lists?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To remind me that this isn't JavaScript — and — to remind me that I was trying to create an SCL that was declarative — i.e. I was allowed to put &quot;operators&quot; in the left-hand side as well as on the right-hand side.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;While tinkering with the details, I realized that I could reduce this language to something with statements like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader [x @y z] = abc${x}def${y}ghi${z}jkl&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;that would generate (JavaScript) code like:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XMLHeader = function (_x, _y, _z) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var x = _x.glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var y = _y.glue.join('');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var z = _z.glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;return `abc${x}def${y}ghi${z}jkl`&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;In JavaScript, &quot;_&quot; is just a normal character.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a convention to use &quot;_&quot; as a prefix for untouchable data (unexported).&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Final glue Tool Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;SemanticsSCL {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Semantics = SemanticsStatement+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SemanticsStatement = RuleName &quot;[&quot; Parameters &quot;]&quot; &quot;=&quot; Rewrites&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RuleName = letter1 letterRest*&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parameters = Parameter+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parameter = treeparameter | flatparameter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;flatparameter = fpws | fpd&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;fpws = pname ws+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;fpd = pname delimiter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;treeparameter = &quot;@&quot; tflatparameter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tflatparameter = tfpws | tfpd&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tfpws = pname ws+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tfpd = pname delimiter&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;pname = letterRest letterRest*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Rewrites = rwstring&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;letter1 = &quot;_&quot; | &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;letterRest = &quot;0&quot; .. &quot;9&quot; | letter1&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ws = &quot;\n&quot; | &quot; &quot; | &quot;\t&quot; | &quot;,&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;delimiter = &amp;amp;&quot;]&quot; | &amp;amp;&quot;=&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;rwstring = stringchar*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringchar = ~&quot;\n&quot; any&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Emitter&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;branch: dev3&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote code that is very repetitive, on purpose.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in &lt;span class=&quot;s2&quot;&gt;SemanticsStatement &lt;/span&gt;I evaluated each match, although only 1, 3 and 6 are used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I name each parameter &lt;span class=&quot;s2&quot;&gt;_n&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Underscore is not special — it is just another character).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I name each local (temporary) variable as &lt;span class=&quot;s2&quot;&gt;__n&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Two underscores and a digit).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To &quot;walk the tree&quot; — evaluate the CST by applying semantics functions, I needed to call the function &lt;span class=&quot;s2&quot;&gt;_glue ()&lt;/span&gt; on each match.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I chose to make every function return a string.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use JavaScript `…` strings to build the results.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In places where Ohm-JS returns an array, I also call the .join ('') function.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in &lt;span class=&quot;s2&quot;&gt;RuleName&lt;/span&gt;, the second parameter is an array.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I collapse it with the following code:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;var __2s = _2s._glue ().join ('')&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use &lt;span class=&quot;s2&quot;&gt;run.bash&lt;/span&gt; to run the GLUE language.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The final JavaScript code is:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;// npm install ohm-js&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function ohm_parse (grammar, text) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var parser = ohm.grammar (grammar);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var cst = parser.match (text);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (cst.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return { parser: parser, cst: cst };&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (parser.trace (text).toString ());&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;throw &quot;Ohm matching failed&quot;;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function getNamedFile (fname) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var fs = require ('fs');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (fname === undefined || fname === null || fname === &quot;-&quot;) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (0, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (fname, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;var varNameStack = [];&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function addSemantics (sem) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;sem.addOperation ('_glue', {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Semantics: function (_1s) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1s._glue ().join ('');&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `sem.addOperation ('_glue', {${__1}});`;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;SemanticsStatement: function (_1, _2, _3, _4, _5, _6) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;varNameStack = [];&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __2 = _2._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __3 = _3._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __4 = _4._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __5 = _5._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __6 = _6._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;               &lt;/span&gt;${__1} : function (${__3}) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                          &lt;/span&gt;${varNameStack.join ('\n')}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                          &lt;/span&gt;return \`${__6}\`;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                        &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;RuleName: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1 + __2s; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Parameters: function (_1s) {&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var __1s = _1s._glue ().join (','); return __1s; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Parameter: function (_1) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `${__1}`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;flatparameter: function (_1) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;varNameStack.push (`var ${__1} = _${__1}._glue ();`);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `_${__1}`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;fpws: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;fpd: function (_1, _2) { var __1 = _1._glue (); var __2 = _2._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;treeparameter: function (_1, _2) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __2 = _2._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;varNameStack.push (`var ${__2} = _${__2}._glue ().join ('');`);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `_${__2}`;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;tflatparameter: function (_1) {&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var __1 = _1._glue ();&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `${__1}`;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;tfpws: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;tfpd: function (_1, _2) { var __1 = _1._glue (); var __2 = _2._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;pname: function (_1, _2s) { var __1 = _1._glue (); var __2s = _2s._glue ().join (''); return __1 + __2s;},&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;Rewrites: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;letter1: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;letterRest: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;ws: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;delimiter: function (_1) { return &quot;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;rwstring: function (_1s) { var __1s = _1s._glue ().join (''); return __1s; },&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;stringchar: function (_1) { var __1 = _1._glue (); return __1; },&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;_terminal: function () { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;});&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// usage: node glue &amp;lt;file&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;// reads grammar from &quot;glue.ohm&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var text = getNamedFile (&quot;-&quot;);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var grammar = getNamedFile (&quot;glue.ohm&quot;);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var { parser, cst } = ohm_parse (grammar, text);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var sem = {};&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var outputString = &quot;&quot;;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (cst.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;sem = parser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;addSemantics (sem);&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;outputString = sem (cst)._glue ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return { cst: cst, semantics: sem, resultString: outputString };&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;var { cst, semantics, resultString } = main ();&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;console.log(resultString);&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Brainstorming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;It is better to &lt;i&gt;do&lt;/i&gt; &lt;i&gt;something&lt;/i&gt; rather than just sitting around and &lt;i&gt;thinking&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It is OK to throw intermediate results away. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Sometimes the intermediate results generate new ideas. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This is called &lt;i&gt;brainstorming&lt;/i&gt; in songwriting and is such a reliable technique that several teachers teach you to do this before creating every song. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The &lt;i&gt;brainstorming&lt;/i&gt; techniques in songwriting get you to think outside of the box and to fill-in the story with more detail.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In software development, brainstorming helped me make the &lt;i&gt;glue&lt;/i&gt; SCL even more simple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Tinkering with code produces results similar to &quot;shower time&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Menial tasks move the project forward while allowing time for deeper thought.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Deeper thought, applied to bits of the working project, resulted in out-of-the-box thoughts that would not have occurred to me if I hadn't made the base levels work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Thinking works better when it has &quot;something to latch onto&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Test&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test Use Case&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I used the &lt;i&gt;glue&lt;/i&gt; tool to remove &amp;lt;switch&amp;gt; and &amp;lt;foreignObject…&amp;gt; from a sample SVG file (generated by Drawio).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;I used the SVG grammar &quot;as is&quot;.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I wrote a &lt;i&gt;glue&lt;/i&gt; script to generate the extra JavaScript &quot;semantics&quot; code.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I ran the &lt;i&gt;glue &lt;/i&gt;tool and pasted the result into my boilerplate.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I ran frun.bash.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(This ran the &lt;i&gt;glue &lt;/i&gt;tool using &lt;span class=&quot;s2&quot;&gt;semantics.glue&lt;/span&gt;, then ran the result using input file &lt;span class=&quot;s2&quot;&gt;test.svg&lt;/span&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpiler Spec&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My final spec is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;SVGSwitchAndForeign {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svg = xmlHeader docTypeHeader svgElement&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;xmlHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot; ws*&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;docTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; ws*&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;svgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; ws* emptyDefs element+ &quot;&amp;lt;/svg&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;emptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;element = (elementWithSwitch | elementWithForeign | elementWithelements | elementWithoutelements) ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; ws* element element &quot;&amp;lt;/switch&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; ws* element &quot;&amp;lt;/foreignObject&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithelements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; ws* (element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;elementWithoutelements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1st&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ws = &quot; &quot; | &quot;\n&quot; | &quot;\t&quot;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg [a b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement [a @b c d @e f] = ${a}${b}${c}${d}${e}${f}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch [a b c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign [a @b c d e] = ${a}${b}${c}${d}${e}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements [a b @c d @e f g h] = ${a}${b}${c}${d}${e}${f}${g}${h}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements [a b @c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name [a @b] = ${a}${b}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Which is a lot less code&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; than what is written in raw JavaScript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This code chops — divide and conquer — up the problem into two obvious parts:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe in — pattern match the .SVG&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;breathe out — rearrange the matched code and spit it out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each part does one thing only — the first part does pattern matching, the second part does rearranging.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each part is described by its own SCL (DSL).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pattern matching is best described as a &lt;span class=&quot;s3&quot;&gt;grammar&lt;/span&gt;, while rearranging is best described as &lt;span class=&quot;s3&quot;&gt;JavaScript `…` syntax&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;I don't try to force-fit everything into one paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pattern matchers don't make for good code rearrangers, JavaScript strings don't make for good pattern matchers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;General purpose languages don't make for good anything.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Except details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Details kill.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test glue Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;glue&lt;/i&gt; code that corresponds to the SVG grammar is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg [a b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader [a @b c] = ${a}${b}${c}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement [a @b c d @e f] = ${a}${b}${c}${d}${e}${f}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch [a b c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign [a @b c d e] = ${a}${b}${c}${d}${e}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements [a b @c d @e f g h] = ${a}${b}${c}${d}${e}${f}${g}${h}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements [a b @c d] = ${a}${b}${c}${d}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name [a @b] = ${a}${b}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow [a] = ${a}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This says:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Svg is a grammar rule. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;the Svg grammar rule is matched, the matches are provided (as CSTs) in parameters a, b, and c.&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Combine the three parameters using JavaScript `…` string syntax and return that string result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;XMLHeader is another grammar rule.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The grammar rule is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, the grammar matches 3 items (&quot;&amp;lt;?&quot;, stuff* and &quot;?&amp;gt;&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The second item, though, has a zero-or-more operator (*), which means that the grammar returns an array (for zero items, the array has length 0).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The fact that the second item — b — is non-scalar (an array) is denoted by writing &lt;span class=&quot;s2&quot;&gt;@b &lt;/span&gt;on the left-hand side of the GLUE statement.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The right-hand side uses simple JavaScript `…` notation where the tool has collapsed the second item into the final variable called &lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The programmer is responsible for writing the LHS's correctly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no &quot;type checking&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This tool language is more like an editor operation than a DSL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Comparison: REGEXPs are not type-checked (yet) in languages that use them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Details About Matching&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;In Ohm-JS, each grammar rule returns &lt;i&gt;&amp;lt;something&amp;gt;&lt;/i&gt; after it is finished. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If the rule is something like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = A B C&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;then the grammar rule called &quot;R&quot; returns a single thing — a combination of the return values from A and B and C. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case A maps to a JS variable and B maps to a JS variable and C maps to a JS variable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each variable contains one &lt;i&gt;&amp;lt;thing&amp;gt;&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;But, if the rule is something like:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;R = A B* C&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;then the B maps to an &lt;i&gt;array &lt;/i&gt;of &lt;i&gt;&amp;lt;something&amp;gt;&lt;/i&gt;s.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is easy to handle in JavaScript, but you — the programmer — need to know when to expect a single thing or an array of things.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Notation Affects Thinking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;A side-note on how notation affects thinking… In ESRAP, B* returns a list (a tree). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It took me a while to reconcile what I expected (coming from Lisp to JS).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;JS wants you to express details in arrays, whereas Lisp makes it easy to think in terms of trees (aka lists).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Ohm-JS could have returned JS objects, but it returned arrays instead.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The creator(s) of Ohm-JS was influenced by JS to use arrays instead of Objects. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The creator of ESRAP was influenced by Lisp to return lists.&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The difference is made more clear in something like&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;(A* B* C*)&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;where ESRAP returns one list and Ohm-JS returns three arrays.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;Note that ESRAP rewrites this as (and (* A) (* B) (* C)) which is less clear, if you are thinking in terms of pattern matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is yet another orthogonal&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;conversation — see my essay &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;SCL means Solution Specific Language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Like the original idea behind DSLs.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;I've written parsers many times before.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each time I learned something new.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This time, I can apply a subset of what I learned, with cofidence.&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The JavaScript code that hangs off of the grammar is called &quot;semantics&quot; in Ohm-JS.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This term comes from compiler technology, but you don't really need to know about this stuff to simply use it.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;See my essay &quot;Details Kill&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The format is a CST - a concrete syntax tree.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;CSTs are often conflated with ASTs, but there is nothing &quot;abstract&quot; about CSTs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ASTs define the universe of possibilities, but CSTs represent the &lt;span class=&quot;s3&quot;&gt;actual&lt;/span&gt; incoming code.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;and less detail - details kill&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;A CST, to be exact.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A CST is represented as an Object with certain format (see Ohm-JS source code for exact details).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;One could argue that arrays are just optimized lists, but that's beside the point.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Little Language</summary></entry></feed>