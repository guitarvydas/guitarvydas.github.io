<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2020-12-25T22:58:56-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">The stack 2</title><link href="https://computingsimplicity.neocities.org/2020/12/25/The-Stack-2.html" rel="alternate" type="text/html" title="The stack 2" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/The%20Stack%202</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/The-Stack-2.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T22:52:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T22:52:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 9.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Desired&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I have found that it is convenient to create separate stacks for every type. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I found that I need only 5 basic operations and that I can generate/compile/transpile code to enact these operations.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The &quot;syntax&quot; for talking about types in this manner, drops to something very small (&lt;i&gt;bizarrely, the number 5 comes up again - I can describe the new syntax using only 5 productions&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I describe this method in the following essay.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-52-44-Images/isolation-Desired.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Achieving 2 Stacks for Each Type&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCL Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = { ... } &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;--&amp;gt; class with fields def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :string &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;--&amp;gt; string def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :map&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;--&amp;gt; map def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = | ... &lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;--&amp;gt; or type def&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ... &lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;--&amp;gt; enum def&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;This syntax was chosen for its regularity since it was originally parsed with manually written code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each construct has a &lt;/i&gt;left handle.&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every construct begins with &quot;id = &quot;, then the next character determines the kind of construct, e.g. &quot;id = {&quot; means that the construct is a class with fields, &quot;id = '&quot; means enum, and so on.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For a prototype of this, see &lt;a href=&quot;https://github.com/guitarvydas/stack-dsl&quot;&gt;https://github.com/guitarvydas/stack-dsl&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Type Specification&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;[&lt;i&gt;comments deleted, for full contents see &lt;/i&gt;&lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/exprtypes.dsl&quot;&gt;&lt;i&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/exprtypes.dsl&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaprogram = { typeDecls situations classes whenDeclarations&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeDecls = :map typeDecl&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situations = :map situationDefinition&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;classes = :map esaclass&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;whenDeclarations = :map whenDeclaration&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeDecl = { name typeName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationDefinition =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaclass = { name fieldMap methodsTable }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;whenDeclaration = { situationReferenceList esaKind methodDeclarationsAndScriptDeclarations }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationReferenceList = :map situationReferenceName&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;situationReferenceName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodDeclarationsAndScriptDeclarations = :map declarationMethodOrScript&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;declarationMethodOrScript =| methodDeclaration | scriptDeclaration&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodDeclaration = { esaKind name formalList returnType }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;scriptDeclaration = { esaKind name formalList returnType implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnType = { returnKind name }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnKind = 'map' | 'simple' | 'void'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;formalList = :map name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;esaKind =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;typeName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;expression = { ekind object }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;ekind = 'true' | 'false' | 'object' | 'calledObject'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;object = { name fieldMap }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fieldMap = :map field&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;field = { name fkind actualParameterList }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fkind = 'map' | 'simple'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;actualParameterList = :map expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;name = :string&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodsTable = :map declarationMethodOrScript&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;externalMethod = { name formalList returnType }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;internalMethod = { name formalList returnType implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;implementation = :map statement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;statement =| letStatement | mapStatement | exitMapStatement | setStatement | createStatement | ifStatement | loopStatement | exitWhenStatement | callInternalStatement | callExternalStatement | returnTrueStatement | returnFalseStatement | returnValueStatement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;letStatement = { varName expression implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;mapStatement = { varName expression implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;exitMapStatement = { filler }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;setStatement = { lval expression }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;createStatement = { varName indirectionKind name implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;ifStatement = { expression thenPart elsePart }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;loopStatement = { implementation }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;exitWhenStatement = { expression }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnTrueStatement = { methodName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnFalseStatement = { methodName }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;returnValueStatement = { methodName name }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;callInternalStatement = { functionReference }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;callExternalStatement = { functionReference }&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;lval =| expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;varName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;functionReference =| expression&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;thenPart =| implementation&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;elsePart =| implementation&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;indirectionKind = 'indirect' | 'direct'&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;filler =| name&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;class id = { ... }&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;id = { ... }&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a class that contains the given fields.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This construct does not explicitly define any methods for the class.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Methods are generated automatically.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;type union id = | ...&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = | ...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be a union of other types.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;enum&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ...&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = '...' |&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;'...' | ...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type to consist of one or more contants (symbols / strings).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;foreign string&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = :string&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = :string&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be of a foreign type STRING.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;maybe I should have generalized this to &lt;/i&gt;id = :foreign&lt;i&gt;?&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;foreign list id = :map&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;id = :map&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;...&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Defines a type &lt;i&gt;id&lt;/i&gt; to be a list of some other type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;maybe I should have named this :&lt;/i&gt;list&lt;i&gt; instead of :&lt;/i&gt;map]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compiling to Separate Stacks&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;I find it useful to have 2 stacks for every type&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;working stack&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;output stack&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The example type specification in Example Type Specification defines 54 types.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This compiles to 54 type definitions and 54 * 2 = 108 stacks.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that there are only 5 possible ways to define a type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that types can be defined as other types.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;methodName =| name&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;name = :string&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Note that &quot;variable names&quot; are not needed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We simply create a typename for each entity, e.g.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn (a: int, b : int)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;becomes&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;fn (a, b)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;a =| int&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;b =| int&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(this removes syntactic noise from the declarations and pushes implementation details deeper into the hierarchy).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this example, &lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt; are types (not variables).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Each stack contains enough information to:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;specify the type contained in the stack&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the actual stack of values (of the given type)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Operations&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;I find that there are 6 basic operations:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;NewScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;EndScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Output&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;SetField_???_from_???&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;AppendFrom_???&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&amp;lt;foreign operation&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The first 5 operations can be automatically generated for every type (and the corresponding stacks).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The 6&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; operation (&amp;lt;foreign operation&amp;gt;) is a catch-all for operations that are specific to the solution.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;In &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/dsl3.pasm&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/dsl3.pasm&lt;/a&gt; (and the other dsl*.pasm files), the stack names are prepended to the operations (followed by two underscores), and the typenames are prefixed with &quot;$&quot; e.g.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;$whenDeclarations__EndScope&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;thus, in the prototype, one will see operations, like:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__NewScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$classes__EndScope&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__Output&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$scriptDeclaration__SetField_formalList_from_formalList&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;$formalList__AppendFrom_name&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&amp;lt;foreign operation&amp;gt;: $name__GetName&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NewScope&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__NewScope&lt;/span&gt; pushes an empty item, of the appropriate type, onto the working stack of the type.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;EndScope&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__EndScope&lt;/span&gt; pops the given working stack.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__Output&lt;/span&gt; moves the top item from the working stack to the output stack for the given type.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The working stack is popped (once).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SetField&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__SetField_&amp;lt;fieldName&amp;gt;_from_&amp;lt;other-type&amp;gt; &lt;/span&gt;sets the field &lt;i&gt;fieldName &lt;/i&gt;of &lt;i&gt;type&lt;/i&gt; to the value of the top of the Output stack of &lt;i&gt;other-type&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation checks that the &lt;i&gt;other-type&lt;/i&gt; is of the type required by &lt;i&gt;fieldName&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation pops (once) the Output stack of &lt;i&gt;other-type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AppendFrom&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__AppendFrom_&amp;lt;other-type&amp;gt; &lt;/span&gt;appends the value of the top of the Output stack of &lt;i&gt;other-type&lt;/i&gt; to the top list on the working stack of &lt;i&gt;type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation checks that &lt;i&gt;type&lt;/i&gt; is a list (I've called it :map) and that the element-type of the list matches &lt;i&gt;other-type&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation pops (once) the Output stack of &lt;i&gt;other-type.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Foreign&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;type&amp;gt;__??? &lt;/span&gt;performs operation &quot;???&quot; on the given type.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This operation has no arguments (other than &lt;i&gt;type&lt;/i&gt;), but multiple operations can be declared and called, e.g. &lt;i&gt;counter__reset&lt;/i&gt; … &lt;i&gt;counter__increment&lt;/i&gt; … &lt;i&gt;counter__increment_by_2 …&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Compilation (Lisp)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.lisp&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.lisp&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.json&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-exprtypes.json&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;See &lt;a href=&quot;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-mechanisms.lisp&quot;&gt;https://github.com/bmfbp/bmfbp/blob/main/build_process/esa-transpiler/example-generated-mechanisms.lisp&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;Push these through your favourite pretty-printer&lt;/i&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack</summary></entry><entry><title type="html">Dlls</title><link href="https://computingsimplicity.neocities.org/2020/12/25/DLLs.html" rel="alternate" type="text/html" title="Dlls" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/DLLs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/DLLs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;DLLs&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:24:26Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:24:26Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Linking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Static linking&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Linked With Library.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic Linking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Dynamic Link Libraries have fixups in one direction only (call).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Linked With DLL.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Full Dynamic Linking (NIY)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Dynamic Linking in both directions (call &amp;amp; return, NIY)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-24-26-Images/Rethinking DLLs-Isolated.png&quot; width=&quot;350px&quot; height=&quot;269px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">DLLs</summary></entry><entry><title type="html">Filereader</title><link href="https://computingsimplicity.neocities.org/2020/12/25/FileReader.html" rel="alternate" type="text/html" title="Filereader" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/FileReader</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/FileReader.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;FileReader&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T22:58:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T22:58:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;HTML + JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-58-29-Images/FileReader-HTML + JavaScript.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lasoo&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-58-29-Images/FileReader-Lasso.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Part&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-22-58-29-Images/FileReader-sensible.png&quot; width=&quot;231px&quot; height=&quot;231px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">FileReader</summary></entry><entry><title type="html">The algol bottleneck</title><link href="https://computingsimplicity.neocities.org/2020/12/25/The-ALGOL-Bottleneck.html" rel="alternate" type="text/html" title="The algol bottleneck" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/The%20ALGOL%20Bottleneck</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/The-ALGOL-Bottleneck.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The ALGOL Bottlenck&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:56:37Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:56:37Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Von Neumann Bottleneck&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;The von Neumann architecture is a hardware architecture.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The von Neumann architecture uses a single bus for both, code and data.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;This architecture gives rise to something called the von Neumann Bottleneck.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The problem is that code cannot execute while data is being transferred.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Other hardware architectures repair this problem by using multiple buses. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Other architectures allow asynchronous (at the same time) transfer of data and code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Can Programming Be Liberated...&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;famous paper &quot;Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs&quot;&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;proposes the idea that the von Neumann &lt;i&gt;hardware &lt;/i&gt;architecture translates directly into the &lt;i&gt;software &lt;/i&gt;domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;ALGOL Bottleneck&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Software has yet another bottleneck that is orthogonal to the underlying hardware&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;I call this the ALGOL Bottleneck&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Lack of asynchrony&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction vs. Reality&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction: Libraries are Independent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;How Programmers Think About Libraries&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-56-37-Images/Libraries-Fiction.png&quot; width=&quot;250px&quot; height=&quot;387px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality: Libraries Share A Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;How Libraries Actually Work&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-56-37-Images/Libraries-Reality.png&quot; width=&quot;250px&quot; height=&quot;389px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is a data structure.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is a global variable.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is shared by all functions.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack records &lt;i&gt;dynamic&lt;/i&gt; call history.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;The stack is a &lt;i&gt;dynamic&lt;/i&gt; dependency chain between functions.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;                                                                                                    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; https://dl.acm.org/doi/10.1145/359576.359579&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The ALGOL Bottlenck</summary></entry><entry><title type="html">The stack</title><link href="https://computingsimplicity.neocities.org/2020/12/25/The-Stack.html" rel="alternate" type="text/html" title="The stack" /><published>2020-12-25T00:00:00-05:00</published><updated>2020-12-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/25/The%20Stack</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/25/The-Stack.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-25T00:23:23Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-25T00:23:23Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-23-23-Images/isolation-Fiction.png&quot; width=&quot;250px&quot; height=&quot;454px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-23-23-Images/isolation-Reality.png&quot; width=&quot;413px&quot; height=&quot;587px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The stack is a heterogeneous list.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It contains data of different types.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It contains control-flow information.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Desired (not reality yet)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-25-00-23-23-Images/isolation-Desired.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack</summary></entry><entry><title type="html">The stack is a list</title><link href="https://computingsimplicity.neocities.org/2020/12/24/The-Stack-is-a-List.html" rel="alternate" type="text/html" title="The stack is a list" /><published>2020-12-24T00:00:00-05:00</published><updated>2020-12-24T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/24/The%20Stack%20is%20a%20List</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/24/The-Stack-is-a-List.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack is a List&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-24T20:11:14Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-24T20:11:14Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;List&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-List.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Array&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-array.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unoptimized Stack&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-unoptimized stack.png&quot; width=&quot;241px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Optimized Stack&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2020-12-24-20-11-14-Images/stack-optimized stack.png&quot; width=&quot;121px&quot; height=&quot;181px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack is a List</summary></entry><entry><title type="html">Concurrency bare bones</title><link href="https://computingsimplicity.neocities.org/2020/12/17/concurrency-bare-bones.html" rel="alternate" type="text/html" title="Concurrency bare bones" /><published>2020-12-17T00:00:00-05:00</published><updated>2020-12-17T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/17/concurrency%20bare%20bones</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/17/concurrency-bare-bones.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;concurrency bare bones&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-17T19:14:53Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-17T19:14:53Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I describe the very bare bones for implementing concurrency in any language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I know that this can be implemented in JavaScript - I've done it and will blog about it in further essays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Incidentally, I've also built preliminary versions of this in Common Lisp, C, C++ and assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variations of this technique have been put into production, in multiple projects) &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency is very simple and its implementation should be &quot;obvious&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You might wish to skip over the details, once you get the hang of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Forget what you already know about multitasking and read on …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The point of this essay is to show only the basics of this technique.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use hard-wired code for illustration.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If a more fully-developed version of the code is desired, see my essays about HTML Components - ag-js-1, ag-js-2, and ag-js-3&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The most simple example of concurrency can be summed up in &lt;span class=&quot;s1&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2020-12-17-19-14-53-Images/concurrency-basic.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Basic Concurrency&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Overview of Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency, at its most basic, is very simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;part&lt;/i&gt; is a black box with input &lt;i&gt;pins&lt;/i&gt; and output &lt;i&gt;pins&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;part&lt;/i&gt; can send &lt;i&gt;events&lt;/i&gt; to another &lt;i&gt;part. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;The &lt;i&gt;event&lt;/i&gt; is pushed out of the first &lt;i&gt;part's&lt;/i&gt; output &lt;i&gt;pin&lt;/i&gt; and arrives at the other &lt;i&gt;part's&lt;/i&gt; input &lt;i&gt;pin.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events&lt;/i&gt; can only travel on &lt;i&gt;wires&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;part&lt;/i&gt; contains a number of &lt;i&gt;actions&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Every time an &lt;i&gt;event&lt;/i&gt; arrives at the input &lt;i&gt;pin&lt;/i&gt; of a &lt;i&gt;part&lt;/i&gt; some &lt;i&gt;action &lt;/i&gt;is triggered.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are rules for how &lt;i&gt;actions&lt;/i&gt; are triggered, but we'll skip that for now.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are two kinds of &lt;i&gt;parts:&lt;/i&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;a &lt;i&gt;leaf part&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;a &lt;i&gt;schematic&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;A &lt;i&gt;schematic &lt;/i&gt;contains other &lt;i&gt;parts &lt;/i&gt;and a set of &lt;i&gt;wires&lt;/i&gt; (that connect the &lt;i&gt;parts&lt;/i&gt; together).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;In other words, a &lt;i&gt;schematic&lt;/i&gt; &lt;span class=&quot;s2&quot;&gt;can&lt;/span&gt; be broken down further into more &lt;i&gt;parts&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;A &lt;i&gt;leaf part&lt;/i&gt; &lt;span class=&quot;s2&quot;&gt;cannot&lt;/span&gt; be broken down any further.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;i&gt;leaf part&lt;/i&gt; contains actions which might (or might not) produce outputs on the output&lt;i&gt; pins&lt;/i&gt; of the &lt;i&gt;leaf part.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;A &lt;i&gt;schematic &lt;/i&gt;also contains &lt;i&gt;actions&lt;/i&gt;, but those &lt;i&gt;actions&lt;/i&gt; are composed of the &lt;i&gt;actions&lt;/i&gt; of the &lt;i&gt;parts&lt;/i&gt; contained in the &lt;i&gt;schematic&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We can keep breaking &lt;i&gt;parts&lt;/i&gt; down until we hit bottom - i.e. a &lt;i&gt;leaf&lt;/i&gt; part that does something.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the outside, looking in, we see &lt;i&gt;parts&lt;/i&gt; as black boxes - we don't know (or care) whether a &lt;i&gt;part&lt;/i&gt; is a &lt;i&gt;leaf&lt;/i&gt; or if it is a &lt;i&gt;schematic.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We can implement a simulation of concurrent&lt;i&gt; parts&lt;/i&gt; in any programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For this, we need some routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need a dispatcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need a way to transfer data between routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That's about it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Present-day multitasking is inflicted with accidental complexity.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multitasking seems to be difficult.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will describe something much simpler, but just as useful.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;i&gt;Actions&lt;/i&gt; are functions with no user-defined parameters, no return values, no exceptions and no way to call other routines.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;A dispatcher is the only routine that can call other routines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Called routines &lt;i&gt;always&lt;/i&gt; return to the dispatcher.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;We will transfer data using queues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - JavaScript Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;In the following example, I will show how to build a simple system with two components and one dispatcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have used this same technique to build much larger systems (100s and 1,000s of components).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This example probably looks too simple and not complicated enough.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is an &quot;overnight success&quot; - it took me only 30 years to arrive at this conclusion.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The technique has been used to build distributed systems and has been put into production (several times).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[I don't recommend that components, queues and dispatchers be implemented as in this example.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I am trying to be excruciatingly transparent.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The example appears in the rest of this essay and can be found at&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt; … &amp;gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wish to keep this essay very simple, so I will describe an example which contains only two components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One component Sends a string to the other component - the usual &quot;Hello World&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will name the components &quot;sender()&quot; and &quot;receiver()&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In JavaScript, a &lt;i&gt;part&lt;/i&gt; is a function that receives messages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;The function can use a switch statement (or an if-then-else) to examine the message's pin field, and decide which action to invoke.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this simple example, we won't bother with pins, we'll just assume that every part has one input pin and one output pin.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We'll hard-code the wiring table in the JavaScript function that I call Send() (see section Send - JavaScript).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The component producer(), is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;function producer (message) {&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;send (&quot;sender&quot;, &quot;Hello World&quot;);&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and the component consumer() is&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;function consumer (message) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (message);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Points to note:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;producer() does not call consumer() directly&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action&lt;/i&gt; in the producer &lt;i&gt;part&lt;/i&gt; consists of one line of JavaScript code (send (…))&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action &lt;/i&gt;in the consumer &lt;i&gt;part&lt;/i&gt; consists of one line of JavaScript code (console.log (…))&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action&lt;/i&gt; code in producer does not bother to check the message - it just fires its result &quot;Hello World&quot; out of its output &lt;i&gt;pin&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;the &lt;i&gt;action &lt;/i&gt;code of consumer doesn't bother to look at the incoming message, it just logs it (console.log (message))&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;neither &lt;i&gt;part&lt;/i&gt;, producer nor consumer&lt;i&gt;, &lt;/i&gt;gets to define the parameter list, there is &lt;b&gt;always&lt;/b&gt; one &lt;i&gt;message&lt;/i&gt; parameter passed in to the action code.&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queues&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Each component has a pair of private queues that can be accessed only by the send() an receive() routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[In Javascript, queues are implemented as arrays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An empty queue is [].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A queue can hold mixed elements of any type.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;var sender_input_queue = [];&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;var receiver_input_queue = [];&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatcher - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The dispatcher&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; invokes, arbitrarily, any routine that is &lt;i&gt;ready to run&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A routine is &lt;i&gt;ready to run&lt;/i&gt; if its input queue is non-empty.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;function dispatcher () {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;while (true) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (sender_input_queue.length &amp;gt; 0) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;var message = sender_input_queue.pop ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;sender (message);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else if (receiver_input_queue.length &amp;gt; 0) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;var message = receiver_input_queue.pop ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;receiver (message);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; }&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Send - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The send () function is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;function send (from, data) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (from == &quot;sender&quot;) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;receiver_input_queue.push (data);&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else if (from == &quot;receiver&quot;) {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;sender_input_queue.push (data); &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fail ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[in this simple example, sender's output is always piped to receiver's input]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Startup&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;sender ();&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Steady State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;dispatcher ();&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JS Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;node basic.js&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;see code in https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/basic.js&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Index.html&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;see &lt;a href=&quot;https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/index.html&quot;&gt;https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;load index.html in a browser, hit the &quot;run&quot; button&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Benefits of Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;I claim that concurrency addresses many issues, including:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;architectural flexibility&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;scalability&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;isolation&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;namespaces&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;type checking&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;thread safety, fairness, and all that …&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;synchronization&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;asynchronous I/O&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;box-and-arrow diagrams (that work)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;machine control instead of calculation&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;readability&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;expressiveness - DI (Design Intent)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;multiple use (augmented reuse)&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;removal of exception syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;removal of parameter syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;remove of return value syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;layers, scoping&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;easier scheduling&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;better testabilty&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;compartmentalization of development tasks&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;but, I will not conflate this simple example with such issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will address these issues in other essays.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;see &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;I claim that the accidental complexity comes from premature optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Optimization was necessitated by the ground truth in 1950 - processors were very expensive, memory was expensive and very limited.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; In production, we would write the example code differently.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many optimizations present themselves, for example, we don't need to burn a hole in the processor using a while(true) loop.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">concurrency bare bones</summary></entry><entry><title type="html">Concurrency bare bones</title><link href="https://computingsimplicity.neocities.org/2020/12/16/concurrency-bare-bones.html" rel="alternate" type="text/html" title="Concurrency bare bones" /><published>2020-12-16T00:00:00-05:00</published><updated>2020-12-16T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/16/concurrency%20bare%20bones</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/16/concurrency-bare-bones.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;concurrency bare bones&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-16T23:24:31Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-16T23:24:31Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p11 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p12 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I describe the very bare bones for implementing concurrency in any language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I know that this can be implemented in JavaScript - I've done it and will blog about it in further essays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Incidentally, I've also built preliminary versions of this in Common Lisp, C, C++ and assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variations of this technique have been put into production, in multiple projects) &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency is very simple and its implementation should be &quot;obvious&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You might wish to skip over the details, once you get the hang of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Forget what you already know about multitasking and read on …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The point of this essay is to show only the basics of this technique.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use hard-wired code for illustration.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If a more fully-developed version of the code is desired, see my essays about HTML Components - ag-js-1, ag-js-2, and ag-js-3&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Overview of Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Concurrency, at its most basic, is very simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need some routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need a dispatcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need a way to transfer data between routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That's about it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Present-day multitasking is inflicted with accidental complexity.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multitasking seems to be difficult.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will describe something much simpler, but just as useful.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Routines are functions with no parameters, no return values, no exceptions and no way to call other routines.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A dispatcher is the only routine that can call other routines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Called routines &lt;i&gt;always&lt;/i&gt; return to the dispatcher.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We will transfer data using queues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The above 3 items can be easily created in any programming language, even assembler, by any competent software developer.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The most simple example of concurrency can be summed up in &lt;span class=&quot;s1&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;img src=&quot;/assets/2020-12-16-23-24-31-Images/concurrency-basic.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Fig. 1 Basic Concurrency&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;In the following example, I will show how to build a simple system with two components and one dispatcher.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have used this same technique to build much larger systems (100s and 1,000s of components).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This example probably looks too simple and not complicated enough.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is an &quot;overnight success&quot; - it took me only 30 years to arrive at this conclusion.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The technique has been used to build distributed systems and has been put into production (several times).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[I don't recommend that components, queues and dispatchers be implemented as in this example.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I am trying to be excruciatingly transparent.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The example appears in the rest of this essay and can be found at&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt; … &amp;gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I wish to keep this essay very simple, so I will describe an example which contains only two components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One component Sends a string to the other component - the usual &quot;Hello World&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will name the components &quot;sender()&quot; and &quot;receiver()&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The component sender(), is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;function sender (message) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;send (&quot;sender&quot;, &quot;Hello World&quot;);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;and the component receiver() is&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;function receiver (message) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (message);&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Queues&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Each component has a pair of private queues that can be accessed only by the send() an receive() routines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[In Javascript, queues are implemented as arrays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An empty queue is [].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A queue can hold mixed elements of any type.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;var sender_input_queue = [];&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;var receiver_input_queue = [];&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatcher - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The dispatcher&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; invokes, arbitrarily, any routine that is &lt;i&gt;ready to run&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A routine is &lt;i&gt;ready to run&lt;/i&gt; if its input queue is non-empty.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;function dispatcher () {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;while (true) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (sender_input_queue.length &amp;gt; 0) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;var message = sender_input_queue.pop ();&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;sender (message);&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else if (receiver_input_queue.length &amp;gt; 0) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;var message = receiver_input_queue.pop ();&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;receiver (message);&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; }&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Send - JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The send () function is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;function send (from, data) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (from == &quot;sender&quot;) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;receiver_input_queue.push (data);&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else if (from == &quot;receiver&quot;) {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;sender_input_queue.push (data); &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fail ();&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;[in this simple example, sender's output is always piped to receiver's input]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Startup&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p10&quot;&gt;sender ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Steady State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p10&quot;&gt;dispatcher ();&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JS Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;node basic.js&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;see code in https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/basic.js&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Index.html&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;see &lt;a href=&quot;https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/index.html&quot;&gt;https://github.com/bmfbp/arrowgrams/blob/master/basic-concurrency/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;load index.html in a browser, hit the &quot;run&quot; button&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Benefits of Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;I claim that concurrency addresses many issues, including:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;architectural flexibility&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;scalability&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;isolation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;namespaces&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;type checking&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thread safety, fairness, and all that …&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;synchronization&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;asynchronous I/O&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;box-and-arrow diagrams (that work)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;machine control instead of calculation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;readability&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;expressiveness - DI (Design Intent)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;multiple use (augmented reuse)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;removal of exception syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;removal of parameter syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;remove of return value syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;layers, scoping&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;easier scheduling&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;better testabilty&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;compartmentalization of development tasks&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;but, I will not conflate this simple example with such issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will address these issues in other essays.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;see &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I claim that the accidental complexity comes from premature optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Optimization was necessitated by the ground truth in 1950 - processors were very expensive, memory was expensive and very limited.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; In production, we would write the example code differently.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many optimizations present themselves, for example, we don't need to burn a hole in the processor using a while(true) loop.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">concurrency bare bones</summary></entry><entry><title type="html">Blockchain overview</title><link href="https://computingsimplicity.neocities.org/2020/12/10/Blockchain-Overview.html" rel="alternate" type="text/html" title="Blockchain overview" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/10/Blockchain%20Overview</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/10/Blockchain-Overview.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;FBP and Blockchain&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T10:27:01Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T10:27:01Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9; min-height: 18.0px}
    span.s1 {text-decoration: underline}
    span.s2 {-webkit-text-stroke: 0px #000000}
    span.s3 {font: 12.0px Times; text-decoration: underline ; font-kerning: none; color: #0000e9}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain Overview&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;“Blockchain” is the generic term for BitCoin, Etherium, et. al.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A blockchain is a chain (using unique hashes as links) of blocks that contain one or more financial transactions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The blockchain is simply a public “ledger” that holds transactions and makes them immutable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Blockchain is not restricted to being a ledger financial transactions, but BitCoin specifically devotes itself to financial transactions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The BitCoin network is essentially a peer-to-peer (P2P) network.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;“Miners” are “big” nodes on the BitCoin network.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;“Miner” nodes are willing to do the heavy lifting and compete with each other to export a block of transactions. In BitCoin, there is a “prize” for the first miner to solve the puzzle and export its block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin is an “unpermissioned” network, meaning that any node can join the network without permission.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BitCoin needs many miners, spread across the globe, to do the real work of verifying and publishing transactions and verifying blocks or transactions published by other miners.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses PoW (proof of work) to solve a puzzle. The first miner to solve the puzzle gets to publish its block. A winning block contains only the transactions that the winner has chosen. Other competitors might choose a different set of transactions from the “mempool”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BitCoin dynamically adjusts so that solving a puzzle takes about 10 minutes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a transaction sits at the bottom of the pool for &amp;lt;&lt;i&gt;some number of&lt;/i&gt;&amp;gt; days, it might be dropped and never appear in a winning block. I.E. some transactions may &lt;span class=&quot;s1&quot;&gt;never&lt;/span&gt; be processed (“dust”).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Losers, miners, in the competition still perform computations - verifying the contents of each transaction in a published block and complaining, if something looks fishy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PoW wastes computing resources (and electricity). Miners tend to set up their operations, geographically, in places that provide cheap electricity and cool climates (eschewing the need for air conditioning), such as northern Quebec in Canada (lots of cheap hydro, cool climate).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin is written in open-sourced C++.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The original intent of BitCoin was to use as many distributed nodes as possible, distributed over the whole world. The number of nodes can change over time (e.g. new nodes joining and some existing nodes crashing). This is called “unpermissioned” — a node does not need permission to join the network. In general, we don’t know if the nodes can be trusted or if they might be fakers. The main problem in this case is BFT (Byzantine Fault Tolerance). The mathematics makes assumptions about how many nodes are fakers, and if a certain threshold of trusted nodes is attained, then the mathematics makes guarantees about the trustability of the whole network.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IBM, Linux and banks flog a “permissioned” kind of blockchain (HyperLedger). In this version, the nodes are all known and their count is determinate, i.e. no one can join the HyperLedger without permission. This is very similar to what banks (and VISA, et al) already do. It is not clear to me that this is true to the original intent of blockchain. It seems to be a marketing trick to capitalize on the buzz-word “blockchain”.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is not clear where BitCoin originated. Supposedly, “Satoshi Nakomoto” invented and open-sourced BitCoin. Who Satoshi is, is a secret. This secrecy could mean many things — that the originator is an individual or a group concerned with freedom of money and transactions, or a government group intent on removing paper money from circulation, or … &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Race conditions, caused by timing and the non-locality of the mining nodes, is handled by the “longest chain is accepted” strategy, which settles out after &amp;lt;&lt;i&gt;some number of&lt;/i&gt;&amp;gt; blocks have been verified (about 6-ish).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Along with BFT, so-called “Sybil attacks” are culprits that blockchains guard against. “Sybil attacks” are nodes that try to cheat the system by cloning several nodes on a single machine (multiple “personalities” on a single machine - similar to the film Sybil), and try to collude to gain control of transactions (i.e. making them pay out to the colluders). The front-line, easiest, defence against Sybil attacks is to make the PoW puzzles so onerous that only a single cpu with full power can solve the puzzle in about 10 minutes. If a single node is split into a bunch of time-shared nodes, the split, faked, nodes can never perform the full work (puzzle breaking) in less time than a full node, and a Sybil (fake) node can almost never win publishing rights for a block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By unconscious consensus, papers that discuss blockchain algorithms tend to use the names “Alice” and “Bob” as blockchain transaction participants.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses a puzzle that consists of hashing something (e.g. the proposed block of transactions plus a kludge factor — the “nonce”) until the hashcode has a requisite number of zero’s at its front.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of puzzle can only be solved by brute force, and it takes a random amount of time to solve.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the other hand, once solved (and published) the hashcode can be easily (and cheaply) verified, hence, all other nodes can verify the puzzle solution, to verify that the winning node did, indeed win.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The winning miner node gets to create a certain amount of BitCoins and to insert them into the published block (payable to the winning node).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That is how new BitCoins come into existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The amount of new BitCoins granted to the winning miner, drops over time, and at some point (a few years away, from 2019) the grant amount will drop to zero, hence, the BitCoin supply has an upper limit (which might affect future quantitative easing using BitCoin).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each transaction gives a fee to the winner, who also collects the BitCoin grant (prize).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When the grant drops to zero, winning miners will only receive transaction fees.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Users (human) of the BitCoin network own a “wallet” that holds one-half of a public/private key (they hold the private, or “secret” key).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The wallet generates public keys which are used in transactions as destination addresses to which BitCoins (or fractions of BitCoins) can be sent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All transactions are visible forever in the blockchain.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each block contains a hashcode to the previous block.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If any transaction in the chain is tinkered with, the whole chain will not verify.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using multiple public keys can make the chain harder to read, but ultimately, with enough horse-power, the chain can be unravelled, traced and viewed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a BitCoin-only world, a black market or “cash deals” cannot exist.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin also defines light weight nodes. Light weight nodes (e.g. smart phones) can participate in the network (generating transactions, holding wallets), but don’t do the heavy lifting (mining).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses Merkle trees to reduce memory usage - not every node needs to hold the complete chain at all times.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Merkle trees are a subset of ADS (Authenticated Data Structures).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Validation nodes, still, must visit and verify &lt;span class=&quot;s1&quot;&gt;each&lt;/span&gt; published block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The “value” of BitCoins is purely speculative and changes over time according to market whims.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Improvements to BitCoin are the subject of heated research. Improvements include: improving the transaction rate (BitCoin publishes a block of verified transactions every 10 minutes (at best 2700 transactions &lt;a href=&quot;https://cryptoslate.com/bitcoin-transactions-per-block-at-all-time-highs/&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://cryptoslate.com/bitcoin-transactions-per-block-at-all-time-highs/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s3&quot;&gt;)&lt;/span&gt;, whereas permissioned networks, e.g. VISA, process 1,000’s of transactions per second), scaling improvements such as CoSi and sharding (BitCoin slows down as the number of nodes/miners increases), better (cheaper) anti-cheating methods (e.g. PoS - proof of stake ; Randhound protocols), alternative data structures (e.g. Etherium), “smart contracts” (e.g. Etherium), etc.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There are 100’s, if not 1,000’s, of digital currencies in existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Which currency will win market share?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, BitCoin has the most market share, Etherium is a far second. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We already know that first-to-market holds a distinct advantage - e.g. Intel won the cpu battle in the face of, later, “better” cpu’s (Motorola, National Semiconductor), VHS won the battle, over Beta, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Permissioned networks are, currently, massively faster than unpermissioned networks.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Experiments / product offerings are being made, using non-monetary transactions, e.g. storing digital handles to physical objects (e.g. deeds, etc.) in the immutable ledger.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Surprises&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin does not provide anonymity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin does NOT guarantee that every transaction will be processed. Transactions are dropped from the “mempool” if they sit at the bottom for &amp;lt;&lt;i&gt;some&lt;/i&gt;&amp;gt; days.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transactions cost money. Miners can grab and commit transactions based on fees plus mining rewards.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pederson commitments can provide anonymity, but are very expensive (time-wise) to compute and anonymity must start at the beginning of time (at the genesis, beginning, of the blockchain).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All BitCoin transactions are fully consumed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want to receive “change” back from a transaction, then you must split the transaction into two parts - one that goes to the vendor and one that goes to yourself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A miner that wins publishing rights for a block, gets to keep any “leftovers” (i.e. amounts that remain after the transaction has been processed. All transactions are fully consumed, some transactions may not sum to zero, the unclaimed difference goes to the winning miner).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Declaration of a winning miner is done in a as-random a method as possible (determined by the puzzle).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The winning miner collects all the transaction fees from the winning block, all leftovers from the winning block and the mining prize (as it stands at that moment in time).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A losing miner gets nothing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must amortize the random, non-frequent, wins against frequent losses.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">FBP and Blockchain</summary></entry><entry><title type="html">Software development roles</title><link href="https://computingsimplicity.neocities.org/2020/12/10/Software-Development-Roles.html" rel="alternate" type="text/html" title="Software development roles" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/10/Software%20Development%20Roles</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/10/Software-Development-Roles.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Development Roles (2)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T17:15:35Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T17:15:35Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; color: #80ff08; min-height: 14.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    table.t1 {border-collapse: collapse}
    td.td1 {background-color: #ffff66; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {background-color: #80ff08; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td3 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td4 {height: 12.9px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td5 {height: 14.6px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td6 {background-color: #ccff66; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td7 {height: 8.8px; background-color: #80ff08; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #999999 #999999 #999999 #999999; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td8 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I break down Software Development down into, roughly, three main roles:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Software Architecture&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Software Engineering&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Software Implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Each role breaks down into sub-roles (see section Roles).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I fashion this breakdown by observing the breakdown in traditional engineering - e.g. structural architecture/engineering/construction.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Coding&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Coding is done only by Software Implementors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Software Architects produce the initial design, Software Engineers look after details and Software Implementors write the actual code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Testing requires someone to think deeply about what it means to test the product, and creating procedures for testing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thinking about testing means, at least:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about how to test bought-in code, e.g. libraries, code from GitHub&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about white box testing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about black box testing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about system testing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about Q/A - quality assurance&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about certification (where applicable)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;thinking about security.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Traditionally, all of the above work has been done by implementors, often called engineers (a mis-nomer).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Conflating work is a sure way to lengthen deadlines.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Some people are good at thinking about libraries (and knowing what exists and what to avoid), some people are good at black box testing, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Forcing one person, or one group, to deal with all of the issues produces uneven results and scheduling problems.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;&lt;i&gt;Role&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;&lt;i&gt;Sub-role&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;&lt;i&gt;technologies&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;comments&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;i&gt;Software Architecting&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;multiple paradigms&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;generalist&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;must understand multiple paradigms&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;c.e.g. (counter e.g.) everything is Haskell – no&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;c.e.g. everything is an Object – no&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;c.e.g. everything is &amp;lt;xxx&amp;gt; - no&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;whiteboards&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;diagrams&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;code snippets&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;pseudo code&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;SCLs&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;like DSLs, except more focussed&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;shows ability to view problem from many angles&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Drakon&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;http://drakon-editor.sourceforge.net/&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;StateCharts&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;UML&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;i&gt;indirection&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;i&gt;UX Architect&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;UX design is a divide-and-conquer activity&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;design a rudimentary piece of the UX&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;test it (for UX-ness, not for robustness) before proceeding&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;(earliest drafts tested by Architect and Engineers ; later drafts tested by Customer (Stakeholder)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;once designed, Engineering makes it practical and robust&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Humane Interface&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Jef Raskin&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;The Design of Everyday Things&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Donald Norman&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Realization Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;define first-cut of realized architecture&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;iterate design with Architect until realizable and all I’s dotted and T’s crossed&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Correctness Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;proofs, etc.&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;UX Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;define parameters &amp;amp; timing for responsiveness&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;usability testing&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;feedback to UX architect&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Error Handler Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;analyze testability of product ( &amp;amp; suggest changes)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;create procedures / scripts for Q/A&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Throw / catch&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Signals&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Events&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;A.O.C. (Aspect Oriented Programming)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Maintenance Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Refactoring&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;D.R.Y.&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Optimization Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Profiling&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;remove Architectural indirection if appropriate&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Security Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Test Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Incoming Test&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;test suitability of all bought-in technologies (e.g. code from GitHub)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Black Box Testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;White Box Testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Q/A&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;devise ways to break product&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Scripting&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Back-to-back testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;large systems can feed inputs to same kinds of systems&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Sikuli&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Release Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;CD&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Dashboards&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;CI&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Implementation&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Q/A&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Maintenance&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td colspan=&quot;2&quot; valign=&quot;middle&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Hardware production test used HP Trace Analyzers that would generate a GUID for every test (including sequencing over time) for a “golden unit” (known to be good), when GUID didn’t match in production unit, then further testing was used to determine&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;where the fault was (kind of a Canary CI, replacing Unit test with faster/cheaper tests which signalled Go/no-go only)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Teaching Software to Children&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td colspan=&quot;2&quot; valign=&quot;middle&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;different set of concerns than providing tools to Professionals&lt;/p&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td colspan=&quot;2&quot; valign=&quot;middle&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Rhetorical Question: would you drive across a bridge designed by a gifted child?&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Software for Business &amp;amp; non-programmers&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td colspan=&quot;2&quot; valign=&quot;middle&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Rhetorical Question: would you drive across a bridge designed by a Professional who isn’t an Engineer?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.g. a Dentist?&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Word&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Excel&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Visio&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Scapple&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Scrivener&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Software for Domain Experts (not&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;people with expertise who see a need and want to learn “just enough” programming to fill that need&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;e.g. accounting software&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;HyperCard&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;VisiCalc&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;absolute addressing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;grid layout (VisiCalc)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;fixed layout (HyperCard)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;few options&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;“obvious”&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Software Designs Based on Existing Paradigms&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td colspan=&quot;2&quot; valign=&quot;middle&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;transitional (only)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td colspan=&quot;2&quot; valign=&quot;middle&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;will be supplanted by designs&lt;br&gt;
based on computing-driven&lt;br&gt;
paradigms&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;desktop&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;filing cabinet&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;typewriter&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Netflix&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old, but similar paradigm: TV&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;blogs&lt;/p&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: magazine articles&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;tablet, phone&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: typewriter keyboard&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;cell phone&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: home phone&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;Amazon&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: retail&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;internet&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: libraries&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: do we need an O/S?&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;IoT&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: expensive all-in-one computers&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: desk calculator&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;loops&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: piano&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: recording soundboard (e.g. mimicked by GarageBand, ProTools)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;video+audio, YouTube&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: audio&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: whiteboard&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;WFH&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: office&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;condo&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: house&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;bicycle, fat bike, ebike, public transit&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;old: automobile&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Development Roles (2)</summary></entry></feed>