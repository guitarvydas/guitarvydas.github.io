<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-04-02T10:07:51-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Meta Programming</title><link href="https://computingsimplicity.neocities.org/2021/04/02/meta-programming.html" rel="alternate" type="text/html" title="Meta Programming" /><published>2021-04-02T00:00:00-04:00</published><updated>2021-04-02T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/02/meta-programming</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/02/meta-programming.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;meta-programming&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;Meta-programming is very much like projectional editing.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://guitarvydas.github.io/2021/04/02/Projectional-Editing.html&quot;&gt;https://guitarvydas.github.io/2021/04/02/Projectional-Editing.html&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">meta-programming</summary></entry><entry><title type="html">Crass simplifications</title><link href="https://computingsimplicity.neocities.org/2021/04/02/Crass-Simplifications.html" rel="alternate" type="text/html" title="Crass simplifications" /><published>2021-04-02T00:00:00-04:00</published><updated>2021-04-02T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/02/Crass%20Simplifications</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/02/Crass-Simplifications.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;plfa&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-02T07:48:31Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-02T07:48:31Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 9.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I describe crass simplifications, which are not fully accurate, that I use to think about haughtier concepts, such as lambda calculus, free and bound variables.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lambda Calculus&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lambda Calculus means &quot;everything is an expression&quot; (or, &quot;everything is a function&quot;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Common Lisp and Scheme, every function is a function.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every &lt;i&gt;function&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt; returns a value.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;Counter-example:&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In JavaScript, not everything is a function, for example&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function fn (x, y) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;42;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is different from&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function fn (x, y) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;return 42;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(One could say that the former is a procedure, not a function).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To make JavaScript work like Lisp, one would need to ensure that &lt;i&gt;every&lt;/i&gt; function returns a 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt; class value.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This can be done, but is boring to do, is error-prone, and results in unreadable (to humans) code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Free Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;free variable&lt;/i&gt; can be thought of as being a &lt;i&gt;global variable&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bound Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;bound variable&lt;/i&gt; can be thought of as being&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;a parameter&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;a local variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In fact, local variables are just syntactic sugar for nested lambdas, e.g.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function (x) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;y = 41;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;return x + y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;is really&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function (x) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;function (y) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return x + y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;} (41);&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Free and Bound Variables&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;function (x) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;return x + y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are two variables in the above function, &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Variable &lt;i&gt;x &lt;/i&gt;is &lt;i&gt;bound&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Variable &lt;i&gt;y &lt;/i&gt;is &lt;i&gt;free&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variable &lt;i&gt;y &lt;/i&gt;is &lt;i&gt;unbound&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the example below, &lt;i&gt;both&lt;/i&gt; variables are bound, but &lt;i&gt;y&lt;/i&gt; is uninitialized (&lt;i&gt;undefined&lt;/i&gt; in JavaScript-speak).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;function (x) {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;var y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;return x + y;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">plfa</summary></entry><entry><title type="html">Recursive design knowns and unknowns</title><link href="https://computingsimplicity.neocities.org/2021/04/02/Recursive-Design-Knowns-and-Unknowns.html" rel="alternate" type="text/html" title="Recursive design knowns and unknowns" /><published>2021-04-02T00:00:00-04:00</published><updated>2021-04-02T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/02/Recursive%20Design%20-%20Knowns%20and%20Unknowns</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/02/Recursive-Design-Knowns-and-Unknowns.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Recursive Design - Knowns and Unknowns&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-02T10:07:46Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-02T10:07:46Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    table.t1 {border-collapse: collapse}
    td.td1 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Knowns and Unknowns&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I discuss &lt;i&gt;recursive design&lt;/i&gt; — an extreme form of &lt;i&gt;divide and conquer &lt;/i&gt;in terms of &lt;i&gt;knowns &lt;/i&gt;and &lt;i&gt;unknowns&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, recursive design — divide and conquer — continues to iterate and never stops. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At some point, the design becomes so stable that it can be &lt;i&gt;shipped&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This is much like songwriting.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One never stops tweaking a song, although committing it to a recording tends to slow down the tweaking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Performing songwriters often perform a song differently than it was recorded.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dissecting Knowns and Unknowns&lt;/b&gt;&lt;/h2&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unkown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unknown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;brainstorm&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unknown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;unknown&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;attack early&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;known&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;implement&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unknown Unknown&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You cannot know what you don't know (unknown unknown).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Iterate and implement.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As design proceeds, you might encounter new sub-problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Iterate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Keep iterating until all unknowns are broken down into knowns, or, the solution is complete.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unknown Known&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Break the problem down into the other 3 categories&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Known Unknown&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;High risk.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fail early.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;Mitigate the risk by trying to understand the risk.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;If the risk becomes a problem that cannot be solved, you want know as early as possible (e.g. abort as soon as possible).
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;Aborting might become a re-casting of the problem, in which case re-start iterations.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;If the risk can be handled, iterate and break it down further.&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;Use strong, static typing to flesh out a design (without writing implementation code) to convert unknowns into knowns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Known Known&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If you know how to solve a sub-problem:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Defer&lt;/b&gt;&lt;/span&gt;, don't implement if any unknowns still exist&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;attack unknowns first&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;see brainstorming, later
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li7&quot;&gt;sometimes it is beneficial to implement knowns and look for new unknowns&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Implement&lt;/b&gt;&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li7&quot;&gt;Look for new unknowns that surface (mixed in with the knowns)
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li7&quot;&gt;Scope creep — unknowns that surface during implementation that are not formally handled constitute &lt;i&gt;scope creep&lt;/i&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li7&quot;&gt;handling a new unknown should result in new iterations of the recursive design process&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;Implementation can be a form of brainstorming&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;Strong, static typing is a form of implementation (see later)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Brain Storming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Brainstorming is a technique of looking for new unknowns — and then iterating them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Brainstorming is most often associated with &lt;i&gt;the arts&lt;/i&gt;, e.g. songwriting.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Much of current programming is &lt;i&gt;art&lt;/i&gt; — creativity that has not (can not) been formalized.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;b&gt;The more you know, the more creative you can be&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;/b&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;b&gt;.&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Implementing is a way to know more about a specific domain.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Static typing is a way to know more about a specific domain. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Thinking and Coding&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Coding, currently, involves two activities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;thinking&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;writing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Strong, Static Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Static typing is, actually, a form of implementation — coding up the types, without coding up the implementation&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Haskell, Agda, etc. break implementation down into two sub-components&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;signatures&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Some people have a &lt;i&gt;eureka&lt;/i&gt; moment when using statically-typed languages — they code up the type system, and, when it passes automatic checking, they write code underneath the type system and &quot;it just works&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Coding, currently, involves two activities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li7&quot;&gt;thinking&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;writing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Writing and checking types is the &quot;thinking&quot; part. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Using type-checking to brainstorm the thinking part is just &quot;divide and conquer&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Coding is &lt;b&gt;deferred&lt;/b&gt; until the type system has been automatically checked.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Essence of Recursive Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;The &lt;i&gt;essence &lt;/i&gt;of recursive design is to break problems down into smaller sub-problems. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Each sub-problem is broken down — over and over — until all sub-problems can be easily understood and implemented.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The &lt;i&gt;hard&lt;/i&gt; part of a problem is the &lt;i&gt;thinking&lt;/i&gt; part.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;easy&lt;/i&gt; part of a problem is writing code after the &lt;i&gt;thinking&lt;/i&gt; has been completed.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;If a problem seems &lt;i&gt;hard&lt;/i&gt;, the problem needs to be sub-divided.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;If a problem seems &lt;i&gt;hard&lt;/i&gt;, one might be trying to use the wrong paradigm to solve it in.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;For example, we currently think that multi-tasking is &lt;i&gt;hard&lt;/i&gt;, but most people (not programmers) already know how to deal with multitasking, e.g. music scores, cooking recipes, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Are we using the wrong paradigm to think about multi-tasking?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;functional &lt;/i&gt;approach is useful for one-in-one-out problems&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is multitasking a one-in-one-out style of problem?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I find that StateCharts&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; and asynchronous ideas, e.g. SonicPi,&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; FBP,&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; Arrowgrams,&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; etc., make it easier to think about multitasking.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Links&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;FBP&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;https://jpaulm.github.io/fbp/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Sonic Pi&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://sonic-pi.net/&quot;&gt;https://sonic-pi.net/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Arrowgrams / Components&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/06/Components-(again).html&quot;&gt;https://guitarvydas.github.io/2021/03/06/Components-(again).html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/HTML-Components-Arrowgrams.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/HTML-Components-Arrowgrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html&quot;&gt;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/HTML-Components-Arrowgrams.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/HTML-Components-Arrowgrams.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/HTML-Components-Handling-Callback-Logic-Explicitly.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/HTML-Components-Handling-Callback-Logic-Explicitly.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Box-and-Arrow-DSL-For-Concurrency.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Pat Pattison&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Divide and Conquer, again.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Implementation can be broken down into 2 things - (1) type system, (2) code.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I call this class of problem a &quot;calculator&quot;.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2021/02/25/statecharts-(again).html, https://guitarvydas.github.io/2020/12/09/StateCharts.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See appendix&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See appendix&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;See appendix&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Recursive Design - Knowns and Unknowns</summary></entry><entry><title type="html">Projectional editing</title><link href="https://computingsimplicity.neocities.org/2021/04/02/Projectional-Editing.html" rel="alternate" type="text/html" title="Projectional editing" /><published>2021-04-02T00:00:00-04:00</published><updated>2021-04-02T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/02/Projectional%20Editing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/02/Projectional-Editing.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Projectional Editing&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;projectionaleditingintwosteps&quot;&gt;Projectional Editing in Two Steps&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Reduce all input to normal form.&lt;/li&gt;
&lt;li&gt;Write rules against normal form. Rules &amp;#8212;&amp;gt; views.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1.normalform&quot;&gt;1. Normal Form&lt;/h1&gt;

&lt;p&gt;I favour a normal form consisting of &lt;em&gt;triples&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;2.rules&quot;&gt;2. Rules&lt;/h1&gt;

&lt;p&gt;You want to perform exhaustive search over &lt;em&gt;all&lt;/em&gt; of the triples.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;rule&lt;/em&gt; is just a group of related searches.&lt;/p&gt;

&lt;p&gt;Such searching can be done manually, using loops within loops.&lt;/p&gt;

&lt;p&gt;Or, one could use a tool &amp;#8212; a search engine &amp;#8212; to do the searching. One such search engine is PROLOG. Another engine might be miniKanren.&lt;/p&gt;

&lt;p&gt;PROLOG uses &lt;em&gt;backtracking&lt;/em&gt; to perform exhaustive search.&lt;/p&gt;

&lt;p&gt;PROLOG uses something called &lt;em&gt;logic&lt;/em&gt; &lt;em&gt;variables&lt;/em&gt; to hold the results of successful matches.&lt;/p&gt;

&lt;p&gt;There might be more than one match that succeeds in satisfying all of the search constraints. In such cases, PROLOG re-binds the values of the &lt;em&gt;logic variables&lt;/em&gt; and presents you, the programmer, with a set of consistent matches (as one set of bound &lt;em&gt;logic variables&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;MiniKanren, on the other hand, does not use the above method and keeps a running list of &lt;em&gt;all&lt;/em&gt; possible matches, then presents you, the programmer, with a list of &lt;em&gt;all&lt;/em&gt; matches that consistently solve the set of given match constraints.&lt;/p&gt;

&lt;h2 id=&quot;unification&quot;&gt;Unification&lt;/h2&gt;

&lt;p&gt;PROLOG uses an algorithm, called &lt;em&gt;unification&lt;/em&gt;, to re-bind &lt;em&gt;logic variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One set of bindings describes &lt;em&gt;one&lt;/em&gt; solution to all of the match constraints.&lt;/p&gt;

&lt;p&gt;In essence, PROLOG &lt;em&gt;clears&lt;/em&gt; its &lt;em&gt;logic variables&lt;/em&gt; before calculating another solution. In essence, PROLOG memorizes previous solutions and does not present already-seen solutions again.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Note, that this does not mean that duplicate solutions cannot be displayed &amp;#8212; PROLOG remembers the route that it used to find a solution, if it finds a different route which results in the same set of bindings, PROLOG will be happy to show you that solution as a possibility (much to the chagrin of PROLOG newbies).&lt;/em&gt;]&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;p&gt;I would suggest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PEG for parsing and reducing&lt;/li&gt;
&lt;li&gt;Factbases of triples as the normal form&lt;/li&gt;
&lt;li&gt;PROLOG for creating rules, or PEG&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;peg&quot;&gt;PEG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/PEG.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/28/DSL-in-a-Day.html&quot;&gt;https://guitarvydas.github.io/2021/02/28/DSL-in-a-Day.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;factbases&quot;&gt;Factbases&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/02/Universal-Datatype.html&quot;&gt;https://guitarvydas.github.io/2021/03/02/Universal-Datatype.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;prolog&quot;&gt;PROLOG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=3s&quot;&gt;https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=3s&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Projectional Editing</summary></entry><entry><title type="html">Simplicity vs complexity</title><link href="https://computingsimplicity.neocities.org/2021/03/30/Simplicity-vs-Complexity.html" rel="alternate" type="text/html" title="Simplicity vs complexity" /><published>2021-03-30T00:00:00-04:00</published><updated>2021-03-30T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/30/Simplicity%20vs%20Complexity</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/30/Simplicity-vs-Complexity.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Simplicity vs Complexity&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;simplicity&quot;&gt;Simplicity&lt;/h1&gt;

&lt;p&gt;A definition of &lt;em&gt;simplicity&lt;/em&gt; is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lack of nuance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;complexity&quot;&gt;Complexity&lt;/h1&gt;

&lt;p&gt;Complexity is the opposite of simplicity.&lt;/p&gt;

&lt;p&gt;Complexity occurs in a system when there are too many variables to be juggled, at the same time, in a solution.&lt;/p&gt;

&lt;h1 id=&quot;simplification&quot;&gt;Simplification&lt;/h1&gt;

&lt;p&gt;To simplify something does not necessarily mean to delete variables from the system.&lt;/p&gt;

&lt;p&gt;One can simplify a problem by subdividing it. Divide and Conquer.&lt;/p&gt;

&lt;p&gt;I remember being told that humans can handle 7±2&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; items at a time.&lt;/p&gt;

&lt;p&gt;This would imply that one needs to apply Divide-and-Conquer until the number of variables in a subdivision is 7±2.&lt;/p&gt;

&lt;p&gt;The number of variables in a &lt;em&gt;system&lt;/em&gt; might be more than 7±2, say 100, but no part (subdivision) of the system should have more than 7±2 variables in it.&lt;/p&gt;

&lt;h2 id=&quot;physicists&quot;&gt;Physicists&lt;/h2&gt;

&lt;p&gt;Physicists simplify problems using approximations.&lt;/p&gt;

&lt;p&gt;When the effect of a variable is much less than (≪) the effect of some other variable, physicists make &lt;em&gt;simplifying assumptions &amp;#8212;&lt;/em&gt; they drop (elide) the former variable from their equations, dealing only with the latter variable(s).&lt;/p&gt;

&lt;p&gt;This does not mean that one approximation is valid in every situation.&lt;/p&gt;

&lt;p&gt;For example, in his book &amp;#8220;Order Out of Chaos&amp;#8221;, Nobel Laureate Ilya Prigogene&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; decries the misuse of approximations that are not valid in certain situations.&lt;/p&gt;

&lt;p&gt;Often, people over-use an approximation, or a notation, once it has worked in some domain.&lt;/p&gt;

&lt;p&gt;I see this happening in programming, where, often the question is &amp;#8220;how do I re-cast this problem in a strongly-typed, functional manner?&amp;#8221; instead of asking &amp;#8220;what is the problem and how can it best be solved?&amp;#8221; and &amp;#8220;what approximations / notations are useful in this case?&amp;#8221;.&lt;/p&gt;

&lt;p&gt;In programming, we see this played out in synchronous notation being misused to solve asynchronous problems (e.g. multitasking and the accidental complexities it brought along) and in &amp;#8220;features&amp;#8221; like JavaScript&amp;#8217;s callbacks.&lt;/p&gt;

&lt;h1 id=&quot;errors&quot;&gt;Errors&lt;/h1&gt;

&lt;p&gt;Errors in one domain might not be errors in another domain.&lt;/p&gt;

&lt;p&gt;For example, a timeout is an error when building a ballistics calculator, but is an expected occurrence when building blockchain.&lt;/p&gt;

&lt;h1 id=&quot;tells-approximationmisuse&quot;&gt;Tells - Approximation Misuse&lt;/h1&gt;

&lt;p&gt;The &amp;#8220;tells&amp;#8221; of misuse of notations and approximations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increasing accidental complexity, e.g. mutexes, then thread safety, then priorities, etc.&lt;/li&gt;
&lt;li&gt;Deciding that something is &amp;#8220;hard&amp;#8221;, e.g. the generally agreed-upon notion that multitasking is just &amp;#8220;hard&amp;#8221;.&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;divideandconquer&quot;&gt;Divide and Conquer&lt;/h1&gt;

&lt;p&gt;Successful use of &lt;em&gt;divide and conquer&lt;/em&gt; reduces not only the number of variables at the input of a subdivision, but, also, reduces the number of outputs.&lt;/p&gt;

&lt;h2 id=&quot;fan-inandfan-out&quot;&gt;Fan-in and Fan-out&lt;/h2&gt;

&lt;p&gt;To be able to apply divide-and-conquer in infinitely many subdivisions&lt;a href=&quot;#fn:4&quot; id=&quot;fnref:4&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; a notation &lt;em&gt;must&lt;/em&gt; support reduction of the number of input ports and reduction of the number of output ports.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;See https://guitarvydas.github.io/2021/01/14/References.html &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;This indicates that the wrong approximations and notation are being used. &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;see https://guitarvydas.github.io/2021/03/23/Everything&amp;#8211;is&amp;#8211;a&amp;#8211;Fractal.html &lt;a href=&quot;#fnref:4&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Simplicity vs Complexity</summary></entry><entry><title type="html">Programming redux</title><link href="https://computingsimplicity.neocities.org/2021/03/30/Programming-Redux.html" rel="alternate" type="text/html" title="Programming redux" /><published>2021-03-30T00:00:00-04:00</published><updated>2021-03-30T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/30/Programming%20Redux</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/30/Programming-Redux.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Programming Redux&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;See &lt;a href=&quot;https://guitarvydas.github.io/2021/03/30/Mathematics-Redux.html&quot;&gt;https://guitarvydas.github.io/2021/03/30/Mathematics-Redux.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Replace all references to &lt;em&gt;mathematics&lt;/em&gt; by &lt;em&gt;PL&lt;/em&gt;s (Programming Languages).&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Programming Redux</summary></entry><entry><title type="html">Mathematics redux</title><link href="https://computingsimplicity.neocities.org/2021/03/30/Mathematics-Redux.html" rel="alternate" type="text/html" title="Mathematics redux" /><published>2021-03-30T00:00:00-04:00</published><updated>2021-03-30T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/30/Mathematics%20Redux</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/30/Mathematics-Redux.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Mathematics Redux&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;twosubdivisionsofmathematics&quot;&gt;Two Subdivisions of Mathematics&lt;/h1&gt;

&lt;p&gt;Mathematics can be subdivided as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a notation&lt;/li&gt;
&lt;li&gt;a body of experience (e.g. in using the notation).&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mathematicalnotation&quot;&gt;Mathematical Notation&lt;/h1&gt;

&lt;p&gt;Mathematical notation can be subdivided as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;expressing a problem in mathematical notation&lt;/li&gt;
&lt;li&gt;manipulating the notation, reducing the expression of the problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pencilandpaper&quot;&gt;Pencil and Paper&lt;/h2&gt;

&lt;p&gt;Mathematical notation was invented for use with pencil and paper.&lt;/p&gt;

&lt;p&gt;Mathematical notation is a 2D notation, not a 3D notation.&lt;/p&gt;

&lt;h2 id=&quot;timevariance&quot;&gt;Time Variance&lt;/h2&gt;

&lt;p&gt;Manipulation of mathematical notation works mostly because time-varying variables have been expunged from the notation (&amp;#8220;side-effect free&amp;#8221;).&lt;/p&gt;

&lt;p&gt;Removing time variance from the notation is an approximation. It works only in domains where time is not a major factor.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Note that other approximations, like finite-element analysis, can give more accurate results in specific domains that have time variance.]&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;complexity&quot;&gt;Complexity&lt;/h1&gt;

&lt;p&gt;A &lt;em&gt;layer&lt;/em&gt; is only as complicated as one wishes to make it.&lt;/p&gt;

&lt;p&gt;The complexity lies in the amount of detail required to express the inputs and outputs of the layer.&lt;/p&gt;

&lt;p&gt;One can tune the complexity of each layer by using different notations and approximations in each layer, instead of trying to encompass &lt;em&gt;all&lt;/em&gt; variables in a single layer.&lt;/p&gt;

&lt;p&gt;Complexity is &amp;#8220;in the eye of the beholder&amp;#8221;. Mathematical notation appears complicated to some (most), but appears simple to those who have steeped themselves in the notation.&lt;/p&gt;

&lt;h2 id=&quot;whoistheaudience&quot;&gt;Who is the Audience?&lt;/h2&gt;

&lt;p&gt;Regarding mathematical notation, an interesting question to ask is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who is the Intended Reader?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is the notation meant to be used as communication between two mathematicians, or, between a mathematician and a non-mathematician (lawyer, graphics designer, construction worker, etc.)?&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;Complexity comes from trying to address too many details at any one layer of a design.&lt;/p&gt;

&lt;p&gt;Successful complexity-management is the art of finding a group of inter-related details and relegating them to a layer.&lt;/p&gt;

&lt;h1 id=&quot;engineering&quot;&gt;Engineering&lt;/h1&gt;

&lt;p&gt;Engineers map notation from one domain into another.&lt;/p&gt;

&lt;p&gt;For example, in construction, Engineers use mathematics (from the Architects, from textbooks, etc.) and produce blueprints that are understood by construction workers.&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Engineers filter out details.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Actually, this can be subdivided even further. There is experience in using the notation and there is experience in thinking about problems (which are then mapped to this notation). &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;One doesn't usually find Engineers performing actual construction work. Engineering is usually done before the construction begins. On&amp;#8211;site Engineers oversee that the work follows the specifications. Engineers might alter the specifications to better match reality as work progresses. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Mathematics Redux</summary></entry><entry><title type="html">State, analysis of</title><link href="https://computingsimplicity.neocities.org/2021/03/30/State,-Analysis-of.html" rel="alternate" type="text/html" title="State, analysis of" /><published>2021-03-30T00:00:00-04:00</published><updated>2021-03-30T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/30/State,%20Analysis%20of</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/30/State,-Analysis-of.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;State, Analysis of&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;stateandgoto&quot;&gt;State and GOTO&lt;/h1&gt;

&lt;p&gt;In this essay, I examine some of the uses of State.&lt;/p&gt;

&lt;p&gt;State has been maligned in literature, in the same manner that GOTO has been maligned.&lt;/p&gt;

&lt;p&gt;GOTO is used in every programming language — under the hood. Structured Programming showed us how to hide GOTO and to isolate&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; its use.&lt;/p&gt;

&lt;p&gt;State is used in threads, among other things.&lt;/p&gt;

&lt;p&gt;The problem is not State, but isolation of State.&lt;/p&gt;

&lt;p&gt;Another problem with State (and GOTO and Variables and Message Passing, etc.) is lack of code localization. Spaghetti state can be helped by strict nesting&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;, in some instances.&lt;/p&gt;

&lt;p&gt;Throwing away all state might not be necessary.&lt;/p&gt;

&lt;h1 id=&quot;nuanceduseofcaseswitch&quot;&gt;Nuanced Use of Case (Switch)&lt;/h1&gt;

&lt;h2 id=&quot;casevs.types-oop&quot;&gt;Case vs. Types - OOP&lt;/h2&gt;

&lt;p&gt;One form of state is querying of object types.&lt;/p&gt;

&lt;p&gt;This problem was lassoed by Object-Oriented Programming&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;casevs.continuations-statecharts&quot;&gt;Case vs. Continuations - StateCharts&lt;/h2&gt;

&lt;p&gt;CPS - Continuation Passing Style — is another form of GOTO. CPS is more powerful that GOTO.&lt;a href=&quot;#fn:4&quot; id=&quot;fnref:4&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CPS can become unruly when continuations are passed to regions of code that are not local to the origin of the continuation. JavaScript callbacks are an attempt to syntactically nest such uses, but callbacks failed to deliver enough benefits.&lt;/p&gt;

&lt;p&gt;Exceptions are another attempt at encapsulating CPS. Exceptions are flawed in that they are declared statically but operate dynamically. The dynamic call-chain determines the control-flow changes caused by exceptions.&lt;/p&gt;

&lt;p&gt;GOTO changes control-flow.&lt;/p&gt;

&lt;p&gt;OO bundles up data. (Closures also bundle up data).&lt;/p&gt;

&lt;p&gt;CPS bundles up and delivers, both, control-flow and data.&lt;/p&gt;

&lt;p&gt;StateCharts provide a way to describe non-linear changes to control-flow that retain code locality.&lt;/p&gt;

&lt;p&gt;I discuss the original StateCharts paper in
https://guitarvydas.github.io/2020/12/09/StateCharts.html
and
https://guitarvydas.github.io/2021/02/25/statecharts-(again).html&lt;/p&gt;

&lt;h2 id=&quot;patternmatching&quot;&gt;Pattern Matching&lt;/h2&gt;

&lt;p&gt;Pattern matching consists of two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a pattern (a DSL)&lt;/li&gt;
&lt;li&gt;a matching engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One can obviate the need for flags (and associated if…then…else…endif code) by writing patterns instead.&lt;/p&gt;

&lt;p&gt;Pattern matching was explored in compiler technologies and is called parsing in that literature.&lt;/p&gt;

&lt;p&gt;Pattern matching is used in function languages, as a way to remove the need for variables and for writing declarative specifications of code using overloaded functions. PatternParsing is a more general form of this kind of pattern matching.&lt;/p&gt;

&lt;p&gt;A common use of pattern matching is REGEX. Patterns are written in a DSL called a REGEX and the matching engine is hidden from view. For example, to match and &amp;#8220;a&amp;#8221; followed by a &amp;#8220;b&amp;#8221;, one would write a REGEX DSL snippet &amp;#8220;/ab/&amp;#8221;.&lt;/p&gt;

&lt;p&gt;An early form of a pattern-matching-and-engine language is PROLOG. One would write patterns and the PROLOG engine would use backtracking to return an exhaustive list of all matches.&lt;/p&gt;

&lt;p&gt;Early forms of pattern matching in compilers was embodied in tools such as LEX and YACC.&lt;/p&gt;

&lt;p&gt;The most recent form of pattern matching is PEG. PEG subsumes the capabilities of REGEX, LEX and YACC.&lt;/p&gt;

&lt;p&gt;PEG uses a backtracking engine and, thus, subsumes some of the uses of PROLOG (and other relational technologies).&lt;/p&gt;

&lt;p&gt;PEG might enable a new breed of programming, for example DSLs that write DSLs (I call these SCLs&lt;a href=&quot;#fn:5&quot; id=&quot;fnref:5&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;PEG rules can be built in layers, hence, PEG could be used to match text and to match type information. This should allow PEG to be used instead of REGEX and Haskell.&lt;/p&gt;

&lt;h2 id=&quot;conditionalcompilation-ifdef&quot;&gt;Conditional Compilation - #IFDEF&lt;/h2&gt;

&lt;p&gt;Conditional compilation has been used as a way of creating &amp;#8220;portable&amp;#8221; programs by brute force.&lt;/p&gt;

&lt;p&gt;Conditional compilation is known as &amp;#8220;#ifdef&amp;#8221; in C-class languages and &amp;#8220;#+&amp;#8221; in Lisp-class languages.&lt;/p&gt;

&lt;p&gt;In &amp;#8220;#ifdef&amp;#8221; languages, a DSL is used to express conditional compilation. The DSL is usually distinct from the underlying language, e.g. the kind of expressions used in C #ifdef is a language unto itself and does not provide access to the full C language.&lt;/p&gt;

&lt;p&gt;In &amp;#8220;#+&amp;#8221; Lisp conditional compilation, the expression language is full Lisp itself — no extra DSL is created.&lt;/p&gt;

&lt;p&gt;Such conditional compilation is a small step towards the full generality of pattern matching. Little languages — SCLs and DSLs — built on top of these languages could provide the desired conditional compilation effects.&lt;/p&gt;

&lt;p&gt;Portability was explored in compiler technologies, for example the techniques developed for dealing with disparate target CPU architectures.&lt;/p&gt;

&lt;p&gt;Many of the successful techniques at portability used a two phase approach. The compiler would emit code for a generalized architecture (often called a VM, today) and a pattern-matcher would transform the generalized code into code specialized for a particular architecture.&lt;/p&gt;

&lt;p&gt;Some of the interesting technologies included:&lt;a href=&quot;#fn:6&quot; id=&quot;fnref:6&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Orthogonal Code Generator — a declarative specification that mapped abstract instructions into specific instructions&lt;/li&gt;
&lt;li&gt;RTL — the method used by gcc — the VM consisted of an &amp;#8220;infinite&amp;#8221; number of registers and the compiler would simply emit register-based code ; in the second pass a peephole optimizer would be used to convert the register-based code into code specialized for a specific CPU architecture&lt;/li&gt;
&lt;li&gt;Denotational Semantics — a method of defining a language in the functional domain, then mapping the functions into specialized code, Peter Lee defined the source language in phases (layers) and made the Denotational Semantics technique practical ; each phase was described as a function mapping a source language onto a simpler domain ; each target domain was simpler than the preceding domain until the final domain was some executable architecture (e.g. Scheme, 808x, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[Note that all of the above techniques are based on Divide and Conquer. The transformations become easier as more layers are added.]&lt;/p&gt;

&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;

&lt;p&gt;Macros are DSLs for changing the behaviour of compilers (and interpreters).&lt;/p&gt;

&lt;p&gt;Macros can program the compiler.&lt;/p&gt;

&lt;p&gt;In the extreme case — e.g. Lisp macros — macros employ the full underlying language. For example one can write a Lisp program that is run at compile-time. This lisp program — called a macro — creates new source code that is fed to the compiler.&lt;/p&gt;

&lt;p&gt;In the other extreme, e.g. C macros, a separate macro-processor phase is run and its output is fed to the C compiler. Such macros work in two steps — preprocess, then compile. Obviously, the Lisp method is more powerful, but carries more potential risk.&lt;/p&gt;

&lt;p&gt;Inlining of functions is a formalization of macros. Inlining is an attempt to encapsulate one use-case of macros, e.g. optimization of programs defined in the function-only domain.&lt;/p&gt;

&lt;p&gt;Lisp macro processing work recursively. C-style macro preprocessing works in only two steps.&lt;/p&gt;

&lt;p&gt;The ideal extension would be to have an infinite number of preprocessing steps — a pipeline of preprocessors. [PEG might be one way to achieve this effect. PEG grammars that emit programs that are further processed by other PEG grammars, and so on.]&lt;/p&gt;

&lt;h2 id=&quot;casevs.flags&quot;&gt;Case vs. Flags&lt;/h2&gt;

&lt;p&gt;PL constructs like
if … then … else … end if
allow code to query state flags with little constraint on how the code is nested.&lt;/p&gt;

&lt;p&gt;It is possible to write clear code using such constructs, but such structuring tends to be rare.&lt;/p&gt;

&lt;p&gt;Likewise, note that it is possible to write clear code in assembly language, including all forms of 1st class functions, etc.&lt;/p&gt;

&lt;p&gt;Code in general, needs to be constrained with syntactic sugar.&lt;/p&gt;

&lt;h1 id=&quot;functionsandfunctionalprogramming&quot;&gt;Functions and Functional Programming&lt;/h1&gt;

&lt;p&gt;FP (functional programming) is but one way to structure code.&lt;/p&gt;

&lt;p&gt;FP limits the available paradigms to, mostly, a one-in and one-out style. Various extensions to FP include exceptions and full-blown use of CPS, e.g. in Denotational Semantics, but, the results are increasingly less readable.&lt;/p&gt;

&lt;p&gt;FP works by prohibiting changes of state — this creates isolation between functions and allows manipulation of the notation.&lt;/p&gt;

&lt;p&gt;It should be noted that UNIX® processes also create isolation between blocks of code — no data nor control-flow can escape the boundaries of a process.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Isolation is like encapsulation, but includes control&amp;#8211;flow. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;As seen with the solutions for Global Variables, Structured Programming, etc. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Bertrand Meyer pointed this out. &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;And, therefore, CPS is more dangerous that GOTO. &lt;a href=&quot;#fnref:4&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;SCL mean Solution Centric Language. &lt;a href=&quot;#fnref:5&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;See https://guitarvydas.github.io/2021/01/14/References.html &lt;a href=&quot;#fnref:6&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">State, Analysis of</summary></entry><entry><title type="html">Scls little languages playlist</title><link href="https://computingsimplicity.neocities.org/2021/03/29/SCLs-Little-Languages-Playlist.html" rel="alternate" type="text/html" title="Scls little languages playlist" /><published>2021-03-29T00:00:00-04:00</published><updated>2021-03-29T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/29/SCLs%20Little%20Languages%20Playlist</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/29/SCLs-Little-Languages-Playlist.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;LItlle Languages Playlist&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;(brief, rough, overview of Ohm, PEG, pattern matching, SCLs)&lt;/p&gt;

&lt;p&gt;Use the Ohm Editor (good for any PEG grammar) &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;https://ohmlang.github.io/editor/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;peg&quot;&gt;PEG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/PEG.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pegvs.otherpatternmatchers&quot;&gt;PEG vs. Other Pattern Matchers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;littlelanguagedevelopment&quot;&gt;Little Language Development&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ohminsmallsteps&quot;&gt;Ohm in Small Steps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;racketpeg&quot;&gt;Racket Peg&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;schemetojavascript&quot;&gt;Scheme to JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/01/Scheme-to-Javascript.html&quot;&gt;https://guitarvydas.github.io/2021/03/01/Scheme-to-Javascript.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;svggrammar&quot;&gt;SVG Grammar&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/15/SVG-grammar.html&quot;&gt;https://guitarvydas.github.io/2021/03/15/SVG-grammar.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;gluemanual&quot;&gt;GLUE manual&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/Glue-Manual.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/Glue-Manual.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;regexvspeg&quot;&gt;REGEX vs PEG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;svgtocode&quot;&gt;SVG to Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/SVG-to-Code-(1).html&quot;&gt;https://guitarvydas.github.io/2021/03/24/SVG-to-Code-(1).html&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">LItlle Languages Playlist</summary></entry><entry><title type="html">Message passing</title><link href="https://computingsimplicity.neocities.org/2021/03/27/Message-Passing.html" rel="alternate" type="text/html" title="Message passing" /><published>2021-03-27T00:00:00-04:00</published><updated>2021-03-27T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/27/Message%20Passing</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/27/Message-Passing.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Message Passing&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;messagepassing&quot;&gt;Message Passing&lt;/h1&gt;

&lt;p&gt;In my opinion, the term &amp;#8220;message passing&amp;#8221; means &amp;#8220;fire and forget&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A single, atomic operation.&lt;/p&gt;

&lt;p&gt;Send ().&lt;/p&gt;

&lt;p&gt;Asynchronous.&lt;/p&gt;

&lt;p&gt;AFAICT, most current, so-called forms of message-passing consist of two atomic operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send ()&lt;/li&gt;
&lt;li&gt;Wait ().&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;which results in synchronous operation.&lt;/p&gt;

&lt;p&gt;Step 2. is usually implied by the use of CALL / RETURN.&lt;/p&gt;

&lt;p&gt;A gedanken test of true message-passing would be to convert all instances of all classes into separate threads (ignoring efficiency). One will be forced to convert every &amp;#8220;message send&amp;#8221; into two atomic operations — Send (), Wait ().&lt;/p&gt;

&lt;p&gt;Synchrony is so pervasive that we have sought ways to force-fit synchrony into inherently asynchronous paradigms (e.g. by using envelopes called threads, by implementing synchronous RPC, etc.).&lt;/p&gt;

&lt;h1 id=&quot;hardwaresupportglobalvariable&quot;&gt;Hardware Support Global Variable&lt;/h1&gt;

&lt;p&gt;It should be noted that our hardware, since The Stack was invented,&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; implicitly supports the synchronous CALL / RETURN paradigm by making The Stack into a global variable that records the dynamic call-chain.&lt;/p&gt;

&lt;p&gt;CALL modifies The Stack.&lt;/p&gt;

&lt;p&gt;RETURN modifies The Stack.&lt;/p&gt;

&lt;p&gt;Threads hide the fact The Stack is a global variable, by wrapping envelopes around it.&lt;/p&gt;

&lt;p&gt;See, also,
https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html
https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/p&gt;

&lt;h1 id=&quot;future&quot;&gt;Future&lt;/h1&gt;

&lt;p&gt;I believe that part of the future of computing lies in removing the redundant Wait ().&lt;/p&gt;

&lt;p&gt;We see it beginning to happen with distributed languages like HTML&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We see it beginning to happen with the exploration of languages based on relations, etc.&lt;/p&gt;

&lt;p&gt;We see the need for this arising in technologies like p2p and blockchain (which tend to be concerned with asynchronous operations and network protocols).&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Early IBM 360s did not have a Stack. Programmers needed to use the BALR instruction. &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;See https://guitarvydas.github.io/2020/12/09/CALL&amp;#8211;RETURN&amp;#8211;Spaghetti.html for an idea on how to implement wait&amp;#8211;less Send() on current hardware. &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Message Passing</summary></entry></feed>