<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-02-25T23:57:53-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Statecharts (again)</title><link href="https://computingsimplicity.neocities.org/2021/02/25/statecharts-(again).html" rel="alternate" type="text/html" title="Statecharts (again)" /><published>2021-02-25T00:00:00-05:00</published><updated>2021-02-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/25/statecharts%20(again)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/25/statecharts-(again).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;statecharts (again)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-25T23:56:09Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-25T23:56:09Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li1&quot;&gt;I was taught about state machines in EE school, but, they said, you couldn't make practical use of SM's because of the &quot;state explosion&quot; problem (Fig. 20 of Harel's paper shows a very simple example of &quot;state explosion&quot;).&lt;/li&gt;
  &lt;li class=&quot;li1&quot;&gt;Harel's notation conquers the &quot;state explosion&quot; problem.&lt;/li&gt;
  &lt;li class=&quot;li1&quot;&gt;Harel's notation then goes one step too far and winds concurrency into the notation (&quot;orthogonal states&quot;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(2) is explicit - you draw lines (curvy arrows) to show transitions&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(3) is implicit - you have to read the code to see who-depends-on-what.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Remove (3) and you have a wonderful notation that I call HSM's (Hierarchical State Machines).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Move (3) into its own notation and you get &quot;network diagrams&quot; (aka &quot;box and arrow diagrams&quot;), and the FBP-like stuff that I build (currently called &quot;Arrowgrams&quot;, formerly known as &quot;bmfbp&quot; (for Bare Metal FBP)).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(2) and (3) are, both, simple notations. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;When you try to combine the two notations, you get accidental complexity. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Harel wrote a follow-on paper about the micro-semantics of his notation and told us that everything must work in a lock-step manner. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Arrowgrams gives you concurrency in a simple form (&quot;multitasking is easy&quot; :-)). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;HSMs give you anti-state-explosion.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I built a full Harel Statechart textual language (some 8 passes, iirc), then backed off and simplified ((2) hierarchical state machines and (3) a message-passing kernel).&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;If you think in terms of communicating-state-machines, you brush up against Actors-like thinking.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;further: YACC dealt with the &quot;state explosion&quot; problem, too, but, over-specified (IMO) and didn't allow users to control the explosion handling in an explicit manner]&lt;/i&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The kernel is simple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The current implementation is in JavaScript (this is a way to show just how simple this can be - if you can do it in JS, you can do it in any language :-).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I, also, have done it in HTML+JS).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See, also https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html and https://guitarvydas.github.io/2021/01/16/HTML-Components-Arrowgrams.html.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">statecharts (again)</summary></entry><entry><title type="html">The stack is a global variable (again)</title><link href="https://computingsimplicity.neocities.org/2021/02/25/The-Stack-is-a-Global-Variable-(again).html" rel="alternate" type="text/html" title="The stack is a global variable (again)" /><published>2021-02-25T00:00:00-05:00</published><updated>2021-02-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/25/The%20Stack%20is%20a%20Global%20Variable%20(again)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/25/The-Stack-is-a-Global-Variable-(again).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack is a Global Variable (again)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-25T23:53:17Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-25T23:53:17Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;The Stack is a global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The reason that programmers feel that &quot;multitasking is hard&quot; is due to the accidental complexity caused by using an implicit global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Causes of Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;This feeling that &quot;multitasking is hard&quot; has at least two causes:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not making &lt;i&gt;everything&lt;/i&gt; explicit.&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the case of CALL/RETURN-based programs (e.g. just about every program today), the &lt;i&gt;stack&lt;/i&gt; is implicit and hidden under the covers by most PLs (programming languages).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To make matters worse, hardware supports and encourages the use of the &lt;i&gt;stack&lt;/i&gt; as a global variable.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Using the wrong paradigm.&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most PLs encourage the use of the &lt;i&gt;synchronous&lt;/i&gt; paradigm (e.g. CALL/RETURN using an implicit stack).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Memory sharing is encouraged in the synchronous paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multitasking, though, is inherently &lt;i&gt;asynchronous&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Building multitasking in a &lt;i&gt;synchronous&lt;/i&gt; paradigm is possible, but leads to accidental complexity, e.g. &lt;i&gt;thread safety &lt;/i&gt;concerns arise only due to the sharing of memory, CALL/RETURN uses a global variable, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;synchronous&lt;/i&gt; paradigm is useful for building &lt;i&gt;calculators&lt;/i&gt; - functions with exactly one set of synchronous inputs and exactly one set of synchronous outputs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Calculators are functions that expunge the notion of &lt;i&gt;time&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the other hand, &lt;i&gt;asynchronous&lt;/i&gt; computation, e.g. the internet, involves functions of &lt;i&gt;time&lt;/i&gt; (aka &lt;i&gt;history&lt;/i&gt;) and, generally, does not share memory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the &lt;i&gt;asynchronous&lt;/i&gt; paradigm, inputs and outputs are not synchronized and may be delivered at different points in time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Additionally, one set of inputs does not guarantee only one set of outputs - &lt;i&gt;asynchronous&lt;/i&gt; components might produce 0, 1, or more outputs for every input.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Timeouts must be made explicit, lest they appear to generate outputs when there have been 0 inputs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack is a Global Variable (again)</summary></entry><entry><title type="html">Processes are state machines</title><link href="https://computingsimplicity.neocities.org/2021/02/25/Processes-Are-State-Machines.html" rel="alternate" type="text/html" title="Processes are state machines" /><published>2021-02-25T00:00:00-05:00</published><updated>2021-02-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/25/Processes%20Are%20State%20Machines</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/25/Processes-Are-State-Machines.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Processes Are State Machines&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-25T23:53:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-25T23:53:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Processes are state machines.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Processes are most often created by operating systems.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Dig deep into the operating system's documentation and you will, inevitably, find a state diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Processes Are State Machines</summary></entry><entry><title type="html">Superposition 2</title><link href="https://computingsimplicity.neocities.org/2021/01/24/superposition-2.html" rel="alternate" type="text/html" title="Superposition 2" /><published>2021-01-24T00:00:00-05:00</published><updated>2021-01-24T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/24/superposition%202</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/24/superposition-2.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;superposition&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-24T08:31:18Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-24T08:31:18Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Superposition is a fancy word for something that everyone understands by intuition.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will try to show a simple example of a system, then show how one intuitively understands the system.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will discuss why superposition is important, later.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Superposition is used in many fields.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, electronics, quantum physics, geology, Engineering, etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The big question is &quot;can superposition be used in Software Design?&quot;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;See also &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/22/superposition.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/01/22/superposition.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;See, also, &lt;/i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Superposition_principle&quot;&gt;&lt;i&gt;https://en.wikipedia.org/wiki/Superposition_principle&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A simple example of a Hello World software system is shown in &lt;span class=&quot;s1&quot;&gt;Fig. 1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2021-01-24-08-31-18-Images/superposition-superposition 0.png&quot; width=&quot;250px&quot; height=&quot;126px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Hello World Diagram&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition 1&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;One intuitively understands the simple Hello World example in two steps. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Step 1 is shown in &lt;span class=&quot;s1&quot;&gt;Fig. 2.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2021-01-24-08-31-18-Images/superposition-superposition 1.png&quot; width=&quot;300px&quot; height=&quot;69px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 2 Superposition Step 1&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;And, the second step in understanding Hello World is in &lt;span class=&quot;s1&quot;&gt;Fig. 3.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2021-01-24-08-31-18-Images/superposition-superposition 2.png&quot; width=&quot;300px&quot; height=&quot;70px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 3 Superposition Step 2&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;That's it!&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Superposition is a fancy word for something that everyone understands intuitively.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I will discuss later why superposition is important.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Basically, the question becomes &quot;does our technology match with our intuitive understanding?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If it doesn't match up with our intuition, we get bugs that are hard to understand and hard to predict.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Software professionals call that &quot;accidental complexity&quot;.&lt;/i&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">superposition</summary></entry><entry><title type="html">Compiling diagrams 2</title><link href="https://computingsimplicity.neocities.org/2021/01/24/Compiling-Diagrams-2.html" rel="alternate" type="text/html" title="Compiling diagrams 2" /><published>2021-01-24T00:00:00-05:00</published><updated>2021-01-24T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/24/Compiling%20Diagrams%202</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/24/Compiling-Diagrams-2.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Compiling Diagrams 2&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-24T12:20:30Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-24T12:20:30Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-24-12-20-30-Images/Time sharing.png&quot; width=&quot;400px&quot; height=&quot;108px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Fig. 1 Hello World (Diagram)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JSON&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;name&quot; : &quot;HELLOWORLD-HELLOWORLD-BOOTSTRAP&quot;,&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;inputs&quot; : [&quot;START&quot;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;outputs&quot; : [&quot;RESULT&quot;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;parts&quot; :&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;{ &quot;partName&quot; : &quot;STRING-JOIN&quot;, &quot;kindName&quot; : &quot;STRING-JOIN&quot;},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;{ &quot;partName&quot; : &quot;WORLD&quot;, &quot;kindName&quot; : &quot;WORLD&quot;},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;{ &quot;partName&quot; : &quot;HELLO&quot;, &quot;kindName&quot; : &quot;HELLO&quot;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;wiring&quot; :&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{&quot;wire-index&quot; : 0, &quot;sources&quot; : [{&quot;part&quot; : &quot;HELLO&quot;, &quot;pin&quot; : &quot;S&quot;}], &quot;receivers&quot; : [{&quot;part&quot; : &quot;STRING-JOIN&quot;, &quot;pin&quot; : &quot;A&quot;}]},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{&quot;wire-index&quot; : 1, &quot;sources&quot; : [{&quot;part&quot; : &quot;WORLD&quot;, &quot;pin&quot; : &quot;S&quot;}], &quot;receivers&quot; : [{&quot;part&quot; : &quot;STRING-JOIN&quot;, &quot;pin&quot; : &quot;B&quot;}]},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{&quot;wire-index&quot; : 2, &quot;sources&quot; : [{&quot;part&quot; : &quot;STRING-JOIN&quot;, &quot;pin&quot; : &quot;C&quot;}], &quot;receivers&quot; : [{&quot;part&quot; : &quot;SELF&quot;, &quot;pin&quot; : &quot;RESULT&quot;}]},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{&quot;wire-index&quot; : 3, &quot;sources&quot; : [{&quot;part&quot; : &quot;SELF&quot;, &quot;pin&quot; : &quot;START&quot;}], &quot;receivers&quot; : [{&quot;part&quot; : &quot;WORLD&quot;, &quot;pin&quot; : &quot;START&quot;},{&quot;part&quot; : &quot;HELLO&quot;, &quot;pin&quot; : &quot;START&quot;}]}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;N.B. Bootstrap version upcases all strings.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Manifests (Two)&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Expected Manifest&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;uses :&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;[&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;kind : &quot;STRING-JOIN&quot;,&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;inputs: [&quot;A&quot;, &quot;B&quot;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;outputs: [&quot;C&quot;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;kind: &quot;WORLD&quot;,&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;inputs: [&quot;START&quot;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;outputs: [&quot;S&quot;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;kind: &quot;HELLO&quot;,&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;inputs: [&quot;START&quot;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;outputs: [&quot;S&quot;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Provided Manifest&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;implements:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;kind : &quot;HELLOWORLD-HELLOWORLD-BOOTSTRAP&quot;,&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;inputs : [&quot;START&quot;],&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;outputs : [&quot;RESULT&quot;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Compiling Diagrams 2</summary></entry><entry><title type="html">The case for fanout</title><link href="https://computingsimplicity.neocities.org/2021/01/23/The-Case-For-Fanout.html" rel="alternate" type="text/html" title="The case for fanout" /><published>2021-01-23T00:00:00-05:00</published><updated>2021-01-23T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/23/The%20Case%20For%20Fanout</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/23/The-Case-For-Fanout.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Case For Fanout&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-23T11:18:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-23T11:18:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fan Out&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Fanout means that the output from one port can be split to several components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP does not allow fanout.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;AG does allow fanout.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I show the difference between these methods, in this essay.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;A simple &quot;hello world&quot; example is shown in Fig. 1.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing.png&quot; width=&quot;200px&quot; height=&quot;101px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Hello World&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing1.png&quot; width=&quot;200px&quot; height=&quot;101px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 FBP Hello World&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Copies of FBP Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing2.png&quot; width=&quot;200px&quot; height=&quot;182px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 FBP Hello World Twice&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP Lasso Subnets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing3.png&quot; width=&quot;200px&quot; height=&quot;220px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Lasso FBP Subnets&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP Subcomponent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing4.png&quot; width=&quot;200px&quot; height=&quot;330px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5 FBP Subcomponent&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AG Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing5.png&quot; width=&quot;200px&quot; height=&quot;92px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6 AG Hello World&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Copies of AG Hello World&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing6.png&quot; width=&quot;200px&quot; height=&quot;200px&quot; alt=&quot;Image&quot;&gt;Fig. 7 AG Hello World Twice&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AG Lasso Subnets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing7.png&quot; width=&quot;200px&quot; height=&quot;160px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 8 AG Lasso Subnets&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;AG Subcomponent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-11-18-39-Images/Time sharing8.png&quot; width=&quot;200px&quot; height=&quot;160px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 9 AG Subcomponent&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Case For Fanout</summary></entry><entry><title type="html">Curse of the editor</title><link href="https://computingsimplicity.neocities.org/2021/01/23/Curse-of-the-Editor.html" rel="alternate" type="text/html" title="Curse of the editor" /><published>2021-01-23T00:00:00-05:00</published><updated>2021-01-23T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/23/Curse%20of%20the%20Editor</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/23/Curse-of-the-Editor.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Curse of the Editor&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-23T18:26:45Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-23T18:26:45Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Curse&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;All current programming languages suffer from the curse of text editing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All PLs are based on the idea of non-overlapping grids of cells.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We call the cells &quot;characters&quot;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Visual Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Many programmers think that the way to break out of using text editors is to adopt &lt;i&gt;visual programming, &lt;/i&gt;which they think are based only on pixels and/or full-blown graphics.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Between Visual and Text Editing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that there is a middle ground between text editing and pixel editing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DaS - Diagrams as Syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagrams Are Not Pixels&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;Diagrams are not just pixels and/or full-blown graphics.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cells&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Characters are not just pixels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Characters are tiny grids that contain bits.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Characters are arranged in rows (called &lt;i&gt;lines&lt;/i&gt;) and columns.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This arrangement was devised in the 1950's (or thereabouts).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A cell has a width and height.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Typically this information can be derived from the font.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DaS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams, like characters, can be considered to be cells.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A diagram, like characters, has a point (x,y) and a width and a height.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagram cells do not need to be arranged in non-overlapping grids.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams can be arranged in &lt;span class=&quot;s1&quot;&gt;overlapping&lt;/span&gt; cells.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Minimal DaS Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Diagram editors can edit:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;text (the usual stuff)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;shapes (boxes, ellipses)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lines (arrows, lines, connectors).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Adding &quot;shapes&quot; and &quot;lines&quot; to text isn't as big a push-up as going from text to pixels and full-blown graphics.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I believe that DaS is a middle ground between pure textual editing and graphical pixel-editing, and graphical vector editing.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Curse of the Editor</summary></entry><entry><title type="html">Blocking</title><link href="https://computingsimplicity.neocities.org/2021/01/23/blocking.html" rel="alternate" type="text/html" title="Blocking" /><published>2021-01-23T00:00:00-05:00</published><updated>2021-01-23T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/23/blocking</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/23/blocking.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;blocking&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-23T12:49:08Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-23T12:49:08Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 12.0px Helvetica}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 12.0px Helvetica}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blocking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Operating Systems simulate parallel systems by time-sharing the CPU between processes.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each process &lt;i&gt;appears&lt;/i&gt; to have its own cpu, its own memory space and its own stack, but these are just slices of the main CPU and the main memory.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have tried to diagram the situation in &lt;span class=&quot;s1&quot;&gt;Fig. 1 and Fig. 2.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-12-49-08-Images/Time sharing.png&quot; width=&quot;200px&quot; height=&quot;288px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 1 Stylized view of Multi-Processing&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;img src=&quot;/assets/2021-01-23-12-49-08-Images/Time sharing1.png&quot; width=&quot;400px&quot; height=&quot;256px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 2 Stylized view of Multi-Processing Including Time-Sharing Operating System&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;A process &quot;blocks&quot; when:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li9&quot;&gt;it's allotted time is up&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;it tries to perform some off-cpu operation (e.g. I/O) allowing the CPU to be used by other processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;The operating runs some software to switch to a new process (e.g. reload MMU registers, change the timer setting, grab pages from disk, etc.).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;This is also called &quot;context switching&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;Context switching and hardware support are used to isolate processes from one another.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Time-sharing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Time-sharing&quot;&gt;https://en.wikipedia.org/wiki/Time-sharing&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Yield&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Yield&quot; is another term for blocking.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Loops / Recursion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Time-slicing a CPU is necessary only because PLs (Programming Languages) allow programs to contain long-running loops and deep recursion.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time-slicing would not be necessary if PLs prohibited the use of long-running loops and deep recursion.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;N.B. This would be possible, if compilers compiled loop-ends into &quot;yields&quot; with a feedback-message-send that would signal the need for another pass through the loop&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Loops and recursion are the &lt;i&gt;exception&lt;/i&gt; not the rule. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We incur accidental complexity because we encourage the use of loops and recursion.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Loops / recursion makes sense in a language that is meant to be used &lt;i&gt;inside&lt;/i&gt; a network node - iPL (inner PL).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Loops / recursion do not make sense in a language that is meant to be used to describe a &lt;i&gt;network&lt;/i&gt; of nodes - oPL (outer PL).&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;1950's&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Time-sharing was invented in the 1950's.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At that time, CPUs were very expensive.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At that time, memory was very expensive.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time-sharing is an optimization that allows for the use of one computer to simulate many computers.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;2020's&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs are no longer expensive&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory is no longer expensive.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yet, we continue to use the time-sharing optimization.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Distributed Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In distributed programming, we use CPUs like candy - each app gets its own CPU and memory.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A piece of software, in distributed programming, runs at its own speed and never blocks. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bit Spinning&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In a distributed environment, where CPUs are like candy, a piece of software waits for input by &lt;i&gt;bit-spinning&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a time-shared environment, bit-spinning is discouraged because it wastes CPU power that could be used by other processes.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Efficiency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Adding the overhead of using an Operating System (which is just a library) &lt;i&gt;adds&lt;/i&gt; overhead and degrades the efficiency of the software.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The use of an Operating System improves efficiency of a system only if most apps (processes) access much-slower I/O devices that would require the use of &lt;i&gt;bit-spinning&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Calculator software (one-in-one-out, functional) would be more efficient without the addition of an operating system.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IoT devices would be more efficient (aka &quot;cheaper&quot;) without the use of operating systems.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;IMO, what we really want is to be able to plug together software components to build the least amount of software-plus-operating-system possible to solve any one problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;With current programming languages, this is not easy to do, because they are, mostly, iPLs and not oPLs that encourage structured design of distributed computing. (See &lt;/i&gt;Loops / Recursion &lt;i&gt;for the definition of iPLs and oPLs).&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain and Sybil Attacks&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p9&quot;&gt;Blockchain developers mention Sybil Attacks. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;Sybil Attacks are the idea of using one CPU to simulate many computers, i.e to give one computer multiple personalities like the Sybil character in the movie.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;Slicing a computer up into multiple personalities makes it look like there are more participants on a blockchain than there really are. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;If the multiple personalities collude to sway votes about who should receive $'s, then this is called a Sybil attack. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;The counter-measure to such Sybil attacks is to insist that all participants solve a puzzle before casting a vote.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The puzzle is chosen to be so onerous that a single computer must work on it full time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If a computer is sliced up into multiple personalities, the probability of getting the right answer to the puzzle in any of the personalities is very low and only single-personality computers can solve the puzzle and can get to vote.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Bit-spinning is a &quot;technical&quot; term for spinning in a tight loop waiting for input.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Sybil_(1976_film)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">blocking</summary></entry><entry><title type="html">Superposition</title><link href="https://computingsimplicity.neocities.org/2021/01/22/superposition.html" rel="alternate" type="text/html" title="Superposition" /><published>2021-01-22T00:00:00-05:00</published><updated>2021-01-22T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/22/superposition</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/22/superposition.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;superpositino&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-22T07:02:50Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-22T07:02:50Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The holy grail of software development is the ability to apply the principle of Superposition to software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &quot;simple&quot; way to look at superposition is to imagine LEGO® blocks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The blocks do not depend on each other.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can build &quot;anything&quot; with the blocks without being constrained by dependencies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL RETURN Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I show the problem caused by dependencies in my essay CALL / RETURN Spaghetti &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The essay CALL / RETURN Spaghetti indirectly discusses superposition. It shows what happens if one doesn't have superposition.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The ALGOL Bottleneck&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CALL RETURN uses a global variable to store breadcrumbs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This global variable is created/supported by most modern hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I try to demonstrate this issue in my essay ALGOL Bottleneck &lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Superposition in EE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I first learned about superposition in EE school.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In EE, one analyzes (understands) a circuit by successively suppressing all voltage sources except one. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the separate, one-source-only, analyses are then glued back together and summed to form the final analysis.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Analogy: Cartoon Movie Cels&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;An analogy of the use of superposition is to imagine how cartoon movies were created before computers became abundant.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An artist would paint a character onto a transparent sheet of plastic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many artists could to their tasks in parallel - without any dependencies between them.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each artist could paint all of the cels for a single cartoon character.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The frames of the final movie would be formed by layering each cel onto a background and photographing the result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The final movie would show frames in sequence.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Animated graphics still works this way today, except with computerized technology.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Animated GIFs work this way, also.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;https://conceptartempire.com/cel-animation/&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;https://en.wikipedia.org/wiki/Cel&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">superpositino</summary></entry><entry><title type="html">Fbp v actors v erlang</title><link href="https://computingsimplicity.neocities.org/2021/01/22/fbp-v-actors-v-erlang.html" rel="alternate" type="text/html" title="Fbp v actors v erlang" /><published>2021-01-22T00:00:00-05:00</published><updated>2021-01-22T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/22/fbp%20v%20actors%20v%20erlang</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/22/fbp-v-actors-v-erlang.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;erlang&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-22T06:51:57Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-22T06:51:57Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Actors Erlang FBP&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;FBP (Flow-Based Programming) is often conflated with Actors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Actors are often conflated with Erlang.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss some of the issues in this essay.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL / RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I have found that one can &lt;i&gt;reason&lt;/i&gt; (understand) a program if it doesn't cross the &lt;i&gt;great divide.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;great divide&lt;/i&gt; is delimited by the use of CALL/RETURN.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a program doesn't use CALL/RETURN, one can reason about it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a program uses CALL/RETURN, then all bets are off.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most programming languages expect programmers to implement functions using CALL/RETURN, e.g. &lt;span class=&quot;s1&quot;&gt;f(x);&lt;/span&gt; is usually implemented using CALL / RETURN (the caller calls the function &lt;i&gt;f&lt;/i&gt; and waits for a result).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;N.B. Recursion is CALL/RETURN.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Smalltalk &quot;message passing&quot; is actually CALL / RETURN&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Spaghetti&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Using CALL/RETURN, it is &quot;natural&quot; to skip over the fire-and-forget (concurrency) paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I discuss this issue further in my essay about CALL RETURN SPAGHETTI &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Call Return Uses a Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CALL RETURN uses a global variable to store breadcrumbs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This global variable is created/supported by most modern hardware.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss this issue in my essay ALGOL Bottleneck &lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Closures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Closures are a way to escape the CALL/RETURN handcuffs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, &lt;i&gt;processes&lt;/i&gt; in operating systems, are just honking big closures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Actors vs CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Actor technology does not specify CALL / RETURN.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Erlang vs. CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang implements its processes using its BEAM VM.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang expects programmers to explicitly create processes using &lt;i&gt;spawn&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang also allows creation of &quot;smaller&quot; closures, using &lt;i&gt;fun.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang uses &lt;i&gt;immutable data&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is not strictly necessary, since &lt;i&gt;isolation&lt;/i&gt; hides the inner workings of components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang allows hierarchical decomposition of processes, but does not encourage it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang allows knowing the &lt;i&gt;pid&lt;/i&gt; of a process, hence, allows dynamic reconfiguration of the architecture.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Dynamic reconfiguration is frowned upon from a Maintenance Engineering perspective. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dynamic reconfiguration makes explicit Architecture difficult if not impossible.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Self-modifying code is an example of dynamic reconfiguration and can, also, lead to self-modifying architectures.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Erlang defines a number of basic types.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This encourages programming &lt;i&gt;Implementation&lt;/i&gt; instead of &lt;i&gt;Engineering&lt;/i&gt; and &lt;i&gt;Architecture&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;FBP vs CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;FBP (Flow-Based Programming) encourages CALL RETURN-less construction of systems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP has been implemented on top of other, existing, base languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;As soon as one writes programs in the base language (beyond the FBP paradigm), on returns to CALL/RETURN-full programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP provides Isolation by implementing components as operating-system supports processes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Turtles All The Way Down&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I favour hierarchy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;From this perspective, &lt;i&gt;processes&lt;/i&gt; should be composed of other &lt;i&gt;processes&lt;/i&gt; to a very deep level.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP, Actors and Erlang support hierarchical organization of programs, but do not otherwise &lt;i&gt;encourage&lt;/i&gt; this style.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FBP goes beyond Actors and Erlang, by providing the concept of sub-nets.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Coordination of child processes is left to the programmer.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">erlang</summary></entry></feed>