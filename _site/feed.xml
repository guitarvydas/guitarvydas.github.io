<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-02T07:26:09-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Programming language design</title><link href="https://computingsimplicity.neocities.org/2021/03/02/Programming-Language-Design.html" rel="alternate" type="text/html" title="Programming language design" /><published>2021-03-02T00:00:00-05:00</published><updated>2021-03-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/02/Programming%20Language%20Design</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/02/Programming-Language-Design.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Programming Language Design&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-02T07:19:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-02T07:19:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font-kerning: none}
    span.s4 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: lower-alpha}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Problem With Today's Programming Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The problem with today's programming languages is that they are too general.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, Guido van Rossum's&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; language was designed to solve Guido van Rossum's problems, not yours.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rhetorical question: if I were to write software to control a robot, would I use a language built for designing banking apps?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Only if I didn't have the freedom to choose.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCLs not DSLs not PLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Given that we can now create SCLs — PLs and DSLs — in one day, we can rearrange our workflow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Analyze the problem-at-hand.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Create a notation to describe the problem-at-hand&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Create a solution to the problem-at-hand using the same notation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Build an SCL for a single use — only for this single problem, without needing to generalize&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Build, test, release the solution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The tools we need are:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A PEG parser (e.g. Ohm-JS)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A flexible base language (Lisp and Javascript are places to start).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The base language should:&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide dynamic typing&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; instead of static typing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Treat everything as an expression&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Not require code ordering, e.g. use before declaration&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Not require syntactic sugar, e.g. commas, needing &lt;span class=&quot;s2&quot;&gt;return&lt;/span&gt; for expression values, etc.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide good debuggers / single-steppers&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide ways to incorporate position information in the code (e.g. #file and #line pragmas used in C preprocessors).&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Lisp — Common Lisp — has many of the above features.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In particular, code and data are stored as lists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lists can be treated as relations&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many of the high-falutin' languages were originally built in Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp is a good toolbox&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; for automators&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layered Software Design&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eliding Error Handling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;People often omit error handling because it clogs up the readability of the original Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Error handling is a bag on the side of most programs. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That is because most languages don't allow one to design software in a layered manner. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;If you think that libraries and github give you layered software, think again.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ask yourself, for example, how to extract and examine the error layers — only — in this kind of software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ask yourself how to extract and examine the Happy Path (Architecture w/o error handling nasties) — only — in this kind of software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you think that theorem provers help you build better software, try building a robot controller or a music sequencer (see if knowing the nitty-gritties of Natural Numbers is useful in such domains —programming language design is about how to hide and elide the details when solving a particular problem&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Etc.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Error-handling — non-linear control flow — is difficult to express in a text-only language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It has been done, but the results&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;aren't natural.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Other forms of non-linear control flow have pushed the text-only paradigm beyond its natural limitations (e.g. Javascript callbacks, multitasking, etc.).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One of the oldest notations for non-linear and parallel control flow is music notation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Humans understand and express parallelism (e.g. music chords, cooking recipes) — only programmers find this concept hard to express.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Theory Is Not PL Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Programming language theory defines the Universe of programming languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is &lt;i&gt;not &lt;/i&gt;the same as designing a &lt;i&gt;useful&lt;/i&gt; programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A useful programming language:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;picks-and-chooses from the Universe of possibilities&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;creates a zig-zag through the Universe of possibilities and presents a notation for a given problem in a readable manner.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architect's Responsilibity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;It is the Architect's responsibility to make a design clear and understandable to other readers.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;RY vs. DRY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goals of Architecture are not the same as the goals of Maintenance Engineering, Test Engineering, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In particular, the Architect must be able to Copy/Paste designs — this is call RY (Repeat Yourself).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;RY, though, is anathema to Maintenance Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;From a maintenance perspective, DRY (Don't Repeat Yourself) is desirable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;With current techniques, DRY is generally not automated and programmers are expected to expend brain-power to achieve DRY, instead of using RY.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;I'm not picking on Guido, just using his name as a concrete example of a more general problem.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;I can't think of any language, except assembler, that has all of these features, yet, one can write SCLs that emit other languages (For example, I've successfully emitted Lisp and Javascript)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;If static typing is important to the solution, build static typing into the SCL&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;1st class functions are even possible in Assembler and C.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some so-called HLLs snip this avenue off.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[Note that 1st class functions are GOTOs on steroids].&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Declaration-before-use is a&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;high-level-language feature that helps programmers spot typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is an anti-feature for base languages used in automation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmer-oriented features hinder automation.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Note that I don't champion the idea of using C and Lisp macros.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEGs provide a much richer environment for rewriting code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp macros were an attempt to build runtime syntax modification.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One could, simply build-in a PEG parser for this same purpose.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have successfully used ESRAP (a PEG parser) in CL for a project (compiling diagrams to code).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Lisp lists can represent a larger number of possibilities than just triples.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Avoid using this ability.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule#:~:text=Greenspun's%20tenth%20rule%20of%20programming,of%20half%20of%20Common%20Lisp.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;I argue that Lisp should be used for the basis of projectional editors.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Especially when you can't expunge &lt;i&gt;time&lt;/i&gt; from the equation.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Programming Language Design</summary></entry><entry><title type="html">Universal datatype</title><link href="https://computingsimplicity.neocities.org/2021/03/02/Universal-Datatype.html" rel="alternate" type="text/html" title="Universal datatype" /><published>2021-03-02T00:00:00-05:00</published><updated>2021-03-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/02/Universal%20Datatype</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/02/Universal-Datatype.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Universal Datatype&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-02T07:21:50Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-02T07:21:50Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Universal Datatype&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Universal Datatype is a &lt;i&gt;relation&lt;/i&gt;, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;relation(subject,object)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Triples&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Relations are also called a &lt;i&gt;triple&lt;/i&gt;s.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Assembler&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;MOV R0,R1&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Relation, Subject, Object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Normalization&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Data / Code represented as relations is &lt;i&gt;normalized&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normalization is the most-atomic form of representation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle (5, 10, 20, 30)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;can be further atomized — normalized — as&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle (R1)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x (R1, 5)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y (R1, 10)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width (R1, 20)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height (R1, 30)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Yes, normalization wastes space and CPU power, but, we have lots of each today.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I often use the term &lt;i&gt;fact&lt;/i&gt; and put &lt;i&gt;facts&lt;/i&gt; into a &lt;i&gt;factbase&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compilers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers like triples, e.g. &lt;span class=&quot;s1&quot;&gt;MOV R0,R1&lt;/span&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Optimization&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Optimization is easier when target code/data has been normalized.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Peephole optimization is easy to do with even simple tools like &lt;span class=&quot;s1&quot;&gt;awk&lt;/span&gt; when code / data has been normalized into triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fraser/Davidson wrote a landmark paper&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; on peepholing which formed the basis of Gnu's &lt;span class=&quot;s1&quot;&gt;gcc&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normalizing code and optimizing it is not just for compilers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The techniques could be ratcheted up a notch to cover higher levels of software Architectures.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote - Y2K and COBOL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We analyzed banking source code for Y2K problems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We used TXL to convert all source code into factbases, then ran backtracking pattern-matching rules over the normalized code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pattern Matching Factbases&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Backtracking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Exhaustive matching can be done with simple algorithms — backtracking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Backtracking is easier when the data is normalized.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;That's why compiler writers aim at assembler when writing optimizers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Today, trees are used, but trees get in the way.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PROLOG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG is one of the earliest attempts at backtracking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I have built a PROLOG in JavaScript.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;TXL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;TXL is a functional, backtracking, parser language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://www.txl.ca/&quot;&gt;http://www.txl.ca/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;MiniKanren&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;MiniKanren appears to be the successor to PROLOG-like languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MiniKanren can do seemingly-magical things &lt;a href=&quot;https://www.youtube.com/watch?v=er_lLvkklsk&quot;&gt;https://www.youtube.com/watch?v=er_lLvkklsk&lt;/a&gt; (and &lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;https://github.com/webyrd/Barliman&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;One has to wonder what the child of MiniKanren and AI might turn out like.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Programming Language Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine if all code were normalized to triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We'd be programming in assembler, or in the mostly-syntaxless Lisp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Successive programming language designs have tried to remedy the problems of working in triples, for human consumption.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programming languages have taken years to design and to perfect.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, using PEG parsers, we can build languages in a day&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can tune a language for a specific problem. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call these SCLs — Solution Centric Languages.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG vs. YACC&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;YACC embodies LR(k) theory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YACC builds languages from the ground up.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG builds parsers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers can understand PEG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compiler-writers understand (mostly) YACC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEGs are easier to use than YACC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YACC needs a scanner, e.g. LEX.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEGs are all-in-one - scanner and parser, utilizing familiar REGEXP-like syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG vs. REGEXP&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is like REGEXP, only better.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you use REGEXPs, stop. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use PEGs instead.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEGs make it easy to match sequences that REGEXPs have a hard time with.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Normalization leads to automation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;First, make it repetitive and boring.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then automate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Programming consists of two basic activities:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;breathe in — pattern match&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;breathe out — rearrange and emit.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;If (2) occurs before (1) is finished, we get problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FP is an attempt to fix such problems by throwing the baby out with the bathwater.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;State is not the problem — unscoped use of State is the problem&lt;/i&gt;].&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://dl.acm.org/doi/10.1145/357094.357098&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Especially if we cheat.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The difference lies in the fact that PEGs use a stack and allow you to easily write pattern-matching subroutines.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;(2) might also involve actions&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See, also, Structured Programming, StateCharts, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Universal Datatype</summary></entry><entry><title type="html">Dataless programming language</title><link href="https://computingsimplicity.neocities.org/2021/03/02/Dataless-Programming-Language.html" rel="alternate" type="text/html" title="Dataless programming language" /><published>2021-03-02T00:00:00-05:00</published><updated>2021-03-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/02/Dataless%20Programming%20Language</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/02/Dataless-Programming-Language.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Dataless Programming Language&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-02T07:25:15Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-02T07:25:15Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bizarre&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This idea — a dataless programming language — at first, sounded bizarre to me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A programming language that had no data?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, I find the idea more useful than Javascript, C, or, dare-I-say Common Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I don't even bother with Python or Rust or …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I first learned the technique in 1980 in a compiler course using S/SL (Syntax / Semantic Language, not Secure Socket Layer).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;essence&lt;/i&gt; of S/SL goes far beyond compiler-building.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Design in Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It seem &quot;obvious&quot; that we want to build software in layers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Build-and-forget.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We just can't seem to do it, though.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies trickle throughout our code when using standard software techniques.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;To build layered software&lt;/span&gt;:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;we must remove dependencies.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;To learn how to remove dependencies, throw away all crutches. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Don't use &lt;span class=&quot;s2&quot;&gt;npm&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;make&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;asdf&lt;/span&gt;, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Don't use any language that provides a + operator (or &lt;span class=&quot;s2&quot;&gt;cons&lt;/span&gt;, or …).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Gulp.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Calls, Handles, Control Flow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Use &lt;i&gt;only&lt;/i&gt; function calls, internal and external (aka foreign, aka deferred) function calls, and use the least amount of control-flow possible. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Handles to Data&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Refer to data, but don't manipulate it directly.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This used to be called &lt;i&gt;handles&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If you need to increment a variable, call a function.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;For example, replace&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;a = b + c&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;with&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;assign (aHandle, plus (bHandle, cHandle)).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Compilers have become better. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Compilers can do function inlining. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Don't waste brain-power doing what compilers can do for you.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Loop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What is the simplest form of &lt;i&gt;loop&lt;/i&gt;?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Not &lt;i&gt;for.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Not &lt;i&gt;while.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It's:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;loop&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;exit when …&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;end loop&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Recursion is &lt;i&gt;loop&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How do you write the above recursively?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DRY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Don't waste brain-power doing DRY (Don't Repeat Yourself).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Have the computer/compiler do it for you.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Git&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;diff&lt;/span&gt; and friends know how to recognize code commonality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It's time to lift up the game a notch, and to get &lt;span class=&quot;s2&quot;&gt;git&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;diff&lt;/span&gt;/etc. to do DRY for you.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Dragon Book&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; shows how.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Software Architecture needs RY, not DRY.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cut/Copy/Paste.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Maintenance Engineering needs DRY.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maintenance Engineering is not Software Architecture.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;S/SL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Is Cordy and Roy's NiCad this kind of thing?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I haven't read up on it enough.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;https://research.cs.queensu.ca/home/cordy/software.html#NICAD&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Dataless Programming Language</summary></entry><entry><title type="html">Fractal design</title><link href="https://computingsimplicity.neocities.org/2021/03/01/Fractal-Design.html" rel="alternate" type="text/html" title="Fractal design" /><published>2021-03-01T00:00:00-05:00</published><updated>2021-03-01T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/01/Fractal%20Design</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/01/Fractal-Design.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Fractal Design&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-01T14:52:36Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-01T14:52:36Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;&lt;i&gt;Divide-and-conquer on steroids. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Everything is fractal-like.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Every problem can be split. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Use many languages, not just one. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Don’t restrict oneself to using only text-based languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Diagrams present certain ideas better than text. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Text presents other ideas better than diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Fractal Design</summary></entry><entry><title type="html">Scheme to javascript</title><link href="https://computingsimplicity.neocities.org/2021/03/01/Scheme-to-Javascript.html" rel="alternate" type="text/html" title="Scheme to javascript" /><published>2021-03-01T00:00:00-05:00</published><updated>2021-03-01T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/01/Scheme%20to%20Javascript</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/01/Scheme-to-Javascript.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Scheme to Javascript&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-01T15:08:38Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-01T15:08:38Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;See &lt;a href=&quot;https://github.com/guitarvydas/js-prolog&quot;&gt;https://github.com/guitarvydas/js-prolog&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;This is a Scheme-to-Javascript converter that is sufficient to create a PROLOG in JavaScript from Nils Holm's Prolog in 6 Slides Scheme code.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;See the development of this code in&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;(or &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Scheme to Javascript</summary></entry><entry><title type="html">Dsl in a day</title><link href="https://computingsimplicity.neocities.org/2021/02/28/DSL-in-a-Day.html" rel="alternate" type="text/html" title="Dsl in a day" /><published>2021-02-28T00:00:00-05:00</published><updated>2021-02-28T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/28/DSL%20in%20a%20Day</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/28/DSL-in-a-Day.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;DSL in a Day&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-28T16:35:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-28T16:35:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p12 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p14 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; min-height: 10.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I show how to create a small language rapidly (in about one day).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normal programming skills are required.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One doesn't need to know compiler theory to build little languages in this way.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I believe that this method can be used to enable a new class of small languages that I call SCLs — Solution Centric Languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How - Overview&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I use a PEG&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; parser — Ohm-JS.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I create an example program using the small language.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I transpile the example program into JavaScript.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I expect that the transpiler could be tweaked to emit code in just about any current PL (Programming Language).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I defer many details, in the hopes of clarifying the underlying methods.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I defer most checking (type checking, etc.) to the underlying language (in this case JavaScript), although checking could be performed by adding small amounts of effort and code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The code for this example can be found at &lt;a href=&quot;https://github.com/guitarvydas/sm/tree/master&quot;&gt;https://github.com/guitarvydas/sm/tree/master&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Other References&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I created other documents and videos as I built this particular transpiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For a summary of the method, see:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&quot;&gt;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://youtu.be/uk90Sc6XZrw&quot;&gt;https://youtu.be/uk90Sc6XZrw&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For a screencast record of the actual development process (including mistakes and backtracking), see&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://youtu.be/zaj-xO3rhRA&quot;&gt;https://youtu.be/zaj-xO3rhRA&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://youtu.be/7u0SxpS1Alc&quot;&gt;https://youtu.be/7u0SxpS1Alc&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://youtu.be/4_R6cuvkHos&quot;&gt;https://youtu.be/4_R6cuvkHos&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://youtu.be/4Ecft5yrMvE&quot;&gt;https://youtu.be/4Ecft5yrMvE&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;IMO there is no reason to restrict oneself to using only textual representations for creating languages and little languages (SCLs).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams express networks better than text.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams express composition better than text.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Text expresses mathematical functions better than diagrams.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Text expresses mathematical operations better than diagrams.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams express certain kinds of control flow better than text.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Text expresses one-in-one-out functions well.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams express one-in-many-out functions better than text.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Text does not express M-in-zero-out or zero-in-N-out functionality well.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Future&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I expect to show:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;how to build a stack-based&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; small language for building a transpiler and to show how it fits in with PEG parsing and Ohm-JS&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;how to transpile an SVG diagram to JavaScript (&lt;i&gt;the SVG source is treated as a little language that transpiles to a state machine little language that transpiles to JavaScript&lt;/i&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Need to Know - Defer, Defer, Defer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I argue that details are the bane of PLs.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most PLs (Programming Languages) require too many details and elide very little.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I do not advocate removing details, but I do advocate eliding details. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Which details need to be elided depends on the problem-at-hand and cannot be generalized.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I advocate building software in layers, like the acetates used to make cartoons at Disney.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each layer of software does only &lt;i&gt;one&lt;/i&gt; thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This attitude can be seen in the design of this little language — SCL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This little language deals with transpiling state machines into control flow, e.g. &lt;span class=&quot;s1&quot;&gt;switch statements&lt;/span&gt; — and leaves all other details, like type-checking to other software layers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most current PLs provide only a single layer — and drown the user / reader in a sea of details. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the language you use provides, say, a &quot;+&quot; operator, then it requires too much detail.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I advocate making the DI (Design Intent) clear to the reader.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My thoughts&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;on DI can be found in my essays at &lt;a href=&quot;https://guitarvydas.github.io/&quot;&gt;https://guitarvydas.github.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To achieve my recommended level of layering, one should try to defer as much as possible.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each layer should be built on the &lt;i&gt;need to know&lt;/i&gt; principle, i.e. if the information is not needed at a certain layer, then leave that information aside and use the minimum little language that allows you to express the DI at that layer.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Steps for Creating a Little Language&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Mock up the language&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Write a grammar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Test the grammar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Run the grammar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Emit JS code (semantics)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Run the transpiler&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Iterate&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Realization&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Mock up the language&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Write a grammar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Test the grammar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Run the grammar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Emit JS code (semantics)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Run the transpiler&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Iterate&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Mock up the SCL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I show how to create the SCL in &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2021/02/26/State-Machines-to-JavaScript.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The mockup emulates &lt;span class=&quot;s2&quot;&gt;Fig. 1.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-02-28-16-35-44-Images/Components-ToggleSM.png&quot; width=&quot;300px&quot; height=&quot;146px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Fig. 1 Simple 2-state State Machine&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The corresponding text version of this diagram is:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;name:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Toggle&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;inputs:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;_in&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;outputs:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;_no&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;_yes&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;machine Toggle:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;state _off:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;entry: &quot;fire (_no, true);&quot;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;on _in : next _on&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;state _on:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;entry: &quot;fire (_yes, true);&quot;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;on _in : next _off&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;default: _off&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;end machine&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Of note is the fact that the SCL does not attempt to express &lt;i&gt;everything&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;StateChart diagrams are good for expressing control-flow, whereas textual code is good for expressing details such as function calls.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Specifically, the &lt;span class=&quot;s1&quot;&gt;entry&lt;/span&gt; code represents &lt;i&gt;deferred code &lt;/i&gt;as a string of characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These characters are not processed by the SCL transpiler and are simply output to the final result.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The SCL creates only ten (10) keywords, namely:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;machine&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;name&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;inputs&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;outputs&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;end&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;state&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;entry&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;on&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;next&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Everything else is left up to the base language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case, I will be using Javascript as the base language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It should be possible transpile to most PLs (Programming Languages). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In fact, if one were to design a separate SCL layer for expressing entry, exit and transition code, then the transpiler could be made to be language-independent.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In the above, the underscore &quot;_&quot; character is in no way special — it is simply a valid character for naming identifiers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have used &quot;_&quot; as a way of distinguishing significant identifiers, such as state names, inputs and outputs.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Write a Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I used the Ohm Editor to help write and test the grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm Editor is found at &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;https://ohmlang.github.io/editor/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar is&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;SM {&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Main = StateMachine&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateMachine = NameSection InputSection OutputSection MachineSection&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;NameSection = &quot;name&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputSection = &quot;inputs&quot; &quot;:&quot; InputPinNames&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutputSection = &quot;outputs&quot; &quot;:&quot; OutputPinNames&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MachineSection = Header State+ Default Trailer&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Header = &quot;machine&quot; MachineName &quot;:&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Trailer = &quot;end&quot; &quot;machine&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Default = &quot;default&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;State = &quot;state&quot; StateName &quot;:&quot; EntrySection Transition*&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EntrySection = &quot;entry&quot; &quot;:&quot; string&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Transition = &quot;on&quot; Name &quot;:&quot; &quot;next&quot; Name&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;keyword = &quot;machine&quot; | &quot;name&quot; | &quot;inputs&quot; | &quot;outputs&quot; | &quot;end&quot; | &quot;state&quot; | &quot;entry&quot; | &quot;on&quot; | &quot;next&quot; | &quot;default&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputPinNames = nameList&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutputPinNames = nameList&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MachineName = Name&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateName = Name&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputPinReference = Name&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateReference = Name&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Name = ~keyword id&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameList = (~keyword id delim)+&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = firstId followId*&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;firstId = &quot;A&quot;..&quot;Z&quot; | &quot;a&quot;..&quot;z&quot; | &quot;_&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;followId = firstId&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\&quot;&quot; stringChar* &quot;\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringChar =&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;escapedChar &lt;span class=&quot;Apple-converted-space&quot;&gt;                               &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;anyStringChar&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;escapedChar = &quot;\\&quot; any&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;anyStringChar = ~&quot;\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;delim = (&quot; &quot; | &quot;\t&quot; | &quot;\n&quot;)+&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm Editor Usage&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm Editor is found at &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;https://ohmlang.github.io/editor/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It consists of three (3) windows (divs):&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;grammar (top left)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;examples (top right)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;parse (bottom) - consisting of a single line (the test code) and a larger div showing the resulting parse tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Enter the grammar in the grammar window.&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Enter test cases in the examples window.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each test snippet appears as a single line, at first.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Double-click on a test case to open a pop-up window that shows all of the details of the test case.&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The result of parsing is shown in the parse window.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the parse is successful, the results are shown in gray color.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Unsuccessful partial parses are shown in red.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Hovering over a parse entity highlights the grammar rule and highlights the part of the test text that is constitutes the parsed entity.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test the Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Enter partial tests in the top-right window by clicking &quot;Add&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that the parser defaults to using the first grammar rule as the top-level target.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parsing will fail if the top rule does not match the test case — in small test cases it might be necessary to insert sub-rule names as the first line of the grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run the Grammar / Parser&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS creates a parser in Javascript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To use the created parser, one needs to have access to the ohm library (e.g. via &lt;span class=&quot;s1&quot;&gt;npm&lt;/span&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm-JS documentation explains how to use the parser in a web page or at the command line.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I choose to use the command line, via &lt;span class=&quot;s1&quot;&gt;node.js&lt;/span&gt;, but Ohm-JS is certainly not restricted to being used in this manner.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My code for a full parser is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;// npm install ohm-js&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;const grammar = `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;SM {&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Main = StateMachine&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateMachine = NameSection InputSection OutputSection MachineSection&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;NameSection = &quot;name&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputSection = &quot;inputs&quot; &quot;:&quot; InputPinNames&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutputSection = &quot;outputs&quot; &quot;:&quot; OutputPinNames&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MachineSection = Header State+ Default Trailer&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Header = &quot;machine&quot; MachineName &quot;:&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Trailer = &quot;end&quot; &quot;machine&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Default = &quot;default&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;State = &quot;state&quot; StateName &quot;:&quot; EntrySection Transition*&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EntrySection = &quot;entry&quot; &quot;:&quot; string&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Transition = &quot;on&quot; Name &quot;:&quot; &quot;next&quot; Name&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;keyword = &quot;machine&quot; | &quot;name&quot; | &quot;inputs&quot; | &quot;outputs&quot; | &quot;end&quot; | &quot;state&quot; | &quot;entry&quot; | &quot;on&quot; | &quot;next&quot; | &quot;default&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputPinNames = nameList&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutputPinNames = nameList&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MachineName = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateName = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputPinReference = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateReference = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Name = ~keyword id&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameList = (~keyword id delim)+&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = firstId followId*&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;firstId = &quot;A&quot;..&quot;Z&quot; | &quot;a&quot;..&quot;z&quot; | &quot;_&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;followId = firstId&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; stringChar* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringChar =&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;escapedChar &lt;span class=&quot;Apple-converted-space&quot;&gt;                               &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;anyStringChar&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;escapedChar = &quot;\\\\&quot; any&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;anyStringChar = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;delim = (&quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;)+&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;function parse (text) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var parser = ohm.grammar (grammar);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var cst = parser.match (text);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (cst.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return {parser: parser, tree: cst};&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (parser.trace (text).toString ());&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;throw &quot;Ohm matching failed&quot;;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var fs = require ('fs');&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;function getNamedFile (fname) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (fname === undefined || fname === null || fname === &quot;-&quot;) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (0, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (fname, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var text = getNamedFile(&quot;-&quot;);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var {parser, tree} = parse (text);&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Running the parser consists of invoking it and supplying it with code to be parsed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I saved my test code in &lt;span class=&quot;s1&quot;&gt;toggle.scl&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I saved the the above parser code in &lt;span class=&quot;s1&quot;&gt;sm.js&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I invoked the parser using node at the command line:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&amp;gt; node sm &amp;lt;toggle.scl&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Wirte the Code Emitter&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;When run, the Ohm parser parses the source code and returns a data structure — a CST (concrete syntax tree — a tree representing the actual source code that was parsed&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One writes a set of rules — in Javascript, if using Ohm-JS — to transpile the CST into final output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Ohm-JS documentation calls this &quot;the semantics&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One creates a &quot;semantics&quot; object, names it, then adds transpilation rules to it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can add more than one set of rules to a semantics object.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, one set of rules might check the types and declarations of all of the incoming source code, whereas another set of rules might be used transpile the (checked) CST into final code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For purposes of this example, I show only the transpiler rules and leave out checking rules.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I avoid such details to make this example simpler to comprehend.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The set of transpilation rules are included in the code base.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I chose to call the transpilation rules &quot;js()&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The final code for the parser and transpiler is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-JS creates a parser in Javascript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To use the created parser, one needs to have access to the ohm library (e.g. via &lt;span class=&quot;s1&quot;&gt;npm&lt;/span&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm-JS documentation explains how to use the parser in a web page or at the command line.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I choose to use the command line, via &lt;span class=&quot;s1&quot;&gt;node.js&lt;/span&gt;, but Ohm-JS is certainly not restricted to being used in this manner.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My code for a full parser is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;// npm install ohm-js&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;const grammar = `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;SM {&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Main = StateMachine&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateMachine = NameSection InputSection OutputSection MachineSection&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;NameSection = &quot;name&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputSection = &quot;inputs&quot; &quot;:&quot; InputPinNames&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutputSection = &quot;outputs&quot; &quot;:&quot; OutputPinNames&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MachineSection = Header State+ Default Trailer&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Header = &quot;machine&quot; MachineName &quot;:&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Trailer = &quot;end&quot; &quot;machine&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Default = &quot;default&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;State = &quot;state&quot; StateName &quot;:&quot; EntrySection Transition*&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EntrySection = &quot;entry&quot; &quot;:&quot; string&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Transition = &quot;on&quot; Name &quot;:&quot; &quot;next&quot; Name&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;keyword = &quot;machine&quot; | &quot;name&quot; | &quot;inputs&quot; | &quot;outputs&quot; | &quot;end&quot; | &quot;state&quot; | &quot;entry&quot; | &quot;on&quot; | &quot;next&quot; | &quot;default&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputPinNames = nameList&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OutputPinNames = nameList&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;MachineName = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateName = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;InputPinReference = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;StateReference = Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Name = ~keyword id&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameList = (~keyword id delim)+&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id = firstId followId*&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;firstId = &quot;A&quot;..&quot;Z&quot; | &quot;a&quot;..&quot;z&quot; | &quot;_&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;followId = firstId&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; stringChar* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stringChar =&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;escapedChar &lt;span class=&quot;Apple-converted-space&quot;&gt;                               &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;anyStringChar&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;escapedChar = &quot;\\\\&quot; any&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;anyStringChar = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;delim = (&quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;)+&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;function parse (text) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var parser = ohm.grammar (grammar);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var cst = parser.match (text);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (cst.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return {parser: parser, tree: cst};&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (parser.trace (text).toString ());&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;throw &quot;Ohm matching failed&quot;;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var fs = require ('fs');&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;function getNamedFile (fname) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (fname === undefined || fname === null || fname === &quot;-&quot;) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (0, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return fs.readFileSync (fname, 'utf-8');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;//////////// transpiler ////////&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var nameCounter;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;function createTranspiler (parser) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = parser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;nameCounter = 0;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&quot;js&quot;,&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Main : function (_1) { return _1.js (); }, // StateMachine&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;StateMachine : function (_1, _2, _3, _4) { // NameSection InputSection OutputSection MachineSection&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var nameSection = _1.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var inputSection = _2.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var outputSection = _3.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var machineSection = _4.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;${inputSection}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;${outputSection}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;${machineSection}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;NameSection : function (_1, _2, _3) { return _3.js ().name; }, // &quot;name&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;InputSection : function (_1, _2, _3) { return _3.js (); }, // &quot;inputs&quot; &quot;:&quot; InputPinNames&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;OutputSection : function (_1, _2, _3) { return _3.js (); }, // &quot;outputs&quot; &quot;:&quot; OutputPinNames&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;MachineSection : function (_1, _2s, _3, _4) { // Header State+ Default Trailer&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var machineName = _1.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var snippets = _2s.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var defaultState = _3.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var preamble = snippets.map (snippet =&amp;gt; { return snippet.preamble; }).join ('\n');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var stateCode = snippets.map (snippet =&amp;gt; { return snippet.step; }).join ('\n');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var entryCode = snippets.map (snippet =&amp;gt; { return snippet.entry; }).join ('\n');&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var smCode = `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;${preamble}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;function ${machineName} () {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;this.state = ${defaultState};&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;this.enter = function (next_state) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;switch (next_state) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;${entryCode}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;this.step = function (event) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;switch (this.state) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;${stateCode}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return smCode;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Header : function (_1, _2, _3) { return _2.js (); }, // &quot;machine&quot; MachineName &quot;:&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Trailer : function (_1, _2) {return &quot;&quot;;}, // &quot;end&quot; &quot;machine&quot;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;State : function (_1, _2, _3, _4, _5s) {&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;// &quot;state&quot; StateName &quot;:&quot; EntrySection Transition*&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var pair = _2.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var name = pair.name;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var preamble = pair.preamble;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var entry = _4.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var transitions = _5s.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var stepcode = `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;case ${name}:&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;switch (event.tag) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;${transitions}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var entrycode = `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;case ${name}:&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;${entry}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;this.state = ${name};&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;break;`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return { preamble: preamble, step: stepcode, entry: entrycode, defaultState: &quot;&quot; };&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;EntrySection : function (_1, _2, _3) {return _3.js ()}, // &quot;entry&quot; &quot;:&quot; string&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Transition : function (_1, _2, _3, _4, _5) { // &quot;on&quot; Name &quot;:&quot; &quot;next&quot; Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;var tagName = _2.js ().name;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var nextStateName = _5.js ().name;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var transitionCode = `&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;case ${tagName}:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;this.enter (${nextStateName});&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return transitionCode;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Default : function (_1 ,_2, _3) { // &quot;default&quot; &quot;:&quot; Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var name = _3.js ().name;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return name;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;keyword : function (_1) {return _1.js ()}, // &quot;machine&quot; | &quot;name&quot; | &quot;inputs&quot; | &quot;outputs&quot; | &quot;end&quot; | &quot;state&quot; | &quot;entry&quot; | &quot;on&quot; | &quot;next&quot; | &quot;default&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;InputPinNames : function (_1) {return _1.js ()}, // nameList&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;OutputPinNames : function (_1) {return _1.js ()}, // nameList&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;MachineName : function (_1) {return _1.js ().name}, // Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;StateName : function (_1) {return _1.js ()}, // Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;InputPinReference : function (_1) {return _1.js ().name}, // Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;StateReference : function (_1) {return _1.js ().name}, // Name&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Name : function (_1) { // ~keyword id&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var name = _1.js ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;nameCounter += 1;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var constant = `const ${name} = ${nameCounter};`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return { preamble: constant, name: name };&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;nameList : function (_1s, _2s) { // (~keyword id delim)+&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var consts = _1s.js ().map (name =&amp;gt; {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;nameCounter += 1;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return `const ${name} = ${nameCounter};`;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;});&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return consts.join ('\n');&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;id : function (_1, _2s) {&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;// firstId followId*&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var name = `${_1.js ()}${_2s.js ().join ('')}` ;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;return name;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;firstId : function (_1) {return _1.js ()}, // &quot;A&quot;..&quot;Z&quot; | &quot;a&quot;..&quot;z&quot; | &quot;_&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;followId : function (_1) {return _1.js ()}, // firstId&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;string : function (_1, _2s, _3) { return `${_2s.js ().join ('')}`; }, // &quot;\\&quot;&quot; stringChar* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;escapedChar : function (_1, _2) { return _2.js (); }, // &quot;\\\\&quot; any&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;anyStringChar : function (_1) {return _1.js ();}, // ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;delim : function (_1s) {return _1s.js ().join (''); }, // (&quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;)+&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;_terminal: function () { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;});&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;return semantics;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;////////////&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var text = getNamedFile(&quot;-&quot;);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var {parser, tree} = parse (text);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;var transpiler = createTranspiler (parser);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;console.log (transpiler (tree).js ());&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;// boilerplate&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;console.log (`&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;function fire (output, value) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;console.log (&quot;Fire called: &quot; + this.toString () + &quot; output:&quot; + output.toString () + &quot; value:&quot; + value.toString ());&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;function send (component, tag, value) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;component.step ( {tag, value} );&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;function inject (component, event) {&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;component.step (event);&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;var top = new Toggle ();&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;inject (top, {tag: _in, value: true});&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;inject (top, {tag: _in, value: true});&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;inject (top, {tag: _in, value: true});&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;`);&lt;/p&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that I added some boilerplate code at the end.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This code is needed to make this simple example run.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run the Transpiler&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The transpiler is built at the command line using:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&amp;gt; node sm &amp;lt;toggle.scl &amp;gt;out.js&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To run the transpiler, one needs to invoke the node interpreter:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&amp;gt; node out&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;As mentioned earlier, Ohm-JS is not restricted to being run from the command line and can run inside a web page. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Refer to the Ohm-JS documentation &lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt; or to my essay &lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Iterate&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Once the SCL has been built for the test sample code, embellish the transpiler with more language constructs, recompile and re-run.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;PEG means Parsing Expression Grammars.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEGs are IMO, better than REGEXPs, and are just as accessible to programmers without any need for compiler theory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG libraries are available for many languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The original PEG thesis can be found at https://bford.info/pub/lang/peg/&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Stack-based languages, are currently called &quot;concatenative&quot; languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An early stack-based language is Forth.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I first saw compiler technology using a stack-based language in S/SL and PT Pascal (see my list of References).&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;PL means Programming Language.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;An AST — Abstract Syntax Tree — is a tree of the possible parses of all sources.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The CST is a subset of all possible parses.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We use the CST.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">DSL in a Day</summary></entry><entry><title type="html">State machines to javascript</title><link href="https://computingsimplicity.neocities.org/2021/02/26/State-Machines-to-JavaScript.html" rel="alternate" type="text/html" title="State machines to javascript" /><published>2021-02-26T00:00:00-05:00</published><updated>2021-02-26T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/26/State%20Machines%20to%20JavaScript</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/26/State-Machines-to-JavaScript.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Untitled&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-26T16:43:50Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-26T16:43:50Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {text-decoration: underline}
    span.s3 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I show how to transpile, manually, a simple state machine diagram to Javascript code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This essay tries to communicate the very fundamentals of this approach — State Machines and &lt;i&gt;layers&lt;/i&gt; — aka Divide&amp;amp;Conquer on steroids.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will discuss deeper issues in other essays.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Repo&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The code for these examples can be found in&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/example/tree/youtube&quot;&gt;https://github.com/guitarvydas/example/tree/youtube&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Video&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7YBKWwC2-Ww&amp;amp;list=PLVDkQ9A0-G_tLGQ3lbYxAJk_RFkCndu7a&quot;&gt;https://www.youtube.com/watch?v=7YBKWwC2-Ww&amp;amp;list=PLVDkQ9A0-G_tLGQ3lbYxAJk_RFkCndu7a&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simple State Diagram&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 shows the (simple) state machine used in this example.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-02-26-16-43-50-Images/Components-ToggleSM.png&quot; width=&quot;300px&quot; height=&quot;145px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Simple 2-state State Machine&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component Overview Layer&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The name of the Component is &quot;Toggle&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inputs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Component has 1 input:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;in&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Outputs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Component has 2 outputs:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;no&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;yes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;State Machine Overview Layer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, the Component is implemented as a State Machine.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The fact that this Component is implemented as a State Machine is only known by the IDE.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The implementation of a Component cannot be determined by the Layer 0 diagram.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This detail is left to the IDE.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The IDE knows how to read Component Implementations (in this case Layer 1).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The emphasis is on &lt;i&gt;need-to-know layers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagram (layer 0) does not need to know how Components are implemented.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler does need to know this information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We defer providing this information and push this kind of detail as far down the stack of layers as possible.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that code snippets on the diagram are just strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagram editor does not care what is inside of the strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;programmer/architect/engineer&lt;/i&gt; must send the transpiled code+strings to an appropriate compiler/interpreter/REPL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At first, we manage this kind of detail manually.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Later, scripts could be written to add automation to the process.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is important to perform all steps of the process manually at first (before adding automation), so that the process, itself, can be &quot;debugged&quot; and fleshed out.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The only way to &lt;i&gt;show &lt;/i&gt;that a process is complete is to &lt;i&gt;show&lt;/i&gt; each step of the process manually first.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first rule of Divide &amp;amp; Conquer is to defer information until the last possible instant of time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;States&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This machine has two states:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;off&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Layers&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Outermost layer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;function Toggle () {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.state = …&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.step = function (event) { … }&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.enter = function (next_state) { … }&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the outermost layer, the diagram transpiles into a block of code that&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;creates a &lt;i&gt;state variable&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;creates a &lt;i&gt;step funtion&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;creates an &lt;i&gt;entry function&lt;/i&gt; for each state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Default State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;function Toggle () {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.state = _off;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.step = function (event) { … }&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.enter = function (next_state) { … }&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the this layer, the diagram initializes that default state.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've &lt;i&gt;arbitrarily&lt;/i&gt; chosen the name &quot;_off&quot; to signify the state name.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've &lt;i&gt;arbitrarily &lt;/i&gt;chosen to represent states are integer constants.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I &lt;i&gt;could&lt;/i&gt; have used strings (say), but then I wouldn't be able to use Javascript's &lt;span class=&quot;s1&quot;&gt;switch &lt;/span&gt;statement, later.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What I really wanted is syntactic sugar for &lt;span class=&quot;s1&quot;&gt;case&lt;/span&gt;-ing on strings.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Step Function&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p8&quot;&gt;this.step = function (event) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;switch (this.state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;case _off:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;...&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;case _on:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;...&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;default: &lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;...&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At this layer, we transpile the code for the state-machine step.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It shows that we &lt;span class=&quot;s1&quot;&gt;case&lt;/span&gt; on the &lt;i&gt;state variable&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In production versions, we can choose what happens in the default case — e.g. what happens when the machine is in neither of the &lt;span class=&quot;s1&quot;&gt;case&lt;/span&gt;-ed states.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is this an error?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(probably).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is this ignored?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The choice depends on the actual problem — in some cases, we want to build state machines that deal only with certain states and in other cases, we want this to be an error.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no &lt;i&gt;one&lt;/i&gt; way to define this behaviour.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Entry Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;this.enter = function (next_state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;switch (next_state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;case _off:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fire (_no, true);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;this.state = _off;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;case _on:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fire (_yes, true);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;this.state = _on;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At this layer, we transpile (add in) the code for event-&lt;span class=&quot;s1&quot;&gt;case&lt;/span&gt;-ing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The machine breaks down into:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;examine the state&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;examine the incoming event.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In production versions, we can choose what happens in the default case — e.g. what happens when the machine is not waiting for certain events.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is this an error?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(probably).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Is this ignored?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The choice depends on the actual problem — in some cases, we want to build state machines that deal only with certain events and, in other cases, we want this to be an error.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no &lt;i&gt;one&lt;/i&gt; way to define this behaviour.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Completists&lt;/i&gt; might argue that &lt;i&gt;all&lt;/i&gt; events must be handled in some way. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is about &lt;i&gt;utility&lt;/i&gt;, not &lt;i&gt;completism&lt;/i&gt; — what features make it easier to architect/engineer/program the solution?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;We don't throw information away, we just hide it, and make it more convenient to use&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;The &lt;i&gt;architect&lt;/i&gt; is responsible for making the design clear and readable to others.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Some problems are more clear if we elide details and some problems need to show all details. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, imagine the difference between writing an account-consolidation app versus writing a robot controller.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The problems are different — and the expressions of the solutions are different.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, EEs do not draw schematics of the designs that show &lt;i&gt;all &lt;/i&gt;of the details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They tend to elide +V and GND connections.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EEs don't show the details of how chips are constructed (e.g. various layers of rust (oxides)) and so on.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, mechanical drawings often show three (3) views of the same object (front, top, side).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This might be explained as a mapping from 3D space to 2D space.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is a mapping of computer operation through the dimension of &lt;i&gt;time&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In &lt;i&gt;only some&lt;/i&gt; of the cases, e.g. for designing calculators and mathematical functions, does it make sense to elide the dimension of &lt;i&gt;time&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In other cases, e.g. the internet (networked computers), robots, etc., the dimension of &lt;i&gt;time &lt;/i&gt;is important and must not be elided.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Knowing what to elide comes with experience in a given field.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Exit Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This example does not contain any exit code for states, but the code would be similar to that of entry functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transition Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The transitions between states in this example, are coded into the step function.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It should be possible to move the transition code out into separate functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transitions from one state to another, should:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;call exit code for the current state&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;call transition code for the transition itself (code snippets associated with the arrow, instead of with the previous and new states).&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;change the state variable of the state machine (to the new state)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;call entry code for the new state&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;exit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The sequencing of a transition in a HSM (hierarchical state machine) is similar, but contains more details, e.g. a recursive descent into the current state and calling exit code from deepest-child through all of its parents, and e.g. a recursive descent into the new state and calling entry code from parent to child at each layer, and, e.g. setting the state variable to a dynamic chain of sub-states instead of setting just a single, flat, state variable.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Next State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p8&quot;&gt;this.enter = function (next_state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;switch (next_state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;case _off:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fire (_no, true);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;this.state = _off;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;case _on:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;fire (_yes, true);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;this.state = _on;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this example, I've chosen to set the &lt;i&gt;next state&lt;/i&gt; in the entry functions, as shown above.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;next state&lt;/i&gt; could be encoded in a number of other places.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Particularly, in a production version that uses HSMs (Hierarchical State Machines), the state variable would be changed as described in the Transition Functions section.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that it is possible to encode states and transitions in tables and to interpret the tables.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Snippets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At the lowest level, we insert code snippets, e.g. entry code specified as strings in the diagram:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;function Toggle () {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.state = _off;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.step = function (event) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;switch (this.state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;case _off:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;switch (event.tag) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;case _in:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;this.enter (_on);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;default:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;throw &quot;invalid input port&quot;;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;case _on:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;switch (event.tag) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;case _in:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;this.enter (_off);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;default:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;throw &quot;invalid input port&quot;;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;default:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;throw &quot;can't happen&quot;;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;this.enter = function (next_state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;switch (next_state) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;case _off:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;fire (_no, true);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;this.state = _off;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;case _on:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;fire (_yes, true);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;this.state = _on;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;break;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Defer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This set of layers follows the convention of &lt;i&gt;need-to-know&lt;/i&gt; (aka Divide &amp;amp; Conquer).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, none of the upper layers &lt;i&gt;needs&lt;/i&gt; to know anything about the actual code snippets nor about the intended target language (e.g. Javascript, Python, Rust, etc.), so we keep code snippets in strings and insert them into the generated code as late as is possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Deferred Details Layer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Many details can be deferred until the very end of the transpilation process.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By &lt;i&gt;deferring&lt;/i&gt;, I don't mean &lt;i&gt;getting rid of&lt;/i&gt;, I simply mean pushing the details aside, pushing the details out of a given notation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, the notation that we currently use for programming, elides the fact that CALL/RETURN uses a global stack.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is a convenient &lt;i&gt;notation&lt;/i&gt; for a certain class of problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is an inconvenient &lt;i&gt;notation&lt;/i&gt; for a different class of problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Neither notation is usable for &lt;i&gt;every&lt;/i&gt; kind of programming.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Neither notation deletes the basic fact that the hardware uses a global variable — one notation hides this fact, another notation makes this fact explicit. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, an accounting application makes makes certain calculations and translates these calculations into function calls that use the global stack in a synchronous manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Another application, like an internet client client that request information from a server, cannot (easily) use the concept of a stack to describe asynchronous interaction with the server — the server does not act like a mathematical function, producing an output every time that it is sent a request (for example, it might produce a result, or, it might produce a timeout).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;State Machine Name&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I've chosen to represent the name of this simple state machine as&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;a character string in the &quot;name&quot; line at layer 0&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;an identifier used to name the function in the outermost layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;State Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This simple example has only two states &quot;off&quot; and &quot;on&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've chosen to represent the states as integer constants in the code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I could have used some other representation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I considered using strings &quot;…&quot; but I knew that I was intending to use &lt;span class=&quot;s1&quot;&gt;switch&lt;/span&gt; statements which don't allow strings.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a larger, production project, I would let the transpiler emit state names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To keep things architecturally generic, I would define an SCL&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; (aka DSL) that allowed me to use a &quot;standard&quot; notation, e.g. an identifier.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I would write the transpiler (say, using a PEG parser, like Ohm-JS) and put my decision in the transpiler itself.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, if I were emitting JavaScript, I would use strings, but if I were emitting C, I might use integer constants.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the best of all worlds, I would design the transpiler so that it could generate code for any language.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Input Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This simple example has one input port - &quot;in&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The choice for naming input ports is the same as the discussion in the State Names section.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Output Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This simple example has two output ports - &quot;yes&quot; and &quot;no&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The choice for naming ports is the same as the discussion in the State Names section.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The decision for naming ports depends on the problem-at-hand.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some cases, we are willing to spend the extra design time required to use integers, and in some other cases, we don't care and strings suffice.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Deferred (Foreign) Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This simple example invokes one routine — &lt;i&gt;fire() —&lt;/i&gt;to do work that is not specified by the diagram.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is another example of &lt;i&gt;need-to-know&lt;/i&gt; design. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most of the software layers do not need to understand the code contained in the deferred code snippets.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, the text string code snippets represent Javascript function calls.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The strings could contain Python code, Rust code, or erroneous code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The upper layers do not need to know this detail.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the best of all worlds, I might choose to design a small language (an SCL)&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; for describing operations that appear in code snippets.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this way, I could defer the decision of which target language to use until (even) later, as long as the SCL generates code in my chosen target language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Drakon editor - &lt;a href=&quot;http://drakon-editor.sourceforge.net/&quot;&gt;http://drakon-editor.sourceforge.net/&lt;/a&gt; - does something similar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It allows the architect (engineer, programmer, etc.) to draw diagrams and to defer the decision about which language will be emitted.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Drakon editor has a menu for selecting the target language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Code snippets in the Drakon editor are language-specific strings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If one writes snippets in one language, then tells Drakon to emit code in some other language, it will emit the code but the compiler will throw errors.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Kernel&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We use a small library to enable operations in our State Machines.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call this library the &lt;i&gt;kernel&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case, the kernel is very small, consisting of one function:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;function inject (component, event) {&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;component.step (event);&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kernel library function — &lt;i&gt;inject — &lt;/i&gt;injects an event into to the state machine and then triggers the state machine into action.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a production version, the library will be slightly larger.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The main API of the library is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;function send &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(component, event) {…}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;function inject (component, event) {…}&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;send()&lt;/i&gt; function does mostly what the &lt;i&gt;inject()&lt;/i&gt; function does, but assumes that the state machine is already running.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a production version, components will each have one input queue and one output queue and the kernel functions will enqueue and dequeue events.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In a production version of a system, components will be run by a single &lt;i&gt;Dispatch()&lt;/i&gt; routine, breaking the synchronous behaviour of CALL/RETURN.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is discussed elsewhere.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Main&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;var top = new Toggle ();&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;inject (top, {tag: _in, value: true});&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;inject (top, {tag: _in, value: true});&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;inject (top, {tag: _in, value: true});&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In the mainline routine, we need to perform the rituals, required by our target language, to cause the state machine to &quot;run&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this case the state machine is coded in Javascript.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We need to&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;Create an instance of the state machine&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Inject events into the state machine and observe the outputs on the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Execution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To execute the machine, in the code repo, we need to&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;Strip the org-mode comments, leaving pure Javascript&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Invoke the javascript.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;In this case, I have created a &lt;i&gt;bash&lt;/i&gt; script that does both of the above.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is in&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/example/blob/blog/run.bash&quot;&gt;https://github.com/guitarvydas/example/blob/blog/run.bash&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;(&lt;a href=&quot;http://github.com/guitarvydas/example&quot;&gt;github.com/guitarvydas/example&lt;/a&gt; branch &quot;blog&quot;, file run.bash)&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compilation vs. Interpretation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is possible to tune the implementation of state machines by transpiling the state diagrams into code or transpiling them into tables to be interpreted.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Everything is an interpreter.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Under normal circumstances, binary object code is interpreted by the hardware, e.g. using microcode.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler is interpreted in two stages&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;Convert the assembler source code into binary code&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Interpret the binary code using hardware.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Compilers are interpreters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They interpret code in multiple layers:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;Transpile source code to assembler.&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Convert assembler source code to binary code.&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Interpret binary code using hardware.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Likewise, type checkers — for example — are interpreters, too.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They interpret type annotations and &quot;simplify&quot; the incoming source into assembler (binary).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &quot;simplified&quot; code is interpreted by the hardware and does not incur the cost of re-calculating types of certain data structures at runtime (&quot;runtime&quot; means: interpretation by hardware).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Compilers are interpreters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compilers front-load certain checks and code sequences in the hope that such checks and sequences can be eliminated from the binary code, allowing for &quot;more efficient&quot; interpretation of the binary code by the hardware.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Likewise, state machines can be transpiled directly into binary, transpiled into assembler, transpiled into code for various languages (e.g. Javascript, Python, etc.) or transpiled into tables that are interpreted by underlying libraries (written in, say, Javascript, Python, etc.).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;XState is a library that supports state machines (StateCharts, to be exact) in Javascript programs.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCXML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;SCXML is a specification of XML for StateCharts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SCXML&quot;&gt;https://en.wikipedia.org/wiki/SCXML&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;StateCharts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss Statecharts in&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/StateCharts.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/StateCharts.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Basically, I think that the Statechart notation is too complicated.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I think that Statecharts can be broken down into two separate notations:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;HSM — Hierarchical State Machines&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Concurrency — Box-and-arrow diagrams, Arrowgrams, FBP, Bash, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(More on these issues in other blogs).&lt;/li&gt;
  &lt;hr&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;This is a pet peeve of mine.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is often said that FP is a good way to write concurrent programs, but only toy examples are given.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Trying to build full production systems results in a myriad of problems and overlooks the elephant in the room.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, it is more informative to draw a network on a whiteboard than it is to describe a network using only text (I show that it is possible to transpile diagrams to code). &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Javascript's tortuous callback syntax is a result of this kind of stunted thinking (text-only, instead of using diagrams mixed with text). &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;CPS is just GOTOs on steroids.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Promises are based on threads, and threads are closures.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;SCL means Solution Centric Language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Similar to a DSL, but more focussed on the problem-at-hand.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;This idea comes from the S/SL language. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See References on my blog https://guitarvydas.github.io/2021/01/14/References.html.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;SCL mean Solution Centric Language.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Don't worry if this doesn't make sense yet.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Running&quot; refers to the idea that there is a distinguished Dispatcher() meting out bits of control-flow time to closures.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will discuss this elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Untitled</summary></entry><entry><title type="html">Statecharts (again)</title><link href="https://computingsimplicity.neocities.org/2021/02/25/statecharts-(again).html" rel="alternate" type="text/html" title="Statecharts (again)" /><published>2021-02-25T00:00:00-05:00</published><updated>2021-02-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/25/statecharts%20(again)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/25/statecharts-(again).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;statecharts (again)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-25T23:56:09Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-25T23:56:09Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li1&quot;&gt;I was taught about state machines in EE school, but, they said, you couldn't make practical use of SM's because of the &quot;state explosion&quot; problem (Fig. 20 of Harel's paper shows a very simple example of &quot;state explosion&quot;).&lt;/li&gt;
  &lt;li class=&quot;li1&quot;&gt;Harel's notation conquers the &quot;state explosion&quot; problem.&lt;/li&gt;
  &lt;li class=&quot;li1&quot;&gt;Harel's notation then goes one step too far and winds concurrency into the notation (&quot;orthogonal states&quot;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(2) is explicit - you draw lines (curvy arrows) to show transitions&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(3) is implicit - you have to read the code to see who-depends-on-what.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Remove (3) and you have a wonderful notation that I call HSM's (Hierarchical State Machines).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Move (3) into its own notation and you get &quot;network diagrams&quot; (aka &quot;box and arrow diagrams&quot;), and the FBP-like stuff that I build (currently called &quot;Arrowgrams&quot;, formerly known as &quot;bmfbp&quot; (for Bare Metal FBP)).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;(2) and (3) are, both, simple notations. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;When you try to combine the two notations, you get accidental complexity. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Harel wrote a follow-on paper about the micro-semantics of his notation and told us that everything must work in a lock-step manner. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Arrowgrams gives you concurrency in a simple form (&quot;multitasking is easy&quot; :-)). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;HSMs give you anti-state-explosion.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I built a full Harel Statechart textual language (some 8 passes, iirc), then backed off and simplified ((2) hierarchical state machines and (3) a message-passing kernel).&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;If you think in terms of communicating-state-machines, you brush up against Actors-like thinking.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;further: YACC dealt with the &quot;state explosion&quot; problem, too, but, over-specified (IMO) and didn't allow users to control the explosion handling in an explicit manner]&lt;/i&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;The kernel is simple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The current implementation is in JavaScript (this is a way to show just how simple this can be - if you can do it in JS, you can do it in any language :-).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I, also, have done it in HTML+JS).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See, also https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html and https://guitarvydas.github.io/2021/01/16/HTML-Components-Arrowgrams.html.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">statecharts (again)</summary></entry><entry><title type="html">The stack is a global variable (again)</title><link href="https://computingsimplicity.neocities.org/2021/02/25/The-Stack-is-a-Global-Variable-(again).html" rel="alternate" type="text/html" title="The stack is a global variable (again)" /><published>2021-02-25T00:00:00-05:00</published><updated>2021-02-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/25/The%20Stack%20is%20a%20Global%20Variable%20(again)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/25/The-Stack-is-a-Global-Variable-(again).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Stack is a Global Variable (again)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-25T23:53:17Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-25T23:53:17Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;The Stack is a global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The reason that programmers feel that &quot;multitasking is hard&quot; is due to the accidental complexity caused by using an implicit global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Causes of Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;This feeling that &quot;multitasking is hard&quot; has at least two causes:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not making &lt;i&gt;everything&lt;/i&gt; explicit.&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the case of CALL/RETURN-based programs (e.g. just about every program today), the &lt;i&gt;stack&lt;/i&gt; is implicit and hidden under the covers by most PLs (programming languages).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To make matters worse, hardware supports and encourages the use of the &lt;i&gt;stack&lt;/i&gt; as a global variable.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Using the wrong paradigm.&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most PLs encourage the use of the &lt;i&gt;synchronous&lt;/i&gt; paradigm (e.g. CALL/RETURN using an implicit stack).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Memory sharing is encouraged in the synchronous paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multitasking, though, is inherently &lt;i&gt;asynchronous&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Building multitasking in a &lt;i&gt;synchronous&lt;/i&gt; paradigm is possible, but leads to accidental complexity, e.g. &lt;i&gt;thread safety &lt;/i&gt;concerns arise only due to the sharing of memory, CALL/RETURN uses a global variable, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;synchronous&lt;/i&gt; paradigm is useful for building &lt;i&gt;calculators&lt;/i&gt; - functions with exactly one set of synchronous inputs and exactly one set of synchronous outputs.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Calculators are functions that expunge the notion of &lt;i&gt;time&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the other hand, &lt;i&gt;asynchronous&lt;/i&gt; computation, e.g. the internet, involves functions of &lt;i&gt;time&lt;/i&gt; (aka &lt;i&gt;history&lt;/i&gt;) and, generally, does not share memory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the &lt;i&gt;asynchronous&lt;/i&gt; paradigm, inputs and outputs are not synchronized and may be delivered at different points in time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Additionally, one set of inputs does not guarantee only one set of outputs - &lt;i&gt;asynchronous&lt;/i&gt; components might produce 0, 1, or more outputs for every input.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Timeouts must be made explicit, lest they appear to generate outputs when there have been 0 inputs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Stack is a Global Variable (again)</summary></entry><entry><title type="html">Processes are state machines</title><link href="https://computingsimplicity.neocities.org/2021/02/25/Processes-Are-State-Machines.html" rel="alternate" type="text/html" title="Processes are state machines" /><published>2021-02-25T00:00:00-05:00</published><updated>2021-02-25T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/02/25/Processes%20Are%20State%20Machines</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/02/25/Processes-Are-State-Machines.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Processes Are State Machines&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-02-25T23:53:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-02-25T23:53:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Processes are state machines.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Processes are most often created by operating systems.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Dig deep into the operating system's documentation and you will, inevitably, find a state diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Processes Are State Machines</summary></entry></feed>