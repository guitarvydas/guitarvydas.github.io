<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-01-12T23:21:21-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Restricted thinking programming editors</title><link href="https://computingsimplicity.neocities.org/2021/01/12/Restricted-Thinking-Programming-Editors.html" rel="alternate" type="text/html" title="Restricted thinking programming editors" /><published>2021-01-12T00:00:00-05:00</published><updated>2021-01-12T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/12/Restricted%20Thinking%20-%20Programming%20Editors</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/12/Restricted-Thinking-Programming-Editors.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Restricted Thinking - Programming Editors&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-12T16:41:45Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-12T16:41:45Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Programming Editors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Our technology - namely programming editors - restrict our thinking in many ways, so pervasive that we don't even notice.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, most of our PLs (Programming Languages) are constrained by our 1950's notions of what a programming editor should be.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grids of Non-Overlapping Cells&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, our editors treat programs as grids of non-overlapping cells.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We put binary codes into each cell.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We arrange cells in rows and columns.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Cell must not overlap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We call these cells &lt;i&gt;characters&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Overlapping Cells&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine if cells were allowed to overlap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We might wish to assign an (x,y) point to each cell instead of just a (row,column).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(x,y) would be based on pixels, or vectors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(row, column) is always based on a fixed grid.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One Input One Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Current programming languages are all based on the pen-and-paper-based concept of &lt;i&gt;functions.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Functions get their input from parameters - all at the same time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Inputs are all delivered synchronously at the time that a function is invoked.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Functions produce all of their outputs at once - as return values.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Return values are returned synchronously to the caller.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What happens if we want to return something else?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We invent a kludge called &lt;i&gt;exceptions.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What if our function runs forever, like a &lt;i&gt;server&lt;/i&gt; on the internet?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Uh, we force-fit the concept(s) into a restricted paradigm, using languages that can't express such concepts conveniently.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Sizing Cells&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine if cells were not all the same size.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We might wish to resize cells, making some cells larger than other cells.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We might wish to show the boundaries of cells.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diff, git, github, etc.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine if our editors implemented smart highlighting and elision.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using smart highlighting coupled with &lt;i&gt;diff,&lt;/i&gt; we could mark regions of code that were the same.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automatic D.R.Y.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Maybe we would ask our editors to clone lumps of code, making the clones read-only, or, read-write, allowing multiple views on the same piece of mutable code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe we wouldn't need to bake such concepts into our languages (e.g OOP).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Maybe our smart editors would allow us to show languages using more than one syntax for each language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A write-able version, click, a read-able version.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Same language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At present, we bake such ideas into the syntax of languages and bend to the whims of language designers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, Pascal-like languages favor write-ability, giving us constructs like if …then … else … end if - which allows syntax checkers to go to town on our code, but, we are allowed only that one syntax for the language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;As another example, Lisp favors read-ability, but, every construct ends in the same way, using the character &quot;)&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This makes the code easier to read (less syntactic sugar, more to see all at once) but thwarts syntax checkers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Syntax checkers are only useful for a short while at the beginning of writing each program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Once the syntax has been checked, we might wish to turn off syntax checking and all of the syntactic sugar that makes it possible, letting us savour more of the essence of the code in one glance.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Nesting&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We keep re-discovering the big win for programming. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Nesting. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Scoping. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Eliding detail.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The scourge of &lt;i&gt;global variables&lt;/i&gt; was conquered using nesting, i.e. using scoped local variables.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The scourge of GOTOs was conquered using nesting.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Structured Programming taught us to nest programming constructs and to not allow them to interleave.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams show nesting better than text does.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DaS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;DaS stands for &lt;i&gt;Diagrams as Syntax.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DaS is &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; &lt;i&gt;visual programming.&lt;/i&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DaS adds only a few extra concepts to our languages - boxes, arrows, ellipses, text.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Visual Programming seems to deal with &lt;i&gt;pixels&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dealing with pixels is hard.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dealing with only a few more graphical entities is much easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DaS is not Unicode.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Syntactic atoms of DaS are not always the same size, not arranged on a grid, and can overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Unicode works with cells, grids of cells, and imposes a non-overlapping constraint on cells.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;DRY means Don't Repeat Yourself.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A good idea for code maintenance.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A poorer idea for expressing code Architecture.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;YMMV.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You might disagree with my notion of what is readable and what is writable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That's not the point here.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Structured Programming also professed the use of single-entry single-exit.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We broke that rule by introducing exceptions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And, worse, we allow exceptions to be based on a runtime chain of dynamic dependencies (The Stack).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Maybe we would have designed exceptions differently if we looked at diagrams of our code, instead of using grid editors.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Restricted Thinking - Programming Editors</summary></entry><entry><title type="html">Transpiling diagrams to code 101</title><link href="https://computingsimplicity.neocities.org/2021/01/12/Transpiling-Diagrams-to-Code-101.html" rel="alternate" type="text/html" title="Transpiling diagrams to code 101" /><published>2021-01-12T00:00:00-05:00</published><updated>2021-01-12T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/12/Transpiling%20Diagrams%20to%20Code%20101</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/12/Transpiling-Diagrams-to-Code-101.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Transpiling Diagrams to Code 101&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-12T23:20:40Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-12T23:20:40Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 16.0px Times; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff; min-height: 19.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000}
    p.p12 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Times; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff; min-height: 16.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 16.0px Times; color: #000000; -webkit-text-stroke: #000000; background-color: #ffffff}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 16.0px Times; -webkit-text-stroke: #000000; min-height: 19.0px}
    p.p16 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p17 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p19 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p20 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p21 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 16.0px Times; font-kerning: none; color: #000000; background-color: #ffffff; -webkit-text-stroke: 0px #000000}
    span.s4 {font-kerning: none}
    span.s5 {font-kerning: none; background-color: #ffffff}
    span.s6 {color: #000000; -webkit-text-stroke: 0px #000000}
    span.s7 {text-decoration: underline ; font-kerning: none}
    span.s8 {text-decoration: underline}
    span.s9 {font: 12.0px Helvetica}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 36.0px 0.0px 36.0px 0.0px; text-align: center; font: 28.0px Helvetica&quot;&gt;Introduction&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I show the very basics of transpiling a diagram to code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call this DaS - &lt;i&gt;Diagrams&lt;/i&gt; &lt;i&gt;as Syntax.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you want to follow along, see Appendix - Getting Started.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There's nothing new here - just a combination of already-existing technologies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This should look ridiculously simple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You should find yourself yawning through most of this. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If it doesn't seem simple enough, I haven't done my job well. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am happy to answer questions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We see a very simple diagram on Tab 101.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The diagram consists of two boxes, joined by an arrow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-12-23-20-40-Images/simple.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;convert this diagram to text, from .drawio to .xml format&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;convert the .XML to a JavaScript object&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;extract the interesting stuff from the object, and leave the rest behind (&quot;syntactic noise&quot;)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;normalize the interesting stuff into a &lt;i&gt;factbase&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;normalize the graphics - glean bounding boxes for every box&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;stop (that's enough for lesson 101).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We will do a lot of this manually. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;We can do all of this with just a text editor.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I will suggest technologies (from direct experience) that automate the boring, repetitive edits.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My goal is to automate everything and not to have to use an editor.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You should see a header (mxfile host=&quot;Electron&quot;…) followed by at least one &lt;span class=&quot;s2&quot;&gt;&amp;lt;diagram&amp;gt;…&amp;lt;/diagram&amp;gt;&lt;/span&gt; in compressed form.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Copy the compressed stuff inside of the &amp;lt;diagram&amp;gt; element (zZRNT…A==) and paste it into the drawio diagram decoder &lt;a href=&quot;https://jgraph.github.io/drawio-tools/tools/convert.html&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://jgraph.github.io/drawio-tools/tools/convert.html&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Hit the &lt;i&gt;decode&lt;/i&gt; button (at the bottom).&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s5&quot;&gt;You should see human-readable XML, e.g. &lt;/span&gt;&lt;span class=&quot;s6&quot;&gt;&amp;lt;mxGraphModel … &amp;gt; … &amp;lt;/mxGraphModel&amp;gt;&lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Copy the XML and paste it into a local file.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s5&quot;&gt;I saved my copy in &lt;/span&gt;&lt;span class=&quot;s6&quot;&gt;decoded.xml&lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s7&quot;&gt;Further reading:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://drawio-app.com/extracting-the-xml-from-mxfiles/&quot;&gt;https://drawio-app.com/extracting-the-xml-from-mxfiles/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://jgraph.github.io/mxgraph/docs/manual.html&quot;&gt;https://jgraph.github.io/mxgraph/docs/manual.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;0&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;1&quot; parent=&quot;0&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;irZAPYOEPGDIWvvxZr80-1&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;irZAPYOEPGDIWvvxZr80-2&quot; target=&quot;irZAPYOEPGDIWvvxZr80-3&quot; edge=&quot;1&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/mxCell&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;irZAPYOEPGDIWvvxZr80-2&quot; value=&quot;Box 1&quot; style=&quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;mxGeometry x=&quot;40&quot; y=&quot;120&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/mxCell&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;mxCell id=&quot;irZAPYOEPGDIWvvxZr80-3&quot; value=&quot;Box 2&quot; style=&quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;mxGeometry x=&quot;280&quot; y=&quot;120&quot; width=&quot;120&quot; height=&quot;60&quot; as=&quot;geometry&quot;/&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/mxCell&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This can be converted using an editor (yawn), into Javascript:&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;const graphModel =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;{ element: &quot;mxGraphModel&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;dx: 940,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;dy: 670,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;grid: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;gridSize: 10,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;guides: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;tooltips: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;connect: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;arrows: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;fold: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;page: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;pageScale: 1,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;pageWidth: 1100,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;pageHeight: 850,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;math: 0,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;shadow: 0,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;root: [&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{ element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;id: &quot;yqBiCKyfxECIX-FCSyxT-0&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{ element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;id: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;parent: &quot;yqBiCKyfxECIX-FCSyxT-0&quot;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{ element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;id: &quot;yqBiCKyfxECIX-FCSyxT-4&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;style: &quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;edge: &quot;1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;parent: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;source: &quot;yqBiCKyfxECIX-FCSyxT-2&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;target: &quot;yqBiCKyfxECIX-FCSyxT-3&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;content: {&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;element: &quot;mxGeometry&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;relative: &quot;1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;as: &quot;geometry&quot;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;element : &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id: &quot;yqBiCKyfxECIX-FCSyxT-2&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;value: &quot;Box 1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;style: &quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;vertex: &quot;1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;parent: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;content: {&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;element: &quot;mxGeometry&quot;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;x: &quot;40&quot;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;y: &quot;120&quot;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;width: &quot;120&quot;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;height: &quot;60&quot;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;as: &quot;geometry&quot;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;},&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;element: &quot;mxCell&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;id: &quot;yqBiCKyfxECIX-FCSyxT-3&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;value: &quot;Box 2&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;style: &quot;rounded=1;whiteSpace=wrap;html=1;align=center;&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;vertex: &quot;1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;parent: &quot;yqBiCKyfxECIX-FCSyxT-1&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;content: {&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;element: &quot;mxGeometry&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;x: &quot;280&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;y: &quot;120&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;width: &quot;120&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;height: &quot;60&quot;,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;as: &quot;geometry&quot;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;};&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I stored the converted file in &lt;span class=&quot;s2&quot;&gt;graphmodel.js&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s8&quot;&gt;Further reading:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The conversion from XML to JS can be done automatically. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This &lt;span class=&quot;s8&quot;&gt;looks&lt;/span&gt; like a job for REGEXP, but it isn't. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP creates a &lt;i&gt;finite automata&lt;/i&gt;, but we need a &lt;i&gt;pushdown finite automata&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a job for [&lt;i&gt;rip open shirt:&lt;/i&gt;] &lt;span class=&quot;s8&quot;&gt;PEG&lt;/span&gt; - Parsing Expression Grammars. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't worry about the fancy name - this stuff is as simple to use as REGEXP, but better.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We should be able to write a &lt;i&gt;grammar&lt;/i&gt; (pattern match) for the mxGraphModel XML and a set of &lt;i&gt;semantics &lt;/i&gt;(i.e. code) that returns a Javascript object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are a lot of implementations of PEG for various languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I happen to use Ohm-js when I use Javascript and ESRAP when I use Common Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;REBOL's &lt;i&gt;parse&lt;/i&gt; is PEG-like.&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can skip most of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We just want to know what the boxes are and what the arrows are.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to know &lt;i&gt;where&lt;/i&gt; the boxes and arrows are.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to know what boxes are connected by arrows.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The source box and the target box.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We, probably, want to remember the parent/child relationships of these graphical entities.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that we are discussing DaS (&lt;i&gt;diagrams as syntax&lt;/i&gt;). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many people confabulate the notion of &lt;i&gt;visual programming&lt;/i&gt; with understanding pixels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We don't want to go as deep.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We don't care about pixels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We only want to add a few items to our grab-bag - boxes, arrows, text.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will want to store this &quot;want to know&quot; stuff in some sort of data thingie - a database, a data structure, or something even easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I favour the idea of &lt;span class=&quot;s8&quot;&gt;factbases&lt;/span&gt; instead of using heavy-weight concepts like databases and data structures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We discovered how to normalize code very early on - we used a notation called &lt;i&gt;assembler&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler is code represented as triples - relation, subject, object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;MOV R0, R1&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The relation is MOV.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The subject is R0.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The object is R1.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the idea of &lt;i&gt;triples&lt;/i&gt; sounds familiar, it's because you've already heard of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;XML is triples&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Semantic Web is triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;So, what is the &lt;i&gt;normalized&lt;/i&gt; format of data?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Triples!&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to put data into the form: relation, subject, object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Conveniently, this already exists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a function of two parameters:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;relation(subject,object);&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;fn(id,x);&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Why is this a &lt;i&gt;Good Thing&lt;/i&gt;? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Well, because we impose &lt;b&gt;no&lt;/b&gt; structure on the data. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the data has no structure, then it is easy to parse (in an automatic manner). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If the data has no structure, then it can be used for other kinds of things.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Things that the original programmer never thought of.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that organizing data into a data structure at compile time is just an optimization.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the 1950's, it seemed like a good idea to preserve CPU power by pre-compiling data into data structures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Today, CPUs are cheap and abundant, we can waste CPU time building data structures at runtime.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We don't have to worry about pre-compiling things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How shall we waste CPU time? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By performing exhaustive search.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By using backtracking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Backtracking was &lt;i&gt;verbotten&lt;/i&gt; in the 1900's, but no more.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I know, from experience, that I will be using PROLOG for doing exhaustive search.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, I will put a period ('.') at the end of each function and call this a &lt;i&gt;fact&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;fn(id,x).&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Caution: use the principles of Shuhari here.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Shu: don't expand the definition of &quot;x&quot; in the above.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is one thing and one thing only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, imagine that I have a rectangle R, with top-left (&lt;i&gt;x,y&lt;/i&gt;) and a width, &lt;i&gt;w&lt;/i&gt;, and a height, &lt;i&gt;h&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In factbase notation, this becomes&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;nil&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;top_x(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;x&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;top_y(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;y&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;width(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;w&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;height(&lt;i&gt;R&lt;/i&gt;,&lt;i&gt;h&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Resist the urge to do something like:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;x,y,w,h&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;or&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;rectangle(&lt;i&gt;R&lt;/i&gt;,nil).&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;top(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;x,y&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;wh(&lt;i&gt;R&lt;/i&gt;,[&lt;i&gt;w,h&lt;/i&gt;]).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will use CPU power&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; to glean various relationships about the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, one of the first relationships will be to create a &lt;i&gt;bounding box&lt;/i&gt; for each rectangle (we will see this later).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPU is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory is cheap.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't waste brain power.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't try to predict the various ways in which data will be structured.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG already knows how to deal with triples of the above form. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG knows how to search triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You know how to search triples (loops within loops within …). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It gets boring after a while. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When it gets boring, automate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation done before you know what you're doing is called &lt;i&gt;premature optimization&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is best to grow the factbase with new facts, rather than culling facts from the factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This allows maximum flexibility during design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Culling is just an optimization and should be left to Optimization Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s8&quot;&gt;Recap:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is normalized into triples, e.g. &lt;span class=&quot;s2&quot;&gt;MOV R0,R1&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data is normalized into triples, e.g. &lt;span class=&quot;s2&quot;&gt;top_x(&lt;i&gt;R,x&lt;/i&gt;)&lt;/span&gt;&lt;i&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Factbases &lt;/i&gt;are the normalized (triple-ified) form of data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s8&quot;&gt;Further Reading:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;see the Appendix for tools like gprolog, JS prolog, miniKanren, AWK.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yawn.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Look at &lt;span class=&quot;s2&quot;&gt;main.js&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It contains the following code:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createParentFact (element);&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createNameFact (element);&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createArrowFact (element);&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;createRectFact (element);&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It appears that we are interested in only 4 things - and we throw away the rest of the graphical details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Later, we will deal with text inside of boxes and stuff like that.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need to write a bit of - very easy - JS code to extract the interesting information.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to do as little as possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, we want to wrap and isolate that bit and never have to think about it again.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first step in transpiling a diagram is to normalize all of the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This will allow us to create more-and-more interesting interpretations of the data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have put the factbase into a form that is acceptable to PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YMMV.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I use PROLOG to do exhaustive searches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;You might want to use something else, like miniKanren (core.logic in Clojure-speak) or just loops within loops in your favourite language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I have created a PROLOG for Javascript using Nils Holm's Prolog Control In 6 Slides&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the appendix.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was an exercise in transpiling from one language to another using PEG - Scheme to JS using ohm-js.]&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My exhaustive search, written in gprolog, is:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;% calculate_bounding_boxes :-&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;bb(ID,Left,Top,Right,Bottom) :-&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;x(ID, X),&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;y(ID, Y),&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;width(ID,W),&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;height(ID,H),&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Left is X,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Top is Y,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Right is X + W,&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;Bottom is Y + H.&lt;/p&gt;
&lt;p class=&quot;p17&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Prolog, identifiers that begin with a capital letter are &quot;logic variables&quot; - basically holes that get filled in by the exhaustive search engine.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Everything else begins with a lower-case letter.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I could have cut out half of the code, but I wanted to be excruciatingly clear.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This says:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;match any ID that has an X value&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;and&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;has a Y value&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;and&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;has a width value&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;and&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;has a height value&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;then&lt;/p&gt;
&lt;p class=&quot;p16&quot;&gt;calculate the Left/Top/Right/Bottom values of the bounding box and leave these values in the logic variables Left, Top, Right and Bottom.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Clearly, we could have done this using Loops (recursion) in our favourite language, but the code would not have been so concise.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Another PROLOG file - &lt;span class=&quot;s2&quot;&gt;main.pl&lt;/span&gt; - uses the &lt;span class=&quot;s2&quot;&gt;forall&lt;/span&gt; function of PROLOG to perform the search over-and-over again and performs the magic incantations to output the results as new facts for the factbase.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specifically, the new facts are poured out into &lt;span class=&quot;s2&quot;&gt;stderr &lt;/span&gt;where the new facts are glued onto the input factbase as the result.&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will expand, later.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I hope that the basics have been easy to understand and to riff on, after one goes beyond the Shu and Ha phases of Shuhari.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There's nothing new here - just a combination of already-existing technologies.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p2&quot;&gt;2. git checkout 101&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;3. See the essay in &quot;Transpiling Diagrams to Code 101.md/Transpiling Diagrams to Code 101.md&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;4. Get Ohm-js from &lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;&lt;span class=&quot;s2&quot;&gt;https://github.com/harc/ohm&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;and put a copy of ohm.js alongside of this code.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;5. Examine and run &lt;span class=&quot;s2&quot;&gt;run.bash&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We should be able to decode .drawio files using Javascript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At time of writing, I haven't figured out how to do this using, say, node.js.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Suggestions welcome.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I expect to write about this transformation step in later essays.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is better than REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use PEG instead of REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(the HTML version doesn't have page numbers.)&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-js: (PEG for Javascript)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;ESRAP: (PEG for Common Lisp)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/scymtym/esrap&quot;&gt;https://github.com/scymtym/esrap&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG is just a pattern matcher.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG has a convenient syntax for pattern matching.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Identifiers that begin with an upper-case letter are &quot;logic variables&quot; - i.e. match-capturing doo-dads.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Everything else begins with lower-case letters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP uses a horrible syntax for match-capturing - e.g. '\(…\)'.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PROLOG uses a less-horrible syntax for this. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP works on characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PROLOG works on higher-level things.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG becomes scary if you try to use it for &lt;i&gt;everything&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A single paradigm does not suit all problems, nor all parts of a problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get into the habit of using many paradigms for a single solution&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get into the habit of building many little languages for a single solution.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(I call these SCLs - Solution Centric Languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SCLs are like DSLs, but more focussed and less hassle to build (if you use PEGs)).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://www.gprolog.org/&quot;&gt;http://www.gprolog.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/js-prolog&quot;&gt;https://github.com/guitarvydas/js-prolog&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(In Clojure, this is called core.logic).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.gnu.org/software/gawk/manual/gawk.html&quot;&gt;https://www.gnu.org/software/gawk/manual/gawk.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I first used AWK to build a peephole optimizer for a C compiler I wrote (around 1980/1981).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The C code produced normalized code - aka assembler.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://drawio-app.com/extracting-the-xml-from-mxfiles/&quot;&gt;https://drawio-app.com/extracting-the-xml-from-mxfiles/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s4&quot;&gt;MxGraph User Manual:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://jgraph.github.io/mxgraph/docs/manual.html&quot;&gt;https://jgraph.github.io/mxgraph/docs/manual.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p20&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;XML has too much syntax to be easily readable.&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; exhaustive search&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; &lt;/span&gt;Only tyrants tell you what to think.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Be free.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let others be free.&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;YMMV means Your Mileage Might Vary.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It means this even in metric countries.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s9&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; That's called &lt;i&gt;The Principle of Superposition.&lt;/i&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;i&gt;Superposition is taught in other Engineering disciplines.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I learned about it in EE school, tangled up with Kirchoff's Laws.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Superposition makes EE a lot easier to design, even though everything in a circuit is concurrent.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The last time I saw Superposition at work in software was when I looked at a bash script&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; &lt;/span&gt;Obviously, we could use a language that helped us add facts to the input factbase.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I haven't figured out how to do this easily in PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;But, why would I care?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I can leave the cleanup to someone who specializes in Maintenance Engineering. [I have figured out how to do this not-so-easily in PROLOG, but it ain't pretty, see https://github.com/bmfbp/bmfbp].&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s9&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Semantic action is just a fancy word that you may ignore.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In ohm-js, a semantic action is a lump of Javascript that where pattern-matching-capture is passed in as function parameters.&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;[8]&lt;/a&gt; &lt;/span&gt;Lispers &quot;get&quot; this idea.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That's why they love Lisp and the freedom of thought that it brings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Javascript comes close (first-class functions, dynamic typing).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Static typing is just a DSL that uses dynamic typing and pushes all of the interpretation of types to the so-called &quot;compile time&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Compile time&quot; is an arbitrary concept (e.g. loaders finalize code at the beginning of runtime, even when static typing is used).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Transpiling Diagrams to Code 101</summary></entry><entry><title type="html">Induction vs recursion</title><link href="https://computingsimplicity.neocities.org/2021/01/11/Induction-vs-Recursion.html" rel="alternate" type="text/html" title="Induction vs recursion" /><published>2021-01-11T00:00:00-05:00</published><updated>2021-01-11T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/11/Induction%20vs%20Recursion</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/11/Induction-vs-Recursion.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Induction vs Recursion&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-11T15:47:56Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-11T15:47:56Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Induction vs Recursion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Induction is bottom-up.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Recursion is top-down.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In parsing, YACC is bottom-up, PEG&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; is top-down.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YACC is LR(k), PEG is recursive-descent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YACC is context-free, PEG can depend on context.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;LR(k) is theoretical, PEG is practical.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Semi-colons exist in PL&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;s because of YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG doesn't require semi-colons in PLs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Possible rewording: top-down is operational, whereas bottom-up is declarative&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Top-down implies the use of a Stack&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Bottom-up does not.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[Use of a Stack defies parallelism.]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Context free&quot; means that &lt;i&gt;time&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; has been removed, there is no &lt;span class=&quot;s1&quot;&gt;f(t)&lt;/span&gt;.&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;PEG means Parsing Expression Grammar, see&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;https://bford.info/packrat/.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG is like REGEXPs on steroids.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;PL means Programming Language.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Question to self: Is this a correct characterization?&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; &lt;/span&gt;A stack of breadcrumbs - to &quot;remember&quot; where you were.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Time is also known as History.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;History is also known as State.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Lack of f(t) has been decried by Ilya Prigogene (Nobel laureate, &quot;Order Out of Chaos&quot;) and Grace Hopper.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Induction vs Recursion</summary></entry><entry><title type="html">Miscellaneous</title><link href="https://computingsimplicity.neocities.org/2021/01/11/miscellaneous.html" rel="alternate" type="text/html" title="Miscellaneous" /><published>2021-01-11T00:00:00-05:00</published><updated>2021-01-11T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/11/miscellaneous</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/11/miscellaneous.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;miscellaneous&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-11T23:53:11Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-11T23:53:11Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 108.0px; text-indent: -108.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {text-decoration: underline}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font: 11.0px Menlo}
    span.s4 {font: 9.0px Palatino}
    span.s5 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Contents&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Homogeneous vs. Heterogeneous&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Flat vs. Scoped&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Modeling vs. Compiling&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Typing vs. Pattern Matching&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Compile-Time, Runtime vs. Fractals&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® Pipes vs. Libraries&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Complexity vs Simplicity&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies vs. Simplicity&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntax Checking&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Relative vs. Absolute&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Arcitecture vs. Code&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Hardware Progress vs. Software Progress&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Telecom Four Nines 0.9999&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG - Easy Language Design&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Architecture vs. Code&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic vs. Static Types vs. Assembler&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normalization&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Visual Programming vs. Textual Programming vs. Diagrammatic Programming&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Whiteboards&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Org Charts&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Portability&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rule of Thumb - Compiler Builder Inspired&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;5 Questions&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One Language to Rule Them All&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DRY vs RY&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Abstraction&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Snap Together Like LEGO® Blocks&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;3 Times&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PLs Are Too Complicated&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Scalability&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Silver Bullet&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;70 Years&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is Cheap&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Deprecate Recursion and Loop&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Tired Paradigms&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntax Checking vs. Traceback&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;HTML&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Strong Typing&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Commas and Semicolons&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Blockchain&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Miscellaneous&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Homogeneous vs. Heterogeneous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Current trend: avoid heterogenous data structures
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. a Templated List - a different List for every kind of type&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Why, then, do we allow The Stack to be a homogenous data structure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Flat vs. Scoped&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;We fix every problem by applying Scope
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. global variables —&amp;gt; scoped locals&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. GOTO —&amp;gt; Structured Programming&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. identifiers —&amp;gt; namespaces&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Flatness will lead to trouble&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;What is currently flat?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;type spaces&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;function spaces&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;message passing&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Modeling vs. Compiling&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Compiling mind-set:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;notation must be understood by a piece of software&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Modeling mind-set:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;any notation can be used
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;leads to undisciplined use of notations&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. stick people&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. clouds with ill-defined inputs and outputs&lt;/li&gt;
      &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Typing vs. Pattern Matching&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Typing research is showing that pattern matching is a win&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;We already know, since mid-1990's, how to match patterns
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;Parsers&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;Lexical Analysis&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Lexical Analysis
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;Lex&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;REGEX - accesible&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Parsers
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;YACC&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;ANTLR&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;PEG - accessible
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li3&quot;&gt;built into REBOL&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;ESRAP for Common Lisp&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;Ohm-JS for Javascript&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;others…&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;Janet?&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Advantages of PEG
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;source to source transpilation&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;identity grammar&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li3&quot;&gt;output &amp;lt;— same as input, incl. spaces and comments&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;baseline for easy transpilation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;SCLs now possible
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;per-project&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;many SCLs can be used in a single project&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;use SCL instead of REGEXP&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compile-Time, Runtime vs. Fractals&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;everything is an interpreter&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;arbitrary boundary between &quot;compile time&quot; and &quot;run time&quot;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;compile time
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;extracts expensive calculations&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;extracts common code
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li3&quot;&gt;run it up front&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;run it infrequently&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;run time
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;runs app as fast as possible&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;runs much more frequently than compile interpreter&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;lets compiler weed out expensive calculation&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;does no type checking&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;loader
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li3&quot;&gt;traditionally part of runtime&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;plugs holes in .OBJ file (address resolution)&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;does no type checking&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;what if?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;loader split into two phases
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li3&quot;&gt;type checking&lt;/li&gt;
      &lt;li class=&quot;li3&quot;&gt;address resolution&lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;&lt;br&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;UNIX® Pipes vs. Libraries&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;pipes snap together&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;libraries don't snap together&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;due to dependencies&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Complexity vs Simplicity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;How Do You Build A Light Airplane?&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;
  &lt;ol class=&quot;ol1&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;build an airplane&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;add lightness&lt;/li&gt;
  &lt;/ol&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Simplicity is &quot;lack of nuance&quot;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dependencies vs. Simplicity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Dependencies add complexity and defeat simplicity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax Checking&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;We understand how to do syntax checking&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Use syntax checking to automatically weed out typos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Syntaxes for Every Language&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;2 Syntaxes for every language
  &lt;ol class=&quot;ol1&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;pre-syntax - aid syntax check&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;post-syntax - after syntax check&lt;/li&gt;
  &lt;/ol&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;PL designers impose(d) their perspective on the language
  &lt;ol class=&quot;ol1&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. Pascal &quot;end if&quot; helps syntax checker&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. Lisp &quot;)&quot; emphasizes post-syntax check&lt;/li&gt;
  &lt;/ol&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;(1) makes a language more writable&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;(2) makes a language more readable&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Why not use both?&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relative vs. Absolute&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;i&gt;absolute&lt;/i&gt; is flatness&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;i&gt;relative&lt;/i&gt; is scoping&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Traditionally applied to assembler-level addressing modes
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;relative-ness is creeping into technologies&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;see, also, MFM
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;&lt;a href=&quot;https://movablefeastmachine.org/&quot;&gt;https://movablefeastmachine.org/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Arcitecture vs. Code&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Spaghetti Architecture built into Code&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Architecture not separated from Code
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;Architecture hidden in Code&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;can't see the forest for the trees&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hardware Progress vs. Software Progress&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Hardware has progressed faster than Software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;WHY?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software modules tied together by dependency chain, hardware not bound by same constraint&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The Stack is a Global Variable that maintains a &lt;i&gt;dynamic&lt;/i&gt; dependency chain
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;Smalltalk uses The Stack&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;FP uses The Stack&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Telecom Four Nines 0.9999&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Telecom companies professed &quot;four nines&quot; reliability
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Telephones were up 0.9999 of the time&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Power failures - phones still worked&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;as early as 1960's&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;people stopped noticing high reliability of phone system&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;current websites are not as reliable as Telecom&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;current cell phones are not as reliable as Telecom&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Telecom employed software before strong-typing was in regular use&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG - Easy Language Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a href=&quot;https://bford.info/pub/lang/peg/&quot;&gt;https://bford.info/pub/lang/peg/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;PEG is like REGEXP on steroids.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architecture vs. Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Architecture and Coding are two different things.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;They should not, both, use the same PL.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic vs. Static Types vs. Assembler&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;everthing is an interpreter&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;strong typing (early typing) is an interpreter that runs to completion before the App is executed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Normalization&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;- factbases&lt;br&gt;
- assembler&lt;br&gt;
normalize everything first, then optimize normalized form&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;normalized code is &lt;i&gt;assembler&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;normalized data is &lt;i&gt;factbase&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;most basic normalized form is a triple
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;relation(subject,object)&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. assembler MOV R0,R1&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. simple PROLOG&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; fact &lt;span class=&quot;s3&quot;&gt;relation(subject,object).&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. semantic web, XML&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Visual Programming vs. Textual Programming vs. Diagrammatic Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;I divide programming up into several camps:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;textual programming&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;diagrammatic programming&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;visual programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my mind&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;i&gt;textual&lt;/i&gt; &lt;i&gt;programming&lt;/i&gt; uses only text (characters) as syntax for a language&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;diagrammatic programming augments the syntax with very few diagrammatic elements, e.g. boxes, lines and ellipses, but includes text&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;visual programming is based on a syntax of pixels.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Software Professionals use whiteboards.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Why?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Org Charts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Org charts are used to structure businesses.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Just about everyone understands what an org chart is.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;People expect that all kinds of Engineering is built in an org-chart-like manner.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;People expect that software is built using black boxes arranged in some sort of org chart.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;They are wrong.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Portability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Portability is a chimera, at least in my mind.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Programmers try to create portability by using glue-ons - preserve the existing code and glue new behaviours onto the syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(This kind of thinking is very prevalent in the Common Lisp community, which uses &lt;i&gt;*features* &lt;/i&gt;to create glue-ons).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I prefer the Engineering model instead.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Specialize, don't generalize.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;In electronics, this model manifest itself as a chain of filters that implements only what is needed.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Electronics designers use black boxes of functionality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At the lowest level, a &lt;i&gt;chip&lt;/i&gt; is composed of various kinds of rust that exhibit various electrical properties.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At higher levels, the rust is encased in blobs of epoxy that expose only certain functionality via &lt;i&gt;pins&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At even higher levels, designers contstruct schematics and boards (e.g. motherboards) and VLSI designers use libraries of functionality (like FPGAs)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;When a designer can rely on black boxes, a designer can build specific solutions to specific problems.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The fact that programmers need to resort to parameters and &lt;i&gt;#ifdefs&lt;/i&gt; is a &lt;i&gt;tell&lt;/i&gt; that demonstrates that programmers do not, and cannot, rely on black boxes of software.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rule of Thumb - Compiler Builder Inspired&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;When building compilers, one uses the rule-of-thumb:&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;An optimization is worth it only if it reduces code size.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;This rule can be extended in many other directions, e.g. to optimize for runtime.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The same kind of rule can be applied to Type Checking - what &amp;lt;&lt;i&gt;thing&lt;/i&gt;&amp;gt; does the type checking reduce?&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;When profiling code, one attacks the worst problem first.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;Correctness&lt;/i&gt; is not the worst problem in software design.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Some design rules can be checked using automation. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;What are the &quot;worst&quot; problems in software design?&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;The answer to the above question might depend on one's viewpoint - are we discussing how to deliver a product, are we discussing pure research, … ?&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;In my opinion, the worst problem in software is that of &lt;i&gt;dependencies&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Chains of dependencies need to be snipped and made shorter.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;5 Questions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Daniel Pink suggests asking a series 5 questions, e.g. ask &quot;Why?&quot; 5 times.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;This method can be applied to programming.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I find that I can &quot;interview&quot; myself by just asking the same question again and again and again …&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;For example, start with the statement:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&quot;multitasking is hard&quot;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Ask &quot;Why?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Keep drilling down.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[&lt;i&gt;I record some of my questions and answers in other essays.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Multiprocessing.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Multiprocessing.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt;, &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Full-Preemption.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Full-Preemption.html&lt;/i&gt;&lt;/a&gt;&lt;i&gt;, &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/10/5-Whys-of-Software-Components.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One Language to Rule Them All&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Programmers seem obsessed with the notion that there is a &quot;unifying theory&quot; behind all of programming and that one language will be the result.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I was schooled in Engineering (EE, to be exact and spent time in Core Physics courses before that).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I believe that there is no need for one language to rule them all.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I believe that we can use many languages to solve any one problem.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I, also, spent time building compilers (starting with Anatomy of Lisp and Small C), and building operating systems (starting with Ric Holt's wonderful book &quot;Concurrent Euclid, the Unix system and TUNIS&quot; &lt;a href=&quot;https://archive.org/details/concurrenteuclid00holt&quot;&gt;https://archive.org/details/concurrenteuclid00holt&lt;/a&gt; and reading the UNIX® V7 source code).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I believe that languages are &quot;easy&quot; to build.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can build a language in an afternoon.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[&lt;i&gt;See technologies like PEG, and the idea of transpiling by building on top of &quot;good&quot; base languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I discuss this line of thinking in other essays.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I believe that one &lt;i&gt;should&lt;/i&gt; build many SCLs (like DSLs, but more focussed) to express the solution to a single problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, I discuss this philosophy in other essays.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DRY vs RY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;- a form of Abstraction - useful only for professionals&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;DRY means Don't Repeat Yourself.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;RY means Repeat Yourself.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;DRY is a form of abstraction.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Software professionals use abstraction.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Normal people - non-programmers - don't want to know about abstraction.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They want to start out with something that &quot;just works&quot; (see my essay(s) on Shuhari).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Spreadsheets are popular because they&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;have a flat space / a palette of functions&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;encourage copy/paste between cells as a way of getting work done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;DRY is focussed on Maintenance Engineering.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I believe that software development should be chopped up into several sub-disciplines, e.g. Software Architecture, Software Engineering, Software Implementation, Maintenance Engineering, Software Testing, Q/A, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;see &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;DRY should be automated and it should make RY inexpensive.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This might be in the form of a better editor and/or git/github/etc.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Looking at Paul Bennett's Frames work might offer suggestions &lt;a href=&quot;https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X&quot;&gt;https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I don't know much about Cordy and Roy's NiCad technology, but the abstract(s) seems intriguing.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;[&lt;i&gt;See also &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/RY-vs-DRY.html&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/2020/12/09/RY-vs-DRY.html&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Abstraction&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt; learned in University&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;not wanted by non-programmers&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;avoids repetitive writing&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;should be assisted by automation (editor?)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;avoids repetitive reading
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;should be assisted by automation (editor?)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Snap Together Like LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;doesn't work with ALGOL bottleneck
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;needs concurrency&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;break out of ALGOL bottleneck, first&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;3 Times&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;experience: need 3 iterations before a class can be considered done&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Mythical Man Month - Fred Brooks
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;says that 3 passes are needed&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;calls the 2&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;nd&lt;/sup&gt;&lt;/span&gt; pass &lt;i&gt;second system syndrome&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;does not separate software development into sub-categories&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PLs Are Too Complicated&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;PLs (Programming Languages) are too complicated and encourage attention to optimizations.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;For example, I consider a language to be too complicated if it contains a &lt;span class=&quot;s3&quot;&gt;+&lt;/span&gt; operator.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;I believe that programming should be broken into a number of sub-categories and layers.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Only the bottom-most, implementation, layer of programming should use PLs that contain low-level operations, such as &lt;span class=&quot;s3&quot;&gt;+&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Other layers should only use &lt;i&gt;foreign&lt;/i&gt; &lt;i&gt;types&lt;/i&gt; and collections of &lt;i&gt;foreign types&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Such layers should refer to typed data, but perform no direct manipulation (nor definition) of the typed data. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;All such operations should be functions.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Compilers should do the heavy lifting - for example, inlining functions.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scalability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Scalability.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Silver Bullet&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;70 Years&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&quot;And what have you done&quot;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;- John Lennon&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;70 years.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;1950 to 2020.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code is Cheap&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Code is cheap.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Thinking is hard.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Deprecate Recursion and Loop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;Computer Science clings to the notion of using Recursion and Loops.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;Threads&lt;/i&gt; were invented to accomodate time-sharing.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;To accomodate deep recursion and loops when using threads, Computer Science invented &lt;i&gt;full preemption&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Ironically, loops make no sense on the internet.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;You cannot “loop” a pair of distributed computers, you can only send messages between them.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tired Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;desktop&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;time-sharing&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;memory-sharing&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;text editors (vs. scoped &amp;amp; eliding editors)
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;visual editors, text editors but no diagram editors (for programming)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;footnotes (vs. footnotes in footnotes in …)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;TODO lists&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;ORG mode&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;libraries&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;functions&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax Checking vs. Traceback&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;UNIX® gave us #line, #file&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;what is the equivalent in functional representation?&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;and why aren't we using it more?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;HTML&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;something smells wrong
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;we keep inventing new ways to deal with HTML
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. Liquid&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. Javascript&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. no code&lt;/li&gt;
      &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Strong Typing&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;currently, strong typing is being used as a bandaid for Architecture within code&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;imagine what we could do if we extracted Architecture from code, then used strong typing on the resulting Architecture&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;some programmers talk about epiphanies where &quot;if it compiles then it just works&quot;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;what they are really saying is that they (finally) got their app's Architecture right (with the help of strong typing automation)
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;this is just a back-handed way of saying that their PL did not help in this quest&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;why not?&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;programmers talk about &lt;i&gt;syntactic sugar&lt;/i&gt;, but a bigger problem is &lt;i&gt;implementation sugar (clutter)&lt;/i&gt;&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;remove the &lt;i&gt;implementation clutter&lt;/i&gt; to expose the Architecture&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Commas and Semicolons&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;noise - commas and semicolons are syntactic sugar&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;whitespace - commas and semicolons should be whitespace&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;YACC and LR(k) theory drove early decisions to use semicolons&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Commas were, probably, included because they looked like natural language&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain Contains 2 Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;TWO paradigms - not one&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Calculation
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;cryptography&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Event-Driven
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;time-based obfuscation&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;p2p&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain essay&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/10/Blockchain-Overview.html&quot;&gt;https://guitarvydas.github.io/2020/12/10/Blockchain-Overview.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Jim Rootham &amp;lt;— L.J. (Ted) Rootham &amp;lt;— William Bushnell Stout (&quot;simplicate&quot;)&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; see also &lt;a href=&quot;https://github.com/guitarvydas/js-prolog&quot;&gt;&lt;span class=&quot;s5&quot;&gt;&lt;i&gt;https://github.com/guitarvydas/js-prolog&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s5&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">miscellaneous</summary></entry><entry><title type="html">Apple® refunded my money because of a bug</title><link href="https://computingsimplicity.neocities.org/2021/01/10/Apple-Refunded-My-Money-Because-of-a-Bug.html" rel="alternate" type="text/html" title="Apple® refunded my money because of a bug" /><published>2021-01-10T00:00:00-05:00</published><updated>2021-01-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/10/Apple%C2%AE%20Refunded%20My%20Money%20Because%20of%20a%20Bug</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/10/Apple-Refunded-My-Money-Because-of-a-Bug.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Apple Refunded My Money Because ofa Bug&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-10T10:23:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-10T10:23:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;APPLE® REFUNDED MY MONEY DUE TO A BUG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;(&lt;i&gt;disclaimers&lt;/i&gt;)&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;If A Bridge Collapses - Sue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers can be sued if their design fails.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Contractor Forgot To Put A Lock on Your Front Door - Sue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You live in a city and hire a contractor to renovate / build your house.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The contractor &quot;forgot&quot; to put a lock on your front door.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sue the contractor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Refunds For Buggy Software&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Demand a refund if you are sold buggy software.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CI/CD&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CI/CD is an acknowledgement that software is buggy and needs to be frequently fixed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a &lt;i&gt;tell&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automobile Recalls&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automobile Lemon Law&lt;/b&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://www.ballaghedward.ca/article/when-is-a-trademark-not-a-trademark.php#:~:text=In%20the%20context%20of%20trademarks,exclusive%20rights%20in%20the%20trademark.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;https://fairuse.stanford.edu/overview/fair-use/what-is-fair-use/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I allude to any corporation that sells software.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Apple Refunded My Money Because ofa Bug</summary></entry><entry><title type="html">Architecting, engineering and implementing software</title><link href="https://computingsimplicity.neocities.org/2021/01/10/Architecting,-Engineering-and-Implementing-Software.html" rel="alternate" type="text/html" title="Architecting, engineering and implementing software" /><published>2021-01-10T00:00:00-05:00</published><updated>2021-01-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/10/Architecting,%20Engineering%20and%20Implementing%20Software</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/10/Architecting,-Engineering-and-Implementing-Software.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Real Example&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-10T10:16:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-10T10:16:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p13 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 20.0px; font: 12.0px Menlo; color: #1b1f22; -webkit-text-stroke: #1b1f22; min-height: 14.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: right; line-height: 20.0px; font: 12.0px Menlo; color: #1b1f22; -webkit-text-stroke: #1b1f22; min-height: 14.0px}
    p.p16 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 20.0px; font: 12.0px Menlo; color: #1b1f22; -webkit-text-stroke: #1b1f22}
    p.p17 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 20.0px; font: 12.0px Menlo; -webkit-text-stroke: #1b1f22; min-height: 14.0px}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font: 11.0px Menlo}
    span.s4 {color: #000000}
    span.s5 {text-decoration: underline}
    span.s6 {font: 9.0px Palatino}
    span.s7 {font-kerning: none}
    span.Apple-tab-span {white-space:pre}
    table.t1 {background-color: #ffffff; border-collapse: collapse}
    td.td1 {width: 85.0px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td2 {width: 85.0px; min-width: 50.0px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td3 {width: 164.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td4 {width: 99.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td5 {width: 99.5px; min-width: 50.0px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td6 {width: 200.6px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td7 {width: 879.7px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td8 {width: 518.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td9 {width: 612.4px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td10 {width: 1132.6px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td11 {width: 1818.9px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td12 {width: 99.5px; min-width: 50.0px; height: 13.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td13 {width: 1818.9px; height: 13.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td14 {width: 677.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I walk through the implementation of a simple software project in a sequence of discrete design steps&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Architecture&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Engineering&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;I intend to show how to apply the principles of &lt;i&gt;divide and conquer&lt;/i&gt; and &lt;i&gt;superposition&lt;/i&gt; to the design of a system.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;I use diagrams to design each phase of the project and show how to manually convert the diagrams to code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Background: I use &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt; to create the diagrams in this essay.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Problem&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Problem that I want to solve is using the Scrivener&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; writing tool to produce blog posts that are compatible with Github Pages.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Github Pages uses the Jekyll&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; tool and the file formats prescribed by Jekyll.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I decompose the problem into several parts:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Writing a blog post using the Scrivener tool&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Magic transformer&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Using the Jekyll tool to build a blogging website and having Jekyll add the above blog post (written using Scrivener) to the website&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The &quot;rest&quot; - storing the blog in &lt;i&gt;git, &lt;/i&gt;uploading the blog to github pages, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Parts (1)&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;and (3) are handled by the respective tools (Scrivener and Jekyll).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part (4) uses standard, available technology.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I need to write a program that performs step (2), which transforms the result of Scrivener into something that is acceptable as input to the Jekyll tool.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Step (2) has one input and one output:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;input: a blog post written, and saved into the file system, using the Scrivener tool&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;output:&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;a file(s) saved into the file system that is acceptable to the Jekyll tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;In a very basic form, &lt;/span&gt;Fig. 1 shows this top-level breakdown.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Top Layer.png&quot; width=&quot;400px&quot; height=&quot;36px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;Fig. 1 Basic Architecture&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;We can redraw this using parts,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;by adding &lt;i&gt;ports &lt;/i&gt;to the processes, and skipping the intermediate files, as in Fig. 2&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Top-Layer-With-Ports.png&quot; width=&quot;400px&quot; height=&quot;36px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;Fig. 2 Basic Architecture Redrawn&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;(I choose, arbitrarily, to color output &lt;i&gt;ports &lt;/i&gt;yellow and input &lt;i&gt;ports&lt;/i&gt; green,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Side-effects appear as red &lt;i&gt;ports&lt;/i&gt;.).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Before we do anything else, we need to understand what (1) produces and what (3) consumes.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scrivener Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Scrivener tool is like &lt;i&gt;Word®&lt;/i&gt;, on steroids.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For this example, we are only concerned with the shape of the output created by Scrivener.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In particular, we are only interested in the shape of HTML output by Scrivener.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To output a document in HTML format, we use the &lt;i&gt;File &amp;gt;&amp;gt; Compile &lt;/i&gt;option, and we tell Scrivener to compile to a &lt;i&gt;Web Page (.html).&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The resulting HTML depends on&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;whether the document only contains text&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;whether the document contains text and .PNG files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;Scrivener has many more options and output formats, but for this project, we only care about HTML output and we are willing to constrain our blog posts to contain only text and .PNG files.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Computer Science researchers might proceed to generalize and include more options, but, we are interested in only a practical result &lt;/i&gt;and&lt;i&gt; we are willing to stick to a few conventions in order to simplify the degrees of freedom in the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Later, after this works, we can consider new projects and use this one as a starter template for more complicated variations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Non-programmers like the idea of pulling an existing project off of the shelf and tweaking it to produce new results.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Git shows that projects can be tweaked and that D.R.Y. in-the-large can be handled automatically)&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scrivener Output for Pure Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For text-only documents, Scrivener outputs a single .HTML file.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Scrivener Text Only.png&quot; width=&quot;431px&quot; height=&quot;81px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 3 Scrivener Output - Text Only Case&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scrivener Output for Text Which Includes Images&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For text documents that contain images (.PNG files), Scrivener outputs a directory containing one .html file and a directory called &quot;Images&quot; (spelled with a capital &quot;I&quot; and lower case &quot;mages&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The .html file refers to images using an href element which contains a relative reference to the .png file in the Images/ directory.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This situation is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 4.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Scrivener Text Plus PNG Images.png&quot; width=&quot;400px&quot; height=&quot;244px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 4 Scrivener Output - Text and Images Case&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Detail: the name of the directory has the .html extension, for example &lt;span class=&quot;s3&quot;&gt;abc.scriv&lt;/span&gt; is output as &lt;span class=&quot;s3&quot;&gt;abc.html/&lt;/span&gt;, which contains &lt;span class=&quot;s3&quot;&gt;abc.html/abc.html&lt;/span&gt; and &lt;span class=&quot;s3&quot;&gt;abc.html/Images/&lt;/span&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;At first, this seems bizarre, but it is legal.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The choice of &lt;i&gt;where&lt;/i&gt; the files are saved is made during the &lt;i&gt;Scrivener Compile&lt;/i&gt; action.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Jekyll Input&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Jekyll expect files to be in a subdirectory called &lt;span class=&quot;s3&quot;&gt;_posts&lt;/span&gt; with each file name being prepended with the date, e.g. _posts/2021-01-09-blog.html.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This situation is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 5&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input.png&quot; width=&quot;400px&quot; height=&quot;70px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 5 Jekyll Input&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;Jekyll is usually used to create &lt;/i&gt;static html sites&lt;i&gt; from blog posts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Blog posts can be raw .html files, or, (the usual case) blog posts can be markdown files, .md, containing &lt;/i&gt;front matter&lt;i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When Jekyll processes .md files with front matter, it filters them using the &lt;/i&gt;Liquid&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; &lt;i&gt;tool and puts the result in _site/.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When processing raw .html (the case we are interested in), Jekyll simply copies the file(s) into the _site/ without processing them.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;When a .html file contains images, it is customary to put the images in a directory called &quot;assets&quot; and to have the .html file refer to images in that directory, as in Fig. 6.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images.png&quot; width=&quot;400px&quot; height=&quot;174px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 6 Jekyll Input Using Images in Assets/&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Background:: Jekyll expects a certain directory structure, &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;https://jekyllrb.com/docs/structure/&lt;/a&gt;, and produces a static website in the subdirectory called &quot;_site&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Background: Jekyll does not process any files contained in directories the are named &quot;_*&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The exceptions are &quot;_posts&quot;, &quot;_data&quot;, &quot;_site&quot;, etc.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At this point, we know what the input to step (2) looks like and what output it must produce.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can solve this problem using a layered approach, using any PL (Programming Language).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will call the layers (1) Architecture, (2) Engineering and (3) Implementation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Layers (1) and (2) contain no code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the code is only written in layer (3).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The point of layer (2) (Engineering) is to add enough detail to allow code to be written in the Implementation layer (3).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The point of layer (1) is to collect information about the problem and to arrange that information in a way that indicates the preferred solution.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We iterate between steps (1) and (2) until we know enough about the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Enough&quot; in this case means that Engineers can draw detailed diagrams (&quot;the spec&quot;) that can be used by Implementors in step (3).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;You guessed it - if Implementors (3) don't have complete information, there is an iteration between (2) and (3).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This iteration might cause new iterations between (1) and (2).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Experienced Engineers know what questions to ask to keep such bubbling-up at a minimum.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;N.B. Agile encourages iteration between (1) and (3) in 2-week cycles. This can only work if the problem is &quot;simple&quot; or if Implementors are, also, Engineers (in which case their time is being wasted and the customer is over-paying high-priced talent to produce menial work).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In state-of-the-art practice, all of the above stages are combined and implemented by a single person or a single team.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This results in a higher cost for the overall project and tends to slow implementation (too much detail at every stage).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Experienced developers break a project down &quot;in their heads&quot;, resulting in uneven implementations that depend on the biases of the developers. Any structuring of projects works &quot;better&quot; than what we have.&lt;/i&gt;]&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The strict separation into multiple layers, like Architecture, Engineering and Implementation makes the whole enterprise work more like business organizations and allows the sub-units of the organization to be completely isolated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An organization is broken if it allows information/questions to leak between non-adjacent layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Information that leaks through non-adjacent layers is not isolated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Strict separation stops dependencies from working their way through an organization in a spaghetti-like manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Such leakage inhibits scaling.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is the Architect's responsibility to make a design clear and understandable to other readers.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An overview of what we want is in &lt;span class=&quot;s2&quot;&gt;Fig. 7.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images1.png&quot; width=&quot;400px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 7 Overview&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;As stated before, we don't have to worry about the existing tools - Scrivener and Jekyll.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This project needs only to implement the stuff in the middle.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 8 shows the proposed Architecture for the stuff in the middle&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images2.png&quot; width=&quot;400px&quot; height=&quot;245px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 8 Architecture&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;We, also, need to say something about the &lt;i&gt;input port&lt;/i&gt; (green) and the &lt;i&gt;output port&lt;/i&gt; (yellow) and side-effects (red).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;b&gt;input&lt;/b&gt;&lt;/span&gt;: A filename.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The filename might represent the name of (a) a .html file or (b) a directory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In case (b), the directory contains a .html file and another directory called &quot;Images&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;b&gt;output&lt;/b&gt;: none&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;b&gt;side effects&lt;/b&gt;: A .html file created in the _posts/ directory and image files created in directory &quot;assets&quot; with unique names.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The arefs in the .html file are fixed up to point to corresponding images in the &quot;assets&quot; directory.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;As it stands, the above &quot;description&quot; is written in a &lt;/i&gt;hand waving&lt;i&gt; manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Not all terms are defined.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is unreasonable to ask the Architect for all of the details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is the job of the Engineer to determine if there are &lt;/i&gt;enough&lt;i&gt; details present to allow implementation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some details can be interpolated by the Engineer and some can't.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the latter case, the Engineer must iterate with the Architect and, in the former case, the Engineer does not need to iterate with the Architect.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in a corporation, a CEO steers the ship, but does not micro-manage.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cottage industries do not scale because the CEOs (owners) do &quot;everything&quot; and, effectively, micro-manage every aspect of the business.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Large corporations scale up (to being large corporations) only when micro-management is expunged.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To ready a small business for scaling, the owner must chop up the work into identifiable layers, then, hire workers to perform work in each layer, allowing the workers to concentrate on the work in his/her layer only (instead of &quot;trying to do everything&quot;).&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers are responsible to produce enough detail to allow implementation. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers are responsible to display details in a way that is understandable to the implementors.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers off-load thinking, about minutiae, from the Architect(s).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers try to interpolate details for the design.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When interpolation does not work, or requires extrapolation, Engineers interace with Architects to glean further details.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers have the experience and training, to think about details without writing code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, Universities train Software Professionals to become Implementors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Training for Software Architecture and Software Engineering does not exist and is expected to &quot;rub off&quot; through experience and involvement in many projects.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In other fields, say Construction, Universities can train Architects and Engineers in only a few years.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Implementors (construction workers) are trained in vocational schools or through apprenticeship.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Back to this example.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this specific example, the Architect has indicated that two branches need to be considered:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Scrivener documents that contain text only&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Scrivener documents that contain text and images.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;Abstraction&lt;/i&gt; is a form of &lt;i&gt;optimization&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; that is taught in Universities.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Architects, and Engineers, must concentrate on the problem-at-hand and &lt;span class=&quot;s5&quot;&gt;strip abstraction away&lt;/span&gt; from the instructions given to implementors.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For now (maybe forever) we will continue with the sub-divisions - branch A (text only) and branch B (text plus images) - suggested by the Architect.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The Architect has suggested a form of Divide and Conquer.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Considering only one branch - branch A, text only - we see that two operations need to occur&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;create a file prefix, where the prefix begins with the date in YYYY-MM-DD- form, and,&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move the newly-named .html file into the _posts directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Considering only the other branch - branch B, text plus images - we see the following break down:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;create a file prefix, in YYYY-MM-DD- format&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;edit the arefs in the .html file to refer to images in the assets/ directory&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move the&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;.html file into the _posts/ directory&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move the images into assets/.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, at this Engineering layer, we will make the decision that we will keep the Images/ directory intact, but will prepend it with the prefix and move it, whole, into the assets directory.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This is interpolation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Architecture is not changed by this decision.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Engineer does not need to iterate with the Architect regarding this decision.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;More interpolation: the Engineer looks at the .html format generated by Scrivener and notices that the file-creation-date is embedded in the file as meta-data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Engineer decides (arbitrarily) that this file-creation-date will be used to generate the required file prefix.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the UNIX® file system, it is possible to get the file creation date from the operating system, but the Engineer decides not to use this and decides to use the Scrivener meta-data instead.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This decision is made by the Engineer on a &quot;gut feel&quot;, knowing that various operating systems provide such creation-date information in various forms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is deemed &quot;better&quot; by the Engineer to let Scrivener worry about this aspect.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I show diagrams of these branches, below.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I leave grayed-out portions on the diagram that act as reminders of what the ultimate goal is.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The grayed-out portions are not required in the Implementation.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Level&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images3.png&quot; width=&quot;400px&quot; height=&quot;246px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. &amp;lt;$n:figure:Engineering Top Level&amp;gt; Engineering Top Level&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The Engineer has created a top level diagram that contains&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;one blue box (Leaf) called &quot;isADirectory'&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;one gray box (Schematic) called &quot;pathA&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;one gray box (Schematic) called &quot;pathB&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;one gray box that is the composition of the above boxes&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;two Dots (wire splitters) that are used internally to route &quot;filename&quot; and &quot;content&quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;In the most extreme case, this implies that six (6) things need to be implemented:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;2 x wire splitter&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x &quot;isADirectory&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x &quot;pathB&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x &quot;pathA&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x top level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;N.B in Arrowgrams, dots are so common that we build them into the Arrowgrams notation, whereas in Bash, we will need to build dots explicitly.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In FBP, dots are not allowed (they can, though, be explicitly implemented as FBP Components). In Electronics, dots are common and are shown as dots on a schematic diagram (whereas cross-overs are shown only as two wires crossing over, without a dot).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Arrowgrams is based on ideas from Electronics drawings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Arrowgrams &quot;borrows&quot; from Electronics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is a high-level form of reuse.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The gray boxes, e.g. pathA and pathB, might be broken down further, later.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We might add new Parts to the list of things that need to be implemented, later.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;is A Directory?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A simple function within the top level is to determine whether a given filename represents a file or a directory.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Engineer does not need to break this down any further, since this functionality can be done in &lt;i&gt;bash&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the implementation language does not make this easy, the first-cut implementation can just shell-out to a &lt;i&gt;bash&lt;/i&gt; script.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Engineering Branch B.png&quot; width=&quot;150px&quot; height=&quot;68px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 9 Part: Is A Directory?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Branch A - Text Only&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images4.png&quot; width=&quot;400px&quot; height=&quot;212px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. &amp;lt;$n:figure:Engineering Path A&amp;gt; Engineering Path A&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Engineer refines this diagram further…&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images5.png&quot; width=&quot;400px&quot; height=&quot;192px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 10 Engineering Path A Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&quot;Blue&quot; boxes mean &quot;code&quot;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&quot;Gray&quot; boxes mean composition of blocks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Gray&quot; boxes are call Schematics.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;N.B. there are four (4) boxes to be implemented:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;&quot;create file prefix&quot; (blue box)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&quot;create new name for .html file&quot; (blue box)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&quot;rename and move .html file&quot; (blue box)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;compose the above into a Schematic part (gray box)&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The Engineer creates a black box from the above:&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images6.png&quot; width=&quot;400px&quot; height=&quot;88px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 11 Black Box Engineering Path A&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Branch B - Text Plus Images&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images7.png&quot; width=&quot;400px&quot; height=&quot;339px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 12 Engineering Path B Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images8.png&quot; width=&quot;400px&quot; height=&quot;313px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 12 Engineering Path B Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images9.png&quot; width=&quot;400px&quot; height=&quot;184px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 13 Black Box Engineering Path B Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At this point, we have enough of a design, and code can be implemented.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: The Implementor asks the Engineer whether the temporary file, specified in Branch B, needs to be made available.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: In this design, the temporary directory does not need to be visible to the outside world, although it might assist in debugging the logic.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Intermediate results, stored in human readable form, can help.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Given that the temporary file is not actually needed, the Implementor can choose any base language for the implementation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this particular example, we will use &lt;i&gt;bash&lt;/i&gt; and write scripts that represent the Parts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parts must be completely isolated from one another and need to run as asynchronous processes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will implement &lt;i&gt;wires&lt;/i&gt; as named pipes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will implement &lt;i&gt;ports&lt;/i&gt; using file redirection.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It turns out that UNIX® and Bash can create isolated processes, but, running the processes in an asynchronous manner is slightly tricky.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will need to use Bash &quot;&amp;amp;&quot; in many places.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bash scripts use a &lt;i&gt;rendezvous&lt;/i&gt; protocol for starting up pipes - both ends must exist before the script can proceed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This means that Bash scripts will appear to &quot;hang&quot; if both ends of a pipe are not attached to processes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This will drive us towards needing an &quot;&amp;amp;&quot; on just about every line of the Bash scripts.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Background: in modern forms of UNIX®, e.g. Linux and MacOS, file descriptors (FDs) can be accessed like files, e.g. &lt;span class=&quot;s3&quot;&gt;/dev/fd/3&lt;/span&gt; refers to FD 3, &lt;span class=&quot;s3&quot;&gt;/dev/fd/4&lt;/span&gt; refers to FD 4, and so on.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pipes can be bolted on to FDs using Bash file redirection syntax.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Background: Bash provides a &lt;span class=&quot;s3&quot;&gt;read &lt;/span&gt;builtin command, and assigns the incoming data to a Bash variable, for example:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;read -u 3 xxx&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Reads from FD 3 and assigns the data to Bash variable ${xxx}.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This same action can be performed by referencing the FD with file redirection, e.g.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;read xxx &amp;lt;/dev/fd/3&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Both methods&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; will be used, depending on our mood on a given day.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parts will be built as bash scrips and FDs will be assigned using redirection.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;./create-file-prefix 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} &amp;amp;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This says that Part &quot;create-file-prefix&quot; has two inputs and one output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The inputs come from FD[3] ad FD[4] whereas the output is sent to FD[5].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We use bash variable ${wire1a}, ${wire2a} and ${wire3} to represent the named pipes.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Background: to implemented Arrograms semantics - a Part is not &quot;done&quot; until all of its children are &quot;done&quot; - we use bash &lt;span class=&quot;s3&quot;&gt;wait.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will avoid using FD[0], FD[1] and FD[2], since these have special meaning to UNIX® commands.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above invocation of Part &quot;create-file-prefix&quot; demonstrates a vital property of the Arrowgrams way of thinking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The part, itself, can not know where it is getting input from and where it is outputting to.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every Part can only refer to its own array of file descriptors (FDs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A Part cannot call other parts by name. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let the previous statement &quot;sink in&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most PLs currently bake the callee's name into the code, e.g. xyz(…), and this inhibits flexible Architecting.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All Parts get inputs from FDs and send their outputs to FDs&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For debugging, we call scripts on entry and exit in each part.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The on-the-fly data used for debugging is supplied by a string passed in as $1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concatenation of debug information is done by using $0 (the command's name) in addition to the string given in $1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the above code is written as:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;./create-file-prefix &quot;[$1] $0&quot; 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} &amp;amp;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;No Connection - NC - must be handled explicitly in bash.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We implement a Part called nc as a (simple) bash script that reads its input port and does nothing with the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Redirecting to /dev/null works only for output NCs, not input NCs, so we implement a Part to perform the no-op action).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Wire-splitters - dots - need to implemented as explicit Parts. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normally, dots would be implemented by the Arrowgrams IDE and wouldn't need to be explicitly implemented. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We stick to the strategy of avoiding generalization, so we build two kinds of wire-splitters, one that splits&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt; an incoming &lt;i&gt;event &lt;/i&gt;onto two output wires and another that splits the &lt;i&gt;event &lt;/i&gt;to three output wires.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In both cases, Branch A and Branch B, the Implementation of creating a new filename is trivial and the 2&lt;span class=&quot;s6&quot;&gt;&lt;sup&gt;nd&lt;/sup&gt;&lt;/span&gt; box is dropped.&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Annotated Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Annotations - the Implementor puts a name on every wire and an FD number on every pin.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images10.png&quot; width=&quot;400px&quot; height=&quot;242px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 14 Annotated Top Level Diagram&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images11.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 15 Annotated Diagram for Branch A&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images12.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 16 Annotated Diagram for Branch B&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;BOM&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In &lt;i&gt;electronics&lt;/i&gt; design, one creates a &quot;bill of materials&quot;, called a BOM.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The BOM for this project consists of 9 Parts:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;nc&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;wire-splitter2&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;wire-splitter3&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;create-file-prefix&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move-to-posts&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;create-file-prefix-from-subdir&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;edit-and-move-with-images&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;pathA&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;pathB.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The parts, implemented as bash scripts can be found in&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/nc&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/nc&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;wire-splitter2 &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter2&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter2&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;wire-splitter3 &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter3&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter3&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;create-file-prefix &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;move-to-posts &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/move-to-posts&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/move-to-posts&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;pathA &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathA&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathA&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;create-file-prefix-from-subdir &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix-from-subdir&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix-from-subdir&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;edit-and-move-with-images &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/edit-and-move-with-images&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/edit-and-move-with-images&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;pathB &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathB&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathB&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I include the code, for the parts, below.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The code is in branch AEI of &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;nc&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;#~/bin/sh&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;read junk &amp;lt;/dev/fd/3&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p17&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;wire-splitter2&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;read data &amp;lt;/dev/fd/3&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/5&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/4&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p17&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;wire-splitter3&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;read data &amp;lt;/dev/fd/3&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/4&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/5&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/6&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p17&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;create-file-prefix&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## go (fd 4)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## prefix (fd 5) (YYYY-MM-DD)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read go &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;if [ &quot;go&quot; == &quot;${go}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;prefix=`date &quot;+%Y-%m-%d&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# error check needed here - filename should not be &quot;&quot; at this point&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;creation_time=`grep &quot;&amp;lt;meta name=\&quot;CreationTime\&quot;&quot; &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if [ ! -z &quot;${creation_time}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;prefix=`echo &quot;${creation_time}&quot; | sed -e 's/&amp;lt;meta name=&quot;CreationTime&quot; content=&quot;\(202.-..-..\)T..:..:..Z&quot;&amp;gt;/\1/'`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;${prefix}&quot; &amp;gt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;else&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;???&quot; &amp;gt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;move-to-posts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## prefix (fd 4)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## &amp;lt;none&amp;gt; - causes side-effect of mv'ing prefix/filename to ./_posts/&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read prefix &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;if [ &quot;${go}&quot; == &quot;go&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;basename=`basename &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;echo mv &quot;${filename}&quot; &quot;../_posts/${prefix}-${basename}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;mv &quot;${filename}&quot; &quot;../_posts/${prefix}-${basename}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;pathA&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Engineering Branch B1.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 17 Implementation Branch A&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## content (fd 4) N/C&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &amp;lt;none&amp;gt; - side-effect - file.html moved to ./_posts/&amp;lt;prefix&amp;gt;_filename.html&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1=wire_pA_1&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1a=wire_pA_1a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1b=wire_pA_1b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2=wire_pA_2&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2a=wire_pA_2a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2b=wire_pA_2b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire3=wire_pA_3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire4=wire_pA_4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;mkfifo ${wire1} ${wire1a} ${wire1b} ${wire2} ${wire2a} ${wire2b} ${wire3} ${wire4}&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;[$1] $0&quot; 3&amp;lt;${wire1} 4&amp;gt;${wire1a} 5&amp;gt;${wire1b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;[$1] $0&quot; 3&amp;lt;${wire2} 4&amp;gt;${wire2a} 5&amp;gt;${wire2b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./create-file-prefix &quot;[$1] $0&quot; 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./move-to-posts &quot;[$1] $0&quot; 3&amp;lt;${wire1b} 4&amp;lt;${wire3} 5&amp;lt;${wire2b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${filename}&quot; &amp;gt; ${wire1} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read content &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${content}&quot; &amp;gt; ${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./nc 3&amp;lt;${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read pin_go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${pin_go}&quot; &amp;gt; ${wire2} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wait&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;create-file-prefix-from-subdir&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 4)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## prefix (fd 5) (YYYY-MM-DD)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## fullprefix (fd 6) (YYYY-MM-DD-HH-MM-SS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read go &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;if [ &quot;go&quot; == &quot;${go}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;prefix=`date &quot;+%Y-%m-%d&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;base=`basename &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# error check needed here - filename should not be &quot;&quot; at this point&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;creation_time=`grep &quot;&amp;lt;meta name=\&quot;CreationTime\&quot;&quot; &quot;${filename}/${base}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if [ ! -z &quot;${creation_time}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;prefix=`echo &quot;${creation_time}&quot; | sed -e 's/&amp;lt;meta name=&quot;CreationTime&quot; content=&quot;\(2020-..-..\)T..:..:..Z&quot;&amp;gt;/\1/'`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;fullprefix=`echo &quot;${creation_time}&quot; | sed -e 's/&amp;lt;meta name=&quot;CreationTime&quot; content=&quot;\(2020-..-..\)T\(..\):\(..\):\(..\)Z&quot;&amp;gt;/\1-\2-\3-\4/'`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;${prefix}&quot; &amp;gt;/dev/fd/5 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;${fullprefix}&quot; &amp;gt;/dev/fd/6 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;else&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# this is required because bash does not actually support concurrency&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# bash imposes a rendezvous regimen on named pipes and blocks processes until all pipes have 2 ends&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# this causes deep dependency chains&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (in true concurrency, we would be allowed to create pipes even when one end has not yet been created, and we would not need these two lines of code)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (rendezvous causes dependencies, which causes accidental complexity, which causes lots of head-scratching)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (rendezvous can be implemented using an ACK/NAK protocol)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (at the least, this pertains to bash under MacOSX Catalina, probably elsewhere, too)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;???&quot; &amp;gt;/dev/fd/5 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;???&quot; &amp;gt;/dev/fd/6 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;edit-and-move-with-images&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## prefix (fd 4) YYYY-MM-DD&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## fullprefix (fd 6) YYYY-MM-DD-HH-MM-SS&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &amp;lt;none&amp;gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- edit _new/filename/basename change all occurences of Images to ../assets/prefix-Images --&amp;gt; /tmp/basename&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- moves /tmp/basename to ../_posts/filename/prefix-basename&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- moves _new/filename/Images &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;to ../assets/prefix-Images&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## specific to Scrivener: Compile the document as a Web Page (.html) and leave it in ../_new&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## specific to Scrivener: if a .scriv file contains images, a directory will be created - it contains the .html file plus a sub-directory Images/, for example, abc.sriv --&amp;gt; abc.html/abc.html and abc.html/Images (yes, the directory is named abc.html)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read prefix &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td12&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td13&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read fullprefix &amp;lt;/dev/fd/6&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;if [ &quot;${go}&quot; == &quot;go&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;base=`basename &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# edit to new file and move it to _posts&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;sed -e &quot;s@&amp;lt;img src=\&quot;Images@&amp;lt;img src=\&quot;/assets/${fullprefix}-Images@g&quot; &amp;lt;&quot;${filename}/${base}&quot; &amp;gt;&quot;../_posts/${prefix}-${base}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# move Images folder to ../assets/prefix-Images&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;mv &quot;${filename}/Images&quot; &quot;../assets/${fullprefix}-Images&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# delete source(s), completing the mv (mv is not cp)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;rm -rf &quot;${filename}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;pathB&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Engineering Branch B2.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 18 Implementation Branch B&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## content (fd 4) N/C&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &amp;lt;none&amp;gt; - side-effect - file.html moved to ./_posts/&amp;lt;prefix&amp;gt;_filename.html&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1=wire_pB_1&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1a=wire_pB_1a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1b=wire_pB_1b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2=wire_pB_2&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2a=wire_pB_2a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2b=wire_pB_2b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire3=wire_pB_3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire4=wire_pB_4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire5=wire_pB_5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;mkfifo ${wire1} ${wire1a} ${wire1b} ${wire2} ${wire2a} ${wire2b} ${wire3} ${wire4} ${wire5}&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;x [$1] $0&quot; 3&amp;lt;${wire1} 4&amp;gt;${wire1a} 5&amp;gt;${wire1b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;y [$1] $0&quot; 3&amp;lt;${wire2} 4&amp;gt;${wire2a} 5&amp;gt;${wire2b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./create-file-prefix-from-subdir &quot;[$1] $0&quot; 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} 6&amp;gt;${wire5}&amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./edit-and-move-with-images &quot;[$1] $0&quot; 3&amp;lt;${wire1b} 4&amp;lt;${wire3} 5&amp;lt;${wire2b} 6&amp;lt;${wire5} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${filename}&quot; &amp;gt; ${wire1} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read content &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${content}&quot; &amp;gt; ${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./nc 3&amp;lt;${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read pin_go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${pin_go}&quot; &amp;gt; ${wire2} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wait&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Extra Marks - Transpiling Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Some clues about how to transpile diagrams to code:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the diagram into XML form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I drew the diagrams in &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It outputs a compressed XML file.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each tab on the diagram is contained in its own element delimited by &amp;lt;diagram&amp;gt; … &amp;lt;/diagram&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Copy/Paste the compressed data into the tool &lt;a href=&quot;https://jgraph.github.io/drawio-tools/tools/convert.html&quot;&gt;https://jgraph.github.io/drawio-tools/tools/convert.html&lt;/a&gt; and press the &lt;i&gt;decode&lt;/i&gt; button.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This should result in human-readable XML of an mxGraph structure.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The structure contains graphical information about every item in the drawing.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Weed out the syntactic sugar.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Normalize the data - I like factbases (see another one of my essays).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use code to transform the data into some very convenient form, e.g. JSON.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I like using PEG-based parsers (Ohm-js for Javascript, ESRAP for Common Lisp).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;N.B. the graphical data can be considered to be a textual programming language, where details like X, Y, Width and Height have been added.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the 2D graphical information into 1D textual information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.g. find all boxes, then, find all boxes that intersect boxes (high school math).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Small boxes that sit on the edges of larger boxes are &quot;ports&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use standard text-compilation technique from that point on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some clues on how to draw diagrams that can be transpiled:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Ensure that all boxes are &lt;i&gt;concurrent&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The sequential paradigm (call/return) does not work for diagrams.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Allow text to be included in the diagram (text is better than diagrams for a certain class of programs, e.g. &quot;a = b + c&quot; should be written and not drawn).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use an editor that allows drawing any shape and does not need to know details about what is being drawn.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine Emacs (vim, vscode, etc.) for diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs knows only how to edit characters, in general.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs doesn't check that the code is consistent - that's the job of the compiler in later stages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs allows you to save inconsistent programs - for example, it doesn't check for consistency and stop one from saving an inconsistent program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler will raise error messages, later.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine that diagrams are the same as text code.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Think box/arrow/ellipse/text instead of pixels.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors edit a grid of cells.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells may not overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells are also called &quot;characters&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors are not-quite-2D.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They allow 2D layout of text, but insist on arranging cells in lines and columns.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Diagram editors, OTOH, allow cells to overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;No strict grid structure is imposed.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Don't think in terms of pixels, think about larger constructs, like boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One doesn't need pixel/raster recognition algorithms to effectively use diagrams as syntax (DaS).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;White Box Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;During development, most parts were tested using white-box testers.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The topmost white-box tester is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-testall&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-testall&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The remaining white-box testers can be viewed at:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-create-file-prefix&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-create-file-prefix&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-isADirectory&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-isADirectory&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-move-to-posts&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-move-to-posts&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA-fail&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA-fail&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-scrivener-to-jekyll&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-scrivener-to-jekyll&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-wire-splitter2&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-wire-splitter2&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Scrivener is a tool for writing books, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It goes well beyond what can be done with WYSIWYG editors, such as Word®.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Scrivener can produce output in many formats.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will stick with .html (web page) output, for this project.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Jekyll is a &quot;static site generator&quot;, in other words, it produces a website containing only pure .html files and requires no access to &quot;dynamic&quot; technologies like databases.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Jekyll is used to produce blogs for github pages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Github pages is a website generator that runs Jekyll whenever a new post is pushed to the appropriate repo.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My blog, as an example, can be seen at guitarvydas.github.io and the corresponding repo is at https://github.com/guitarvydas/guitarvydas.github.io.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Liquid was developed by Shopify.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;https://shopify.dev/docs/themes/liquid/reference&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Earlier, I said that this project had one output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I was simplifying.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;One form of this optimization is often called D.R.Y. (abbreviated as DRY).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DRY is appropriate for Maintenance Engineering, Test Engineering and Implementation and Maintenance, etc., but, DRY is &lt;i&gt;not&lt;/i&gt; appropriate for Architecture and Realization Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;As an example, Architects and Engineers need to indicate that a &lt;i&gt;solution&lt;/i&gt; is &lt;i&gt;like&lt;/i&gt; some other solution with changes (see Paul Bennett's Framing Software Reuse).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Inheritance, as currently implemented, does not capture this kind of relationship in an easy-to-understand manner.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;More methods of doing this in bash exist.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, we could use backtick syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Even worse, the return address is baked into the code using a &lt;span class=&quot;s5&quot;&gt;dynamic&lt;/span&gt; call-chain, called the &lt;i&gt;Stack&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;DLLs try to solve this direct-call problem using indirection, but still allow the &lt;i&gt;Stack&lt;/i&gt; to determine returns.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Current functional PLs are attacking this problem by disassociating definition from implementation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;UNIX® was capable of doing this in the 1970's.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;FP ignores practical issues like &lt;span class=&quot;s5&quot;&gt;divide and conquer&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Peter Lee showed how to apply divide and conquer to Denotational Semantics, in 1989.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;[8]&lt;/a&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt; &lt;/a&gt;Schematic Parts work the same way as Leaf Parts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One cannot tell how a Part is implemented - as a Leaf or as a Schematic - when using a Part.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;[9]&lt;/a&gt; &lt;/span&gt;In electronics, splitting signals involves only the calculation of &lt;i&gt;impedances.&lt;/i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In software, splitting signals involves copying.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this project, we use bash and get copying &quot;for free&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we were to implement Parts in C, though, we would have to worry about the implications of copying (shallow copy, deep copy, pass-by-reference, etc).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; In fact, this might be a case of premature and unnecessary optimization on my part.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The bash code for Branch A and Branch B was written early in the project, before all of the diagram-to-bash kinks had been worked out.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of change should have been iterated with the Engineer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case, the project was so small that I executed all tasks in this project.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I was the Architect, Engineer and Implementor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I cut corners in Engineering because I Implemented the bash scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Had I exercised more discipline, this optimization might not have occurred.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a larger project, different people would fill the roles of Architecting, Engineering and Implementation - which would have put a damper on such egregious changes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;In a full IDE, which converted diagrams to code, this optimization would not have occurred.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is possible to transpile diagrams to code, but this will be the subject of another essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the section &quot;Extra Marks&quot; for clues on how transpilation from diagrams to code might be accomplished.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Real Example</summary></entry><entry><title type="html">Transpiling diagrams overview</title><link href="https://computingsimplicity.neocities.org/2021/01/10/Transpiling-Diagrams-Overview.html" rel="alternate" type="text/html" title="Transpiling diagrams overview" /><published>2021-01-10T00:00:00-05:00</published><updated>2021-01-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/10/Transpiling%20Diagrams%20-%20Overview</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/10/Transpiling-Diagrams-Overview.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Transpiling Diagrams - Overview&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-10T10:19:38Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-10T10:19:38Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss some diagram transpiler issues at the 50,000 foot level.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram Notations&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Ensure that all boxes are &lt;i&gt;concurrent&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The sequential paradigm (call/return) does not work for diagrams.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Allow text to be included in the diagram (text is better than diagrams for a certain class of programs, e.g. &quot;a = b + c&quot; should be written and not drawn).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use an editor that allows drawing any shape and does not need to know details about what is being drawn.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine Emacs (vim, vscode, etc.) for diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs knows only how to edit characters, in general.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs doesn't check that the code is consistent - that's the job of the compiler in later stages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs allows you to save inconsistent programs - for example, it doesn't check for consistency and stop one from saving an inconsistent program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler will raise error messages, later.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine that diagrams are the same as text code.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Think box/arrow/ellipse/text instead of pixels.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors edit a grid of cells.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells may not overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells are also called &quot;characters&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors are not-quite-2D.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They allow 2D layout of text, but insist on arranging cells in lines and columns.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Diagram editors, OTOH, allow cells to overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;No strict grid structure is imposed.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Don't think in terms of pixels, think about larger constructs, like boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One doesn't need pixel/raster recognition algorithms to effectively use diagrams as syntax (DaS).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpilation Techniques&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the diagram into XML form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I drew the diagrams in &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It outputs a compressed XML file.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each tab on the diagram is contained in its own element delimited by &amp;lt;diagram&amp;gt; … &amp;lt;/diagram&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Copy/Paste the compressed data into the tool &lt;a href=&quot;https://jgraph.github.io/drawio-tools/tools/convert.html&quot;&gt;https://jgraph.github.io/drawio-tools/tools/convert.html&lt;/a&gt; and press the &lt;i&gt;decode&lt;/i&gt; button.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This should result in human-readable XML of an mxGraph structure.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The structure contains graphical information about every item in the drawing.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Weed out the syntactic sugar.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Normalize the data - I like factbases (see another one of my essays).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use code to transform the data into some very convenient form, e.g. JSON.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I like using PEG-based parsers (Ohm-js for Javascript, ESRAP for Common Lisp).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;N.B. the graphical data can be considered to be a textual programming language, where details like X, Y, Width and Height have been added.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the 2D graphical information into 1D textual information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.g. find all boxes, then, find all boxes that intersect boxes (high school math).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Small boxes that sit on the edges of larger boxes are &quot;ports&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use standard text-compilation technique from that point on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Transpiling Diagrams - Overview</summary></entry><entry><title type="html">Software ceiling</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Software-Ceiling.html" rel="alternate" type="text/html" title="Software ceiling" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Software%20Ceiling</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Software-Ceiling.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Ceiling&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T09:49:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T09:49:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
    ul.ul3 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Software Ceiling&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Who Uses Software?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;End users (non-programmers)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Domain experts (non-programmers)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Software Professionals (programmers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;End User Expectations&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Apps&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;e.g. Minecraft&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;e.g. Weather&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inexpensive&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simple One-Purpose App&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;e.g. loyalty cards&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;e.g. credit cards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchy&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;End users understand &lt;i&gt;hierarchy&lt;/i&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;&lt;i&gt;&lt;/i&gt;e.g. org charts in business&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;&lt;i&gt;&lt;/i&gt;e.g. government (layers)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Uninterested in Details&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;options unwelcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;don't welcome interruptions
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;where to save file&quot;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;what kid of document to create&quot;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;updates available&quot;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Learn Incrementally&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;learn in a hierarchical / fractal manner&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;learn only a few things at a time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Domain Expert Expectations&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect to be able to snap software together like LEGO® blocks&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect to choose functionality from a palette
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;limited options&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;easily browsed&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. fixed set of functions available in spreadsheets&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Do not care about &lt;i&gt;abstraction&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Understand &lt;i&gt;scripting&lt;/i&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. cooking recipes&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Domain experts use whiteboards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Software Expertise&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Do not want to become software experts&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect the benefits of software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;flexibility&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;easy to design solutions within their domains
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. VisiCalc (spreadsheets)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Simple things are simple to implement&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Call in Software Professionals to handle complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tools&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Spreadsheets&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;AppleScript&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Hypercard&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;(Sikuli?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Professionals&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Software Professionals use:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;git&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;GitHub, etc.&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;libraries&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Result:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;not LEGO® blocks&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;growing complexity&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;decreasing reliability&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Software professionals sketch designs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;The, they transfer the designs to code
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Why?&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Why not use code instead of sketches?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;&quot;Software is Complicated&quot;&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;excuse?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;or, reality?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hardware Advanced Faster Than Software&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Hardware Advanced Faster Than Software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Why?
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;glib answer: software is &quot;just&quot; more complicated&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;possibility: there is an inhibiting technology underlying all of software&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;possibility: is there a new technology?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Something different from what we call &quot;programming&quot;?&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;QWERTY Effect&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Technology lock-in&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Incremental
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;QWERTY vs. other keyboard layouts&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;VHS vs. Beta&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;808x vs. other CPU designs&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;QWERTY Effect&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;New Technology?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Many Uses of Computers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;New Technlogy?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Can QWERY effect mask inhibiting technology?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;does lock-in stop progress?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. QWERTY design did not stop progress on document preparation&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;software improvements decrease QOS&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; over time
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. LibreOffice runs more slowly on new Macs&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. git fails mysteriously sometimes&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. continuous stream of &quot;update available&quot;&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. continuous stream of new PLs&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. Telecom offered four-nines (0.9999 uptime) technology in 1960's, but no more&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. CI/CD (why is this necessary?)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;A completely different paradigm?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Is a technology - minus the inhibitor - the same technology, or is it something completely different?&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Is it &quot;wrong&quot; to think of computing as a single kind of thing or are there multiple kinds of computing?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many Uses of Computers&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Calculators&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Event-driven controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computers as Calculators&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Ballistics&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Cryptography (not Blockchain!)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One-in, one-out&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Synchronous&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Functional Approach&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;CALL RETURN&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Hidden global variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One In One Out&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; one outcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;one input &lt;i&gt;always &lt;/i&gt;leads to one outcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;i&gt;Exceptions&lt;/i&gt; are a &quot;special case&quot; tacked onto the side
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;syntactic sugar&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;each step waits for sub-step to complete&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;dynamic dependency chain
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;who calls what is determined at &lt;span class=&quot;s1&quot;&gt;runtime&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;led to incremental band-aids
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. removing state&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Loop, Recursion allowed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Functional Approach&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&quot;Order Out Of Chaos&quot;, Ilya Prigogene (Nobel laureate)
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;[paraphrased] Functional thinking has set Physics back 100 years&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;FP - Functional Programming&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew Time&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew State&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Time&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Functions are reversible&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;hence, time must be removed, no f(t)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;does not model physical reality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Removing state&lt;/p&gt;
&lt;ul class=&quot;ul3&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;when it's a &lt;span class=&quot;s1&quot;&gt;good&lt;/span&gt; idea
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;building a &lt;i&gt;calculator&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;building a &lt;i&gt;filter&lt;/i&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;when it's a &lt;span class=&quot;s1&quot;&gt;bad&lt;/span&gt; idea
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;needing state for functions of time, f(t)
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. controllers&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. robots&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Implicitly uses the stack&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Creates a &lt;i&gt;dynamic&lt;/i&gt; record of invocations&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;dependency chain &amp;lt;— dynamic record of invocations&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;useful only for &lt;i&gt;calculator&lt;/i&gt; model of computing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;All PLs, incl. FP and Smalltalk, share a global variable&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The Stack&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;CALL / RETURN manipulates this global variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computers for Event-Driven Control&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Asynchronous&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Components run forever&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Multiple outcomes&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew Dependencies&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;How to Implement Synchronous Paradigm in Asynchronous Paradigm&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Examples&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Events can occur at any time
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. sensor&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. GUI&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. browser&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. mouse&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. keyboard&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;Loop, Recursion not allowed&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;not applicable&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;what does it mean to Recur/Loop a &lt;i&gt;system&lt;/i&gt; of independent components?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components Run Forever&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Components run forever&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;implies State&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to receive data&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to send results&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to send exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Outcomes&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; one output&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; multiple outputs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; no outputs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;See also
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Javascript FileReader()&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;[&lt;i&gt;multiple outcomes handled with multiple callbacks&lt;/i&gt;]&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Scalability requires lack of dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing Synchronous Paradigm Using The Asynchronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Blocking
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;ACK / NAK&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Already explored and understood in…
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;networking&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;electronics&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation is more important than encapsulation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Must encapsulate data &lt;i&gt;and&lt;/i&gt; control flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Statecharts
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/StateCharts.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/StateCharts.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;TWO paradigms - not one&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Calculation
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;cryptography&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Event-Driven
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;time-based obfuscation&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;p2p&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Due to choosing wrong paradigm for a problem&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;example
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;threads, multitasking built on top of synchronous paradigm
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;epicycles on top of epicycles&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li2&quot;&gt;e.g. promises&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Mars Pathfinder disaster&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Shuhari&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Shu
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;end users&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Ha
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;domain experts, non-programmers&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Ri&lt;/li&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;software professionals&lt;/li&gt;
    &lt;hr&gt;
    &lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Quality Of Service&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Ceiling</summary></entry><entry><title type="html">Sofware kleenex®</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Sofware-Kleenex.html" rel="alternate" type="text/html" title="Sofware kleenex®" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Sofware%20Kleenex%C2%AE</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Sofware-Kleenex.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Sofware Kleenex®&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T10:49:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T10:49:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 13.0px 0.0px 0.0px 0.0px; font: 28.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;SOFTWARE KLEENEX®&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Kleenex® is a brand name&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Everyone knows what a Kleenex® is. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A facial tissue.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kleenex&quot;&gt;https://en.wikipedia.org/wiki/Kleenex&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Kleenex®&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(a,b) returns r throws e&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Entry&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(3,4);&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Surprise!&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This line of code represents two functionalities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;spin up and invoke a routine called &lt;span class=&quot;s1&quot;&gt;fn&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;transfer data - &lt;span class=&quot;s1&quot;&gt;3 &lt;/span&gt;and&lt;span class=&quot;s1&quot;&gt; 4&lt;/span&gt; - to the routine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that the parameters, both of them - 3 and 4 - &lt;i&gt;must&lt;/i&gt; be transfered to &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; at the same time.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that we will wait for &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to finish its work.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that we will modify a global variable to record who called &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is an optimized list.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is modified by the underlying hardware.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The use of the global variable is pervasive and hidden by most programming languages.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is called &lt;b&gt;The Stack&lt;/b&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Exit&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;x = fn(…);&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This line of code says that we want to spin up and invoke &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, this line of code says that we will wait for &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to finish its work.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, this line of code says that we &lt;i&gt;expect&lt;/i&gt; &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to &lt;i&gt;always&lt;/i&gt; return a value, even if it doesn't need to do so.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Exception&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(…) … {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;throw e;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This code says that &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; encountered an error and &lt;span class=&quot;s1&quot;&gt;Send()&lt;/span&gt;s an error thingie upwards to its caller, or its caller's caller, or the caller's caller's caller, or …&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, the chain of who gets to handle the exception is determined by a runtime global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;You guessed it, &lt;b&gt;The Stack&lt;/b&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This breaks one of the fundamental tenets of Structured Programming.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;One entry, one exit.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://www.ballaghedward.ca/article/when-is-a-trademark-not-a-trademark.php#:~:text=In%20the%20context%20of%20trademarks,exclusive%20rights%20in%20the%20trademark.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Sofware Kleenex®</summary></entry><entry><title type="html">The problem</title><link href="https://computingsimplicity.neocities.org/2021/01/07/The-Problem.html" rel="alternate" type="text/html" title="The problem" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/The%20Problem</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/The-Problem.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Untitled&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T09:25:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T09:25:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;THE PROBLEM&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Normal People&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I was invited to advise a lawyer friend.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He wanted a website built for his company.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Two weeks went by and the website project was not yet finished.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He brought the software contractor in and expected to run him over the coals, with my assistance.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When the contractor described the project and his current status, I ended up agreeing with him.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The lawyer was flabbergasted.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Two weeks, for a simple brochure?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Two weeks of paying consulting rates?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I had to explain to my lawyer friend that software development is not built out of black boxes pulled from a shelf.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was a custom job and that he should not expect the job to be finished yet.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My lawyer friend did not like my answer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Programmers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I gave a demo and showed a &lt;i&gt;working&lt;/i&gt; version of some software to a client.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His techie grilled me on how I used mutexes in my software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I told him that I didn’t use mutexes, at which point he declared that the demo was faked. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was a liar and couldn’t possibly have finished the development work in so short a time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Assets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I have a friend who works in the Film &amp;amp; T.V. industry.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He dabbles in software development.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked him how his company manages projects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His response was “Why do you want to know?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These ideas can’t be applied to software development.”&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After more prodding, he told me that Film and T.V. Development was based on a divide and conquer strategy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Work is farmed out to contractors and the contractors return results as assets (3D graphical objects, in this case).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Don't Care&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My friend has created a product for the equestrian world.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The product uses some 40 CPUs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each CPU has only about 16K (K not M) of memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend does not have problems with multitasking.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Order Matters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Order of operation should not matter to produce a given result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, order &lt;i&gt;does&lt;/i&gt; matter in software.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I show this problem in &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In that essay, I show that we cannot rely on the operation of even a simple 2-box system of software.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Real black boxes don’t work that way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we have two black boxes plugged together, then we get the same result every time, regardless of how the innards of the black boxes (and the wiring between them) is implemented.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This does not happen in software.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Black Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Everyone &lt;i&gt;thinks&lt;/i&gt; that software is built using black boxes.&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Non-programmers understand the concept of black boxes and think that software is built from black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Like Engineering.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Software Professionals &lt;i&gt;think&lt;/i&gt; that they are using black boxes&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;libraries&lt;/i&gt; are not black boxes&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;TDD (Test Driven Development) tries to fit black-box-like thinking onto software, but ultimately fails&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Functional programming throws the baby out with the bathwater to achieve black-box-like behaviour.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This only achieves black-box-like behaviour for a narrow range of problems (one-in-one-out problems - filters, calculators)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;Tells&lt;/i&gt; - we see problems at the edges of the software universe - called &lt;i&gt;epicycles&lt;/i&gt; in Ptolemaic cosmology - such as the continual churn of fixes applied to &lt;i&gt;threads&lt;/i&gt; (e.g. &lt;i&gt;promises&lt;/i&gt; are one of the latest fads) and fixes applied to fixes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Threads&lt;/i&gt; are &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; essential complexity.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Promises &lt;/i&gt;fix threads for only a certain class of problems.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(&lt;i&gt;I discuss more &lt;/i&gt;tells&lt;i&gt; for broken software in another essay).&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Mars Pathfinder Disaster&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;https://www.rapitasystems.com/blog/what-really-happened-software-mars-pathfinder-spacecraft&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priority Inversion is Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Mars Pathfinder problem was caused by &lt;i&gt;priority inversion&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This problem was caused by the use of an RTOS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An RTOS is a stripped-down operating system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The RTOS was built using “best practices”, but, these best practices led to a hoary, intermittent bug.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The cause of the bug was not understood at the time of construction of the Pathfinder software, but it was always there.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priorities are Epicycles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Priorities were invented to ameliorate the problems of time-sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time-sharing was invented to ameliorate the problems of CPU expense.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Priority inheritance was invented to ameliorate the problems of priorities. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Q: Why was it possible to enable/disable priority inheritance?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What niggly problem was that supposed to solve?&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Epicycles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To read more about Epicycles, read Arthur Koestler’s “The Sleepwalkers”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The book documents the switch from Ptolemaic Cosmology to Copernican Cosmology.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Ptolemaic scientists formalized the concept of adding baubles to the existing theory without fixing the root problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They called this formalism &lt;i&gt;Epicycles&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Avoiding Multitasking Problems&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How To Avoid The Thread Safety Issue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To avoid thread safety issues, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When CPUs are isolated from one another - they cannot interact, except via very constrained channels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are no thread safety issues.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is accidental complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is not essential complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is caused by an optimization - the attempt to share memory across many tasks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This attempt at premature optimization leads to new problems, i.e. accidental complexity.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Avoid The Fairness Issue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To avoid fairness issues, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When CPUs are isolated from one another - they cannot interact, except via very constrained channels - there are no fairness issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each CPU runs at its own speed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is accidental complexity caused by an optimization (sharing the CPU for many tasks).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is not essential complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The only issue is: are the CPUs &lt;i&gt;fast enough&lt;/i&gt; to accomplish the given task?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Conquer Multitasking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To conquer multitasking and to make multitasking easy to use, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs cannot share memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs cannot time-share.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Deprecate Recursion and Loop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Computer Science clings to the notion of using Recursion and Loops.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Threads&lt;/i&gt; were invented to accomodate time-sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To accomodate deep recursion and loops when using threads, Computer Science invented &lt;i&gt;full preemption&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ironically, loops make no sense on the internet.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You cannot “loop” a pair of distributed computers, you can only send messages between them.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Getting Rid of Full Preemption&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Full Preemption was invented to accommodate loops (and recursion) on &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Full preemption causes many accidental complexities,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;e.g. allocating a stack (memory) for each thread&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;e.g. thread safety, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Full preemption is only needed to &lt;i&gt;simulate&lt;/i&gt; multiple CPUs on a single computer.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;To get rid of full preemption, just give each thread its own isolated CPU and its own isolated memory space.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Cores&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We, ultimately, want true distributed computing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We could do anything if CPUs were free.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multi-core CPUs are but a half-measure towards achieving the above goal of truly distributed computing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores were invented by hardware designers who were tired of waiting for software to catch up.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simulation On Too Few CPUs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If we don’t have enough CPUs to go around, we end up simulating CPUs by using VMs and Threads, or, better yet, we can simulate &lt;i&gt;isolated&lt;/i&gt; CPUs (something software professionals tend &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; to do, out of a zeal for premature optimization).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs used to be very expensive in the 1950’s. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simulation of multiple CPUs was invented early to ameliorate this expense. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of simulation - we call it &lt;i&gt;threads&lt;/i&gt; - has led to a myriad of accidental complexities. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These complexities &lt;i&gt;only&lt;/i&gt; exist in the simulations, and disappear entirely if we allocate enough CPUs to the problem.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computer Science&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A large portion of Computer Science consists of the analysis of accidental complexities caused by the imposition of the epicycle we call &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Early Computer Science, also, tackled the ideas of how to structure data and wrestled that issue to the ground.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yet, the issue of &lt;i&gt;threads&lt;/i&gt; continues to wriggle out of Computer Science’s grasp. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a &lt;i&gt;tell&lt;/i&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;If TDD had succeeded, then all software professionals would be using TDD exclusively.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They don’t.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Untitled</summary></entry></feed>