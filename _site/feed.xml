<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-01-10T10:23:55-05:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Architecting, engineering and implementing software</title><link href="https://computingsimplicity.neocities.org/2021/01/10/Architecting,-Engineering-and-Implementing-Software.html" rel="alternate" type="text/html" title="Architecting, engineering and implementing software" /><published>2021-01-10T00:00:00-05:00</published><updated>2021-01-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/10/Architecting,%20Engineering%20and%20Implementing%20Software</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/10/Architecting,-Engineering-and-Implementing-Software.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Real Example&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-10T10:16:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-10T10:16:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p12 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p13 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 20.0px; font: 12.0px Menlo; color: #1b1f22; -webkit-text-stroke: #1b1f22; min-height: 14.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: right; line-height: 20.0px; font: 12.0px Menlo; color: #1b1f22; -webkit-text-stroke: #1b1f22; min-height: 14.0px}
    p.p16 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 20.0px; font: 12.0px Menlo; color: #1b1f22; -webkit-text-stroke: #1b1f22}
    p.p17 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 20.0px; font: 12.0px Menlo; -webkit-text-stroke: #1b1f22; min-height: 14.0px}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 13.0px Palatino}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font: 11.0px Menlo}
    span.s4 {color: #000000}
    span.s5 {text-decoration: underline}
    span.s6 {font: 9.0px Palatino}
    span.s7 {font-kerning: none}
    span.Apple-tab-span {white-space:pre}
    table.t1 {background-color: #ffffff; border-collapse: collapse}
    td.td1 {width: 85.0px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td2 {width: 85.0px; min-width: 50.0px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td3 {width: 164.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td4 {width: 99.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td5 {width: 99.5px; min-width: 50.0px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td6 {width: 200.6px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td7 {width: 879.7px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td8 {width: 518.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td9 {width: 612.4px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td10 {width: 1132.6px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td11 {width: 1818.9px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td12 {width: 99.5px; min-width: 50.0px; height: 13.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td13 {width: 1818.9px; height: 13.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    td.td14 {width: 677.5px; padding: 0.0px 10.0px 0.0px 10.0px}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I walk through the implementation of a simple software project in a sequence of discrete design steps&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Architecture&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Engineering&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;I intend to show how to apply the principles of &lt;i&gt;divide and conquer&lt;/i&gt; and &lt;i&gt;superposition&lt;/i&gt; to the design of a system.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;I use diagrams to design each phase of the project and show how to manually convert the diagrams to code.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Background: I use &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt; to create the diagrams in this essay.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Problem&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Problem that I want to solve is using the Scrivener&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; writing tool to produce blog posts that are compatible with Github Pages.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Github Pages uses the Jekyll&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; tool and the file formats prescribed by Jekyll.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I decompose the problem into several parts:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Writing a blog post using the Scrivener tool&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Magic transformer&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Using the Jekyll tool to build a blogging website and having Jekyll add the above blog post (written using Scrivener) to the website&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The &quot;rest&quot; - storing the blog in &lt;i&gt;git, &lt;/i&gt;uploading the blog to github pages, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Parts (1)&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;and (3) are handled by the respective tools (Scrivener and Jekyll).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part (4) uses standard, available technology.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I need to write a program that performs step (2), which transforms the result of Scrivener into something that is acceptable as input to the Jekyll tool.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Step (2) has one input and one output:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;input: a blog post written, and saved into the file system, using the Scrivener tool&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;output:&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;a file(s) saved into the file system that is acceptable to the Jekyll tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;In a very basic form, &lt;/span&gt;Fig. 1 shows this top-level breakdown.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Top Layer.png&quot; width=&quot;400px&quot; height=&quot;36px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;Fig. 1 Basic Architecture&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;We can redraw this using parts,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;by adding &lt;i&gt;ports &lt;/i&gt;to the processes, and skipping the intermediate files, as in Fig. 2&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Top-Layer-With-Ports.png&quot; width=&quot;400px&quot; height=&quot;36px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;Fig. 2 Basic Architecture Redrawn&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;(I choose, arbitrarily, to color output &lt;i&gt;ports &lt;/i&gt;yellow and input &lt;i&gt;ports&lt;/i&gt; green,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Side-effects appear as red &lt;i&gt;ports&lt;/i&gt;.).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Before we do anything else, we need to understand what (1) produces and what (3) consumes.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scrivener Output&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Scrivener tool is like &lt;i&gt;Word®&lt;/i&gt;, on steroids.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For this example, we are only concerned with the shape of the output created by Scrivener.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In particular, we are only interested in the shape of HTML output by Scrivener.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To output a document in HTML format, we use the &lt;i&gt;File &amp;gt;&amp;gt; Compile &lt;/i&gt;option, and we tell Scrivener to compile to a &lt;i&gt;Web Page (.html).&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The resulting HTML depends on&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;whether the document only contains text&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;whether the document contains text and .PNG files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;[&lt;i&gt;Scrivener has many more options and output formats, but for this project, we only care about HTML output and we are willing to constrain our blog posts to contain only text and .PNG files.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Computer Science researchers might proceed to generalize and include more options, but, we are interested in only a practical result &lt;/i&gt;and&lt;i&gt; we are willing to stick to a few conventions in order to simplify the degrees of freedom in the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Later, after this works, we can consider new projects and use this one as a starter template for more complicated variations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Non-programmers like the idea of pulling an existing project off of the shelf and tweaking it to produce new results.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Git shows that projects can be tweaked and that D.R.Y. in-the-large can be handled automatically)&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scrivener Output for Pure Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For text-only documents, Scrivener outputs a single .HTML file.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Scrivener Text Only.png&quot; width=&quot;431px&quot; height=&quot;81px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 3 Scrivener Output - Text Only Case&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scrivener Output for Text Which Includes Images&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For text documents that contain images (.PNG files), Scrivener outputs a directory containing one .html file and a directory called &quot;Images&quot; (spelled with a capital &quot;I&quot; and lower case &quot;mages&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The .html file refers to images using an href element which contains a relative reference to the .png file in the Images/ directory.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This situation is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 4.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Scrivener Text Plus PNG Images.png&quot; width=&quot;400px&quot; height=&quot;244px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 4 Scrivener Output - Text and Images Case&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Detail: the name of the directory has the .html extension, for example &lt;span class=&quot;s3&quot;&gt;abc.scriv&lt;/span&gt; is output as &lt;span class=&quot;s3&quot;&gt;abc.html/&lt;/span&gt;, which contains &lt;span class=&quot;s3&quot;&gt;abc.html/abc.html&lt;/span&gt; and &lt;span class=&quot;s3&quot;&gt;abc.html/Images/&lt;/span&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;At first, this seems bizarre, but it is legal.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The choice of &lt;i&gt;where&lt;/i&gt; the files are saved is made during the &lt;i&gt;Scrivener Compile&lt;/i&gt; action.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Jekyll Input&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Jekyll expect files to be in a subdirectory called &lt;span class=&quot;s3&quot;&gt;_posts&lt;/span&gt; with each file name being prepended with the date, e.g. _posts/2021-01-09-blog.html.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This situation is shown in &lt;span class=&quot;s2&quot;&gt;Fig. 5&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input.png&quot; width=&quot;400px&quot; height=&quot;70px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 5 Jekyll Input&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;Jekyll is usually used to create &lt;/i&gt;static html sites&lt;i&gt; from blog posts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Blog posts can be raw .html files, or, (the usual case) blog posts can be markdown files, .md, containing &lt;/i&gt;front matter&lt;i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When Jekyll processes .md files with front matter, it filters them using the &lt;/i&gt;Liquid&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; &lt;i&gt;tool and puts the result in _site/.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When processing raw .html (the case we are interested in), Jekyll simply copies the file(s) into the _site/ without processing them.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;When a .html file contains images, it is customary to put the images in a directory called &quot;assets&quot; and to have the .html file refer to images in that directory, as in Fig. 6.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images.png&quot; width=&quot;400px&quot; height=&quot;174px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 6 Jekyll Input Using Images in Assets/&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Background:: Jekyll expects a certain directory structure, &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;https://jekyllrb.com/docs/structure/&lt;/a&gt;, and produces a static website in the subdirectory called &quot;_site&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Background: Jekyll does not process any files contained in directories the are named &quot;_*&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The exceptions are &quot;_posts&quot;, &quot;_data&quot;, &quot;_site&quot;, etc.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At this point, we know what the input to step (2) looks like and what output it must produce.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can solve this problem using a layered approach, using any PL (Programming Language).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will call the layers (1) Architecture, (2) Engineering and (3) Implementation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Layers (1) and (2) contain no code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the code is only written in layer (3).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The point of layer (2) (Engineering) is to add enough detail to allow code to be written in the Implementation layer (3).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The point of layer (1) is to collect information about the problem and to arrange that information in a way that indicates the preferred solution.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We iterate between steps (1) and (2) until we know enough about the problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Enough&quot; in this case means that Engineers can draw detailed diagrams (&quot;the spec&quot;) that can be used by Implementors in step (3).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;You guessed it - if Implementors (3) don't have complete information, there is an iteration between (2) and (3).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This iteration might cause new iterations between (1) and (2).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Experienced Engineers know what questions to ask to keep such bubbling-up at a minimum.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;N.B. Agile encourages iteration between (1) and (3) in 2-week cycles. This can only work if the problem is &quot;simple&quot; or if Implementors are, also, Engineers (in which case their time is being wasted and the customer is over-paying high-priced talent to produce menial work).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In state-of-the-art practice, all of the above stages are combined and implemented by a single person or a single team.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This results in a higher cost for the overall project and tends to slow implementation (too much detail at every stage).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Experienced developers break a project down &quot;in their heads&quot;, resulting in uneven implementations that depend on the biases of the developers. Any structuring of projects works &quot;better&quot; than what we have.&lt;/i&gt;]&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The strict separation into multiple layers, like Architecture, Engineering and Implementation makes the whole enterprise work more like business organizations and allows the sub-units of the organization to be completely isolated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;An organization is broken if it allows information/questions to leak between non-adjacent layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Information that leaks through non-adjacent layers is not isolated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Strict separation stops dependencies from working their way through an organization in a spaghetti-like manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Such leakage inhibits scaling.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is the Architect's responsibility to make a design clear and understandable to other readers.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An overview of what we want is in &lt;span class=&quot;s2&quot;&gt;Fig. 7.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images1.png&quot; width=&quot;400px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 7 Overview&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;As stated before, we don't have to worry about the existing tools - Scrivener and Jekyll.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This project needs only to implement the stuff in the middle.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 8 shows the proposed Architecture for the stuff in the middle&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images2.png&quot; width=&quot;400px&quot; height=&quot;245px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 8 Architecture&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;We, also, need to say something about the &lt;i&gt;input port&lt;/i&gt; (green) and the &lt;i&gt;output port&lt;/i&gt; (yellow) and side-effects (red).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;b&gt;input&lt;/b&gt;&lt;/span&gt;: A filename.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The filename might represent the name of (a) a .html file or (b) a directory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In case (b), the directory contains a .html file and another directory called &quot;Images&quot;.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;b&gt;output&lt;/b&gt;: none&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;b&gt;side effects&lt;/b&gt;: A .html file created in the _posts/ directory and image files created in directory &quot;assets&quot; with unique names.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The arefs in the .html file are fixed up to point to corresponding images in the &quot;assets&quot; directory.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;As it stands, the above &quot;description&quot; is written in a &lt;/i&gt;hand waving&lt;i&gt; manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Not all terms are defined.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is unreasonable to ask the Architect for all of the details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is the job of the Engineer to determine if there are &lt;/i&gt;enough&lt;i&gt; details present to allow implementation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some details can be interpolated by the Engineer and some can't.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the latter case, the Engineer must iterate with the Architect and, in the former case, the Engineer does not need to iterate with the Architect.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, in a corporation, a CEO steers the ship, but does not micro-manage.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cottage industries do not scale because the CEOs (owners) do &quot;everything&quot; and, effectively, micro-manage every aspect of the business.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Large corporations scale up (to being large corporations) only when micro-management is expunged.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To ready a small business for scaling, the owner must chop up the work into identifiable layers, then, hire workers to perform work in each layer, allowing the workers to concentrate on the work in his/her layer only (instead of &quot;trying to do everything&quot;).&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers are responsible to produce enough detail to allow implementation. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers are responsible to display details in a way that is understandable to the implementors.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers off-load thinking, about minutiae, from the Architect(s).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers try to interpolate details for the design.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When interpolation does not work, or requires extrapolation, Engineers interace with Architects to glean further details.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers have the experience and training, to think about details without writing code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, Universities train Software Professionals to become Implementors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Training for Software Architecture and Software Engineering does not exist and is expected to &quot;rub off&quot; through experience and involvement in many projects.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In other fields, say Construction, Universities can train Architects and Engineers in only a few years.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Implementors (construction workers) are trained in vocational schools or through apprenticeship.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Back to this example.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this specific example, the Architect has indicated that two branches need to be considered:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Scrivener documents that contain text only&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Scrivener documents that contain text and images.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;Abstraction&lt;/i&gt; is a form of &lt;i&gt;optimization&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; that is taught in Universities.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Architects, and Engineers, must concentrate on the problem-at-hand and &lt;span class=&quot;s5&quot;&gt;strip abstraction away&lt;/span&gt; from the instructions given to implementors.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;For now (maybe forever) we will continue with the sub-divisions - branch A (text only) and branch B (text plus images) - suggested by the Architect.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;The Architect has suggested a form of Divide and Conquer.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Considering only one branch - branch A, text only - we see that two operations need to occur&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;create a file prefix, where the prefix begins with the date in YYYY-MM-DD- form, and,&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move the newly-named .html file into the _posts directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Considering only the other branch - branch B, text plus images - we see the following break down:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;create a file prefix, in YYYY-MM-DD- format&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;edit the arefs in the .html file to refer to images in the assets/ directory&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move the&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;.html file into the _posts/ directory&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move the images into assets/.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, at this Engineering layer, we will make the decision that we will keep the Images/ directory intact, but will prepend it with the prefix and move it, whole, into the assets directory.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This is interpolation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Architecture is not changed by this decision.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Engineer does not need to iterate with the Architect regarding this decision.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;More interpolation: the Engineer looks at the .html format generated by Scrivener and notices that the file-creation-date is embedded in the file as meta-data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Engineer decides (arbitrarily) that this file-creation-date will be used to generate the required file prefix.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In the UNIX® file system, it is possible to get the file creation date from the operating system, but the Engineer decides not to use this and decides to use the Scrivener meta-data instead.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This decision is made by the Engineer on a &quot;gut feel&quot;, knowing that various operating systems provide such creation-date information in various forms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is deemed &quot;better&quot; by the Engineer to let Scrivener worry about this aspect.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I show diagrams of these branches, below.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I leave grayed-out portions on the diagram that act as reminders of what the ultimate goal is.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The grayed-out portions are not required in the Implementation.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Level&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images3.png&quot; width=&quot;400px&quot; height=&quot;246px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. &amp;lt;$n:figure:Engineering Top Level&amp;gt; Engineering Top Level&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The Engineer has created a top level diagram that contains&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;one blue box (Leaf) called &quot;isADirectory'&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;one gray box (Schematic) called &quot;pathA&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;one gray box (Schematic) called &quot;pathB&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;one gray box that is the composition of the above boxes&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;two Dots (wire splitters) that are used internally to route &quot;filename&quot; and &quot;content&quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;In the most extreme case, this implies that six (6) things need to be implemented:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;2 x wire splitter&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x &quot;isADirectory&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x &quot;pathB&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x &quot;pathA&quot;&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;1 x top level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;N.B in Arrowgrams, dots are so common that we build them into the Arrowgrams notation, whereas in Bash, we will need to build dots explicitly.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In FBP, dots are not allowed (they can, though, be explicitly implemented as FBP Components). In Electronics, dots are common and are shown as dots on a schematic diagram (whereas cross-overs are shown only as two wires crossing over, without a dot).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Arrowgrams is based on ideas from Electronics drawings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Arrowgrams &quot;borrows&quot; from Electronics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is a high-level form of reuse.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The gray boxes, e.g. pathA and pathB, might be broken down further, later.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We might add new Parts to the list of things that need to be implemented, later.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;is A Directory?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A simple function within the top level is to determine whether a given filename represents a file or a directory.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Engineer does not need to break this down any further, since this functionality can be done in &lt;i&gt;bash&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If the implementation language does not make this easy, the first-cut implementation can just shell-out to a &lt;i&gt;bash&lt;/i&gt; script.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Engineering Branch B.png&quot; width=&quot;150px&quot; height=&quot;68px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 9 Part: Is A Directory?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Branch A - Text Only&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images4.png&quot; width=&quot;400px&quot; height=&quot;212px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. &amp;lt;$n:figure:Engineering Path A&amp;gt; Engineering Path A&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The Engineer refines this diagram further…&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images5.png&quot; width=&quot;400px&quot; height=&quot;192px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 10 Engineering Path A Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&quot;Blue&quot; boxes mean &quot;code&quot;.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&quot;Gray&quot; boxes mean composition of blocks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;Gray&quot; boxes are call Schematics.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;N.B. there are four (4) boxes to be implemented:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;&quot;create file prefix&quot; (blue box)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&quot;create new name for .html file&quot; (blue box)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;&quot;rename and move .html file&quot; (blue box)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;compose the above into a Schematic part (gray box)&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The Engineer creates a black box from the above:&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images6.png&quot; width=&quot;400px&quot; height=&quot;88px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 11 Black Box Engineering Path A&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Branch B - Text Plus Images&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images7.png&quot; width=&quot;400px&quot; height=&quot;339px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 12 Engineering Path B Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images8.png&quot; width=&quot;400px&quot; height=&quot;313px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 12 Engineering Path B Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images9.png&quot; width=&quot;400px&quot; height=&quot;184px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 13 Black Box Engineering Path B Refined&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At this point, we have enough of a design, and code can be implemented.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Q: The Implementor asks the Engineer whether the temporary file, specified in Branch B, needs to be made available.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A: In this design, the temporary directory does not need to be visible to the outside world, although it might assist in debugging the logic.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Intermediate results, stored in human readable form, can help.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Given that the temporary file is not actually needed, the Implementor can choose any base language for the implementation.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this particular example, we will use &lt;i&gt;bash&lt;/i&gt; and write scripts that represent the Parts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parts must be completely isolated from one another and need to run as asynchronous processes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will implement &lt;i&gt;wires&lt;/i&gt; as named pipes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will implement &lt;i&gt;ports&lt;/i&gt; using file redirection.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It turns out that UNIX® and Bash can create isolated processes, but, running the processes in an asynchronous manner is slightly tricky.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will need to use Bash &quot;&amp;amp;&quot; in many places.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Bash scripts use a &lt;i&gt;rendezvous&lt;/i&gt; protocol for starting up pipes - both ends must exist before the script can proceed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This means that Bash scripts will appear to &quot;hang&quot; if both ends of a pipe are not attached to processes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This will drive us towards needing an &quot;&amp;amp;&quot; on just about every line of the Bash scripts.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Background: in modern forms of UNIX®, e.g. Linux and MacOS, file descriptors (FDs) can be accessed like files, e.g. &lt;span class=&quot;s3&quot;&gt;/dev/fd/3&lt;/span&gt; refers to FD 3, &lt;span class=&quot;s3&quot;&gt;/dev/fd/4&lt;/span&gt; refers to FD 4, and so on.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pipes can be bolted on to FDs using Bash file redirection syntax.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Background: Bash provides a &lt;span class=&quot;s3&quot;&gt;read &lt;/span&gt;builtin command, and assigns the incoming data to a Bash variable, for example:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;read -u 3 xxx&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Reads from FD 3 and assigns the data to Bash variable ${xxx}.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This same action can be performed by referencing the FD with file redirection, e.g.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;read xxx &amp;lt;/dev/fd/3&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Both methods&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; will be used, depending on our mood on a given day.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parts will be built as bash scrips and FDs will be assigned using redirection.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;./create-file-prefix 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} &amp;amp;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This says that Part &quot;create-file-prefix&quot; has two inputs and one output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The inputs come from FD[3] ad FD[4] whereas the output is sent to FD[5].&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We use bash variable ${wire1a}, ${wire2a} and ${wire3} to represent the named pipes.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Background: to implemented Arrograms semantics - a Part is not &quot;done&quot; until all of its children are &quot;done&quot; - we use bash &lt;span class=&quot;s3&quot;&gt;wait.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We will avoid using FD[0], FD[1] and FD[2], since these have special meaning to UNIX® commands.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above invocation of Part &quot;create-file-prefix&quot; demonstrates a vital property of the Arrowgrams way of thinking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The part, itself, can not know where it is getting input from and where it is outputting to.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Every Part can only refer to its own array of file descriptors (FDs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A Part cannot call other parts by name. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Let the previous statement &quot;sink in&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most PLs currently bake the callee's name into the code, e.g. xyz(…), and this inhibits flexible Architecting.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All Parts get inputs from FDs and send their outputs to FDs&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For debugging, we call scripts on entry and exit in each part.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The on-the-fly data used for debugging is supplied by a string passed in as $1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concatenation of debug information is done by using $0 (the command's name) in addition to the string given in $1.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the above code is written as:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p12&quot;&gt;./create-file-prefix &quot;[$1] $0&quot; 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} &amp;amp;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;No Connection - NC - must be handled explicitly in bash.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We implement a Part called nc as a (simple) bash script that reads its input port and does nothing with the data.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Redirecting to /dev/null works only for output NCs, not input NCs, so we implement a Part to perform the no-op action).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Wire-splitters - dots - need to implemented as explicit Parts. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normally, dots would be implemented by the Arrowgrams IDE and wouldn't need to be explicitly implemented. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We stick to the strategy of avoiding generalization, so we build two kinds of wire-splitters, one that splits&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt; an incoming &lt;i&gt;event &lt;/i&gt;onto two output wires and another that splits the &lt;i&gt;event &lt;/i&gt;to three output wires.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In both cases, Branch A and Branch B, the Implementation of creating a new filename is trivial and the 2&lt;span class=&quot;s6&quot;&gt;&lt;sup&gt;nd&lt;/sup&gt;&lt;/span&gt; box is dropped.&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Annotated Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Annotations - the Implementor puts a name on every wire and an FD number on every pin.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images10.png&quot; width=&quot;400px&quot; height=&quot;242px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 14 Annotated Top Level Diagram&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images11.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 15 Annotated Diagram for Branch A&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/architecture-Jekyll Input Using Images12.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 16 Annotated Diagram for Branch B&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;BOM&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In &lt;i&gt;electronics&lt;/i&gt; design, one creates a &quot;bill of materials&quot;, called a BOM.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The BOM for this project consists of 9 Parts:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;nc&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;wire-splitter2&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;wire-splitter3&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;create-file-prefix&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;move-to-posts&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;create-file-prefix-from-subdir&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;edit-and-move-with-images&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;pathA&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;pathB.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The parts, implemented as bash scripts can be found in&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/nc&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/nc&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;wire-splitter2 &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter2&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter2&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;wire-splitter3 &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter3&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/wire-splitter3&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;create-file-prefix &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;move-to-posts &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/move-to-posts&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/move-to-posts&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;pathA &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathA&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathA&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;create-file-prefix-from-subdir &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix-from-subdir&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/create-file-prefix-from-subdir&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;edit-and-move-with-images &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/edit-and-move-with-images&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/edit-and-move-with-images&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;pathB &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathB&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/pathB&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I include the code, for the parts, below.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The code is in branch AEI of &lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;nc&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;#~/bin/sh&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;read junk &amp;lt;/dev/fd/3&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p17&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;wire-splitter2&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;read data &amp;lt;/dev/fd/3&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/5&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/4&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p17&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;wire-splitter3&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;read data &amp;lt;/dev/fd/3&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/4&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/5&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;echo &quot;${data}&quot; &amp;gt;/dev/fd/6&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p16&quot;&gt;&lt;span class=&quot;s7&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&quot;p17&quot;&gt;&lt;span class=&quot;s7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;create-file-prefix&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## go (fd 4)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## prefix (fd 5) (YYYY-MM-DD)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read go &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;if [ &quot;go&quot; == &quot;${go}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;prefix=`date &quot;+%Y-%m-%d&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# error check needed here - filename should not be &quot;&quot; at this point&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;creation_time=`grep &quot;&amp;lt;meta name=\&quot;CreationTime\&quot;&quot; &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if [ ! -z &quot;${creation_time}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;prefix=`echo &quot;${creation_time}&quot; | sed -e 's/&amp;lt;meta name=&quot;CreationTime&quot; content=&quot;\(202.-..-..\)T..:..:..Z&quot;&amp;gt;/\1/'`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;${prefix}&quot; &amp;gt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;else&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;???&quot; &amp;gt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;move-to-posts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## prefix (fd 4)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;## &amp;lt;none&amp;gt; - causes side-effect of mv'ing prefix/filename to ./_posts/&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read prefix &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;read go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;if [ &quot;${go}&quot; == &quot;go&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;basename=`basename &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;echo mv &quot;${filename}&quot; &quot;../_posts/${prefix}-${basename}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;mv &quot;${filename}&quot; &quot;../_posts/${prefix}-${basename}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p2&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;pathA&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Engineering Branch B1.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 17 Implementation Branch A&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## content (fd 4) N/C&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &amp;lt;none&amp;gt; - side-effect - file.html moved to ./_posts/&amp;lt;prefix&amp;gt;_filename.html&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1=wire_pA_1&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1a=wire_pA_1a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1b=wire_pA_1b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2=wire_pA_2&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2a=wire_pA_2a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2b=wire_pA_2b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire3=wire_pA_3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire4=wire_pA_4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;mkfifo ${wire1} ${wire1a} ${wire1b} ${wire2} ${wire2a} ${wire2b} ${wire3} ${wire4}&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;[$1] $0&quot; 3&amp;lt;${wire1} 4&amp;gt;${wire1a} 5&amp;gt;${wire1b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;[$1] $0&quot; 3&amp;lt;${wire2} 4&amp;gt;${wire2a} 5&amp;gt;${wire2b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./create-file-prefix &quot;[$1] $0&quot; 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./move-to-posts &quot;[$1] $0&quot; 3&amp;lt;${wire1b} 4&amp;lt;${wire3} 5&amp;lt;${wire2b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${filename}&quot; &amp;gt; ${wire1} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read content &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${content}&quot; &amp;gt; ${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./nc 3&amp;lt;${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read pin_go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${pin_go}&quot; &amp;gt; ${wire2} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wait&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td9&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;create-file-prefix-from-subdir&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 4)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## prefix (fd 5) (YYYY-MM-DD)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## fullprefix (fd 6) (YYYY-MM-DD-HH-MM-SS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read go &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;if [ &quot;go&quot; == &quot;${go}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;prefix=`date &quot;+%Y-%m-%d&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;base=`basename &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# error check needed here - filename should not be &quot;&quot; at this point&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;creation_time=`grep &quot;&amp;lt;meta name=\&quot;CreationTime\&quot;&quot; &quot;${filename}/${base}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if [ ! -z &quot;${creation_time}&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;prefix=`echo &quot;${creation_time}&quot; | sed -e 's/&amp;lt;meta name=&quot;CreationTime&quot; content=&quot;\(2020-..-..\)T..:..:..Z&quot;&amp;gt;/\1/'`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;fullprefix=`echo &quot;${creation_time}&quot; | sed -e 's/&amp;lt;meta name=&quot;CreationTime&quot; content=&quot;\(2020-..-..\)T\(..\):\(..\):\(..\)Z&quot;&amp;gt;/\1-\2-\3-\4/'`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;${prefix}&quot; &amp;gt;/dev/fd/5 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;${fullprefix}&quot; &amp;gt;/dev/fd/6 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;else&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# this is required because bash does not actually support concurrency&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# bash imposes a rendezvous regimen on named pipes and blocks processes until all pipes have 2 ends&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# this causes deep dependency chains&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (in true concurrency, we would be allowed to create pipes even when one end has not yet been created, and we would not need these two lines of code)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (rendezvous causes dependencies, which causes accidental complexity, which causes lots of head-scratching)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (rendezvous can be implemented using an ACK/NAK protocol)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# (at the least, this pertains to bash under MacOSX Catalina, probably elsewhere, too)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;???&quot; &amp;gt;/dev/fd/5 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;echo &quot;???&quot; &amp;gt;/dev/fd/6 &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td10&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;edit-and-move-with-images&lt;/b&gt;&lt;/h2&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## prefix (fd 4) YYYY-MM-DD&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## fullprefix (fd 6) YYYY-MM-DD-HH-MM-SS&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &amp;lt;none&amp;gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- edit _new/filename/basename change all occurences of Images to ../assets/prefix-Images --&amp;gt; /tmp/basename&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- moves /tmp/basename to ../_posts/filename/prefix-basename&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;- moves _new/filename/Images &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;to ../assets/prefix-Images&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## specific to Scrivener: Compile the document as a Web Page (.html) and leave it in ../_new&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## specific to Scrivener: if a .scriv file contains images, a directory will be created - it contains the .html file plus a sub-directory Images/, for example, abc.sriv --&amp;gt; abc.html/abc.html and abc.html/Images (yes, the directory is named abc.html)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read prefix &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td12&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td13&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read fullprefix &amp;lt;/dev/fd/6&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;if [ &quot;${go}&quot; == &quot;go&quot; ]&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;then&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;base=`basename &quot;${filename}&quot;`&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# edit to new file and move it to _posts&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;sed -e &quot;s@&amp;lt;img src=\&quot;Images@&amp;lt;img src=\&quot;/assets/${fullprefix}-Images@g&quot; &amp;lt;&quot;${filename}/${base}&quot; &amp;gt;&quot;../_posts/${prefix}-${base}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# move Images folder to ../assets/prefix-Images&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;mv &quot;${filename}/Images&quot; &quot;../assets/${fullprefix}-Images&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;# delete source(s), completing the mv (mv is not cp)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;rm -rf &quot;${filename}&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;fi&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td11&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;pathB&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-01-10-10-16-47-Images/project-Engineering Branch B2.png&quot; width=&quot;400px&quot; height=&quot;304px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Fig. 18 Implementation Branch B&lt;/p&gt;
&lt;table width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;#!/bin/bash&lt;/p&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-entry &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## inputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## filename (fd 3)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## content (fd 4) N/C&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## go (fd 5)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## outputs:&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;## &amp;lt;none&amp;gt; - side-effect - file.html moved to ./_posts/&amp;lt;prefix&amp;gt;_filename.html&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;#&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1=wire_pB_1&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1a=wire_pB_1a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire1b=wire_pB_1b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2=wire_pB_2&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2a=wire_pB_2a&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire2b=wire_pB_2b&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire3=wire_pB_3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire4=wire_pB_4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wire5=wire_pB_5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;mkfifo ${wire1} ${wire1a} ${wire1b} ${wire2} ${wire2a} ${wire2b} ${wire3} ${wire4} ${wire5}&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;x [$1] $0&quot; 3&amp;lt;${wire1} 4&amp;gt;${wire1a} 5&amp;gt;${wire1b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./wire-splitter2 &quot;y [$1] $0&quot; 3&amp;lt;${wire2} 4&amp;gt;${wire2a} 5&amp;gt;${wire2b} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./create-file-prefix-from-subdir &quot;[$1] $0&quot; 3&amp;lt;${wire1a} 4&amp;lt;${wire2a} 5&amp;gt;${wire3} 6&amp;gt;${wire5}&amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./edit-and-move-with-images &quot;[$1] $0&quot; 3&amp;lt;${wire1b} 4&amp;lt;${wire3} 5&amp;lt;${wire2b} 6&amp;lt;${wire5} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read filename &amp;lt;/dev/fd/3&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${filename}&quot; &amp;gt; ${wire1} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read content &amp;lt;/dev/fd/4&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${content}&quot; &amp;gt; ${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./nc 3&amp;lt;${wire4} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;read pin_go &amp;lt;/dev/fd/5&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;echo &quot;${pin_go}&quot; &amp;gt; ${wire2} &amp;amp;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;./debug-exit &quot;[$1] $0&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td14&quot;&gt;
        &lt;p class=&quot;p12&quot;&gt;wait&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p class=&quot;p13&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Extra Marks - Transpiling Diagrams&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Some clues about how to transpile diagrams to code:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the diagram into XML form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I drew the diagrams in &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It outputs a compressed XML file.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each tab on the diagram is contained in its own element delimited by &amp;lt;diagram&amp;gt; … &amp;lt;/diagram&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Copy/Paste the compressed data into the tool &lt;a href=&quot;https://jgraph.github.io/drawio-tools/tools/convert.html&quot;&gt;https://jgraph.github.io/drawio-tools/tools/convert.html&lt;/a&gt; and press the &lt;i&gt;decode&lt;/i&gt; button.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This should result in human-readable XML of an mxGraph structure.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The structure contains graphical information about every item in the drawing.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Weed out the syntactic sugar.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Normalize the data - I like factbases (see another one of my essays).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use code to transform the data into some very convenient form, e.g. JSON.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I like using PEG-based parsers (Ohm-js for Javascript, ESRAP for Common Lisp).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;N.B. the graphical data can be considered to be a textual programming language, where details like X, Y, Width and Height have been added.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the 2D graphical information into 1D textual information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.g. find all boxes, then, find all boxes that intersect boxes (high school math).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Small boxes that sit on the edges of larger boxes are &quot;ports&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use standard text-compilation technique from that point on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Some clues on how to draw diagrams that can be transpiled:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Ensure that all boxes are &lt;i&gt;concurrent&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The sequential paradigm (call/return) does not work for diagrams.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Allow text to be included in the diagram (text is better than diagrams for a certain class of programs, e.g. &quot;a = b + c&quot; should be written and not drawn).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use an editor that allows drawing any shape and does not need to know details about what is being drawn.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine Emacs (vim, vscode, etc.) for diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs knows only how to edit characters, in general.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs doesn't check that the code is consistent - that's the job of the compiler in later stages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs allows you to save inconsistent programs - for example, it doesn't check for consistency and stop one from saving an inconsistent program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler will raise error messages, later.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine that diagrams are the same as text code.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Think box/arrow/ellipse/text instead of pixels.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors edit a grid of cells.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells may not overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells are also called &quot;characters&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors are not-quite-2D.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They allow 2D layout of text, but insist on arranging cells in lines and columns.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Diagram editors, OTOH, allow cells to overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;No strict grid structure is imposed.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Don't think in terms of pixels, think about larger constructs, like boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One doesn't need pixel/raster recognition algorithms to effectively use diagrams as syntax (DaS).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;White Box Testing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;During development, most parts were tested using white-box testers.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The topmost white-box tester is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-testall&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-testall&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The remaining white-box testers can be viewed at:&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-create-file-prefix&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-create-file-prefix&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-isADirectory&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-isADirectory&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-move-to-posts&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-move-to-posts&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA-fail&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-pathA-fail&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-scrivener-to-jekyll&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-scrivener-to-jekyll&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-wire-splitter2&quot;&gt;https://github.com/guitarvydas/scrivener-to-jekyll/blob/main/_bin/whitebox-test-wire-splitter2&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Scrivener is a tool for writing books, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It goes well beyond what can be done with WYSIWYG editors, such as Word®.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Scrivener can produce output in many formats.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We will stick with .html (web page) output, for this project.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Jekyll is a &quot;static site generator&quot;, in other words, it produces a website containing only pure .html files and requires no access to &quot;dynamic&quot; technologies like databases.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Jekyll is used to produce blogs for github pages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Github pages is a website generator that runs Jekyll whenever a new post is pushed to the appropriate repo.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;My blog, as an example, can be seen at guitarvydas.github.io and the corresponding repo is at https://github.com/guitarvydas/guitarvydas.github.io.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Liquid was developed by Shopify.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;https://shopify.dev/docs/themes/liquid/reference&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Earlier, I said that this project had one output.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I was simplifying.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;One form of this optimization is often called D.R.Y. (abbreviated as DRY).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DRY is appropriate for Maintenance Engineering, Test Engineering and Implementation and Maintenance, etc., but, DRY is &lt;i&gt;not&lt;/i&gt; appropriate for Architecture and Realization Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;As an example, Architects and Engineers need to indicate that a &lt;i&gt;solution&lt;/i&gt; is &lt;i&gt;like&lt;/i&gt; some other solution with changes (see Paul Bennett's Framing Software Reuse).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Inheritance, as currently implemented, does not capture this kind of relationship in an easy-to-understand manner.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;More methods of doing this in bash exist.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, we could use backtick syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; Even worse, the return address is baked into the code using a &lt;span class=&quot;s5&quot;&gt;dynamic&lt;/span&gt; call-chain, called the &lt;i&gt;Stack&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;DLLs try to solve this direct-call problem using indirection, but still allow the &lt;i&gt;Stack&lt;/i&gt; to determine returns.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Current functional PLs are attacking this problem by disassociating definition from implementation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;UNIX® was capable of doing this in the 1970's.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;FP ignores practical issues like &lt;span class=&quot;s5&quot;&gt;divide and conquer&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Peter Lee showed how to apply divide and conquer to Denotational Semantics, in 1989.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;[8]&lt;/a&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt; &lt;/a&gt;Schematic Parts work the same way as Leaf Parts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One cannot tell how a Part is implemented - as a Leaf or as a Schematic - when using a Part.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;[9]&lt;/a&gt; &lt;/span&gt;In electronics, splitting signals involves only the calculation of &lt;i&gt;impedances.&lt;/i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In software, splitting signals involves copying.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this project, we use bash and get copying &quot;for free&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we were to implement Parts in C, though, we would have to worry about the implications of copying (shallow copy, deep copy, pass-by-reference, etc).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; In fact, this might be a case of premature and unnecessary optimization on my part.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The bash code for Branch A and Branch B was written early in the project, before all of the diagram-to-bash kinks had been worked out.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of change should have been iterated with the Engineer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this case, the project was so small that I executed all tasks in this project.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I was the Architect, Engineer and Implementor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I cut corners in Engineering because I Implemented the bash scripts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Had I exercised more discipline, this optimization might not have occurred.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a larger project, different people would fill the roles of Architecting, Engineering and Implementation - which would have put a damper on such egregious changes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;In a full IDE, which converted diagrams to code, this optimization would not have occurred.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is possible to transpile diagrams to code, but this will be the subject of another essay.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the section &quot;Extra Marks&quot; for clues on how transpilation from diagrams to code might be accomplished.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Real Example</summary></entry><entry><title type="html">Apple® refunded my money because of a bug</title><link href="https://computingsimplicity.neocities.org/2021/01/10/Apple-Refunded-My-Money-Because-of-a-Bug.html" rel="alternate" type="text/html" title="Apple® refunded my money because of a bug" /><published>2021-01-10T00:00:00-05:00</published><updated>2021-01-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/10/Apple%C2%AE%20Refunded%20My%20Money%20Because%20of%20a%20Bug</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/10/Apple-Refunded-My-Money-Because-of-a-Bug.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Apple Refunded My Money Because ofa Bug&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-10T10:23:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-10T10:23:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    span.s1 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;APPLE® REFUNDED MY MONEY DUE TO A BUG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;(&lt;i&gt;disclaimers&lt;/i&gt;)&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;If A Bridge Collapses - Sue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers can be sued if their design fails.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Contractor Forgot To Put A Lock on Your Front Door - Sue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;You live in a city and hire a contractor to renovate / build your house.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The contractor &quot;forgot&quot; to put a lock on your front door.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sue the contractor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Refunds For Buggy Software&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Demand a refund if you are sold buggy software.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CI/CD&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;CI/CD is an acknowledgement that software is buggy and needs to be frequently fixed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a &lt;i&gt;tell&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automobile Recalls&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automobile Lemon Law&lt;/b&gt;&lt;/h2&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;https://www.ballaghedward.ca/article/when-is-a-trademark-not-a-trademark.php#:~:text=In%20the%20context%20of%20trademarks,exclusive%20rights%20in%20the%20trademark.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;https://fairuse.stanford.edu/overview/fair-use/what-is-fair-use/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I allude to any corporation that sells software.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Apple Refunded My Money Because ofa Bug</summary></entry><entry><title type="html">Transpiling diagrams overview</title><link href="https://computingsimplicity.neocities.org/2021/01/10/Transpiling-Diagrams-Overview.html" rel="alternate" type="text/html" title="Transpiling diagrams overview" /><published>2021-01-10T00:00:00-05:00</published><updated>2021-01-10T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/10/Transpiling%20Diagrams%20-%20Overview</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/10/Transpiling-Diagrams-Overview.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Transpiling Diagrams - Overview&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-10T10:19:38Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-10T10:19:38Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss some diagram transpiler issues at the 50,000 foot level.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram Notations&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Ensure that all boxes are &lt;i&gt;concurrent&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The sequential paradigm (call/return) does not work for diagrams.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Allow text to be included in the diagram (text is better than diagrams for a certain class of programs, e.g. &quot;a = b + c&quot; should be written and not drawn).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use an editor that allows drawing any shape and does not need to know details about what is being drawn.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine Emacs (vim, vscode, etc.) for diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs knows only how to edit characters, in general.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs doesn't check that the code is consistent - that's the job of the compiler in later stages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Emacs allows you to save inconsistent programs - for example, it doesn't check for consistency and stop one from saving an inconsistent program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler will raise error messages, later.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Imagine that diagrams are the same as text code.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Think box/arrow/ellipse/text instead of pixels.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors edit a grid of cells.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells may not overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cells are also called &quot;characters&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Programmers' editors are not-quite-2D.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They allow 2D layout of text, but insist on arranging cells in lines and columns.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Diagram editors, OTOH, allow cells to overlap.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;No strict grid structure is imposed.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Don't think in terms of pixels, think about larger constructs, like boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One doesn't need pixel/raster recognition algorithms to effectively use diagrams as syntax (DaS).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpilation Techniques&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the diagram into XML form.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I drew the diagrams in &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It outputs a compressed XML file.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each tab on the diagram is contained in its own element delimited by &amp;lt;diagram&amp;gt; … &amp;lt;/diagram&amp;gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Copy/Paste the compressed data into the tool &lt;a href=&quot;https://jgraph.github.io/drawio-tools/tools/convert.html&quot;&gt;https://jgraph.github.io/drawio-tools/tools/convert.html&lt;/a&gt; and press the &lt;i&gt;decode&lt;/i&gt; button.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This should result in human-readable XML of an mxGraph structure.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;The structure contains graphical information about every item in the drawing.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Weed out the syntactic sugar.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Normalize the data - I like factbases (see another one of my essays).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use code to transform the data into some very convenient form, e.g. JSON.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I like using PEG-based parsers (Ohm-js for Javascript, ESRAP for Common Lisp).&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;N.B. the graphical data can be considered to be a textual programming language, where details like X, Y, Width and Height have been added.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Convert the 2D graphical information into 1D textual information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.g. find all boxes, then, find all boxes that intersect boxes (high school math).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Small boxes that sit on the edges of larger boxes are &quot;ports&quot;.&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Use standard text-compilation technique from that point on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Transpiling Diagrams - Overview</summary></entry><entry><title type="html">The problem</title><link href="https://computingsimplicity.neocities.org/2021/01/07/The-Problem.html" rel="alternate" type="text/html" title="The problem" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/The%20Problem</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/The-Problem.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Untitled&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T09:25:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T09:25:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;THE PROBLEM&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Normal People&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I was invited to advise a lawyer friend.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He wanted a website built for his company.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Two weeks went by and the website project was not yet finished.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He brought the software contractor in and expected to run him over the coals, with my assistance.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When the contractor described the project and his current status, I ended up agreeing with him.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The lawyer was flabbergasted.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Two weeks, for a simple brochure?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Two weeks of paying consulting rates?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I had to explain to my lawyer friend that software development is not built out of black boxes pulled from a shelf.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This was a custom job and that he should not expect the job to be finished yet.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My lawyer friend did not like my answer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Programmers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I gave a demo and showed a &lt;i&gt;working&lt;/i&gt; version of some software to a client.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His techie grilled me on how I used mutexes in my software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I told him that I didn’t use mutexes, at which point he declared that the demo was faked. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I was a liar and couldn’t possibly have finished the development work in so short a time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Bad - Assets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I have a friend who works in the Film &amp;amp; T.V. industry.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He dabbles in software development.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked him how his company manages projects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His response was “Why do you want to know?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These ideas can’t be applied to software development.”&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After more prodding, he told me that Film and T.V. Development was based on a divide and conquer strategy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Work is farmed out to contractors and the contractors return results as assets (3D graphical objects, in this case).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Don't Care&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My friend has created a product for the equestrian world.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The product uses some 40 CPUs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each CPU has only about 16K (K not M) of memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend does not have problems with multitasking.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Order Matters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Order of operation should not matter to produce a given result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, order &lt;i&gt;does&lt;/i&gt; matter in software.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I show this problem in &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In that essay, I show that we cannot rely on the operation of even a simple 2-box system of software.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Real black boxes don’t work that way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If we have two black boxes plugged together, then we get the same result every time, regardless of how the innards of the black boxes (and the wiring between them) is implemented.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This does not happen in software.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Black Boxes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Everyone &lt;i&gt;thinks&lt;/i&gt; that software is built using black boxes.&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Non-programmers understand the concept of black boxes and think that software is built from black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Like Engineering.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Software Professionals &lt;i&gt;think&lt;/i&gt; that they are using black boxes&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;libraries&lt;/i&gt; are not black boxes&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;TDD (Test Driven Development) tries to fit black-box-like thinking onto software, but ultimately fails&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Functional programming throws the baby out with the bathwater to achieve black-box-like behaviour.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This only achieves black-box-like behaviour for a narrow range of problems (one-in-one-out problems - filters, calculators)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;i&gt;Tells&lt;/i&gt; - we see problems at the edges of the software universe - called &lt;i&gt;epicycles&lt;/i&gt; in Ptolemaic cosmology - such as the continual churn of fixes applied to &lt;i&gt;threads&lt;/i&gt; (e.g. &lt;i&gt;promises&lt;/i&gt; are one of the latest fads) and fixes applied to fixes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Threads&lt;/i&gt; are &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; essential complexity.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;i&gt;Promises &lt;/i&gt;fix threads for only a certain class of problems.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(&lt;i&gt;I discuss more &lt;/i&gt;tells&lt;i&gt; for broken software in another essay).&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Mars Pathfinder Disaster&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;https://www.rapitasystems.com/blog/what-really-happened-software-mars-pathfinder-spacecraft&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priority Inversion is Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Mars Pathfinder problem was caused by &lt;i&gt;priority inversion&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This problem was caused by the use of an RTOS.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An RTOS is a stripped-down operating system.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The RTOS was built using “best practices”, but, these best practices led to a hoary, intermittent bug.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The cause of the bug was not understood at the time of construction of the Pathfinder software, but it was always there.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Priorities are Epicycles&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Priorities were invented to ameliorate the problems of time-sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time-sharing was invented to ameliorate the problems of CPU expense.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Priority inheritance was invented to ameliorate the problems of priorities. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Q: Why was it possible to enable/disable priority inheritance?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What niggly problem was that supposed to solve?&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Epicycles.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To read more about Epicycles, read Arthur Koestler’s “The Sleepwalkers”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The book documents the switch from Ptolemaic Cosmology to Copernican Cosmology.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Ptolemaic scientists formalized the concept of adding baubles to the existing theory without fixing the root problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They called this formalism &lt;i&gt;Epicycles&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Avoiding Multitasking Problems&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How To Avoid The Thread Safety Issue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To avoid thread safety issues, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When CPUs are isolated from one another - they cannot interact, except via very constrained channels.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There are no thread safety issues.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is accidental complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is not essential complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thread safety is caused by an optimization - the attempt to share memory across many tasks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This attempt at premature optimization leads to new problems, i.e. accidental complexity.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Avoid The Fairness Issue&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To avoid fairness issues, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When CPUs are isolated from one another - they cannot interact, except via very constrained channels - there are no fairness issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each CPU runs at its own speed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is accidental complexity caused by an optimization (sharing the CPU for many tasks).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fairness is not essential complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The only issue is: are the CPUs &lt;i&gt;fast enough&lt;/i&gt; to accomplish the given task?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How to Conquer Multitasking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;To conquer multitasking and to make multitasking easy to use, give each thread its own isolated CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs cannot share memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs cannot time-share.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Deprecate Recursion and Loop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Computer Science clings to the notion of using Recursion and Loops.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Threads&lt;/i&gt; were invented to accomodate time-sharing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To accomodate deep recursion and loops when using threads, Computer Science invented &lt;i&gt;full preemption&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ironically, loops make no sense on the internet.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You cannot “loop” a pair of distributed computers, you can only send messages between them.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Getting Rid of Full Preemption&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Full Preemption was invented to accommodate loops (and recursion) on &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Full preemption causes many accidental complexities,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;e.g. allocating a stack (memory) for each thread&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;e.g. thread safety, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Full preemption is only needed to &lt;i&gt;simulate&lt;/i&gt; multiple CPUs on a single computer.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;To get rid of full preemption, just give each thread its own isolated CPU and its own isolated memory space.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Problem solved.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Cores&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We, ultimately, want true distributed computing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We could do anything if CPUs were free.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multi-core CPUs are but a half-measure towards achieving the above goal of truly distributed computing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores were invented by hardware designers who were tired of waiting for software to catch up.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simulation On Too Few CPUs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;If we don’t have enough CPUs to go around, we end up simulating CPUs by using VMs and Threads, or, better yet, we can simulate &lt;i&gt;isolated&lt;/i&gt; CPUs (something software professionals tend &lt;span class=&quot;s1&quot;&gt;not&lt;/span&gt; to do, out of a zeal for premature optimization).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPUs used to be very expensive in the 1950’s. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simulation of multiple CPUs was invented early to ameliorate this expense. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of simulation - we call it &lt;i&gt;threads&lt;/i&gt; - has led to a myriad of accidental complexities. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These complexities &lt;i&gt;only&lt;/i&gt; exist in the simulations, and disappear entirely if we allocate enough CPUs to the problem.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computer Science&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A large portion of Computer Science consists of the analysis of accidental complexities caused by the imposition of the epicycle we call &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Early Computer Science, also, tackled the ideas of how to structure data and wrestled that issue to the ground.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yet, the issue of &lt;i&gt;threads&lt;/i&gt; continues to wriggle out of Computer Science’s grasp. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a &lt;i&gt;tell&lt;/i&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;If TDD had succeeded, then all software professionals would be using TDD exclusively.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They don’t.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Untitled</summary></entry><entry><title type="html">Software ceiling</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Software-Ceiling.html" rel="alternate" type="text/html" title="Software ceiling" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Software%20Ceiling</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Software-Ceiling.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Ceiling&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T09:49:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T09:49:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
    ul.ul3 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Software Ceiling&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Who Uses Software?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;End users (non-programmers)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Domain experts (non-programmers)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Software Professionals (programmers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;End User Expectations&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Apps&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;e.g. Minecraft&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;e.g. Weather&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inexpensive&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simple One-Purpose App&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;e.g. loyalty cards&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;e.g. credit cards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchy&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;End users understand &lt;i&gt;hierarchy&lt;/i&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;&lt;i&gt;&lt;/i&gt;e.g. org charts in business&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;&lt;i&gt;&lt;/i&gt;e.g. government (layers)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Uninterested in Details&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;options unwelcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;don't welcome interruptions
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;where to save file&quot;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;what kid of document to create&quot;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. &quot;updates available&quot;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Learn Incrementally&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;learn in a hierarchical / fractal manner&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;learn only a few things at a time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Domain Expert Expectations&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect to be able to snap software together like LEGO® blocks&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect to choose functionality from a palette
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;limited options&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;easily browsed&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. fixed set of functions available in spreadsheets&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Do not care about &lt;i&gt;abstraction&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Understand &lt;i&gt;scripting&lt;/i&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. cooking recipes&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Domain experts use whiteboards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Software Expertise&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Do not want to become software experts&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Expect the benefits of software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;flexibility&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;easy to design solutions within their domains
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. VisiCalc (spreadsheets)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Simple things are simple to implement&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Call in Software Professionals to handle complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tools&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Spreadsheets&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;AppleScript&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Hypercard&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;(Sikuli?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Professionals&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software LEGO® Blocks&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Software Professionals use:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;git&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;GitHub, etc.&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;libraries&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Result:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;not LEGO® blocks&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;growing complexity&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;decreasing reliability&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Whiteboards&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Software professionals sketch designs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;The, they transfer the designs to code
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Why?&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Why not use code instead of sketches?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;&quot;Software is Complicated&quot;&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;excuse?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;or, reality?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hardware Advanced Faster Than Software&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Hardware Advanced Faster Than Software
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Why?
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;glib answer: software is &quot;just&quot; more complicated&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;possibility: there is an inhibiting technology underlying all of software&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;possibility: is there a new technology?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Something different from what we call &quot;programming&quot;?&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;QWERTY Effect&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Technology lock-in&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Incremental
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;QWERTY vs. other keyboard layouts&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;VHS vs. Beta&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;808x vs. other CPU designs&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;QWERTY Effect&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;New Technology?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Many Uses of Computers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;New Technlogy?&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Can QWERY effect mask inhibiting technology?&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;does lock-in stop progress?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. QWERTY design did not stop progress on document preparation&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;software improvements decrease QOS&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; over time
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. LibreOffice runs more slowly on new Macs&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. git fails mysteriously sometimes&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. continuous stream of &quot;update available&quot;&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. continuous stream of new PLs&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. Telecom offered four-nines (0.9999 uptime) technology in 1960's, but no more&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. CI/CD (why is this necessary?)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;A completely different paradigm?
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Is a technology - minus the inhibitor - the same technology, or is it something completely different?&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Is it &quot;wrong&quot; to think of computing as a single kind of thing or are there multiple kinds of computing?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many Uses of Computers&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Calculators&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Event-driven controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computers as Calculators&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Ballistics&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Cryptography (not Blockchain!)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One-in, one-out&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Synchronous&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Functional Approach&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;CALL RETURN&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Hidden global variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;One In One Out&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; one outcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;one input &lt;i&gt;always &lt;/i&gt;leads to one outcome&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;i&gt;Exceptions&lt;/i&gt; are a &quot;special case&quot; tacked onto the side
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;syntactic sugar&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;each step waits for sub-step to complete&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;dynamic dependency chain
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;who calls what is determined at &lt;span class=&quot;s1&quot;&gt;runtime&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;led to incremental band-aids
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;e.g. removing state&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Loop, Recursion allowed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Functional Approach&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&quot;Order Out Of Chaos&quot;, Ilya Prigogene (Nobel laureate)
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;[paraphrased] Functional thinking has set Physics back 100 years&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;FP - Functional Programming&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew Time&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew State&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Time&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Functions are reversible&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;hence, time must be removed, no f(t)&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;does not model physical reality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew State&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Removing state&lt;/p&gt;
&lt;ul class=&quot;ul3&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;when it's a &lt;span class=&quot;s1&quot;&gt;good&lt;/span&gt; idea
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;building a &lt;i&gt;calculator&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;building a &lt;i&gt;filter&lt;/i&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;when it's a &lt;span class=&quot;s1&quot;&gt;bad&lt;/span&gt; idea
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;needing state for functions of time, f(t)
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. controllers&lt;/li&gt;
      &lt;li class=&quot;li2&quot;&gt;e.g. robots&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;CALL RETURN&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Implicitly uses the stack&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Creates a &lt;i&gt;dynamic&lt;/i&gt; record of invocations&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;dependency chain &amp;lt;— dynamic record of invocations&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;useful only for &lt;i&gt;calculator&lt;/i&gt; model of computing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Global Variable&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;All PLs, incl. FP and Smalltalk, share a global variable&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The Stack&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;CALL / RETURN manipulates this global variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computers for Event-Driven Control&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Asynchronous&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Components run forever&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Multiple outcomes&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Eschew Dependencies&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;How to Implement Synchronous Paradigm in Asynchronous Paradigm&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Examples&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Events can occur at any time
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. sensor&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. GUI&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. browser&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. mouse&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;e.g. keyboard&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;Loop, Recursion not allowed&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;not applicable&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;what does it mean to Recur/Loop a &lt;i&gt;system&lt;/i&gt; of independent components?&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components Run Forever&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Components run forever&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;implies State&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to receive data&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to send results&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;implies Send() to send exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Outcomes&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; one output&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; multiple outputs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;One input —&amp;gt; no outputs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;See also
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;Javascript FileReader()&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;[&lt;i&gt;multiple outcomes handled with multiple callbacks&lt;/i&gt;]&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eschew Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Scalability requires lack of dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementing Synchronous Paradigm Using The Asynchronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Blocking
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;ACK / NAK&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Already explored and understood in…
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;networking&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;electronics&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Isolation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Isolation is more important than encapsulation&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Must encapsulate data &lt;i&gt;and&lt;/i&gt; control flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Statecharts
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/StateCharts.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/StateCharts.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;TWO paradigms - not one&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Calculation
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;cryptography&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Event-Driven
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;time-based obfuscation&lt;/li&gt;
    &lt;li class=&quot;li3&quot;&gt;p2p&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Due to choosing wrong paradigm for a problem&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;example
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;threads, multitasking built on top of synchronous paradigm
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li2&quot;&gt;epicycles on top of epicycles&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
      &lt;ul class=&quot;ul2&quot;&gt;
        &lt;li class=&quot;li2&quot;&gt;e.g. promises&lt;/li&gt;
      &lt;/ul&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;Mars Pathfinder disaster&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Shuhari&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Shu
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;end users&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Ha
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;domain experts, non-programmers&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Ri&lt;/li&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li3&quot;&gt;software professionals&lt;/li&gt;
    &lt;hr&gt;
    &lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; Quality Of Service&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Ceiling</summary></entry><entry><title type="html">Sofware kleenex®</title><link href="https://computingsimplicity.neocities.org/2021/01/07/Sofware-Kleenex.html" rel="alternate" type="text/html" title="Sofware kleenex®" /><published>2021-01-07T00:00:00-05:00</published><updated>2021-01-07T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/07/Sofware%20Kleenex%C2%AE</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/07/Sofware-Kleenex.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Sofware Kleenex®&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-07T10:49:39Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-07T10:49:39Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 13.0px 0.0px 0.0px 0.0px; font: 28.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;SOFTWARE KLEENEX®&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Kleenex® is a brand name&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Everyone knows what a Kleenex® is. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;A facial tissue.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kleenex&quot;&gt;https://en.wikipedia.org/wiki/Kleenex&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Kleenex®&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(a,b) returns r throws e&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Entry&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(3,4);&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Surprise!&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This line of code represents two functionalities:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;spin up and invoke a routine called &lt;span class=&quot;s1&quot;&gt;fn&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;transfer data - &lt;span class=&quot;s1&quot;&gt;3 &lt;/span&gt;and&lt;span class=&quot;s1&quot;&gt; 4&lt;/span&gt; - to the routine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that the parameters, both of them - 3 and 4 - &lt;i&gt;must&lt;/i&gt; be transfered to &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; at the same time.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that we will wait for &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to finish its work.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;Furthermore, this line of code says that we will modify a global variable to record who called &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is an optimized list.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is modified by the underlying hardware.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The use of the global variable is pervasive and hidden by most programming languages.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;The global variable is called &lt;b&gt;The Stack&lt;/b&gt;.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Exit&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;x = fn(…);&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This line of code says that we want to spin up and invoke &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, this line of code says that we will wait for &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to finish its work.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, this line of code says that we &lt;i&gt;expect&lt;/i&gt; &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; to &lt;i&gt;always&lt;/i&gt; return a value, even if it doesn't need to do so.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Exception&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;fn(…) … {&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;throw e;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This code says that &lt;span class=&quot;s1&quot;&gt;fn()&lt;/span&gt; encountered an error and &lt;span class=&quot;s1&quot;&gt;Send()&lt;/span&gt;s an error thingie upwards to its caller, or its caller's caller, or the caller's caller's caller, or …&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Furthermore, the chain of who gets to handle the exception is determined by a runtime global variable.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;You guessed it, &lt;b&gt;The Stack&lt;/b&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;This breaks one of the fundamental tenets of Structured Programming.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;One entry, one exit.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://www.ballaghedward.ca/article/when-is-a-trademark-not-a-trademark.php#:~:text=In%20the%20context%20of%20trademarks,exclusive%20rights%20in%20the%20trademark.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Sofware Kleenex®</summary></entry><entry><title type="html">Refactoring</title><link href="https://computingsimplicity.neocities.org/2021/01/02/Refactoring.html" rel="alternate" type="text/html" title="Refactoring" /><published>2021-01-02T00:00:00-05:00</published><updated>2021-01-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/02/Refactoring</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/02/Refactoring.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Refactoring&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-02T08:22:01Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-02T08:22:01Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code is Cheap, Thinking is Expensive&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Purposes of Refactoring&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Refactoring has several purposes&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;change Architecture&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;change, improve, maintainability&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;change, improve, testability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Changing the Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Lift the Architecture out of the code using an SCL&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Refactor the Architecture, not the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Improving Maintainability&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;often, maintainability implies a change to the Architecture (see Changing the Architecture)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;otherwise, refactor the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Improving Testability&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;often, testability implies a change to the Architecture (see Changing the Architecture)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;otherwise, refactor the code&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Refactoring</summary></entry><entry><title type="html">The primary issue</title><link href="https://computingsimplicity.neocities.org/2021/01/02/The-Primary-Issue.html" rel="alternate" type="text/html" title="The primary issue" /><published>2021-01-02T00:00:00-05:00</published><updated>2021-01-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/01/02/The%20Primary%20Issue</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/01/02/The-Primary-Issue.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;The Primary Issue&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-01-02T08:32:26Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-01-02T08:32:26Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 10.0px Palatino}
    li.li7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 13.0px Palatino}
    span.s2 {text-decoration: underline}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
    ul.ul3 {list-style-type: diamond}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Primary Issue: What is a Computer Used For?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is one issue in software that all other issues follow from:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;b&gt;What is a computer used for?&lt;/b&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computing&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Calculation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A computer can be used to calculate mathematical results.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this perspective, a piece of software is a function with one input and one output.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Error conditions are glued onto this perspective as an after-thought.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This was the primary purpose behind the invention of computers. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Computers were invented to calculate ballistic trajectories of projectiles.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This perspective is inherently synchronous.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I posit that computing, and software development, has outgrown this perspective.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Machine Control&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Another perspective for using a computer is to control machinery, such as DAWs (Digital Audio Workstations), injection molding machines, printing machines, etc.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this perspective, each function can have more than one outcome.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In this perspective, the computer receives inputs from outside sensors and produces control outputs to the outside world.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input from sensors can come &quot;at any time&quot;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This perspective is inherently asynchronous.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Distributed Computing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Distributed computers come in two flavors&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;client&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;Some computers perform both of the above roles.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Distributed computers receive asynchronous inputs from&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;users&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;other computers on the network&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(&lt;/span&gt;&lt;i&gt;other stuff omitted for brevity&lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;)&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous vs. Asynchronous&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Several issues are important when discussing synchronicity:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;data delivery&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;code invocation&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;order of operations&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;order of data arrival&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Synchronous Behaviour&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Devliery&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;parameters deliver input data&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;output data is sent - only to the caller - via RETURN statements&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;error data is sent - only up the &lt;span class=&quot;s2&quot;&gt;dynamic&lt;/span&gt; call chain - via exception statements, e.g. &lt;i&gt;throw&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Invocation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;ul class=&quot;ul1&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;actions are invoked by the CALL statement&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;actions use input data (from parameters)&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;actions produce output data and exceptions&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ordering&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;(1) inputs are delivered (via parameters), then (2) code is invoked - all of this is subsumed into the CALL statement&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;(3) actions produce outputs or exceptions&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;caller &lt;i&gt;waits&lt;/i&gt; for callee to perform its action&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Asynchronous Behaviour&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Devliery&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;data is delivered via Send()&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;there is no difference between parameters, return values and exceptions - they are all data delivered by Send()&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;data can be directed (Send()) to any component, not just the caller and the dynamic call-chain&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Invocation&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;at its most basic, actions are invoked for each piece of data received from Send() operations, e.g. fn(a,b,c) would invoke 3 actions - fn(a), fn(b) and fn(c)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;various permutations of this behaviour have been posited,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;for example, the misleadingly-named, &lt;i&gt;dataflow&lt;/i&gt; model invokes actions &lt;i&gt;only&lt;/i&gt; after all inputs have arrived&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;for example, FBP (Flow-Based Programming) invokes actions only when a &lt;i&gt;read&lt;/i&gt; statement is waiting for input on a particular &lt;i&gt;port&lt;/i&gt;&lt;/li&gt;
    &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ordering&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;in the asynchronous model, data delivery and action invocation are not tied together, e.g. many pieces of data can be sent before any action is invoked&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;CALL does not exist&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;parameter delivery is divorced from action invocation&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;RETURN values are delivered via Send() and imply no action invocation(s)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;exception values are delivered via Send() and imply no action invocation(s) ; since Send() supplants syntactic sugar like &lt;i&gt;throw&lt;/i&gt;, error data can be sent to any component and does not imply immediate action invocation&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Ordering is &quot;arbitrary&quot; and controlled only by a &lt;i&gt;dispatcher&lt;/i&gt; function [&lt;i&gt;N.B. dispatchers are commonly used in operating system threads, but, operating systems impose a synchronous behaviour style on all contained actions - such threading protocol is not necessary, despite commonly-held beliefs&lt;/i&gt;]&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simplicity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Simplicity is &lt;i&gt;the lack of nuance&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simplicity results when an appropriate programming paradigm is used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How To Pick A Paradigm?&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;How does one decide which paradigm to use?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Firstly, one must ask the right questions, then apply the principles of Divide &amp;amp; Conquer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: Synchronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;To build a calculator: the synchronous paradigm is appropriate. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;We have seen this paradigm - the synchronous paradigm - evolve into what we call Functional Programming.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: Aynshcronous Paradigm&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;To build a controller, use the asynchronous paradigm. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;See also: Harel Statecharts http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Accidental Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Using the wrong paradigm will lead to accidental complexity.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;E.G. Threads grafted onto the synchronous paradigm.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt; We have seen this evolve into the commonly-held belief that multitasking is hard.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Examples of Synchronous and Asynchronous Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss concrete examples below.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: Cryptography&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Cryptography is a mathematical function of one input which produces one output.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Cryptography is a calculator.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;synchronous paradigm&lt;/i&gt; is appropriate for cryptography.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example: DAW&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A DAW - digital audio workstation - is a controller.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It takes inputs from the user and from a clock and produces outputs, e.g. MIDI, that control various devices (sound generators, envelope generators, etc.)&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;asynchronous paradigm&lt;/i&gt; is most suited to programming a DAW.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GUI&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Graphical User Interface - accepts inputs from a user, then performs actions based on those inputs.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;The inputs come at unpredictable times.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Use &lt;i&gt;asynchronous paradigm&lt;/i&gt;.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Using more than one paradigm is OK
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;e.g. if the actions, that a GUI performs, are sufficiently complex, one might switch to programming the actions in the &lt;i&gt;synchronous paradigm&lt;/i&gt;).&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Current practice: We currently don't favour programming in anything but the &lt;i&gt;synchronous paradigm&lt;/i&gt;, hence, GUIs tend to be programmed in the &lt;i&gt;synchronous paradigm&lt;/i&gt; with bandaids that allow programmers access to &lt;i&gt;asynchronous &lt;/i&gt;behaviours.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;P2P - Peer To Peer&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;P2P - Peer-to-Peer sharing, was popularized by Napster and SETI.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;primarily an asynchronous protocol that shares data and resources between several computers.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Asynchronous Data
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;The primary activity of p2p is to listen for asynchronous communications and to accept data (asynchronously) from other peer computers on the network. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Timers:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;Another activity of p2p is to push chunks of resources to other peer computers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;To achieve resource pushing without flooding the network and exhausting its own upload bandwidth, p2p must use timers, which, from the software perspective, raise timeout events asynchronously.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;asynchronous paradigm&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;2 paradigms
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;Synchronous
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li5&quot;&gt;cryptography&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;Asynchronous
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li5&quot;&gt;protocols between distributed computers.&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;calculations performed in the &lt;i&gt;synchronous&lt;/i&gt; &lt;i&gt;paradigm&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;distributed protocols performed in the &lt;i&gt;asynchronous paradigm&lt;/i&gt;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;essentially p2p.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Browsers, HTML, Internet&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Browser are the new manifestation of GUIs.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Asynchronous
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;Browsers communicate with server computers in a distributed fashion.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Practice:
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;popular programming tools and languages for the &lt;i&gt;asynchronous paradigm&lt;/i&gt; are not common, hence, internet programming is performed with a grab-bag of low-level operations, including JavaScript, node.js, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;The GO language has been evolved to provide better access to low-level functionality in the &lt;i&gt;asynchronous paradigm&lt;/i&gt;, but GO is based on &lt;i&gt;synchronous&lt;/i&gt; belief structures and, is, thus, not the simplest solution to the problem(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Text Editing &amp;amp; Layout&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul3&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Text editing tools tend to be one-in-one-out programs.
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;e.g. the UNIX® tools&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;e.g. LaTeX,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;i&gt;Synchronous paradigm&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Multitasking is hard only if one attempts to solve the multitasking problem using the synchronous paradigm.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">The Primary Issue</summary></entry><entry><title type="html">Peg</title><link href="https://computingsimplicity.neocities.org/2020/12/27/PEG.html" rel="alternate" type="text/html" title="Peg" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/PEG</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/PEG.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;PEG for Lisp&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T22:41:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T22:41:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; text-indent: 18.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #118696; -webkit-text-stroke: #118696}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; color: #000000; min-height: 14.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; color: #474747; min-height: 18.0px}
    p.p15 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p16 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p18 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p19 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; background-color: #fffc80}
    p.p21 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo}
    p.p22 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; min-height: 10.0px}
    p.p23 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #fffc80}
    p.p24 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #fffc80; min-height: 10.0px}
    p.p25 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p27 {margin: 0.0px 0.0px 0.0px 36.0px; font: 9.0px Menlo; background-color: #ffffff}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li12 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000}
    span.s1 {font-kerning: none}
    span.s2 {text-decoration: underline ; font-kerning: none}
    span.s3 {color: #474747}
    span.s4 {font-kerning: none; color: #474747}
    span.s5 {font: 13.0px Symbol; font-kerning: none}
    span.s6 {background-color: #fffc80}
    span.Apple-tab-span {white-space:pre}
    table.t1 {border-collapse: collapse}
    td.td1 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #000000 #000000 #000000 #000000; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: circle}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction - Breakthrough Technology&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Times&quot;&gt;&lt;b&gt;PEG is a breakthrough technology.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;In this essay, I explore how to use PEG instead of REGEX.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;I create examples of PEG in Ohm-JS and ESRAP (Common Lisp). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;These ideas should easily port to other version of PEG.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;PEG stands for Parsing Expression Grammars.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PhD Thesis&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;Bryan Ford’s Thesis&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;http://pdos.csail.mit.edu/~baford/packrat/thesis&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG Enables SCLs&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;PEG Enables SCLs.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;SCL means &lt;i&gt;Solution Centric Language.&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;SCL is like DSL (but more focussed).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many SCLs for One Project&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;We can use many SCLs for one project.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We are used to the idea that a &lt;i&gt;programming language&lt;/i&gt; is very general.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We are used to the idea that one programming language serves many projects.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Instead, we can use many little languages within one project. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Top Down Parsing&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Arial&quot;&gt;&lt;b&gt;Top Down Parsing - Recursive Descent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p11&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li12&quot;&gt;Top Down Parsing is familiar to anyone who uses a recursive language&lt;/li&gt;
  &lt;li class=&quot;li12&quot;&gt;Until Ford's thesis, TDPLs (Top Down Parsing Language) were either hand-built or used in lesser-known tools, such as S/SL, TXL, etc.&lt;/li&gt;
  &lt;li class=&quot;li12&quot;&gt;Recursive languages are common, e.g. JavaScript, Python, C, etc.&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Why Management Disliked SCLs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;DSLs used to be hard to design&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;DSLs are a “whole language” unto themselves&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Needed to budget enormous amounts of time for DSL Development&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Can’t hire replaceable programmers for DSL languages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Need to invest time learning DSL&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cheating - Using Existing Languages&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;What is a “good assembler”?&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Lisp&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;JavaScript&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A good &lt;span class=&quot;s1&quot;&gt;base language, i.e. nice to have:&lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;does not need declaration-before-use&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;first-class functions&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;closures&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;no, or l&lt;span class=&quot;s1&quot;&gt;ittle, syntactic sugar&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;dynamic typing&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/li&gt;
    &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEGs Are Better Than REGEXPs&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs can parse languages that REGEXPs can’t parse&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs use a stack &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; parsing subroutines&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEGs Are Better Than YACC&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEGs define a &lt;i&gt;parser&lt;/i&gt; in a “top down” manner&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;YACC (LR) defines a &lt;i&gt;language&lt;/i&gt; in a “bottom up” manner&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;LR can be more rigorous but, also, harder to use&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (and recursive descent) can parse matching parentheses, YACC cannot&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG does (some) backtracking, resulting in a “more natural” feeling for programmers  (PROLOG &amp;amp; TXL do full backtracking, more than PEG)&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (packrat) memoizes some sequences, making backtracking tractable&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Unity Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;PEG (TDPL) makes it possible to easily preserve spaces.&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;YACC does not preserve spaces (easily).&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Unity Grammar === first step towards cheap and dirty transpilers&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;E.g. HTML &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML+&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Transpilers&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Source-to-source translation&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Easy with PEG&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Hard with YACC&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;example: markdown is a transpiler, e.g. .md syntax &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;example: Shopify’s Liquid is a transpiler, e.g. HTML+restricted syntax &lt;/span&gt;&lt;span class=&quot;s5&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; HTML+JavaScript&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li9&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(see section 2.3.1 of thesis)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Empty String&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Terminal (fancy word for character)&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Non-Terminal (fancy word for a rule)&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;rule&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Sequence&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e1 e2 e3 ...&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Choice&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e1 / e2 / e3 / ...&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;0 or more&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e*&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;1 or more&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e+&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Optional&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;e?&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Followed-by&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;amp;e&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Not followed-by&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;!e&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p14&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example Trivial Arithmetic&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;E.g. trivial arithmetic expressions&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;E ← N  /  ‘(‘ E ‘+’ E ‘)’  /  ‘(‘ E ‘)-’ E ‘)’&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;N ← D N / D&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;D ← ‘0’ / … / ‘9’&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p13&quot;&gt;&lt;span class=&quot;s1&quot;&gt;(note parsing of nested, matched, parentheses ‘(‘ … ‘)’&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Match One Character&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/a/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;OneA = &quot;a&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;a&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /a/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (re.test (text)) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Success');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Failure');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text1 &quot;a&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example1-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneA text1))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;a&quot;;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const example1_grammar = '&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;';&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohmParser = ohm.grammar (example1_grammar);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Success&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Failure&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Match Two Characters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG (Ohm-JS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/ab/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /ab/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (re.test (text)) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Success');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log ('Failure'ß);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text2 &quot;ab&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example2-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneB #\b (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneAThenOneB (and oneA oneB) (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneAThenOneB text2))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 18.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const example2_grammar = `&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;Example2 {&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p19&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const ohmParser = ohm.grammar (example2_grammar);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Groups&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;REGEXP&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;PEG (Ohm-JS)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;/(a)(b)/&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneAThenOneB = OneA OneB&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneA = &quot;a&quot;&lt;/p&gt;
        &lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;OneB = &quot;b&quot;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Helvetica&quot;&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const text = &quot;ab&quot;;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;const re = /(a)(b)/;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;function main () {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var matchArray = text.match (re);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;if (matchArray) {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var first = matchArray[1];&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;var second = matchArray[2];&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (`(javascript) flipped is &quot;${second}${first}&quot;`);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;console.log (`pattern failed`);&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;main ();&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defparameter text &quot;ab&quot;)&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;(defun example3-esrap ()&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneA #\a (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneB #\b (:lambda (x) x))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:defrule oneAThenOneBAndFlip (and oneA oneB)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;(:destructure (a b) (list b a)))&lt;/p&gt;
&lt;p class=&quot;p15&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(esrap:parse 'oneAThenOneBAndFlip text))&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 18.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Unity Grammar for HTML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;title&amp;gt;Top&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;rect { fill:#DAE8FC }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;h1&amp;gt;Top Part (Schematic)&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id7&quot; x=&quot;50&quot; y=&quot;150&quot;&amp;gt;FileSelector&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id8&quot; x=&quot;50&quot; y=&quot;350&quot;&amp;gt;TimeoutTimer&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id9&quot; x=&quot;290&quot; y=&quot;185&quot;&amp;gt;CallbackLogic&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id10&quot; x=&quot;660&quot; y=&quot;150&quot;&amp;gt;Display&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id11&quot; x=&quot;660&quot; y=&quot;320&quot;&amp;gt;ErrorHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id12&quot; x=&quot;660&quot; y=&quot;410&quot;&amp;gt;AbortHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id13&quot; x=&quot;660&quot; y=&quot;490&quot;&amp;gt;NoResponseHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const unityGrammar = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;htmlUnity {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;html = ws* htmlElement headerStuff bodyElement bodyStuff bodyElementEnd htmlEnd&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlElement = &quot;&amp;lt;html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;headerStuff = notBody*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElement = &quot;&amp;lt;body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyStuff = notBodyEnd*&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBody = ~&quot;&amp;lt;body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBodyEnd = ~&quot;&amp;lt;/body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElementEnd = &quot;&amp;lt;/body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlEnd = &quot;&amp;lt;/html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;ws = &quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (unityGrammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addUnity (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('unity ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).unity ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addUnity (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'unity',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;html: function (ws_plural, htmlElement, headerStuff, bodyElement, bodyStuff, bodyElementEnd, htmlEnd) { return ws_plural.unity ().join ('') + htmlElement.unity () + headerStuff.unity () +&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                                    &lt;/span&gt;bodyElement.unity () + bodyStuff.unity () + bodyElementEnd.unity () + htmlEnd.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlElement: function (html, ws_plural) { return html.unity () + ws_plural.unity ().join('');},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;headerStuff: function (notBody_plural) { return notBody_plural.unity ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElement: function (body, ws_plural) { return body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyStuff: function (notBodyEnd_plural) { return notBodyEnd_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBody: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBodyEnd: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElementEnd: function (slash_body, ws_plural) { return slash_body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlEnd: function (slash_html, ws_plural) { return slash_html.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;ws: function (c) { return c.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);};&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;title&amp;gt;Top&amp;lt;/title&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;rect { fill:#DAE8FC }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/head&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;h1&amp;gt;Top Part (Schematic)&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id7&quot; x=&quot;50&quot; y=&quot;150&quot;&amp;gt;FileSelector&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id8&quot; x=&quot;50&quot; y=&quot;350&quot;&amp;gt;TimeoutTimer&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id9&quot; x=&quot;290&quot; y=&quot;185&quot;&amp;gt;CallbackLogic&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id10&quot; x=&quot;660&quot; y=&quot;150&quot;&amp;gt;Display&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id11&quot; x=&quot;660&quot; y=&quot;320&quot;&amp;gt;ErrorHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id12&quot; x=&quot;660&quot; y=&quot;410&quot;&amp;gt;AbortHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;text id=&quot;id13&quot; x=&quot;660&quot; y=&quot;490&quot;&amp;gt;NoResponseHandler&amp;lt;/text&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const unityGrammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;htmlUnity {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;html = ws* htmlElement headerStuff bodyElement bodyStuff bodyElementEnd htmlEnd&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlElement = &quot;&amp;lt;html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;headerStuff = notBody*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElement = &quot;&amp;lt;body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyStuff = notBodyEnd*&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBody = ~&quot;&amp;lt;body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;notBodyEnd = ~&quot;&amp;lt;/body&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;bodyElementEnd = &quot;&amp;lt;/body&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;htmlEnd = &quot;&amp;lt;/html&amp;gt;&quot; ws*&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;ws = &quot; &quot; | &quot;\\t&quot; | &quot;\\n&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (unityGrammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching succeeded&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addUnity (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('unity ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).unity ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addUnity (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'unity',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;html: function (ws_plural, htmlElement, headerStuff, bodyElement, bodyStuff, bodyElementEnd, htmlEnd) { return ws_plural.unity ().join ('') + htmlElement.unity () + headerStuff.unity () +&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                                                                                                                    &lt;/span&gt;bodyElement.unity () + bodyStuff.unity () + bodyElementEnd.unity () + htmlEnd.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlElement: function (html, ws_plural) { return html.unity () + ws_plural.unity ().join('');},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;headerStuff: function (notBody_plural) { return notBody_plural.unity ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElement: function (body, ws_plural) { return body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyStuff: function (notBodyEnd_plural) { return notBodyEnd_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBody: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notBodyEnd: function (any) { return any.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;bodyElementEnd: function (slash_body, ws_plural) { return slash_body.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;htmlEnd: function (slash_html, ws_plural) { return slash_html.unity () + ws_plural.unity ().join (''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;ws: function (c) { return c.unity (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);};&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - SVG Parser&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p16&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p25&quot;&gt;(can't do this in REGEXP)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Common Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Common Lisp (ESRAP)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p18&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h2&gt;
&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; text-align: center; font: 9.0px Palatino&quot;&gt;&lt;b&gt;Ohm-JS&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const text = `&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&amp;lt;svg width=&quot;800&quot; height=&quot;800&quot;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id0&quot; x=&quot;40&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id1&quot; x=&quot;40&quot; y=&quot;320&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id2&quot; x=&quot;280&quot; y=&quot;120&quot; width=&quot;250&quot; height=&quot;130&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id3&quot; x=&quot;650&quot; y=&quot;120&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id4&quot; x=&quot;650&quot; y=&quot;270&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id5&quot; x=&quot;650&quot; y=&quot;360&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;rect id=&quot;id6&quot; x=&quot;650&quot; y=&quot;440&quot; width=&quot;150&quot; height=&quot;60&quot;&amp;gt;&amp;lt;/rect&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p27&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const example6_grammar = `&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;Example1 {&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGElement = &quot;&amp;lt;svg&quot; SVGAttribute* &quot;&amp;gt;&quot; SVGRect+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGAttribute = WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SVGRect = &quot;&amp;lt;rect&quot; RectContent+ &quot;&amp;gt;&quot; &quot;&amp;lt;/rect&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RectContent = IDAttribute | XAttribute | YAttribute | WidthAttribute | HeightAttribute&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IDAttribute = &quot;id=&quot; string&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XAttribute = &quot;x=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;YAttribute = &quot;y=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;WidthAttribute = &quot;width=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HeightAttribute = &quot;height=&quot; integerString&lt;/p&gt;
&lt;p class=&quot;p24&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;string = &quot;\\&quot;&quot; notDQuote* &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;notDQuote = ~&quot;\\&quot;&quot; any&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerString = &quot;\\&quot;&quot; integerDigit+ &quot;\\&quot;&quot;&lt;/p&gt;
&lt;p class=&quot;p23&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;integerDigit = &quot;0&quot; .. &quot;9&quot;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;s6&quot;&gt;}&lt;/span&gt;`;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohm = require ('ohm-js');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const ohmParser = ohm.grammar (example6_grammar);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;const result = ohmParser.match (text);&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;if (result.succeeded ()) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;var semantics = ohmParser.createSemantics ();&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addExample6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;addJSON6 (semantics);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).example6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log ('example6 ohm JSON:');&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (semantics (result).JSON6 ());&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;} else {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;console.log (&quot;Ohm matching failed&quot;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addExample6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'example6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;svg&quot; + attrs.example6 ().join ('') + &quot;&amp;gt;\n&quot; + rects.example6 ().join ('\n') + &quot;\n&amp;lt;/svg&amp;gt;&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;&amp;lt;rect&quot; + contents.example6 ().join ('') + &quot;&amp;gt;&quot; + &quot;&amp;lt;/rect&amp;gt;&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id=&quot; + str.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;width=&quot;+ n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;height=&quot; + n.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return '&quot;' + characters.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return '&quot;' + digits.example6 ().join('') + '&quot;'; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.example6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;function addJSON6 (semantics) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;semantics.addOperation (&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;'JSON6',&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGElement: function (_svg, attrs, _gt, rects, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;svg {\n&quot; + attrs.JSON6 ().join (',\n') + &quot;,\ncontents: [\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot; + rects.JSON6 ().join (',\n&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;') + &quot;\n]}&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGAttribute: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;SVGRect: function (_rect, contents, _gt, _end) {&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                &lt;/span&gt;return &quot;{ kind: 'rect', &quot; + contents.JSON6 ().join (', ') + &quot; }&quot;;},&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;RectContent: function (attribute) { return attribute.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;IDAttribute: function (_id, str) {return &quot;id: &quot; + str.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;XAttribute: function (_x, n) { return &quot;x: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;YAttribute: function (_y, n) { return &quot;y: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;WidthAttribute: function (_w, n) { return &quot;w: &quot;+ n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;HeightAttribute: function (_h, n) { return &quot;h: &quot; + n.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;string: function (_q1, characters, _q2) { return &quot;'&quot; + characters.JSON6 ().join('') + &quot;'&quot;; },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;notDQuote: function (c) { return c.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerString: function (_q1, digits, _q2) { return digits.JSON6 ().join(''); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;integerDigit: function (d) { return d.JSON6 (); },&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;            &lt;/span&gt;_terminal: function() { return this.primitiveValue; }&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/p&gt;
&lt;p class=&quot;p21&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p22&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ohm-JS Grammar IDE&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;(&lt;i&gt;see next instalment&lt;/i&gt;)&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar First&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Test Cases&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Add Support Code Later&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Transpile Ohm Grammars to Other Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p13&quot;&gt;(&lt;i&gt;see next instalment&lt;/i&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">PEG for Lisp</summary></entry><entry><title type="html">Compile time and runtime</title><link href="https://computingsimplicity.neocities.org/2020/12/27/Compile-Time-and-Runtime.html" rel="alternate" type="text/html" title="Compile time and runtime" /><published>2020-12-27T00:00:00-05:00</published><updated>2020-12-27T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2020/12/27/Compile%20Time%20and%20Runtime</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2020/12/27/Compile-Time-and-Runtime.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Compile Time and Runtime&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-27T12:42:51Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-27T12:42:51Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Overview of Comile-time vs. Run-time&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;eliding details&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Fiction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-12-42-51-Images/CompileTimeAndRuntime-Fiction.png&quot; width=&quot;361px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Programmers generalize (think of) 2 phases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reality&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;img src=&quot;/assets/2020-12-27-12-42-51-Images/CompileTimeAndRuntime-Reality.png&quot; width=&quot;100%&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;Compiler generates object files and DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Operating system loads object files and DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;Operating system &quot;fixes up&quot; holes in DLLs&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;App initializes
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li2&quot;&gt;compiler leaves islands of initialization code&lt;/li&gt;
    &lt;li class=&quot;li2&quot;&gt;top-level data, e.g. var x = &quot;abc&quot;;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;App runs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Compile Time and Runtime</summary></entry></feed>