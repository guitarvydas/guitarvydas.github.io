<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-10T15:19:16-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Software development roles</title><link href="http://localhost:4000/2020/12/10/Software-Development-Roles.html" rel="alternate" type="text/html" title="Software development roles" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/10/Software%20Development%20Roles</id><content type="html" xml:base="http://localhost:4000/2020/12/10/Software-Development-Roles.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Software Development Roles (2)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T14:34:06Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T14:34:06Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-align: center; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; color: #80ff08; min-height: 14.0px}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    table.t1 {border-collapse: collapse}
    td.td1 {background-color: #ffff66; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td2 {background-color: #80ff08; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td3 {border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td4 {height: 13.0px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td5 {height: 14.6px; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td6 {background-color: #ccff66; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #ccff66 #ccff66 #ccff66 #ccff66; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td7 {height: 8.8px; background-color: #80ff08; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    td.td8 {background-color: #ccff66; border-style: solid; border-width: 1.0px 1.0px 1.0px 1.0px; border-color: #bfbfbf #bfbfbf #bfbfbf #bfbfbf; padding: 0.0px 5.0px 0.0px 5.0px}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;I break down Software Development down into, roughly, three main roles:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Architecture&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Engineering&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;Software Implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Each role breaks down into sub-roles (see section Roles).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;I fashion this breakdown by observing the breakdown in traditional engineering - e.g. structural architecture/engineering/construction.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Coding is done only by Software Implementors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Software Architects produce the initial design, Software Engineers look after details and Software Implementors write the actual code.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Testing requires someone to think deeply about what it means to test the product, and creating procedures for testing.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Thinking about testing means, at least:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about how to test bought-in code, e.g. libraries, code from GitHub&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about white box testing&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about black box testing&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about system testing&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about Q/A - quality assurance&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about certification (where applicable)&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;thinking about security.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Traditionally, all of the above work has been done by implementors, often called engineers (a mis-nomer).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Conflating work is a sure way to lengthen deadlines.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Some people are good at thinking about libraries (and knowing what exists and what to avoid), some people are good at black box testing, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Forcing one person, or one group, to deal with all of the issues produces uneven results and scheduling problems.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;t1&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;&lt;i&gt;Role&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;&lt;i&gt;Sub-role&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;&lt;i&gt;technologies&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td1&quot;&gt;
        &lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;comments&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;i&gt;Software Architecting&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;multiple paradigms&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;generalist&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;must understand multiple paradigms&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;c.e.g. (counter e.g.) everything is Haskell – no&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td4&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;c.e.g. everything is an Object – no&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;c.e.g. everything is &amp;lt;xxx&amp;gt; - no&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td5&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;whiteboards&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;diagrams&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;code snippets&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;pseudo code&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;DSLs&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;shows ability to view problem from many angles&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Drakon&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;http://drakon-editor.sourceforge.net/&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;StateCharts&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;UML&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;i&gt;indirection&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td6&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;&lt;i&gt;UX Architect&lt;/i&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;UX design is a divide-and-conquer activity&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;design a rudimentary piece of the UX&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;test it (for UX-ness, not for robustness) before proceeding&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;(earliest drafts tested by Architect and Engineers ; later drafts tested by Customer (Stakeholder)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;once designed, Engineering makes it practical and robust&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Humane Interface&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Jef Raskin&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;The Design of Everyday Things&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Donald Norman&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td7&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Realization Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;define first-cut of realized architecture&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;iterate design with Architect until realizable and all I’s dotted and T’s crossed&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Correctness Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;proofs, etc.&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;UX Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;define parameters &amp;amp; timing for responsiveness&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;usability testing&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;feedback to UX architect&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Error Handler Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;analyze testability of product ( &amp;amp; suggest changes)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;create procedures / scripts for Q/A&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Throw / catch&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Signals&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Events&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;A.O.C. (Aspect Oriented Programming)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Maintenance Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Refactoring&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;D.R.Y.&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Optimization Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Profiling&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;remove Architectural indirection if appropriate&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Security Engineering&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Test Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Incoming Test&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;test suitability of all bought-in technologies (e.g. code from GitHub)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Black Box Testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;White Box Testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Q/A&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;devise ways to break product&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Scripting&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Back-to-back testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;large systems can feed inputs to same kinds of systems&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Sikuli&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Release Engineer&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;CD&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Dashboards&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;CI&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Implementation&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Q/A&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Maintenance&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Testing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Hardware production test used HP Trace Analyzers that would generate a GUID for every test (including sequencing over time) for a “golden unit” (known to be good), when GUID didn’t match in production unit, then further testing was used to determine&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;where the fault was (kind of a Canary CI, replacing Unit test with faster/cheaper tests which signalled Go/no-go only)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Teaching Software to Children&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;different set of concerns than providing tools to Professionals&lt;/p&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Rhetorical Question: would you drive across a bridge designed by a gifted child?&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Software for Business &amp;amp; non-programmers&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Rhetorical Question: would you drive across a bridge designed by a Professional who isn’t an Engineer?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;E.g. a Dentist?&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Word&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Excel&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Visio&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Scapple&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Scrivener&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Software for Domain Experts (not&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td8&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;people with expertise who see a need and want to learn “just enough” programming to fill that need&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;e.g. accounting software&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;HyperCard&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;VisiCalc&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;absolute addressing&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;grid layout (VisiCalc)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;fixed layout (HyperCard)&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;few options&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;“obvious”&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Software Designs Based on Existing Paradigms&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td2&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;transitional (only)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;will be supplanted by designs&lt;br&gt;
based on computing-driven&lt;br&gt;
paradigms&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;desktop&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;filing cabinet&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;typewriter&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Netflix&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old, but similar paradigm: TV&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;blogs&lt;/p&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: magazine articles&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;tablet, phone&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: typewriter keyboard&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;cell phone&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: home phone&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;Amazon&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: retail&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;internet&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: libraries&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: do we need an O/S?&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;IoT&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: expensive all-in-one computers&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: desk calculator&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;loops&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: piano&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: recording soundboard (e.g. mimicked by GarageBand, ProTools)&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;video+audio, YouTube&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: audio&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: whiteboard&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;WFH&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: office&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;condo&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: house&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;bicycle, fat bike, ebike, public transit&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;middle&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p7&quot;&gt;old: automobile&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;bottom&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
      &lt;td valign=&quot;top&quot; class=&quot;td3&quot;&gt;
        &lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Software Development Roles (2)</summary></entry><entry><title type="html">5 whys of full preemption</title><link href="http://localhost:4000/2020/12/10/5-Whys-of-Full-Preemption.html" rel="alternate" type="text/html" title="5 whys of full preemption" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/10/5%20Whys%20of%20Full%20Preemption</id><content type="html" xml:base="http://localhost:4000/2020/12/10/5-Whys-of-Full-Preemption.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;5 Whys of Full Preemption&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T14:49:46Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T14:49:46Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Q1: Why are multitasking libraries and operating systems difficult to use?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because they use full preemption.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q2: Why do multitasking libraries and operating systems use full preemption?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: That is how multiple threads can be &lt;i&gt;simulated&lt;/i&gt; on a single processor.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q3: Why do we simulate multiple threads on a single processor?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Processors are expensive, so we can only afford to use one processor.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q4: Why are processors expensive?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Processors used to be expensive, but they are inexpensive now.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q5: Why don't we use multiple processors, one for each thread?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because that is the way we always did it, starting with when processors were expensive.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Conclusion: Use multiple processors.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Stop trying to simulate multiple threads on a single processor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you do simulate multiple threads on a single processor, don't simulate scenarios, like memory sharing, that cannot be done using multiple processors (that just invites accidental complexity).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;i&gt;[5 Whys suggested by Daniel Pink in Masterclass: https://www.youtube.com/watch?v=My7hjBp4wH0]&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">5 Whys of Full Preemption</summary></entry><entry><title type="html">5 whys of multiprocessing</title><link href="http://localhost:4000/2020/12/10/5-Whys-of-Multiprocessing.html" rel="alternate" type="text/html" title="5 whys of multiprocessing" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/10/5%20Whys%20of%20Multiprocessing</id><content type="html" xml:base="http://localhost:4000/2020/12/10/5-Whys-of-Multiprocessing.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;5 Whys of Multiprocessing&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T14:59:56Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T14:59:56Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Q1: Why don't we use multiprocessing more often?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because multiprocessing is difficult.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q2: Why is multiprocessing difficult?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because it is complicated.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q3: Why is multiprocessing complicated?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because it has race conditions.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q4: Why does multiprocessing have race conditions?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because Threads share memory.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q5: Why do Threads share memory?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because it is more efficient to share memory when Threads are on the same processor. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q6: Why do you use the same processor for Threads?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because processors and memory are expensive.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q7: Why are processors and memory expensive?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: They're not expensive anymore.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Conclusion:&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We need to stop sharing memory.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We need to put Threads on separate processors (aka, IoT and distributed processing).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;i&gt;Actually, the physics of parallel systems implies that we must always deal with real race conditions, but, race conditions based on memory sharing, priorities, etc. are accidental complexities.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Race conditions caused by physics were explored and handled in the 1970's by Electrical Engineers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe even earlier.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Race conditions due to physics are found in the arrival of so-called simultaneous events (we are re-discovering these real problems, when dealing with distributed systems).&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;i&gt;[5 Whys suggested by Daniel Pink in Masterclass: https://www.youtube.com/watch?v=My7hjBp4wH0]&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">5 Whys of Multiprocessing</summary></entry><entry><title type="html">5 whys of software components</title><link href="http://localhost:4000/2020/12/10/5-Whys-of-Software-Components.html" rel="alternate" type="text/html" title="5 whys of software components" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/10/5%20Whys%20of%20Software%20Components</id><content type="html" xml:base="http://localhost:4000/2020/12/10/5-Whys-of-Software-Components.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;5 Whys of Software Components&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T15:09:45Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T15:09:45Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Q1: Why can't we plug software modules together like LEGO® blocks?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because software is too complicated.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q2: Why is software too complicated?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because we can't plug software modules together like LEGO® blocks.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q3: Why can't we plug software modules together?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because the interfaces are way too complicated.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q4: Why are interfaces too complicated?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because libraries and APIs have hidden dependencies.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q5: Why do libraries and APIs have hidden dependencies.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because we use languages that hide dependencies.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q6: What kind of dependencies are hidden by languages?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: For one example, CALL / RETURN leaves breadcrumbs on stacks, forming dynamic dependency chains.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q7: Why do CALL/RETURN leave breadcrumbs on the stack?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: RETURN needs to follow the breadcrumbs back to the caller.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q8: What happens when a CALLed routine calls another routine?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: The callee becomes the caller and leaves another breadcrumb on the stack.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q9: Why is a stack used?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Why not use a &quot;register&quot;?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Stacks are used so that previously laid breadcrumbs are not over-written.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q10: Is the stack of breadcrumbs a dynamic data structure?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Yes.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q11: Is the stack of breadcrumbs a dependency chain?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Yes:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q12: Is the stack not just a list?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Yes, but it is an optimized list.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q13: Why is it necessary to optimize lists to make stacks?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because we need to optimized memory usage.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q14: Why do you need to optimize memory usage?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Because memory is expensive&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q15: Why is memory expensive?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Memory used to be expensive in the 1950's.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q16: Is memory still expensive in 2020?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: No.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q17: Why do we use techniques to optimize memory usage, when memory is no longer expensive?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Uh, because we've always done it that way.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q18: Did we notice that the ground rules have shifted?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Memory used to be expensive, but is no longer expensive?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Uh, no, we didn't notice.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q19: Why didn't we notice?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Uh, because we believe in building on the shoulders of others.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Q20: Are we in the weeds?&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A: Yes.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;i&gt;[5 Whys suggested by Daniel Pink in Masterclass: https://www.youtube.com/watch?v=My7hjBp4wH0]&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">5 Whys of Software Components</summary></entry><entry><title type="html">Anecdote secretary vs. synchrony</title><link href="http://localhost:4000/2020/12/10/Anecdote-Secretary-vs.-Synchrony.html" rel="alternate" type="text/html" title="Anecdote secretary vs. synchrony" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/10/Anecdote%20-%20Secretary%20vs.%20Synchrony</id><content type="html" xml:base="http://localhost:4000/2020/12/10/Anecdote-Secretary-vs.-Synchrony.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Anecdote - Secretary vs. Synchrony&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T10:11:54Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T10:11:54Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote - Secretary vs. Backup Instructions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In the early 1980's…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We had a VAX-11/750 (IIRC) with multiple dumb terminals (24x80) hung off of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I noticed that most programmers did not logout before going home at the end of the day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I noticed that our secretary used to arrive to work before all of the programmers arrived.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked the secretary to perform&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;backups every morning before the other programmers arrived.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote out instructions in the form:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If you see &quot;&amp;gt; &quot;, type LOGOUT &amp;lt;return&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If you see &quot;LOGIN:&quot;, type BACKUP &amp;lt;return&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;When you see &quot;PASSWORD:&quot;, type &amp;lt;…&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;When you see &quot;&amp;gt;&quot; type BACKUP&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;About a week later, I came in early, after the secretary had arrived, but before all of the other programmers had arrived.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I saw&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;LOGOUT&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;LOGIN:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;LOGOUT&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;LOGIN:&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;on &lt;i&gt;every &lt;/i&gt;terminal.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I asked the secretary what happened.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I got 2 answers:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;Backups never succeeded.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;The secretary never typed the word BACKUP and was always typing LOGOUT.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I had assumed that my instructions were sequential.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The secretary started reading the instructions &lt;i&gt;from the top&lt;/i&gt; after every operation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The single sheet of instructions was a &lt;i&gt;parallel&lt;/i&gt; set of instructions in the secretary's mind, but &lt;i&gt;serial&lt;/i&gt; in my mind.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Anecdote - Secretary vs. Synchrony</summary></entry><entry><title type="html">Blockchain overview</title><link href="http://localhost:4000/2020/12/10/Blockchain-Overview.html" rel="alternate" type="text/html" title="Blockchain overview" /><published>2020-12-10T00:00:00-05:00</published><updated>2020-12-10T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/10/Blockchain%20Overview</id><content type="html" xml:base="http://localhost:4000/2020/12/10/Blockchain-Overview.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;FBP and Blockchain&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-10T10:27:01Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-10T10:27:01Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; -webkit-text-stroke: #0000e9; min-height: 18.0px}
    span.s1 {text-decoration: underline}
    span.s2 {-webkit-text-stroke: 0px #000000}
    span.s3 {font: 12.0px Times; text-decoration: underline ; font-kerning: none; color: #0000e9}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blockchain Overview&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;“Blockchain” is the generic term for BitCoin, Etherium, et. al.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A blockchain is a chain (using unique hashes as links) of blocks that contain one or more financial transactions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The blockchain is simply a public “ledger” that holds transactions and makes them immutable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Blockchain is not restricted to being a ledger financial transactions, but BitCoin specifically devotes itself to financial transactions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The BitCoin network is essentially a peer-to-peer (P2P) network.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;“Miners” are “big” nodes on the BitCoin network.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;“Miner” nodes are willing to do the heavy lifting and compete with each other to export a block of transactions. In BitCoin, there is a “prize” for the first miner to solve the puzzle and export its block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin is an “unpermissioned” network, meaning that any node can join the network without permission.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BitCoin needs many miners, spread across the globe, to do the real work of verifying and publishing transactions and verifying blocks or transactions published by other miners.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses PoW (proof of work) to solve a puzzle. The first miner to solve the puzzle gets to publish its block. A winning block contains only the transactions that the winner has chosen. Other competitors might choose a different set of transactions from the “mempool”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BitCoin dynamically adjusts so that solving a puzzle takes about 10 minutes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If a transaction sits at the bottom of the pool for &amp;lt;&lt;i&gt;some number of&lt;/i&gt;&amp;gt; days, it might be dropped and never appear in a winning block. I.E. some transactions may &lt;span class=&quot;s1&quot;&gt;never&lt;/span&gt; be processed (“dust”).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Losers, miners, in the competition still perform computations - verifying the contents of each transaction in a published block and complaining, if something looks fishy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PoW wastes computing resources (and electricity). Miners tend to set up their operations, geographically, in places that provide cheap electricity and cool climates (eschewing the need for air conditioning), such as northern Quebec in Canada (lots of cheap hydro, cool climate).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin is written in open-sourced C++.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The original intent of BitCoin was to use as many distributed nodes as possible, distributed over the whole world. The number of nodes can change over time (e.g. new nodes joining and some existing nodes crashing). This is called “unpermissioned” — a node does not need permission to join the network. In general, we don’t know if the nodes can be trusted or if they might be fakers. The main problem in this case is BFT (Byzantine Fault Tolerance). The mathematics makes assumptions about how many nodes are fakers, and if a certain threshold of trusted nodes is attained, then the mathematics makes guarantees about the trustability of the whole network.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;IBM, Linux and banks flog a “permissioned” kind of blockchain (HyperLedger). In this version, the nodes are all known and their count is determinate, i.e. no one can join the HyperLedger without permission. This is very similar to what banks (and VISA, et al) already do. It is not clear to me that this is true to the original intent of blockchain. It seems to be a marketing trick to capitalize on the buzz-word “blockchain”.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is not clear where BitCoin originated. Supposedly, “Satoshi Nakomoto” invented and open-sourced BitCoin. Who Satoshi is, is a secret. This secrecy could mean many things — that the originator is an individual or a group concerned with freedom of money and transactions, or a government group intent on removing paper money from circulation, or … &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Race conditions, caused by timing and the non-locality of the mining nodes, is handled by the “longest chain is accepted” strategy, which settles out after &amp;lt;&lt;i&gt;some number of&lt;/i&gt;&amp;gt; blocks have been verified (about 6-ish).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Along with BFT, so-called “Sybil attacks” are culprits that blockchains guard against. “Sybil attacks” are nodes that try to cheat the system by cloning several nodes on a single machine (multiple “personalities” on a single machine - similar to the film Sybil), and try to collude to gain control of transactions (i.e. making them pay out to the colluders). The front-line, easiest, defence against Sybil attacks is to make the PoW puzzles so onerous that only a single cpu with full power can solve the puzzle in about 10 minutes. If a single node is split into a bunch of time-shared nodes, the split, faked, nodes can never perform the full work (puzzle breaking) in less time than a full node, and a Sybil (fake) node can almost never win publishing rights for a block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;By unconscious consensus, papers that discuss blockchain algorithms tend to use the names “Alice” and “Bob” as blockchain transaction participants.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses a puzzle that consists of hashing something (e.g. the proposed block of transactions plus a kludge factor — the “nonce”) until the hashcode has a requisite number of zero’s at its front.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of puzzle can only be solved by brute force, and it takes a random amount of time to solve.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;On the other hand, once solved (and published) the hashcode can be easily (and cheaply) verified, hence, all other nodes can verify the puzzle solution, to verify that the winning node did, indeed win.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The winning miner node gets to create a certain amount of BitCoins and to insert them into the published block (payable to the winning node).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;That is how new BitCoins come into existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The amount of new BitCoins granted to the winning miner, drops over time, and at some point (a few years away, from 2019) the grant amount will drop to zero, hence, the BitCoin supply has an upper limit (which might affect future quantitative easing using BitCoin).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each transaction gives a fee to the winner, who also collects the BitCoin grant (prize).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When the grant drops to zero, winning miners will only receive transaction fees.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Users (human) of the BitCoin network own a “wallet” that holds one-half of a public/private key (they hold the private, or “secret” key).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The wallet generates public keys which are used in transactions as destination addresses to which BitCoins (or fractions of BitCoins) can be sent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All transactions are visible forever in the blockchain.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each block contains a hashcode to the previous block.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If any transaction in the chain is tinkered with, the whole chain will not verify.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Using multiple public keys can make the chain harder to read, but ultimately, with enough horse-power, the chain can be unravelled, traced and viewed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In a BitCoin-only world, a black market or “cash deals” cannot exist.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin also defines light weight nodes. Light weight nodes (e.g. smart phones) can participate in the network (generating transactions, holding wallets), but don’t do the heavy lifting (mining).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin uses Merkle trees to reduce memory usage - not every node needs to hold the complete chain at all times.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Merkle trees are a subset of ADS (Authenticated Data Structures).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Validation nodes, still, must visit and verify &lt;span class=&quot;s1&quot;&gt;each&lt;/span&gt; published block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The “value” of BitCoins is purely speculative and changes over time according to market whims.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Improvements to BitCoin are the subject of heated research. Improvements include: improving the transaction rate (BitCoin publishes a block of verified transactions every 10 minutes (at best 2700 transactions &lt;a href=&quot;https://cryptoslate.com/bitcoin-transactions-per-block-at-all-time-highs/&quot;&gt;&lt;span class=&quot;s3&quot;&gt;https://cryptoslate.com/bitcoin-transactions-per-block-at-all-time-highs/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s3&quot;&gt;)&lt;/span&gt;, whereas permissioned networks, e.g. VISA, process 1,000’s of transactions per second), scaling improvements such as CoSi and sharding (BitCoin slows down as the number of nodes/miners increases), better (cheaper) anti-cheating methods (e.g. PoS - proof of stake ; Randhound protocols), alternative data structures (e.g. Etherium), “smart contracts” (e.g. Etherium), etc.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;There are 100’s, if not 1,000’s, of digital currencies in existence.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Which currency will win market share?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, BitCoin has the most market share, Etherium is a far second. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We already know that first-to-market holds a distinct advantage - e.g. Intel won the cpu battle in the face of, later, “better” cpu’s (Motorola, National Semiconductor), VHS won the battle, over Beta, etc. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Permissioned networks are, currently, massively faster than unpermissioned networks.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Experiments / product offerings are being made, using non-monetary transactions, e.g. storing digital handles to physical objects (e.g. deeds, etc.) in the immutable ledger.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Surprises&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin does not provide anonymity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;BitCoin does NOT guarantee that every transaction will be processed. Transactions are dropped from the “mempool” if they sit at the bottom for &amp;lt;&lt;i&gt;some&lt;/i&gt;&amp;gt; days.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transactions cost money. Miners can grab and commit transactions based on fees plus mining rewards.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pederson commitments can provide anonymity, but are very expensive (time-wise) to compute and anonymity must start at the beginning of time (at the genesis, beginning, of the blockchain).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All BitCoin transactions are fully consumed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you want to receive “change” back from a transaction, then you must split the transaction into two parts - one that goes to the vendor and one that goes to yourself.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A miner that wins publishing rights for a block, gets to keep any “leftovers” (i.e. amounts that remain after the transaction has been processed. All transactions are fully consumed, some transactions may not sum to zero, the unclaimed difference goes to the winning miner).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Declaration of a winning miner is done in a as-random a method as possible (determined by the puzzle).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The winning miner collects all the transaction fees from the winning block, all leftovers from the winning block and the mining prize (as it stands at that moment in time).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A losing miner gets nothing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must amortize the random, non-frequent, wins against frequent losses.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">FBP and Blockchain</summary></entry><entry><title type="html">Concurrency is a paradigm</title><link href="http://localhost:4000/2020/12/09/Concurrency-is-a-Paradigm.html" rel="alternate" type="text/html" title="Concurrency is a paradigm" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/09/Concurrency%20is%20a%20Paradigm</id><content type="html" xml:base="http://localhost:4000/2020/12/09/Concurrency-is-a-Paradigm.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Concurrency is a Paradigm&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:52:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:52:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    p.p4 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 7.0px 0.0px; font: 10.0px Times}
    span.s1 {font: 12.0px Times}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency is a Paradigm.&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not parallelism.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is a paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Programs designed to be parallel must employ the concurrent paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Parallelism implies Concurrency.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency does not imply Parallelism.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is a paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concurrency is often conflated with Parallelism.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is simpler than Parallelism. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not time-sharing. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not memory-sharing. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not thread safety. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;Concurrency is not priority inversion.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Rob Pike’s talk “Concurrency Is Not Parallelism” https://vimeo.com/49718712&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Concurrency is a Paradigm</summary></entry><entry><title type="html">Concurrency is not parallelism</title><link href="http://localhost:4000/2020/12/09/Concurrency-is-not-Parallelism.html" rel="alternate" type="text/html" title="Concurrency is not parallelism" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/09/Concurrency%20is%20not%20Parallelism</id><content type="html" xml:base="http://localhost:4000/2020/12/09/Concurrency-is-not-Parallelism.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Concurrency is not Parallelism&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:53:15Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:53:15Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    p.p2 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Times; min-height: 14.0px}
    p.p4 {margin: 0.0px 0.0px 7.0px 0.0px; font: 10.0px Times}
    li.li1 {margin: 0.0px 0.0px 7.0px 0.0px; font: 12.0px Times}
    span.s1 {text-decoration: underline}
    span.s2 {font: 12.0px Helvetica}
    span.s3 {font: 12.0px Times}
    span.s4 {font: 7.0px Times}
    span.Apple-tab-span {white-space:pre}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;Concurrency is a programming &lt;i&gt;paradigm&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Parallelism is an application problem, &lt;i&gt;not&lt;/i&gt; a paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Parallel programs must use the concurrent paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concurrent programs, though, are not necessarily parallel.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;https://vimeo.com/49718712&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;I used to conflate parallelism and concurrency until I watched Rob Pike’s talk.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;I used to try to convince people that they could write concurrent programs using something “better” than Processes (Threads).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What I didn’t realize was that I was trying to explain the difference between the &lt;span class=&quot;s1&quot;&gt;paradigm&lt;/span&gt; called “concurrency” and the application &lt;span class=&quot;s1&quot;&gt;problem&lt;/span&gt; called “parallelism”.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A parallel program &lt;i&gt;must&lt;/i&gt; run on multiple processors.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A program designed using the concurrent paradigm can run on a &lt;i&gt;single&lt;/i&gt; Processor or on multiple processors. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The advantages of using the concurrent paradigm can be seen even on a single processor system.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;One can write concurrent software that uses only a single Processor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One cannot write parallel software that uses a single Processor.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can &lt;i&gt;simulate&lt;/i&gt; parallel software on a single processor, but this is not necessary (although it might help debugging, while hindering debugging). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Multi-tasking – as we know it today – is a &lt;i&gt;simulation&lt;/i&gt; of parallelism.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multi-tasking, as we know it today, tries valiantly to solve too many problems at once – e.g. memory sharing, bandwidth optimization, time-sharing, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Multi-tasking as we know it today, is a simulation of parallelism that attempts to optimize concurrency using multiple stacks (a form of memory sharing optimization + processor optimization and sharing).&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;A concurrent system is composed of a number of &lt;i&gt;closures&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is a single distinguished routine, called the Dispatcher().&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Distpacher() invokes closures, at random.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;That’s all there is.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;It is simple – almost too simple – to implement concurrency in any language that supports &lt;i&gt;closures&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is possible to implement the concurrent paradigm in C or assembler, too, one just needs to pay more attention to details.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;As simple as this sounds, the concurrent paradigm forces one to program in a completely different manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The program cannot rely on synchrony.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The program – composed of many communicating closures – must be written in a way that acknowledges that &lt;i&gt;any&lt;/i&gt; closure might be awakened at &lt;i&gt;any &lt;/i&gt;time (by the Dispatcher()).&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;This seemingly simple requirement causes programmers to re-evaluate control-flow coupling.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Operating system Processes and threading libraries are heavy-handed approaches to creating closures and a Dispatcher().&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some, &lt;i&gt;but not most&lt;/i&gt;, cases it is necessary to use hardware to protect one program from another (e.g. MMUs).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some, &lt;i&gt;but not most&lt;/i&gt;, cases it is necessary to optimize memory usage using memory-sharing and stacks (stacks are just an optimized form of linked lists).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In some, &lt;i&gt;but not most&lt;/i&gt;, cases it is necessary to use time-sharing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;When you strip these features out of threading libraries, you get multi-tasking that is easy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Closures have been around for a long time, and they don’t require MMUs, memory sharing, stacks and time-sharing.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Closures are like GOTOs – they &lt;i&gt;can&lt;/i&gt; be misused.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Organizing closures in a hierarchical manner (see my other essays on this subject) is one way to tame their use.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We have found that we need “languages” that encourage certain usage patterns – e.g. C vs. assembler programming (C encourages Structured control flow, through if-then-else statements, etc.) - e.g. OO encourages data encapsulation (but leaves control-flow encapsulation wide open, if not worse off).&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;GOTOs are assembler-level details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTOs must exist.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;GOTOs must be tamed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, Closures exist and must be tamed.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Message-passing is another GOTO-like atomic element.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It must be tamed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Message-passing enables the concurrent paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A component can send another component a message, but the receiving component is not constrained as to when it deals with the message.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Message-passing defeats rendezvous.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Message-passing allows asynchrony.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The concurrent paradigm requires asynchrony.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Backus asked “Can Programming Be Liberated From The von Neumann Style?”.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The question is a good one.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The answer that Backus proposed was insufficient, though.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Mathematics, as we know it today, implies synchronous evaluation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We need to think of mathematics and synchrony being &lt;i&gt;isolated&lt;/i&gt; on asynchronous &lt;i&gt;islands&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Computers are parallel by default.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Forcing synchrony onto every part of computing is contrary to the manner in which computers work.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, multi-tasking is considered to be a “hard” problem mostly because multi-tasking is being solved using only one paradigm – a paradigm that is not the best choice for every problem in a particular solution.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is like trying to emulate C-like &lt;i&gt;format&lt;/i&gt; statements in PROLOG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It can be done, but results in accidental complexity.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;“Yes” to synchronous operations floating on asynchronous islands.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;“No” to synchronous &lt;i&gt;everything&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;It is OK to use more than one paradigm at a time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, again, PROLOG leads the way towards thinking in relational terms, but casting &lt;i&gt;everything &lt;/i&gt;as a relation brings unnecessary difficulty.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Paradigms are DSLs draped over full-featured assemblers.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The API for the concurrent paradigm consists of one routine – Send().&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;These are some examples of the concurrent paradigm:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;UNIX® shell pipelines&lt;/li&gt;
  &lt;li class=&quot;li1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;closures using queues/mailboxes for inter-closure communication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p1&quot;&gt;O/S threads, and threading libraries, are often conflated with the concurrent paradigm.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;O/S threads – and many threading libraries – solve much greater problems,&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; and are poor examples of the concurrent paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Encourages the absence of dependencies&lt;/li&gt;
  &lt;li class=&quot;li1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;•&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/span&gt;Isolation.&lt;/li&gt;
  &lt;hr&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Most HLL PLs started out life as DSLs built on top of full-featured substrate languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Greenspun’s 10&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; rule is usually taken as a joke, but taken in the light of HLLs-as-DSLs, it begins to ring true.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;OK, OK, I am simplifying.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are some house-keeping functions that might be necessary.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We definitely don’t need RETURN and we don’t need CATCH/THROW.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Send() is sufficient. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;RETURN?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use Send() instead. CATCH/THROW?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use Send() instead.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;LOOP?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get rid of it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Recursion?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Get rid of it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[Also, we don’t need dynamicism.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Dynamic programming is just another way to say “self modifying code”, which is even worse than using the word “GOTO”]. RETURN &amp;amp; CATCH/THROW &amp;amp; LOOP &amp;amp; Recursion make sense &lt;i&gt;only &lt;/i&gt;on a synchronous island.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They are not atomic elements of the concurrent paradigm.&lt;/p&gt;
  &lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Problems such as time-sharing, memory-sharing, protecting apps from one another, protecting against long-running apps, code-reuse, etc..&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most single apps don’t need these features / problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that mutual-multitasking is OK within a single app.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A “bug” is just a “bug” regardless of whether the concurrent paradigm or the synchronous paradigm is used.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Concurrency is not Parallelism</summary></entry><entry><title type="html">Di design intent</title><link href="http://localhost:4000/2020/12/09/DI-Design-Intent.html" rel="alternate" type="text/html" title="Di design intent" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/09/DI%20-%20Design%20Intent</id><content type="html" xml:base="http://localhost:4000/2020/12/09/DI-Design-Intent.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Design Intent&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:53:43Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:53:43Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h1 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica&quot;&gt;&lt;b&gt;DI - Design Intent&lt;/b&gt;&lt;/h1&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;It is the Software Architect’s responsibility to make a design readable and understandable.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Design Intent</summary></entry><entry><title type="html">Dsl manifesto</title><link href="http://localhost:4000/2020/12/09/DSL-Manifesto.html" rel="alternate" type="text/html" title="Dsl manifesto" /><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><id>http://localhost:4000/2020/12/09/DSL%20Manifesto</id><content type="html" xml:base="http://localhost:4000/2020/12/09/DSL-Manifesto.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;DSL Manifesto&lt;/title&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;Paul Tarvydas&quot;&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2020-12-09T14:55:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2020-12-09T14:55:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: lower-alpha}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DSL Prescription&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Use DSLs to Express Design Intent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We currently don't have a language for DI (Design Intent, aka Architecture, aka Business Rules).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Refactoring&lt;/i&gt; is a symptom of DI being embedded in code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Corollary: if you need to refactor, then it is likely that the code hasn't been split into DI and Implementation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Excess detail is the antithesis of DI. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most languages pride themselves on how many features they have, instead of how few features they have. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;When you create DI, you don't want to care how something is implemented (e.g. Arrays vs. Lists).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Low-level efficiency is the concern of Efficiency Engineers, not Architects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DSLs are one way to split DI from Implementation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automate Everything&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Cheat&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;When possible, cheat.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Don't Do Things That the Base Language Already Does&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Let the underlying base language handle the heavy lifting.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Use a DSL Only If It Saves Effort&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Can a design be expressed &quot;better&quot; - e.g. more accurately - using a DSL instead of using a detailed HLL?&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Reuse of Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Reuse of DI (Design Intent, aka Architecture) is more important than the reuse of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code is cheap, thinking is hard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Keep &quot;business rules&quot; separated from code. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use one language for DI, another for Implementation.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Coding&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Does using a DSL reduce coding time?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation - get the DSL to write code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Write programs that write programs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 13.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino&quot;&gt;&lt;b&gt;Maintenance&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Does using the DSL reduce maintenance effort?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can a Maintenance Engineer understand the DI (Design Intent) more quickly?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Does the DSL perform D.R.Y. (Don't Repeat Yourself) for you?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can a Maintenance Engineer perform bug fixes more quickly by tweaking the DSL?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can a Maintenance Engineer perform feature upgrades more quickly by tweaking the DSL?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Write As Little Code As Possible&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Create Small DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reduce Coding Using DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rely on the Base Language to do the Heavy Lifting&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Use More than Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Management uses diagrams (e.g. on whiteboards).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers should use diagrams, too.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is OK to mix diagrams and text in the same document.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagrams Can Be Easy to Transpile&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Diagrams can be easy to transpile.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Think &lt;i&gt;glyphs&lt;/i&gt;, not pixels.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use backtracking parsers (e.g. Ohm, PROLOG, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Gedanken examples:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you know if 4 lines make a box?&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you know if one box is smaller than another box? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you know if the smaller box intersects the edge of the bigger box? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you know if a piece of text is completely inside a box?&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you know if an arrow (a glorified line) joins two boxes?&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;What if the line is made up of many smaller segments?&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you draw a network?&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;How do you draw a state machine?&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;What changes when you have ellipses instead of boxes?&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;What changes when you have curvy lines instead of straight line segments?&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;When All Else Fails. Automate&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Generate code, in some way, automatically.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Use a pretty printer to make the code human-readable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can always use the generated code as if it were written manually (by someone else).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Why Management Hated DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DSL (mis-)Perceptions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Management perceive DSL-writing as a sink-hole for time.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This impression is based on the mistaken notion that writing DSLs is the same as writing compilers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Management sees the up-front cost of creating a DSL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Management knows how to &lt;i&gt;measure&lt;/i&gt; development time (and cost) but doesn't know how to measure maintenance (understanding) costs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Management can't hire interchangeable units, called programmers, who already understand a given DSL.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Understanding a DSL requires &lt;i&gt;thinking&lt;/i&gt;, understanding a product design requires &lt;i&gt;thinking&lt;/i&gt;, too. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hiring&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At the moment, we don't know how to hire &lt;i&gt;thinkers&lt;/i&gt; based on only a resume. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Profession of Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The profession of Engineering encountered the problem, of hiring &lt;i&gt;thinkers,&lt;/i&gt; decades ago. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The answer was to split the profession into parts. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you attend university courses for 4 years and are rubber-stamped with an Engineering degree, then you are deemed to be an Engineer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;People who attend trades colleges for 2 years are deemed to be tradespeople. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Others are deemed to be labourers and brick-layers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For this scheme to work, a method of communication between the strata must be used - &lt;i&gt;blueprints&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Round Tripping&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Round Tripping is Not Used in Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers put their seal (stamp or signature) on designs and are responsible - in Law - for their designs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Brick-layers might detect &quot;bugs&quot; or &quot;improvements&quot; in designs, but they never make substantial changes to blueprints.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The changes must be approved by the signing Engineer(s).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The practice of round-tripping is never used in labour and Engineering.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Round Tripping Is a Symptom&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;People use round-tripping technology when they believe that the generating technology doesn't work in all cases.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Round-tripping usually causes accidental complexity.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you think you need round-tripping, then&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;prove that the notation doesn't work for some case&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;fix ithe notation, don't use round-tripping as a band-aid.&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Blueprints&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Current programming languages cannot be used like &lt;i&gt;blueprints&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Current programming languages expose too much detail to be effectively used as communication mechanisms, such as blueprints.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, the answer lies in &lt;i&gt;isolation&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Drawings&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Blueprints are drawings that expose little detail.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Blueprints are composed of simple elements.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Current programming languages expose too many details to be used in the way that blueprints are used in Engineering and construction.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scalability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Further explanation:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The main problem in software design is scalability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We want to &quot;plug&quot; pieces tother like LEGO blocks.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Better scalability implies fewer dependencies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Early hardware people got this &quot;right&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They took incredibly complicated devices (semiconductors made up of various kinds of rust) and built chips / ICs (integrated circuits).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Chips were black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They had a set of input/output pins.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The insides of the chips were inscrutable - encased in opaque epoxy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Nothing leaked out of or into a chip except through the pins of the chip.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Properties of a chip were described in easily-measured terms:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;voltage on a pin&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;current needed by a pin&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;diagram / chart of the outputs, given a set of inputs&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;timing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, hardware designers &quot;discovered&quot; that point-to-point wiring between chips led to non-scalable designs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;They built a (small) hierarchy - chips mounted on boards plugged into backplanes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The earliest backplanes were basically point-to-point wiring harnesses.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, an early Wang word processor I owned, had a backplane with some 400 pins, allowing a chip on one board to send signals directly to a chip on another board.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then, came the S100 bus.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It had only 100 pins.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was well defined and documented.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Certain connections were not allowed, even if they could be done more efficiently as point-to-point connections.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The idea of the Bus led to Apple computers and, ultimately, the IBM desktop computer.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(There was more than one Bus definition, but the market shook those out).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can software be built like chips?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I argue Yes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need to build software in hierarchies.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Divide and conquer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There must be no leakage - of anything - between layers in a hierarchy.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(&quot;Anything&quot; includes things like variables, types, control flow, dependencies of any kind, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rigor and Trade-offs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Engineering is about making trade-offs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Engineers don't strive to &lt;i&gt;prove&lt;/i&gt; that a design works - they simply build safety margins into a design. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The current quest for provable software designs will not lead to Engineering. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is needed is characterization of the possible trade-offs, e.g. How fast does it run? How much memory is needed? How much processing power is needed? What is the fail-safe, the &quot;big red button&quot;? What can be done if it crashes? Does it have a &quot;known beginning state&quot;?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How much will it cost to design each feature?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How much will it cost to test each feature? What is at stake?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;How thoroughly does it need to be tested?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What is the worst-case throughput?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;What is the average throughput? What is the MTBF? Is it single-sourced or multiply-sourced and what are the implications?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Complexity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I see software as a hierarchy of black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Architect for each box &lt;i&gt;chooses &lt;/i&gt;the best way to describe the design intent of a black box.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Engineer figures out how to dot the I's and cross the T's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Production Engineer figures out how to measure and make the black box &quot;more efficient&quot; and the Coder lays the bricks to implement the black box.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Black Box Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I see software as a hierarchy&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; of black boxes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Architect for each box &lt;i&gt;chooses &lt;/i&gt;the best way to describe the design intent of a black box.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Engineer figures out how to dot the I's and cross the T's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Production Engineer figures out how to make the black box &quot;more efficient&quot; and the Coder lays the bricks to implement the black box.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Many Silver Bullets&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good Architect will have a tool-belt full of Silver Bullets.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe a problem is best described in Relational terms, maybe a problem is best described as a State Machine (as a diagram, yet), maybe a problem can be broken down in a synchronous manner, etc., etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I will use the term &lt;i&gt;PSL &lt;/i&gt;instead of &lt;i&gt;DSL&lt;/i&gt; to emphasize problem-specific issues for every problem+solution. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PSL means problem-specific language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The older term, DSL, means domain-specific language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In my opinion, &quot;domain&quot; is too broad a term, we must focus down on problems and we must use specialization instead of generalization to solve specific problems.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;If you know PROLOG or something like it, how would you declaratively write this relationship of 4 lines?&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;If you don't already know, refer to Harel's StateCharts paper.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Actually, a directed, acyclic graph.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Information flows upwards, control (commands) flows downwards.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">DSL Manifesto</summary></entry></feed>