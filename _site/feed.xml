<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-15T22:54:31-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Svg grammar</title><link href="https://computingsimplicity.neocities.org/2021/03/15/SVG-grammar.html" rel="alternate" type="text/html" title="Svg grammar" /><published>2021-03-15T00:00:00-04:00</published><updated>2021-03-15T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/15/SVG%20grammar</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/15/SVG-grammar.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;SVG grammar&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-15T22:54:17Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-15T22:54:17Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 7.0px Menlo}
    span.s3 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I show a simple grammar for SVG files.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A grammar is a &quot;pattern matcher&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is as easy to use as REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is more powerful (it allows nesting, whereas raw REGEXP does not).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/glue&quot;&gt;https://github.com/guitarvydas/glue&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;repo: glue&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;branch: dev0&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;SVGSwitchAndForeign {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; EmptyDefs Element+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element = ElementWithSwitch | ElementWithForeign | ElementWithElements | ElementWithoutElements&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; Element Element &quot;&amp;lt;/switch&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; Element &quot;&amp;lt;/foreignObject&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; (Element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1st&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I am using Ohm-js.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a PEG grammar processor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Ohm, you need to surround the grammar with a name, and brace brackets.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've named this grammar &quot;SVGSwitchAndForeign&lt;span class=&quot;s1&quot;&gt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;I intend to use this grammar for a larger project (but not very large) and this will require breaking out &lt;span class=&quot;s1&quot;&gt;switches&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;foreignObjects&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar is compose of &lt;i&gt;rule&lt;/i&gt;s. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rules are free-form (spaces don't matter).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There happen to be 16 rules in this grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm special-cases rules that have names beginning with capital letters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first rule is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This rule is called &quot;Svg&quot; and is composed of calls to 3 other rules &lt;span class=&quot;s1&quot;&gt;XMLHeader, DOCTypeHeader &lt;/span&gt;and &lt;span class=&quot;s1&quot;&gt;SvgElement.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Items in double-quotes are &lt;i&gt;constants &lt;/i&gt;and are parsed literally, for example &quot;&amp;lt;svg&quot; parses 4 letters &quot;&amp;lt;&quot;, &quot;s&quot;, &quot;v&quot; and &quot;g&quot;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Rules and literals can be suffixed with syntax similar to REGEXP, i.e.&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;+ means one-or—more-of&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;* means zero-or-more-of&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;? means optional (0 or 1 of).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Alternation is written with &quot;|&quot; (in the original PEG thesis, &quot;/&quot; was used).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Negative matching is specified as &quot;~&quot; (whereas in the original PEG thesis &quot;!&quot; was used).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;i&gt;Any&lt;/i&gt; single character is specified with the keyword &quot;any&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In REGEXP, this is &quot;.&quot; and is also &quot;.&quot; in many other PEG libraries.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Character classes are formed with two constants separated by ellipsis, i.e. &quot;A&quot; .. &quot;Z&quot; means capital-A through capital-Z.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is often written as [A-Z] in REGEXP syntax (and some other PEG libraries).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Ohm-js separates match-variables from the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In Ohm-js, each match has a corresponding variable, i.e. the rule&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;needs a corresponding Javascript function declared as:&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;svg = function (xmlHeader, docTypeHeader, svgElement) { … }&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;(where the parameter names are arbitrary — I tend to use _1, _2, and _3 as parameter names).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;In other PEG parsers, matches are labelled explicitly, e.g.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Svg = xmlHeader:XMLHeader docTypeHeader:DOCTypeHeader svgElement:SvgElement&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(I favour Ohm-js' choice - it leaves the grammar unadorned and more readable (IMO).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is helpful when one is — as I am — concerned with DI (Design Intent, aka Architecture.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I intend to use PEG as a way to design SCLs (Solution Centric Languages - DSLs, but tighter) — clarity matters to me).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Ohm-js, if a rule begins with a capital letter, the rule skips all whitespace.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The builtin rule &lt;span class=&quot;s1&quot;&gt;space&lt;/span&gt; is used.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can augment the &lt;span class=&quot;s1&quot;&gt;space&lt;/span&gt; rule (see the Ohm documentation).&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rules can be in any order, except that Ohm-js takes the &lt;i&gt;first&lt;/i&gt; rule as the main rule and starts&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; with it. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In other PEG parsing libraries, the main rule is specified in the call to the parser. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lookahead matching is specified with &quot;&amp;amp;&quot;, e.g. &quot;&amp;amp;rule&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lookahead succeeds only if the match succeeds, but lookahead does not consume input characters.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Matches&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-js returns a Javascript array of matches when ?/*/+ are used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The array has 0 length if there were 0 matches.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A simple call to a rule, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rule+&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;returns an array of matches as specified by the rule &lt;span class=&quot;s1&quot;&gt;rule&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In parenthesized matches, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(rule1 rule2)*&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An array is returned for &lt;i&gt;each &lt;/i&gt;sub-rule.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the above would return two arrays — one for rule1 and the other for rule2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Constant matches follow the above convention, for example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(&quot;abc&quot; &quot;def&quot;)*&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;returns two arrays (the first with a bunch of matches for &quot;abc&quot; and the second for &quot;def&quot;).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Negative Lookahead Match&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Negative lookahead is specified by &quot;~&quot;, for example &quot;~rule&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example: to match any character that is not an @, we would write:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;~&quot;@&quot; any&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Negative lookahead does not consume input, but, &lt;i&gt;any&lt;/i&gt; consumes one character.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The end result of this pattern is that we consume one character if it is not @.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The ~rule parse tree does not appear in the CST.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lookahead Match&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lookahead matching is specified with &quot;&amp;amp;&quot;, e.g. &quot;&amp;amp;rule&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lookahead succeeds only if the match succeeds, but lookahead does not consume input characters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example: to match any character that is preceded by an @, we would write:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;amp;&quot;@&quot; any&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(the &lt;i&gt;any &lt;/i&gt;keyword consumes one character, but &amp;amp;&quot;@&quot; consumes no characters).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &amp;amp;rule creates a parse tree, although it consumes none of the characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &amp;amp;rule tree appears in the CST.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rule Order&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG — and Ohm-js — matches rules in order of appearance.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, the two similar rules:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Rule = A B C&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Rule = B C A&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;might match differently depending on the input. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG creates &lt;i&gt;parsers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you desire theoretical detail, see LR(1) theory and YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, some people have been known to &quot;test&quot; their grammar by running YACC on it, then building a TDPL&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; parser.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Generation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm-js parser generator inputs a grammar and produces a tree — CST (Concrete Syntax Tree — often conflated with AST). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After a successful parse, the tree can be further annotated with Javascript code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This code is called the &quot;semantics&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Arity Checking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm-js parser generator checks that the &lt;i&gt;semantics&lt;/i&gt; object contains a set of functions that correspond to the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the Ohm documentation for further detail and exceptions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-js checks the number of parameters — called the &lt;i&gt;arity — &lt;/i&gt;of each javascript function to ensure that each function matches the grammar.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar Reading (Detailed Description)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Below, I explain every line of the grammar:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;Svg&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It consists of calls to 3 other rules.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;XMLHeader&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches &quot;&amp;lt;&quot; then &quot;?&quot; then calls the rule&lt;i&gt; &lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;stuff&lt;/span&gt; for zero-or-more matches, then matches &quot;?&quot; then &quot;&amp;gt;&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;DOCTypeHeader&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches the string &quot;&amp;lt;!DOCTYPE&quot;, followed by a call to the rule &lt;span class=&quot;s1&quot;&gt;stuff&lt;/span&gt; (for 0-or-more matches) then matches the string &quot;&amp;gt;&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; EmptyDefs Element+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;SvgElement&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule has 6 sub-matches (&lt;span class=&quot;s1&quot;&gt;&quot;&amp;lt;svg&quot;, attribute*, &quot;&amp;gt;&quot;, EmptyDefs, Element+, &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Matches #2 and #5 return arrays of matches (&lt;span class=&quot;s1&quot;&gt;attribute*&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;Element+&lt;/span&gt;, resp.)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;EmptyDefs&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches one string &quot;&amp;lt;defs/&amp;gt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We might wish to expand this rule in future projects, but I believe in the YAGNI&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; principle and don't need more than this for my current project.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element = ElementWithSwitch | ElementWithForeign | ElementWithElements | ElementWithoutElements&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;Element&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is an alternation rule that returns one result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It has 4 possibilities, but matches only one of the possibilities.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; Element Element &quot;&amp;lt;/switch&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithSwitch&quot; that has 4 sub-matches.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; Element &quot;&amp;lt;/foreignObject&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithForeign&quot; that has 5 sub-matches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Match #2 returns an array.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; (Element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithElements&quot; that has 8 sub-matches (&lt;span class=&quot;s1&quot;&gt;&quot;&amp;lt;&quot;, name, stuff*, &quot;&amp;gt;&quot;, (…), &quot;&amp;lt;/&quot;, name, &quot;&amp;gt;&quot;&lt;/span&gt;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithoutElements&quot; that has 4 sub-matches.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;stuff&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rule begins with a lower-case letter (&quot;stuff&quot; not &quot;Stuff&quot;) which tells Ohm to read every character instead of skipping over spaces.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule has 4 negative matches and consumes only one character.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches any character unless the character is &quot;&amp;gt;&quot; or &quot;&amp;lt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It also checks for negative matches for the two strings &quot;/&amp;gt;&quot; and &quot;&amp;gt;?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The built-in rule &lt;i&gt;any&lt;/i&gt; consumes one character, if all of the negative matches succeed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rule, basically, says &quot;if the next character is not '&amp;gt;' and if the next two characters are not '/&amp;gt;' and if the next character is not '&amp;lt;' and if the next two characters are not '?&amp;gt;', then consume one character.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;text&quot; (lower-case, space-skipping disabled).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule calls one other rule stuff and then returns the result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;This is a useful trick — rules that do nothing but call another rule allow the semantics code to see what context the match occurred in.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, &quot;stuff&quot; is a generic rule, but &quot;stuff&quot; where text is expected might generate different code.&lt;/i&gt;]&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;attribute&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, we see the use of the pattern matching trick of&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;calling a more generic rule in a specific context.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this context, the parser is matching SVG elements.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;name&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It consumes a first character followed by zero-or-more follow characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In most PLs, a name must begin with a letter, but the rest of the name might contain digits.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;name1st&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches one character, either a lower-case letter (between &quot;a&quot; and &quot;z&quot;) or an upper-case letter.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;nameFollow&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It says that following characters in a name can contain digits, or any character allowed at the front of a name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;As I'm writing this, I see that I probably wanted to include underscores.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I can fix this later — getting something to work is the most important activity at this early-stage of this project — divide and conquer.&lt;/i&gt;]&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://github.com/harc/ohm&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See the Ohm documentation for how to change this assumption.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;TDPL means Top Down Parsing Language - recursive descent parsing.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;YAGNI means &quot;You aren't going to need it&quot;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Again, due to the use of YAGNI, this rule doesn't perform a very thorough match of attributes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I named this rule to leave room for future detailing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of detail is not needed in this project (hence, I don't waste human intellect on getting it &quot;right&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG parsers let me cut such corners.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result is the ability to build parsers fairly quickly without having to dot all of the i's and cross all of the t's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The grammar is not wrong, but it skips over uninteresting stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">SVG grammar</summary></entry><entry><title type="html">How many inputs vs how many outputs?</title><link href="https://computingsimplicity.neocities.org/2021/03/06/How-Many-Inputs-vs-How-Many-Outputs.html" rel="alternate" type="text/html" title="How many inputs vs how many outputs?" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/How%20Many%20Inputs%20vs%20How%20Many%20Outputs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/How-Many-Inputs-vs-How-Many-Outputs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;How Many Inputs vs How Many Outputs?&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T12:44:53Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T12:44:53Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Variations of Inputs vs. Outputs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Mathematical — functional — notation, employs functions that take exactly one input and produce exactly one output.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All inputs come as a block at the same time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All outputs are produced as a block at the same time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The function begins life when an input block arrives.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The function ends life when an output block is sent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This paradigm leaves out other possibilities, such as:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;one input, several outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;several inputs arriving at different times&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;several outputs sent at different times&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;zero inputs, one or more outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;several inputs, zero outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;components that run forever (e.g. HTML servers).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;Functional notation expunges the notion of &lt;i&gt;time&lt;/i&gt;, hence, it is difficult to express sequential behaviours.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Functional notation is hitting a wall.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Functional notation was invented for pen-and-paper.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We use computers, now.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Computers can be used to express notions that are inconvenient to express using only pen-and-paper.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; The FP notational bottleneck resulted in the creation of callback syntax in Javascript.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HTML is the only popular language for coordination of distributed computers.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">How Many Inputs vs How Many Outputs?</summary></entry><entry><title type="html">Dynamic anything is bad</title><link href="https://computingsimplicity.neocities.org/2021/03/06/Dynamic-Anything-is-Bad.html" rel="alternate" type="text/html" title="Dynamic anything is bad" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/Dynamic%20Anything%20is%20Bad</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/Dynamic-Anything-is-Bad.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Dynamic Anything is Bad&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T12:42:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T12:42:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic is Self-Modifying&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic anything is the same as saying it is &lt;i&gt;self-modifying&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Self-Modifying Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Self-modifying &lt;/i&gt;code is hard to maintain.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Self-modifying &lt;/i&gt;code is hard to understand by reading only.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One has to watch its behaviour over time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Flunk&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My friend got a grade of 0% on an exercise in University because he excelled at doing what the professor wanted.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The professor asked us to write an efficient loop in assembler, that changed its behaviour half-way through.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We would be marked on efficiency of the result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most people wrote an if-then-else block of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend wrote code that poked itself and rewrote the loop instead of writing an if-then-else loop.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His code was, by far, the fastest (most efficient) code in the class.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He received a grade of 0% on the assignment.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The professor lectured us about &lt;i&gt;self-modifying code&lt;/i&gt; as an explanation for my friend's low grade.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Other Forms of Self-Modifying Code&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GOTOs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Static GOTOs are bad because they lead to unmaintainable code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions and closures are GOTOs on steroids.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPS is GOTO-full programming. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Unstructured.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Dynamic&lt;/i&gt; GOTOs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Become&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Become&lt;/i&gt; is a dynamic change in the behaviour of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Dynamic code&lt;/i&gt; sounds better than &lt;i&gt;self-modifying code&lt;/i&gt; but is essentially the same thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Become&lt;/i&gt; can easily be replaced by StateCharts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Or by a poor-man's version of StateCharts — &lt;span class=&quot;s2&quot;&gt;switch&lt;/span&gt; statements.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Listener/Observer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The&lt;i&gt; Listener/Observer &lt;/i&gt;pattern can lead to dynamic changes in the behaviour of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Listener/Observer&lt;/i&gt; sounds better than &lt;i&gt;self-modifying code&lt;/i&gt; but is essentially the same thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Listening is a dependency. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies should not be changed during runtime.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Listening should be made explicit (e.g. a line on a diagram, or, whatever).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Dynamic Anything is Bad</summary></entry><entry><title type="html">Divide and conquer yagni</title><link href="https://computingsimplicity.neocities.org/2021/03/06/Divide-and-Conquer-YAGNI.html" rel="alternate" type="text/html" title="Divide and conquer yagni" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/Divide%20and%20Conquer%20-%20YAGNI</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/Divide-and-Conquer-YAGNI.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Divide and Conquer - YAGNI&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T13:00:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T13:00:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: lower-alpha}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;YAGNI&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;One of the other &quot;tricks&quot; to using Divide and Conquer is that YAGNI principle — You Ain't Gonna Need It.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't do more than is required.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Build a full-blown DSL (not YAGNI), or,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;You can build just as much of a DSL as is required to solve a specific problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is building an SCL (Solution Centric Language).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reasons to Hate DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Management hated DSLs, because they were&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;hard to predict and schedule&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;took enormous amounts of time and effort — more effort than would be saved in a specific project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXPs used to be that way. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXPs are DSLs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The canonical reference for building REGEXPs is The Dragon Book.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Theory -- REGEXPs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP theory is hard to use and hard to understand.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Building a REGEXP compiler/interpreter takes a long time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yet, REGEXPs are found even in lowly JavaScript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If one ignores the theory of REGEXPs and just &lt;i&gt;uses&lt;/i&gt; them, they can be quite simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Theory -- PEGs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG - Parsing Expression Grammars - make it simple to build parsers using familiar REGEXP-like syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is possible to &lt;i&gt;just use&lt;/i&gt; PEGs to build little languages — little pattern matchers that are intended for a single use.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have written essays about creating DSLs in just one day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That's the break-through that PEG brings, it makes parsing as easy-to-use as REGEXPing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG parses things that REGEXP can't parse.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Punt&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Building full-blown type-checking is hard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Punt.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Build little languages that transpile code into other base languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let the base languages carry out the type checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of punting was originally explored in the C preprocessor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of punting is most helpful if one can insert pragmas into the transpiled code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pragmas, like &quot;#line&quot; and &quot;#file&quot; allow the base language to reports errors that reference the original little-language code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Incremental Change&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;YAGNI implies &lt;i&gt;layers&lt;/i&gt; and &lt;i&gt;incremental change&lt;/i&gt; laid over existing languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Choke Down on Details&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Numbers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In a small language, all numbers are just numbers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A small language does not ask the programmer to differentiate between integer, floats, double-floats, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Leave that kind of differentiation to Optimization Engineers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages like BASIC tried to do this,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; but got it wrong.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BASIC allowed conversion from strings to numbers, depending on context.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BASIC tried to hide this kind of detail from programmers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many programmers loved the freedom.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many programmers got into trouble, later.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp, also, tried this, by introducing bignums.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result overcame some of the pitfalls of BASIC, but did not allow fine-enough control to programmers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was essentially impossible to know what kind of code would be emitted by the Lisp compiler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp tried to remedy this problem by adding bandaids, like type pragmas (DECLARE).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What the above approaches lacked is &lt;i&gt;layering&lt;/i&gt; — the ability to defer decisions about details, while still keeping the details (albeit at lower layers).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Collections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For programming everything but details, it is enough to have &lt;i&gt;items&lt;/i&gt; and &lt;i&gt;collections&lt;/i&gt; of such &lt;i&gt;items&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In most cases, one doesn't even need to know the details of how &lt;i&gt;items&lt;/i&gt; are structured.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL (Syntax / Semantic Language, see below) is a &lt;i&gt;dataless&lt;/i&gt; language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A programmer can declare the existence of &lt;i&gt;items&lt;/i&gt; but cannot show their implementation (i.e. S/SL does not have any data-oriented operators, such as&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;+&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;cons&lt;/span&gt;()).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers need to implement &lt;i&gt;items&lt;/i&gt; in some other — toolbox — language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[I write more about S/SL in https://guitarvydas.github.io/2021/03/02/Dataless-Programming-Language.html]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Syntax is sugar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages are &lt;i&gt;skins&lt;/i&gt;.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages are &lt;i&gt;layers&lt;/i&gt; on top of toolbox languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntax can be automatically checked. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simple up-front checking guards against a certain class of errors (e.g. typos, naming inconsistencies, nesting inconsistencies).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At present, PLs (Programming Languages) contain syntax that allows for syntax checking, or, avoid such simple syntax and syntax-checking altogether.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There seems to be no choice available to the programmer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The principle of YAGNI implies that programs should be built in &lt;i&gt;layers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Very simple layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the top layer could check for syntax mistakes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Once that check has been completed, the rest of the layers do not impose the same kinds of syntactic constraints and check only for bigger-picture errors (e.g. type checking).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In my opinion, Pascal-derived languages favour syntax checking, whereas Lisp-derived languages skip over the syntax checking preliminaries and deal with other kinds of issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pascal-derived languages use &quot;end&quot; constructs that clearly constrain the syntactic boundaries of code, whereas Lisp uses the same terminator — &quot;)&quot; — to mark the end of all &quot;syntactic&quot; constructs,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YAGNI implies that a language has more than one layer of syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each layer is simple on its own.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, a top layer can check for typos, and then &quot;gets out of the way&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Smart editors could switch between language syntaxes,&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; eliding constructs that pass the syntax checker, but clutter the DI of a program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A compiler might consist of a syntax checker pass (YAGNI), followed by a de-sugarer, followed by a type-checker, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Smart editors could present programmers with the ability to view code as sub-constructs at each of these layers (eliding not done on the line-level but at a structural level)&lt;/i&gt;].&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We — the programming community — know how to check syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Syntax checking should be included in every language, albeit elide-able.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Macros constitute an attempt to add layers to languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros provide ways to restructure the syntax of the language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp represents programs as lists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp is a language for list-processing.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The easiest way to manipulate lisp programs is to use lisp list-manipulation to edit lists which make up programs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros allow programmers to use all of lisp at compile time to edit and restructure programs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros work on lists and atoms — not characters.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Character-Oriented Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Most programming languages are written as characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For such languages to have the flexibility of Lisp, would require building Scanners and Parsers into their compilers. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For examples, see PEG, REBOL, S/SL, TXL, etc.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;M4&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;M4 is a full-featured macro processor, but is a language unto itself.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;M4 can be used with most textual languages (for example, I've used M4 to build Javascript projects).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hygenic Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Scheme defines &quot;hygenic macros&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This complication would not have been needed if Scheme were used to form YAGNI layers instead of attempting to allow macros and the runtime to co-exist.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Likewise, Lisp macros would not be needed if YAGNI layers had been used.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Scheme attempts to fix an accidental complexity — lisp macro variable capture — instead of addressing the elephant in the room (flattening of layered compilation/interpretation &amp;amp; YAGNI)).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;C Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;C macros, on the other hand, fall far, far short of lisp macros.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The C macro processor is a small language unto itself (it was YAGNI when designed) and does not give the full power of C to programmers at compile time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Toolbox Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A base language that supports building SCLs easily would impose few restrictions on the transpiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Anything that is performed solely at compile-time&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; is usually a restriction.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Anything with the word &lt;i&gt;static&lt;/i&gt; in front of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, syntactic sugar and syntax rules makes transpilation more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The toolbox — the base language — doesn't need to be a &quot;good&quot; language to program in, it simply needs to be a good language to transpile into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation can handle all of the &quot;static&quot; stuff.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Solution-specific syntax sugar can be added back in by automation (SCLs, little languages).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss Toolbox languages in my essay&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; &quot;Toolbox Languages&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Issues that relate to toolbox languages include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;first-class functions&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;expression languages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;static typing vs. dynamic typing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;syntax&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lisp&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;javascript&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;debuggers&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;pragmas&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;restarts&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;packages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;paradigms&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;type checking&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;garbage collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp pioneered&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; many of these ideas, but ultimately failed because it tried to apply the ideas in a flat manner&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; instead of in a layered manner.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Successful Models of YAGNI&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;S/SL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://archive.org/details/technicalreportc118univ&quot;&gt;https://archive.org/details/technicalreportc118univ&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL is a dataless language. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, it is one of the best examples of YAGNI and SCL-design.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PT Pascal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PT Pascal is a full-featured Pascal compiler built in S/SL.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PT Pascal is an example of how much can be expressed in a dataless language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;And, PT is an example of the use of concatenative languages&lt;/i&gt;.]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;REBOL Parse&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REBOL is a small language that has devoted admirers.&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Instead of installing capabilities &lt;i&gt;into&lt;/i&gt; the language, REBOL provides a &lt;i&gt;parse&lt;/i&gt; function that allows the definition and use of many small languages - tailored to specific purposes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;TXL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://www.txl.ca/&quot;&gt;http://www.txl.ca/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;TXL is a functional, backtracking parsing language that was originally meant for experimentation with new language syntaxes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, TXL makes it easier to build incremental SCLs on top of existing languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;YAGNI vs. Denotational Semantics&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At its earliest inception, Denotational Semantics was a way to define new languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It defines semantics of languages in a purely functional manner.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics tended to create huge language compilers that were mostly impractical for production work.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Advances in FP mechanics and Peter Lee's work make Denotational Semantics worth another look for SCL building.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Peter Lee&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Peter Lee tamed the concept of Denotational Semantics by adding layers (passes).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics attempts to define the Universe of Possibilities for language design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Practical work, like Peter Lee's, cut a swath within the Universe of Possibilites and created practical implementations of languages for everyday programming.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;UNIX® Pipelines&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The UNIX® pipeline mentality is YAGNI at its core — every component does only one thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® pipelines enable Components and YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components are completely isolated&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; from one another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Isolated Components can be &quot;built and forgotten&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Isolated Components do not change their behavior when new components are added to a system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Note that libraries do not do this - they impose hidden dependencies on the systems that use them&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® piped systems can be built in layers.&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Emitters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Code emitters were designed as back ends for compilers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code emission technology can be used to create little languages, not just full-blown compilers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;OCG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The OCG — Orthogonal Code Generator — showed how to build code emitters in a declarative (and small) manner:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&quot;&gt;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;RTL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&quot;&gt;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fraser and Davidson create the &lt;i&gt;register transfer language&lt;/i&gt; — RTL — as a way of adding layers to the concepts of code emission.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Gnu's GCC uses RTL at its core.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Descriptors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/24039.24051&quot;&gt;https://dl.acm.org/doi/abs/10.1145/24039.24051&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data descriptors are a way to generalize the location of all compiled variables. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One description fits all variants of data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The data descriptor concept enables YAGNI by eliding details (data allocation) - allowing upper layers to talk &lt;i&gt;about&lt;/i&gt; data without actually supplying the final implementation (location) of the data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data Descriptors enable portability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data Descriptors enabled technologies, such as the OCG.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Structured Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is the Architect's responsibility to make a design readable and understandable to others.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, Architecture embodies the virtues of YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &quot;good&quot; architecture shows only the important aspects of a system and elides all&lt;i&gt; &lt;/i&gt;other details.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At present, we lack popular languages aimed at Architecture and Engineering. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Our current languages are targeted at Implementation and Research/Theorem-proving.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are few languages that target YAGNI, Architecture and Engineering&lt;/i&gt;]&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DI - Design Intent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL (Syntax / Semantic Language, see below) is a &lt;i&gt;dataless&lt;/i&gt; language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A programmer can declare the existence of &lt;i&gt;items&lt;/i&gt; but cannot show their implementation (i.e. S/SL does not have any data-oriented operators, such as&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;+&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;cons&lt;/span&gt;()).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers need to implement &lt;i&gt;items&lt;/i&gt; in some other — toolbox — language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;OO tries to separate definition from implementation, but most OO languages allow too much detail — detail tarpits that programmers tend to fall into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most languages — including assembly language — &lt;i&gt;allow &lt;/i&gt;programmers to defer details, but, most programs tend towards being walls of detail that have little to do the actual Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers need languages that impose DI (Design Intent).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We discovered, and re-discovered, this fact in switching from assembler to Structured Programming, from imperative programming to OO and to FP, etc.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Portability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At present, most portable code is created by hacking existing code and inserting conditional compilation directives.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Portability is a chimera. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Portability applies incremental fixes to a problem space and ignores the elephant in the room.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is needed is a way to tune applications for specific purposes while creating a maintainable result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YAGNI.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Frames&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X&quot;&gt;https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Paul Bassett's Frame technology is a completely different approach to portability and OO.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[I imagine that M4 could be used to implement frame technology].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anti-YAGNI&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Portability is generalization.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Generalization is the antithesis of YAGNI.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Unify all numbers under one umbrella.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Two-Syntaxes-For-Every-Language.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This sounds like what projectional editors can be used for.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/27/Compile-Time-and-Runtime.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Exercise: what are the most-atomic features of Lisp that make for a good toolbox language?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Was this set of features documented in https://mitpress.mit.edu/books/lisp-15-programmers-manual?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;all-in-one&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Who seem to hold up version 2.7 as the standard.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Sh can call sh components and can pipeline components together.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Bash and zsh are descendants of sh.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Engineering is not coding.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html for a discussion of the software development roles, as I see them.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Divide and Conquer - YAGNI</summary></entry><entry><title type="html">Components (again)</title><link href="https://computingsimplicity.neocities.org/2021/03/06/Components-(again).html" rel="alternate" type="text/html" title="Components (again)" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/Components%20(again)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/Components-(again).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Components (again)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T13:00:31Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T13:00:31Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components - Four Details&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can be described by four pieces of information:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A name&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A set of inputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A set of outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A set of other components used (declared recursively).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Elephant in the Room&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We are well-accustomed to discussing Input APIs of functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We are well-accustomed to discussing Names of functions (and components).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, we do not talk about &lt;span class=&quot;s1&quot;&gt;Output APIs&lt;/span&gt; nor &lt;span class=&quot;s1&quot;&gt;Usage&lt;/span&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run Forever&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components run forever.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components do not blink in and out of a system.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bandaids&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We paper-over deficiencies in our notations and our understanding of Software Components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This avoidance of issues makes it less likely that we can build layered software. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Structured Architecture.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Design Intent.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Layered Design.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Make, NPM, Package Managers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, using &lt;i&gt;make&lt;/i&gt;, &lt;i&gt;npm&lt;/i&gt; and other package managers detracts from our ability to recognize the inherent simplicity of software construction.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Stop using &lt;i&gt;make, npm, etc.&lt;/i&gt; and — suddenly — the fundamental issues become more clear.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DLLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;DLLs are the way that we currently implement Output APIs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multitasking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We currently implement software components — calculator-only components — by wrapping the code inside of envelopes that we call &lt;i&gt;threads &lt;/i&gt;in &lt;i&gt;multitasking.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Each &lt;i&gt;thread&lt;/i&gt; has exactly one stack (a global variable, btw).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We see that this paradigm is hitting the wall.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some of the &lt;i&gt;tells &lt;/i&gt;are:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Hardware is designed to have multiple cores.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is but a half-way measure towards building truly distributed computing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I would rather have a CPU with 1,000 6809's (8-bit processors) on it than one CPU with multiple, more-complicated, cores on it.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Javascript callbacks&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;HTML (it has grown into a coordination language for client/server distributed programming).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Linux (and other operating systems) have been hacked to use multiple cores (but not truly distributed computers).&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;We run Linux on rPis.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is a very inefficient use of limited computing resources.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most IoT devices don't need all of Linux.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;We do this because we don't know how to intelligently architect layered software.&lt;/i&gt;]&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Blockchain uses full-blown Operating Systems (such as Linux) instead of only the bits (e.g. p2p) that it needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagrams vs. Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We &lt;i&gt;can &lt;/i&gt;write structured programs in assembler, but we tend not to.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We have learned that lesson.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Notation limits our thinking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Structured Programming raised the bar about what we could think about.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We&lt;i&gt; can&lt;/i&gt; write nested software using text, but, diagrams show nesting better than text can.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What prevents us from using diagrams instead of text in programming languages? &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fear. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We don't have YACC for diagrams.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We continue thinking that we need to optimize using 1950's concepts of computing, e.g. parsers based on backtracking are still &lt;i&gt;verboten&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Structured Architecture (DI)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Structured Programming brought better structuring to code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I argue that Structured Architecture can be understood by going back to the basics and avoiding all bandaids, such as package managers and dependency managers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The main issue is DI:&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/DI-Design-Intent.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/DI-Design-Intent.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need to think in terms of isolation:&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Practicality - Keeping What We Already Have&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I recognize the we can't simply throw out what we already have.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DI and Componentization would make Photoshop better, but only incrementally so.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;DI and Componentization will make &lt;i&gt;future&lt;/i&gt; software better and enable completely new ideas.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can DI co-exist with existing software?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Can we keep PhotoShop and switch to using DI and Components?&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Keeping Linux, Keeping Operating Systems&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The way to keep PhotoShop&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; is to keep Linux.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The way to build new software is:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Build new apps on top of Linux — inside of Linux envelopes (threads).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Build new apps as &lt;i&gt;drivers&lt;/i&gt; that sit beside (underneath) Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I argue that the concept of operating systems is hitting a wall.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;So, I would argue that the only way to go around the wall is to write new concepts as operating system drivers.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components as Driver Software&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Drivers have, traditionally, been hard to build because they are thought to be low-level and unstructured in nature. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Most drivers have been written in C and assembler.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;StateCharts are a way to structure such lower-level code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It &lt;i&gt;is&lt;/i&gt; possible to write new components that sit beside/underneath existing operating systems.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Components are a way to structure such lower-level code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;PEG is a way to build layers above C and assembler, while maintaining the inherent efficiencies of these languages.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;What we really need is a new kind of O/S aimed at distributed computing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I argue that we don't need O/Ss at all.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Actually, we do have PROLOG, PEG and SVG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These can be used for parsing diagrams to code, but, we don't recognize this abilities yet.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Design Intent&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;I use PhotoShop and Linux as specific examples of apps and operating systems that we need to keep.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are many apps and many operating systems - my comments apply to all of them.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://github.com/guitarvydas/papers/blob/master/DEBS2007-paper63.pdf&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Components (again)</summary></entry><entry><title type="html">Toolbox languages</title><link href="https://computingsimplicity.neocities.org/2021/03/06/Toolbox-Languages.html" rel="alternate" type="text/html" title="Toolbox languages" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/Toolbox%20Languages</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/Toolbox-Languages.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Toolbox Languages&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T13:00:15Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T13:00:15Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This essay enumerates and discusses various issues related to SCL&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; transpiler development.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Toolbox Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A base language that supports building SCLs easily would impose few restrictions on the transpiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Restrictions are usually anything that is done solely at compile-time.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Anything with the words &lt;i&gt;static&lt;/i&gt; or &lt;i&gt;final &lt;/i&gt;in front of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, syntactic sugar and syntax rules makes transpilation more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The toolbox — the base language — doesn't need to be a &quot;good&quot; language to program in, it simply needs to be a good language to transpile into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation can handle all of the &quot;static&quot; stuff.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Solution-specific syntax sugar can be added back in by automation (SCLs, little languages).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;First-Class Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is &quot;nice to have&quot; a toolbox language that supports first-class functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler supports first-class functions, so, one &lt;i&gt;could&lt;/i&gt; use Assembler directly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that first-class functions are just GOTOs in sheeps' clothing.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics uses the GOTO-ness of first-class functions directly, since denotational semantics concerns itself with specifying control flow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In all other cases (e.g. CPS, closures, callbacks, etc.), first-class functions must be used with extreme care.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the proverbs in &quot;GOTO Considered Harmful&quot; apply to first-class functions. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP is an attempt to &quot;structure&quot; the use of first-class gotos by applying a strict policy of one-in-causes-one-out nesting.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Any other kind of use that falls outside of these strict guidelines runs into accidental complexity and problems — eg. callbacks, multitasking, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Expression Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Expression languages — where everything is an expression and everything returns a value (there are no statements) — make SCLs easier to write.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Typing vs. Dynamic Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language — a base language — is a set of programming constructs that make transpilation easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language is different from a &quot;good&quot; programmer-level language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language is like Assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It offers almost no constraints and allows the programmer (the SCL builder) to &quot;shoot oneself in the foot&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Human programmers hate programming directly in toolbox languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transpiler-writers like using toolbox languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The transpiler adds-in the programmer-level checking - syntax and type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The toolbox language does not stand in the way.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language has little syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntactic sugar in the toolbox language makes transpilation to it more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntactic sugar is often an afterthought that is applied to a toolbox language in order to make it more usable for direct use by programmers.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp - Why Some People Love It and Others Hate It&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is a &quot;good&quot; toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp support 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp has little syntax (I argue that lisp has &lt;i&gt;no &lt;/i&gt;syntax).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is an expression language&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is dynamically-typed out-of-the-box.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Dynamically-typing is not the same as no-typing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Types are checked, albeit at &quot;runtime&quot;].&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is not strictly functional, e.g. it allows side-effects. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp does not lock programmers into a single paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the above make Lisp a good toolbox language (this may sound counter-intuitive, at first).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Restrictions of any form (syntax, static typing, etc.) stand in the way of building SCLs easily.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Javascript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript exhibits most of the toolbox characteristics of Lisp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The biggest exception is the fact that Javascript has syntax and is not an expression language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These &quot;features&quot; make it harder to use Javascript as a toolbox language than Lisp, but, Javascript is still easier to use for building transpilers than most languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript supports first-class functions and anonymous functions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These features make Javascript a good toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers have tried to write programs in Javascript directly, much like assembler programmers did before C became popular. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To make Javascript more usable for direct programming, various tweaks have been added to Javascript and various dialects of JS (e.g. Typescript) have been invented, and, many frameworks have been created.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most of these changes and additions could have been avoided through the use of SCLs as layers on top of Javascript.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rhetorical Question&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Are all dynamically-typed languages just toolbox languages in disguise?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;C and Pascal overtook Assembler programming, yet, both C and Pascal compile to assembler.&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Debuggers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Debuggers have several uses:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;a) Finding bizarre problems, e.g. ones caused by typos and insufficient design.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;b) Bench-testing architectures.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;c) Architectural Archaeology — understanding designs created by other people (e.g. when the code contains too much detail and hides the Architecture and original design).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pragmas&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Few languages support positional pragmas (e.g. like &lt;span class=&quot;s2&quot;&gt;#line&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;#file&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This means that type errors are shown relative to the toolbox language instead of being relative to the SCL source code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The fact that debuggers can single-step through the source&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; means that positional information is created and exists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In most cases, such positional information has not been made into first-class entities.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pragmas should allow making correspondences between source code position and control flow points.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, pragmas should make correspondences between environments and individual variables and the originating SCLs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Restarts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Does a program simply fail when it hits a bug, or, does it offer a menu of possible ways to continue running?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp pioneered the concept of restarts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, restarts constitue a layer used at the debugger-level.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Packages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Common Lisp goes further than most languages in terms of scoping — also called packaging.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CL (Common Lisp) variables, function names, etc. — symbols — can be qualified to be within named packages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Unfortunately, the CL &lt;span class=&quot;s2&quot;&gt;read&lt;/span&gt; function makes it difficult to transpile code using SCLs (it reads new symbols into the runtime package instead of the compile-time package — there is a disconnect between how source code is written and how it can be generated).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, I argue that packages should have been lifted into a separate layer (YAGNI) instead of being embedded inside of CL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;C, despite its many faults, professed a very simple — and usable&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; — scoping system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variables and functions could be scoped &lt;span class=&quot;s2&quot;&gt;static&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;extern&lt;/span&gt;, giving control of visibility to the user (and SCL transpiler builder).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Furthermore, C variables could be scoped to be local or global orthogonally to the &lt;span class=&quot;s2&quot;&gt;static&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;extern&lt;/span&gt; declarations.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Closures provide a way to wrap and hide variables.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language does not lock one into a certain paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Examples of poor toolbox languages are Smalltalk, Haskell, Erlang, PROLOG, and most other languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These languages emphasize single paradigms and make it difficult to use other paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In my opinion, such paradigms should have been layered on top of a more general toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is no accident that Lisp has been used for the implementation of early versions of other languages, such as GHC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is mostly paradigm agnostic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript provides a way to build classes (using prototypes) without restricting the paradigm to class-based only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler supports all programming paradigms.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Type Checking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language provides primitive operations for type-checking, thus, alleviating the SCL-builder from implementing type checking in the SCL (DSL).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp and Javascript are &quot;good&quot; toolbox languages with respect to type checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler, although being a good toolbox language in other respects, does not provide any form of type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This leaves too much work to the SCL builder.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Garbage Collection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language elides memory allocation and freeing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;GC (garbage collection) is a generally accepted form of this kind of facility.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All other forms of allocation (e.g. malloc/free, Rust ownership) are optimizations of the general problem (of allocating memory during runtime).&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Solution-Centric Language - like DSLs.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/27/Compile-Time-and-Runtime.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See my essay &quot;How Many Inputs How Many Outputs&quot; https://guitarvydas.github.io/&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;E.g the Lispworks debugger can track correspondences between source code and single-stepping.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Slime and SBCL also provide a means to connect source code to program counter position.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most modern debuggers have this ability.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;in the toolbox sense&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Toolbox Languages</summary></entry><entry><title type="html">Universal datatype</title><link href="https://computingsimplicity.neocities.org/2021/03/02/Universal-Datatype.html" rel="alternate" type="text/html" title="Universal datatype" /><published>2021-03-02T00:00:00-05:00</published><updated>2021-03-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/02/Universal%20Datatype</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/02/Universal-Datatype.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Universal Datatype&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-02T07:21:50Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-02T07:21:50Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Universal Datatype&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Universal Datatype is a &lt;i&gt;relation&lt;/i&gt;, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;relation(subject,object)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Triples&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Relations are also called a &lt;i&gt;triple&lt;/i&gt;s.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Assembler&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;MOV R0,R1&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is a triple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Relation, Subject, Object.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Normalization&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Data / Code represented as relations is &lt;i&gt;normalized&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normalization is the most-atomic form of representation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle (5, 10, 20, 30)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;can be further atomized — normalized — as&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rectangle (R1)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;x (R1, 5)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y (R1, 10)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;width (R1, 20)&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;height (R1, 30)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Yes, normalization wastes space and CPU power, but, we have lots of each today.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Factbase&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I often use the term &lt;i&gt;fact&lt;/i&gt; and put &lt;i&gt;facts&lt;/i&gt; into a &lt;i&gt;factbase&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Compilers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Compilers like triples, e.g. &lt;span class=&quot;s1&quot;&gt;MOV R0,R1&lt;/span&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Optimization&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Optimization is easier when target code/data has been normalized.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Peephole optimization is easy to do with even simple tools like &lt;span class=&quot;s1&quot;&gt;awk&lt;/span&gt; when code / data has been normalized into triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fraser/Davidson wrote a landmark paper&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; on peepholing which formed the basis of Gnu's &lt;span class=&quot;s1&quot;&gt;gcc&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Normalizing code and optimizing it is not just for compilers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The techniques could be ratcheted up a notch to cover higher levels of software Architectures.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote - Y2K and COBOL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;We analyzed banking source code for Y2K problems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We used TXL to convert all source code into factbases, then ran backtracking pattern-matching rules over the normalized code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pattern Matching Factbases&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Backtracking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Exhaustive matching can be done with simple algorithms — backtracking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Backtracking is easier when the data is normalized.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;That's why compiler writers aim at assembler when writing optimizers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Today, trees are used, but trees get in the way.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PROLOG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG is one of the earliest attempts at backtracking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;I have built a PROLOG in JavaScript.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See &lt;/i&gt;&lt;a href=&quot;https://guitarvydas.github.io/&quot;&gt;&lt;i&gt;https://guitarvydas.github.io/&lt;/i&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;TXL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;TXL is a functional, backtracking, parser language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://www.txl.ca/&quot;&gt;http://www.txl.ca/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;MiniKanren&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;MiniKanren appears to be the successor to PROLOG-like languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;MiniKanren can do seemingly-magical things &lt;a href=&quot;https://www.youtube.com/watch?v=er_lLvkklsk&quot;&gt;https://www.youtube.com/watch?v=er_lLvkklsk&lt;/a&gt; (and &lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;https://github.com/webyrd/Barliman&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;One has to wonder what the child of MiniKanren and AI might turn out like.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Programming Language Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Imagine if all code were normalized to triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We'd be programming in assembler, or in the mostly-syntaxless Lisp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Successive programming language designs have tried to remedy the problems of working in triples, for human consumption.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programming languages have taken years to design and to perfect.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, using PEG parsers, we can build languages in a day&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We can tune a language for a specific problem. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I call these SCLs — Solution Centric Languages.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG vs. YACC&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;YACC embodies LR(k) theory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YACC builds languages from the ground up.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG builds parsers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers can understand PEG.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Compiler-writers understand (mostly) YACC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEGs are easier to use than YACC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YACC needs a scanner, e.g. LEX.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEGs are all-in-one - scanner and parser, utilizing familiar REGEXP-like syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PEG vs. REGEXP&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is like REGEXP, only better.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If you use REGEXPs, stop. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Use PEGs instead.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEGs make it easy to match sequences that REGEXPs have a hard time with.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Normalization leads to automation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;First, make it repetitive and boring.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Then automate.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Programming&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Programming consists of two basic activities:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;breathe in — pattern match&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;breathe out — rearrange and emit.&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;If (2) occurs before (1) is finished, we get problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;FP is an attempt to fix such problems by throwing the baby out with the bathwater.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;State is not the problem — unscoped use of State is the problem&lt;/i&gt;].&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://dl.acm.org/doi/10.1145/357094.357098&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Especially if we cheat.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;The difference lies in the fact that PEGs use a stack and allow you to easily write pattern-matching subroutines.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;(2) might also involve actions&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See, also, Structured Programming, StateCharts, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Universal Datatype</summary></entry><entry><title type="html">Dataless programming language</title><link href="https://computingsimplicity.neocities.org/2021/03/02/Dataless-Programming-Language.html" rel="alternate" type="text/html" title="Dataless programming language" /><published>2021-03-02T00:00:00-05:00</published><updated>2021-03-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/02/Dataless%20Programming%20Language</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/02/Dataless-Programming-Language.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Dataless Programming Language&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-02T07:25:15Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-02T07:25:15Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bizarre&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This idea — a dataless programming language — at first, sounded bizarre to me.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A programming language that had no data?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Now, I find the idea more useful than Javascript, C, or, dare-I-say Common Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I don't even bother with Python or Rust or …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I first learned the technique in 1980 in a compiler course using S/SL (Syntax / Semantic Language, not Secure Socket Layer).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;essence&lt;/i&gt; of S/SL goes far beyond compiler-building.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Design in Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It seem &quot;obvious&quot; that we want to build software in layers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Build-and-forget.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We just can't seem to do it, though.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies trickle throughout our code when using standard software techniques.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;To build layered software&lt;/span&gt;:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;we must remove dependencies.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;To learn how to remove dependencies, throw away all crutches. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Don't use &lt;span class=&quot;s2&quot;&gt;npm&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;make&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;asdf&lt;/span&gt;, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Don't use any language that provides a + operator (or &lt;span class=&quot;s2&quot;&gt;cons&lt;/span&gt;, or …).&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Gulp.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Function Calls, Handles, Control Flow&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Use &lt;i&gt;only&lt;/i&gt; function calls, internal and external (aka foreign, aka deferred) function calls, and use the least amount of control-flow possible. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Handles to Data&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Refer to data, but don't manipulate it directly.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This used to be called &lt;i&gt;handles&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;If you need to increment a variable, call a function.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;For example, replace&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;a = b + c&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;with&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;assign (aHandle, plus (bHandle, cHandle)).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Compilers have become better. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Compilers can do function inlining. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Don't waste brain-power doing what compilers can do for you.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Loop&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;What is the simplest form of &lt;i&gt;loop&lt;/i&gt;?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Not &lt;i&gt;for.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Not &lt;i&gt;while.&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It's:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;loop&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;exit when …&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;…&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;end loop&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Recursion is &lt;i&gt;loop&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;How do you write the above recursively?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DRY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Don't waste brain-power doing DRY (Don't Repeat Yourself).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Have the computer/compiler do it for you.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Git&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;diff&lt;/span&gt; and friends know how to recognize code commonality.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It's time to lift up the game a notch, and to get &lt;span class=&quot;s2&quot;&gt;git&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;diff&lt;/span&gt;/etc. to do DRY for you.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The Dragon Book&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; shows how.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Software Architecture needs RY, not DRY.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Cut/Copy/Paste.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Maintenance Engineering needs DRY.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maintenance Engineering is not Software Architecture.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;S/SL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Is Cordy and Roy's NiCad this kind of thing?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I haven't read up on it enough.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;https://research.cs.queensu.ca/home/cordy/software.html#NICAD&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Dataless Programming Language</summary></entry><entry><title type="html">Programming language design</title><link href="https://computingsimplicity.neocities.org/2021/03/02/Programming-Language-Design.html" rel="alternate" type="text/html" title="Programming language design" /><published>2021-03-02T00:00:00-05:00</published><updated>2021-03-02T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/02/Programming%20Language%20Design</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/02/Programming-Language-Design.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Programming Language Design&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-02T07:19:20Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-02T07:19:20Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; color: #000000; -webkit-text-stroke: #000000}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font-kerning: none}
    span.s4 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: lower-alpha}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;The Problem With Today's Programming Languages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The problem with today's programming languages is that they are too general.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, Guido van Rossum's&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; language was designed to solve Guido van Rossum's problems, not yours.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rhetorical question: if I were to write software to control a robot, would I use a language built for designing banking apps?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Only if I didn't have the freedom to choose.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;SCLs not DSLs not PLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Given that we can now create SCLs — PLs and DSLs — in one day, we can rearrange our workflow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Analyze the problem-at-hand.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Create a notation to describe the problem-at-hand&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Create a solution to the problem-at-hand using the same notation&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Build an SCL for a single use — only for this single problem, without needing to generalize&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Build, test, release the solution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The tools we need are:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;A PEG parser (e.g. Ohm-JS)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;A flexible base language (Lisp and Javascript are places to start).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The base language should:&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide dynamic typing&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; instead of static typing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Treat everything as an expression&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Not require code ordering, e.g. use before declaration&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Not require syntactic sugar, e.g. commas, needing &lt;span class=&quot;s2&quot;&gt;return&lt;/span&gt; for expression values, etc.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide good debuggers / single-steppers&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Provide ways to incorporate position information in the code (e.g. #file and #line pragmas used in C preprocessors).&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Lisp — Common Lisp — has many of the above features.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In particular, code and data are stored as lists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lists can be treated as relations&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many of the high-falutin' languages were originally built in Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp is a good toolbox&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; for automators&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layered Software Design&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Eliding Error Handling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;People often omit error handling because it clogs up the readability of the original Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Error handling is a bag on the side of most programs. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That is because most languages don't allow one to design software in a layered manner. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;If you think that libraries and github give you layered software, think again.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ask yourself, for example, how to extract and examine the error layers — only — in this kind of software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ask yourself how to extract and examine the Happy Path (Architecture w/o error handling nasties) — only — in this kind of software.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you think that theorem provers help you build better software, try building a robot controller or a music sequencer (see if knowing the nitty-gritties of Natural Numbers is useful in such domains —programming language design is about how to hide and elide the details when solving a particular problem&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Etc.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Error-handling — non-linear control flow — is difficult to express in a text-only language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It has been done, but the results&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;aren't natural.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Other forms of non-linear control flow have pushed the text-only paradigm beyond its natural limitations (e.g. Javascript callbacks, multitasking, etc.).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One of the oldest notations for non-linear and parallel control flow is music notation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Humans understand and express parallelism (e.g. music chords, cooking recipes) — only programmers find this concept hard to express.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Theory Is Not PL Design&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Programming language theory defines the Universe of programming languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is &lt;i&gt;not &lt;/i&gt;the same as designing a &lt;i&gt;useful&lt;/i&gt; programming language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A useful programming language:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;picks-and-chooses from the Universe of possibilities&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;creates a zig-zag through the Universe of possibilities and presents a notation for a given problem in a readable manner.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architect's Responsilibity&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;It is the Architect's responsibility to make a design clear and understandable to other readers.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;RY vs. DRY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The goals of Architecture are not the same as the goals of Maintenance Engineering, Test Engineering, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In particular, the Architect must be able to Copy/Paste designs — this is call RY (Repeat Yourself).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;RY, though, is anathema to Maintenance Engineering.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;From a maintenance perspective, DRY (Don't Repeat Yourself) is desirable.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;With current techniques, DRY is generally not automated and programmers are expected to expend brain-power to achieve DRY, instead of using RY.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;I'm not picking on Guido, just using his name as a concrete example of a more general problem.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;I can't think of any language, except assembler, that has all of these features, yet, one can write SCLs that emit other languages (For example, I've successfully emitted Lisp and Javascript)&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;If static typing is important to the solution, build static typing into the SCL&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;1st class functions are even possible in Assembler and C.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Some so-called HLLs snip this avenue off.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[Note that 1st class functions are GOTOs on steroids].&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Declaration-before-use is a&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;high-level-language feature that helps programmers spot typos.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is an anti-feature for base languages used in automation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmer-oriented features hinder automation.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Note that I don't champion the idea of using C and Lisp macros.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEGs provide a much richer environment for rewriting code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp macros were an attempt to build runtime syntax modification.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One could, simply build-in a PEG parser for this same purpose.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have successfully used ESRAP (a PEG parser) in CL for a project (compiling diagrams to code).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Lisp lists can represent a larger number of possibilities than just triples.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Avoid using this ability.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule#:~:text=Greenspun's%20tenth%20rule%20of%20programming,of%20half%20of%20Common%20Lisp.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;I argue that Lisp should be used for the basis of projectional editors.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Especially when you can't expunge &lt;i&gt;time&lt;/i&gt; from the equation.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Programming Language Design</summary></entry><entry><title type="html">Scheme to javascript</title><link href="https://computingsimplicity.neocities.org/2021/03/01/Scheme-to-Javascript.html" rel="alternate" type="text/html" title="Scheme to javascript" /><published>2021-03-01T00:00:00-05:00</published><updated>2021-03-01T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/01/Scheme%20to%20Javascript</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/01/Scheme-to-Javascript.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Scheme to Javascript&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-01T15:08:38Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-01T15:08:38Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;See &lt;a href=&quot;https://github.com/guitarvydas/js-prolog&quot;&gt;https://github.com/guitarvydas/js-prolog&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;This is a Scheme-to-Javascript converter that is sufficient to create a PROLOG in JavaScript from Nils Holm's Prolog in 6 Slides Scheme code.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;See the development of this code in&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;a href=&quot;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&quot;&gt;https://computingsimplicity.neocities.org/blogs/OhmInSmallSteps.pdf&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;(or &lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Scheme to Javascript</summary></entry></feed>