<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-03-16T20:35:11-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.  Until I get comments working on this blog, please email me.</subtitle><entry><title type="html">Component diagrams</title><link href="https://computingsimplicity.neocities.org/2021/03/16/component-diagrams.html" rel="alternate" type="text/html" title="Component diagrams" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/component%20diagrams</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/component-diagrams.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;component diagrams&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T19:15:24Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T19:15:24Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica; min-height: 14.0px}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 13.0px Palatino}
    span.s3 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I describe software components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use diagrams where possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Box&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-box.png&quot; width=&quot;121px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 1 Box&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Box with Text&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-box with text.png&quot; width=&quot;121px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 2 Box with Text&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with Type&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-typed component.png&quot; width=&quot;121px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 3 Component with Type&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with Input Port&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-component with input port.png&quot; width=&quot;131px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 4 Component with Input Port&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Relationships&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;Note that this diagram contains two boxes (&quot;ty1&quot; and &quot;in&quot;). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Intersection&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;size&lt;/span&gt; are the relations that determine that &quot;in&quot; is a subordinate of &quot;ty1&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Green-ness&lt;/span&gt; determines that the box &quot;in&quot; is an &quot;input&quot;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Intersection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The box with name &quot;in&quot; intersects the box with name &quot;ty1&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Size&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The box &quot;in&quot; is smaller than the other box.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Green-ness&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Green&lt;/span&gt;-ness is my convention for &quot;input&quot;.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with Output Port&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-component with output port.png&quot; width=&quot;131px&quot; height=&quot;61px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 5 Component with Output Port&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Yellow-ness&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;i&gt;Yellow&lt;/i&gt;&lt;/span&gt;&lt;i&gt;-ness is my convention for &quot;output&quot;.&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component with 2 Input Ports and 3 Output Ports&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-component with 2 inputs port and 3 output ports.png&quot; width=&quot;143px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 6 Component with 2 Input Ports and 3 Output Ports&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-two components.png&quot; width=&quot;423px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. 7Two Components&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Two Components 2 Connections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-15-24-Images/component diagrams-two comonents 2 connections.png&quot; width=&quot;423px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Fig. &amp;lt;$n:figure:TwoComponentsAndTwo Connections&amp;gt;Two Components and Two Connections&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NC (No Connection)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ports that are not connected are termed NC (No Connection).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC applies to input ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;NC applies to output ports.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;In &lt;/span&gt;Fig. &amp;lt;$n:figure:TwoComponentsAndTwo Connections&amp;gt;, ty1.in1 and ty1.in2 are NC inputs.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;[&lt;i&gt;Note that in mathematical notation there is no concept of NC, a function, once invoked, always returns a value (or an exception, or, …)&lt;/i&gt;].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run Forever&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components run forever.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Concurrency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are concurrent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components run at their own speed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Components can be parallel.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Concurrency is a prerequisite of parallelism.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Aspects of Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component has these distinct aspects:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;type&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;input ports (aka input API)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;output ports (aka output API)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input ports names must be unique within the &lt;i&gt;input port namespace&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Likewise, output ports names must be unique within the &lt;i&gt;output port namespace&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Input port names can be the same as output port names (the input port namespace is distinct from the output port namespace).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Name Spaces&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component has various distinct namespaces&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;inputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;outputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;internal — e.g. employed — children components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;Question: What is the namespace for types?&lt;/i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;i&gt; IMO, types are other components (filter components — one in, one out).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A component includes &quot;types&quot; as children components.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;signature &lt;/i&gt;of a component is defined by:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;name (&lt;i&gt;kind&lt;/i&gt; name)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;inputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The &lt;i&gt;signature&lt;/i&gt; of a Composite Component is extended to include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;child parts (and their signatures).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Send()&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component&lt;/i&gt; can &lt;i&gt;send&lt;/i&gt; an &lt;i&gt;event&lt;/i&gt; to another component via a &lt;i&gt;connection&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, &lt;i&gt;components&lt;/i&gt; cannot &lt;i&gt;send&lt;/i&gt; &lt;i&gt;events&lt;/i&gt; to their peers, they can only &lt;i&gt;send&lt;/i&gt; &lt;i&gt;events &lt;/i&gt;to their enclosing parent components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The parent &lt;i&gt;component&lt;/i&gt; routes the message send to another child.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The parent &lt;i&gt;component&lt;/i&gt; routes the child's response back to the sender. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Parameters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Parameters are subsumed by &lt;i&gt;Send()&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parameters can be sent one-at-a-time or in a block.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In contrast, functional PLs require that all parameters be sent as a block, all at the same time.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time oriented processes can &lt;i&gt;send&lt;/i&gt; information (parameters) at any time and are not restricted to sending such information in constrained blocks.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Return Values&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Return values are subsumed by &lt;i&gt;Send()&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components never &quot;return&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They simply &lt;i&gt;Send()&lt;/i&gt; information.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Exceptions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Exceptions are subsumed by &lt;i&gt;Send()&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components never &quot;throw exceptions&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They simply &lt;i&gt;Send()&lt;/i&gt; information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Sometimes, the information relates to error conditions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;NC - No Connection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The parent can &lt;i&gt;choose&lt;/i&gt; to make any connection(s) NC — no connection — in which case:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;An &lt;i&gt;output&lt;/i&gt; &lt;i&gt;event&lt;/i&gt; is dropped on the floor and ignored&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;An &lt;i&gt;input&lt;/i&gt; &lt;i&gt;event&lt;/i&gt; never arrives and never activates the child.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dependencies&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There are no implicit dependencies between components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All dependencies appear explicitly on the diagrams, e.g. as containment relationships and connections.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Inheritance&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is no inheritance in this system&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt; of components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components are created by &lt;i&gt;composition&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Children components cannot &lt;i&gt;override&lt;/i&gt; the actions of parent components.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composition&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Composite Components may include other components via &lt;i&gt;composition&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components of the same type (within the same parent component) are given distinct names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Often, though, names are not necessary, e.g. when there is but one component of a given type within a given parent.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In such cases, component names are optional.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In such cases, components can be referred to by their type name.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;In &lt;/span&gt;Fig. &amp;lt;$n:figure:TwoComponentsAndTwo Connections&amp;gt;, there is but one component with type &lt;i&gt;ty1&lt;/i&gt; and one component with type &lt;i&gt;ty2&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is sufficient to refer to these components as &lt;i&gt;ty1&lt;/i&gt; and &lt;i&gt;ty2&lt;/i&gt;, resp. (the components do not need names — the compiler might generate names for them, e.g. via gensym, their unique address, non-colliding hashcodes, URIs, etc.)&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Busy()&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are &lt;i&gt;busy&lt;/i&gt; if they are doing something.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Notably, a &lt;i&gt;composite component&lt;/i&gt; is &lt;i&gt;busy&lt;/i&gt; if &lt;i&gt;any&lt;/i&gt; of its children are busy.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;leaf component &lt;/i&gt;is &lt;i&gt;busy&lt;/i&gt; if it is processing an input event.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This condition is never observed when the underlying hardware is stack-based (CALL/RETURN using a stack causes components to run to completion before executing a RETURN instruction) and all components reside in the same thread.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Ready&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A component is &lt;i&gt;ready&lt;/i&gt; if it has one or more &lt;i&gt;events&lt;/i&gt; in its input queue and is not &lt;i&gt;busy&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Event&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Events&lt;/i&gt; contain two things:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;A port name (aka &lt;i&gt;tag&lt;/i&gt;)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;Data (anything).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;The sender and the receiver must agree on the shape (aka type) of the data.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;[&lt;i&gt;Note that type checking is just another kind of component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We could insert type-checking components in between two Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We could insert a chain of type checkers between two Components.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the Examples section.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reaction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component&lt;/i&gt; reacts to one — and only one — event at a time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Run To Completion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component &lt;/i&gt;processes one event to completion.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;component &lt;/i&gt;cannot process the next event until it has completed processing the current event.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that, a &lt;i&gt;component&lt;/i&gt; can be broken up into a number of states.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;i&gt;component&lt;/i&gt; might &lt;i&gt;process&lt;/i&gt; an incoming event by simply changing its state.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This — breaking up a &lt;i&gt;component's &lt;/i&gt;action — might be considered to be an idiom that subsumes the concept of &lt;i&gt;loop&lt;/i&gt; (recursion).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See, also, Feedback.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can be composed of other components.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Composite components can be implemented recursively — i.e. a composite can contain other composites.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A composite component is implemented by appending two structures to the generalized concept of &lt;i&gt;component&lt;/i&gt;:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of components employed by the current component&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;routing table — paths between children outputs and inputs (or, the component's own inputs and outputs).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Leaf Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Leaf Components contain &lt;i&gt;implementation (&lt;/i&gt;e.g. code&lt;i&gt;) &lt;/i&gt;in some other notation (e.g. Python, Javascript, C, StateCharts, Drakon, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Leaf Components differ from Composite Components in that their implementation is not described by this notation.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatcher&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;On stack-based hardware and operating systems, this system of components is &quot;run&quot; by using a &lt;i&gt;dispatcher&lt;/i&gt; routine.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;dispatcher&lt;/i&gt; is a simple loop that runs forever and invokes components that are ready, in any order.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Macros / Shorthand&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Repetitive diagram elements can be subsumed into (diagram) editor macros and shorthand gestures created can be created for them.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Furthermore, repetitive diagram elements can be elided, removing them from the diagrams.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The diagram compiler(s) re-insert such relationships in ways that are invisible to the Architect and to Engineers/Maintainers/Implementors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, +V and GND (ground) appear on electronics schematics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;They are connected to &lt;i&gt;every &lt;/i&gt;electronics component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If every such connection is shown explicitly, then the diagrams become &lt;i&gt;too busy&lt;/i&gt; &lt;i&gt;to read&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most schematic editors elide such details from the schematics.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Such information is not deleted, but only suppressed and elided from a given class of diagrams.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Diagram Compilers - Multiple&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is at least one compiler for each dialect of a diagram language.&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component Constitution&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are generally defined in a static manner with a static signature, e.g. {kind, inputs, outputs}.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Signature&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components are statically defined by:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;kind name&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of inputs&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At load-time, static components are instantiated (possibly many times).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each instance contains several methods that apply only to the load-and-run-time instances, e.g. input queue operations, output queue operations, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Load-time is distinct from run-time in that component instantiation occurs only during load time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Instances, and routing information, cannot be changed at run-time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that composite components are recursively instantiated to include an instance of all children parts along with an instance of routing information.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Part collections and routing information are completely private to the containing composite components [&lt;i&gt;these are akin to local variables or hidden heap-based items in other languages.&lt;/i&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;As already mentioned, certain parts of components are instantiated at load-time, including:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;input queue (one per component)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;output queue (one per component)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;busy predicate (method)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of parts (Composite components only)&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;collection of routing information (Composite components only).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The above are completely private to each instance.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Long Running Loops / Deep Recursion&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components must complete their actions &quot;quickly&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components process one input event at a time, i.e. components &quot;run to completion&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is no requirement for preemption.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Feedback&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components can send messages to themselves, for example, to &quot;continue&quot; looping.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Model&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Components model the real-world where each component gets its own CPU and memory.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Components are connected via thin pathways.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Memory Sharing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing is not implicitly supported.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing is an optimization applicable to only certain kinds of applications.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing causes accidental complexity and complication.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Memory sharing should not be used in applications that do not need it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Time Slicing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing is not implicitly supported.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing is an optimization applicable to only certain kinds of applications (e.g. operating systems).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing causes accidental complexity and complication.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time slicing should not be used in applications that do not need it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PU Not CPU&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In fact, there is no such thing as a &lt;i&gt;central&lt;/i&gt; processing unit. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All processors are distributed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I will try to use the term PU (processing unit) or just &lt;i&gt;processor&lt;/i&gt; in place of the more common term CPU.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If I do use the term CPU, it should be taken to mean &lt;i&gt;PU&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Cores&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores are just a half-hearted attempt at providing true distributed processing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Multiple cores might also be considered to be an optimization of distributed processing, where the PUs are interconnected via high bandwith pathways and where the PUs can share memory.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Caching&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Caching is an optimization.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Caching brings a lot of &quot;baggage&quot; — accidental complexity — with it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Optimizations, such as caching, should be employed on a per-project basis and not be made generally available.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Caching should not be built into every PU nor built into every application.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IMO.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Kinds&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p8&quot;&gt;Kind is like type, but I think of types as filters (other children components), so I use a word different from &quot;type&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Data is passed through various kinds of filters that guarantee that their outputs contain a certain kinds of structure. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Filters have a second output — failure (aka exception). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Failure exceptions are connected in application-specific manners.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Signature Compatibility - Referential Transparency&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Two Components are equivalent if their static signatures are the same.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;They are said to be pin compatible, or, referentially transparent.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example - Type Checking Chain&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;bit —&amp;gt; collect into bytes —&amp;gt; collect into words —&amp;gt; convert to characters —&amp;gt; convert into objects —&amp;gt; check for certain fields —&amp;gt; convert to certain types&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; It is possible to use shape to define input/output instead of color.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have tried this and find that it makes the diagram &quot;too busy&quot; looking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The choice really depends on the writer(s) and the reader(s) of the diagram and the display medium (I used only B&amp;amp;W displays in the early versions of these diagrams). &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One could, also, use hidden attributes to store directional information, but I work with problems that make in-ness and out-ness important enough to be shown and not elided. In EE school, we were taught to use only one convention, since this makes diagrams accessible to a wider range of audiences (and concentrates/focusses the learning curve to a single course/curriculum). Mechanical Engineers provide 3 views of every drawing (front, side, top), but this may be reconsidered when using computers that can display 3D drawings.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One must remember that mathematics was developed as a notation for pen-and-paper mediums.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The 1.5D convention for writing computer code is derived from mathematics (most PLs use a 1.5D coordinate space to represent computer programs - columns of non-overlapping cells of characters arranged in rows of lines).&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; See Rob Pike's &quot;Concurrency is not Parallelism&quot; in https://guitarvydas.github.io/2021/01/14/References.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; FP eliminates time (t) as a variable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This can be a useful approximation if used in moderation.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of approximation is not suitable for functions that involve time, e.g. robotics, sequencers, Physics (see Nobel Laureate Ilya Prigogene's book &quot;Order Out Of Chaos).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I have noticed that my operating systems (Linux, Mac, etc.) and editors (emacs, aquamacs) periodically &quot;hang&quot; due to timeless code being force-fitted into timeful functionality.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;[4]&lt;/a&gt; Inheritance can be design-in explicitly using connections and containment.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;[5]&lt;/a&gt; See StateCharts for a simple way to avoid overriding https://guitarvydas.github.io/2020/12/09/StateCharts.html&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;[6]&lt;/a&gt; For example: a component network compiler, a Statechart compiler (for implementation of some leaf components), a JavaScript compiler, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">component diagrams</summary></entry><entry><title type="html">Toolbox languages</title><link href="https://computingsimplicity.neocities.org/2021/03/16/Toolbox-Languages.html" rel="alternate" type="text/html" title="Toolbox languages" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/Toolbox%20Languages</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/Toolbox-Languages.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Toolbox Languages&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T17:31:57Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T17:31:57Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 13.0px Palatino}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;This essay enumerates and discusses various issues related to SCL&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; transpiler development.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Toolbox Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A base language that supports building SCLs easily would impose few restrictions on the transpiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Restrictions are usually anything that is done solely at compile-time.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Anything with the words &lt;i&gt;static&lt;/i&gt; or &lt;i&gt;final &lt;/i&gt;in front of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, syntactic sugar and syntax rules makes transpilation more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The toolbox — the base language — doesn't need to be a &quot;good&quot; language to program in, it simply needs to be a good language to transpile into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation can handle all of the &quot;static&quot; stuff.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Solution-specific syntax sugar can be added back in by automation (SCLs, little languages).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;First-Class Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is &quot;nice to have&quot; a toolbox language that supports first-class functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler supports first-class functions, so, one &lt;i&gt;could&lt;/i&gt; use Assembler directly.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that first-class functions are just GOTOs in sheeps' clothing.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics uses the GOTO-ness of first-class functions directly, since denotational semantics concerns itself with specifying control flow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In all other cases (e.g. CPS, closures, callbacks, etc.), first-class functions must be used with extreme care.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All of the proverbs in &quot;GOTO Considered Harmful&quot; apply to first-class functions. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FP is an attempt to &quot;structure&quot; the use of first-class gotos by applying a strict policy of one-in-causes-one-out nesting.&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Any other kind of use that falls outside of these strict guidelines runs into accidental complexity and problems — eg. callbacks, multitasking, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Expression Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Expression languages — where everything is an expression and everything returns a value (there are no statements) — make SCLs easier to write.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Typing vs. Dynamic Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language — a base language — is a set of programming constructs that make transpilation easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language is different from a &quot;good&quot; programmer-level language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A toolbox language is like Assembler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It offers almost no constraints and allows the programmer (the SCL builder) to &quot;shoot oneself in the foot&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Human programmers hate programming directly in toolbox languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Transpiler-writers like using toolbox languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The transpiler adds-in the programmer-level checking - syntax and type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The toolbox language does not stand in the way.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language has little syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntactic sugar in the toolbox language makes transpilation to it more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntactic sugar is often an afterthought that is applied to a toolbox language in order to make it more usable for direct use by programmers.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp - Why Some People Love It and Others Hate It&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is a &quot;good&quot; toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp support 1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp has little syntax (I argue that lisp has &lt;i&gt;no &lt;/i&gt;syntax).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is an expression language&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is dynamically-typed out-of-the-box.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Dynamically-typing is not the same as no-typing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Types are checked, albeit at &quot;runtime&quot;].&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is not strictly functional, e.g. it allows side-effects. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp does not lock programmers into a single paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of the above make Lisp a good toolbox language (this may sound counter-intuitive, at first).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Restrictions of any form (syntax, static typing, etc.) stand in the way of building SCLs easily.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Javascript&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript exhibits most of the toolbox characteristics of Lisp.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The biggest exception is the fact that Javascript has syntax and is not an expression language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These &quot;features&quot; make it harder to use Javascript as a toolbox language than Lisp, but, Javascript is still easier to use for building transpilers than most languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript supports first-class functions and anonymous functions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;These features make Javascript a good toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers have tried to write programs in Javascript directly, much like assembler programmers did before C became popular. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To make Javascript more usable for direct programming, various tweaks have been added to Javascript and various dialects of JS (e.g. Typescript) have been invented, and, many frameworks have been created.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most of these changes and additions could have been avoided through the use of SCLs as layers on top of Javascript.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rhetorical Question&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Are all dynamically-typed languages just toolbox languages in disguise?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;C and Pascal overtook Assembler programming, yet, both C and Pascal compile to assembler.&lt;/i&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Debuggers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Debuggers have several uses:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;a) Finding bizarre problems, e.g. ones caused by typos and insufficient design.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;b) Bench-testing architectures.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;c) Architectural Archaeology — understanding designs created by other people (e.g. when the code contains too much detail and hides the Architecture and original design).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Pragmas&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Few languages support positional pragmas (e.g. like &lt;span class=&quot;s2&quot;&gt;#line&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;#file&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This means that type errors are shown relative to the toolbox language instead of being relative to the SCL source code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The fact that debuggers can single-step through the source&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; means that positional information is created and exists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In most cases, such positional information has not been made into first-class entities.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Pragmas should allow making correspondences between source code position and control flow points.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, pragmas should make correspondences between environments and individual variables and the originating SCLs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Restarts&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Does a program simply fail when it hits a bug, or, does it offer a menu of possible ways to continue running?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp pioneered the concept of restarts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In my opinion, restarts constitue a layer used at the debugger-level.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Packages&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Common Lisp goes further than most languages in terms of scoping — also called packaging.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CL (Common Lisp) variables, function names, etc. — symbols — can be qualified to be within named packages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Unfortunately, the CL &lt;span class=&quot;s2&quot;&gt;read&lt;/span&gt; function makes it difficult to transpile code using SCLs (it reads new symbols into the runtime package instead of the compile-time package — there is a disconnect between how source code is written and how it can be generated).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, I argue that packages should have been lifted into a separate layer (YAGNI) instead of being embedded inside of CL.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;C, despite its many faults, professed a very simple — and usable&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; — scoping system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Variables and functions could be scoped &lt;span class=&quot;s2&quot;&gt;static&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;extern&lt;/span&gt;, giving control of visibility to the user (and SCL transpiler builder).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Furthermore, C variables could be scoped to be local or global orthogonally to the &lt;span class=&quot;s2&quot;&gt;static&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;extern&lt;/span&gt; declarations.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Closures provide a way to wrap and hide variables.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Paradigms&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language does not lock one into a certain paradigm.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Examples of poor toolbox languages are Smalltalk, Haskell, Erlang, PROLOG, and most other languages. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;These languages emphasize single paradigms and make it difficult to use other paradigms.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In my opinion, such paradigms should have been layered on top of a more general toolbox language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is no accident that Lisp has been used for the implementation of early versions of other languages, such as GHC.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp is mostly paradigm agnostic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Javascript provides a way to build classes (using prototypes) without restricting the paradigm to class-based only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler supports all programming paradigms.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Type Checking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language provides primitive operations for type-checking, thus, alleviating the SCL-builder from implementing type checking in the SCL (DSL).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp and Javascript are &quot;good&quot; toolbox languages with respect to type checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Assembler, although being a good toolbox language in other respects, does not provide any form of type checking.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This leaves too much work to the SCL builder.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Garbage Collection&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language elides memory allocation and freeing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;GC (garbage collection) is a generally accepted form of this kind of facility.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All other forms of allocation (e.g. malloc/free, Rust ownership) are optimizations of the general problem (of allocating memory during runtime).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Freeform&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language is format-agnostic.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, most languages allow arbitrary amounts of whitespace in between expressions and statements.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;FORTRAN requires a specific layout — card oriented, code must be written in certain columns only.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Python has specific layout rules — indentation is significant.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This feature makes it more difficult to use Python as a toolbox language (because the transpiler must fiddle with the output format and keep track of indentation details — a time consuming project).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Prototypes Not Classes&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A good toolbox language supports prototype-based code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Classes are an up-front type-check of the more general concept of prototypes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Good toolbox languages support dynamic objects.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Duck Typing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Good toolbox languages support dynamic objects.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Duck typing is better for toolbox languages than is static typing.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Solution-Centric Language - like DSLs.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/27/Compile-Time-and-Runtime.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See my essay &quot;How Many Inputs How Many Outputs&quot; https://guitarvydas.github.io/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;E.g the Lispworks debugger can track correspondences between source code and single-stepping.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Slime and SBCL also provide a means to connect source code to program counter position.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most modern debuggers have this ability.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;in the toolbox sense&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Toolbox Languages</summary></entry><entry><title type="html">Need to know</title><link href="https://computingsimplicity.neocities.org/2021/03/16/Need-To-Know.html" rel="alternate" type="text/html" title="Need to know" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/Need%20To%20Know</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/Need-To-Know.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Need To Know&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T19:53:34Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T19:53:34Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; text-indent: -36.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 12.0px Helvetica}
    ol.ol1 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In this essay, I discuss the need-to-know principle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many PLs&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; do not obey this principle.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This idea — YAGNI applied to information — is central to creating layered software designs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I arrive at the conclusion that there are many linking-loaders, not just one.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Loading is a continuum of operations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Likewise, I conclude that compilers should supply less information in .&lt;span class=&quot;s1&quot;&gt;o&lt;/span&gt; files.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote - Eiffel in Emacs Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I used an early version of the Eiffel compiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Build times became progressively longer as more classes were added.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I concluded that the compiler&lt;i&gt; &lt;/i&gt;was doing too much work — it scoured the file system trying to resolve all classes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I wrote an experimental Eiffel compiler in Emacs Lisp.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler ran in linear time, regardless of the number of classes being used.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The main feature of this experiment was that type checking could be done in stages by successive &quot;loader&quot; invocations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The compiler created &lt;span class=&quot;s1&quot;&gt;.o&lt;/span&gt; files that contained a bare minimum of information — the compiler created code, but deferred multi-class type checking by leaving &quot;holes&quot; in the .o files.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &quot;loader&quot; worked in stages — it did as much type checking as it could given the &lt;span class=&quot;s1&quot;&gt;.o&lt;/span&gt; files that it was given, and deferred all other type checking for later.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &lt;span class=&quot;s1&quot;&gt;.o&lt;/span&gt; file with no remaining &quot;holes&quot; was executable (&lt;span class=&quot;s1&quot;&gt;.exe&lt;/span&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The UNIX® archive utility —&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ar&lt;/span&gt; — worked in a similar manner.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The archiver would patch as many holes as it could, but not more, before creating a library .&lt;span class=&quot;s1&quot;&gt;o&lt;/span&gt; file.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Ar&lt;/span&gt; worked only with address &quot;holes&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The n2k&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; principle can be applied to:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;address resolution, and,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;type checking.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Simple Component&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;img src=&quot;/assets/2021-03-16-19-53-34-Images/component diagrams-component with 2 inputs port and 3 output ports.png&quot; width=&quot;143px&quot; height=&quot;121px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 1 Component with 2 Input Ports and 3 Output Ports&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;In Fig. 1, there are some things (relationships) that we know, and there are some relationships that we do not need to know, for example:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;We know that the Component has kind &quot;ty1&quot;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We know that the Component has 2 inputs&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We know that the Component has 3 outputs&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know the &lt;i&gt;types&lt;/i&gt; of data that are required by the inputs&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know the &lt;i&gt;types&lt;/i&gt; of data sent from the output pins&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know how the Component is implemented&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know whether the Component is a Composite or a Leaf&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know where the input data comes from&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know where the output data is going to be sent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Events&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;Data arrives on input ports and is sent on output ports, carried by &lt;i&gt;events&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events are mostly data-agnostic.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Events consist of 2 details:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;A port name (a &lt;i&gt;tag&lt;/i&gt;)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Any kind of data.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layered Data&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Events&lt;/i&gt; can carry layered data as well as scalar (non-layered) data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data is packed and unpacked by successive layers of Components.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;APIs / Signatures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;Fig. 1 shows us what the signature of a Component is, namely:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;A &lt;i&gt;kind&lt;/i&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Inputs&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Note that:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know how child components are implemented&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know how this component is implemented&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;We do not know the signatures of contained components (if any).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;(That information is deferred and left as a &quot;hole&quot; to be filled in later).&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; PL means programming language&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; &lt;span class=&quot;s2&quot;&gt;n2k means &quot;need to know&quot;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Need To Know</summary></entry><entry><title type="html">Indirect calls</title><link href="https://computingsimplicity.neocities.org/2021/03/16/Indirect-Calls.html" rel="alternate" type="text/html" title="Indirect calls" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/Indirect%20Calls</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/Indirect-Calls.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Parent Routes Events&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T20:07:47Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T20:07:47Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p8 {margin: 0.0px 0.0px 0.0px 72.0px; text-indent: -72.0px; font: 12.0px Helvetica}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 11.0px Menlo}
    span.s3 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Coupling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Most languages tightly couple the callee with the caller, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;fn(…);&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;hard-codes &quot;fn&quot; into the caller's code, thereby, coupling the callee (&quot;fn&quot;) to the caller.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Decoupling&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I favour decoupling the callee from the caller.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This allows architectural decoupling and rapid refactoring of architectures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is done by adding a level of indirection to the call.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Every callee contains a &lt;i&gt;parent&lt;/i&gt; field and the &lt;i&gt;parent&lt;/i&gt; object connects its children's outputs to its children's inputs, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;fn(…)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;becomes akin to:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;self.parent.routeCall (&quot;fn&quot;, …args…);&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(parent looks up &quot;fn&quot;, then calls it if found, and returns the result to the caller).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DLLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;DLLs do this, but only half-heartedly. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All library calls are indirect through a lookup table.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In DLLs, the &lt;i&gt;parent&lt;/i&gt; is the &lt;i&gt;operating system&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There is only one layer of indirection in a DLL - a CALL is either direct or indirect through an O/S-supplied table.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This scheme of indirection allows the O/S to share DLLs between apps by mapping the same DLL code into the address space of every app.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I suggest that this indirection be formalized, made two-way, and affect &lt;i&gt;all&lt;/i&gt; CALLs, i.e. that every CALL be indirect &lt;i&gt;and&lt;/i&gt; that every RETURN be indirect.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Note that DLLs perform the half-hearted version of indirection — indirection for the CALL, but RETURN sends a result(s) back directly.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Why&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Decoupling — calling through a parent object — is a prerequisite for treating software as software components.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architectural Flexibility&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Decoupling, using indirection, makes it easy to change architecture during the implementation of a project.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anecdote&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For example, when we worked on a smart meter project, the team had invested some 10 person-years (5 developers, 2 years) of effort to create a solution.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the 2-year point (elapsed time), management found a new potential, and very important, customer. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The customer's requirements, though, were different from the original requirements. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The project had been built to solve the original requirements.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The project was built using software components and parent-routing indirection.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It took only one week of elapsed time (one technical manager and one junior programmer) to refactor the architecture to meet the new requirements. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This would not have been possible without a near-total rewrite, if the code had been implemented in the usual manner.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Testability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Treating software modules as stand-alone components leads to easier testability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Testability ease comes from the fact that software modules are not dependent on each other.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components' &lt;i&gt;parents&lt;/i&gt; determine routing ; routing information (function calls) is not baked into the code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that &lt;i&gt;libraries&lt;/i&gt; (and, therefore &lt;i&gt;github&lt;/i&gt;, etc.) do not provide this level of testability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Scalability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Scalability is only possible if software modules are decoupled.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Parent-based routing supports decoupling, hence, provides better scalability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;How&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dispatcher&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Using a &lt;i&gt;Dispatcher&lt;/i&gt; makes indirection easier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A &lt;i&gt;Dispatcher &lt;/i&gt;is a &quot;normal&quot; function that invokes other routines using a table(s).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Instead of making a CALL, a routine requests that the Dispatcher make the CALL on behalf of the caller.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The caller supplies its &lt;i&gt;parent&lt;/i&gt; to the Dispatcher and the Dispatcher uses the routing table within the parent to make the call.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;dispatcher&lt;/i&gt; returns the result of the call to caller.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Indirect Calling is Not Good Enough&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is not good enough to call a routine indirectly through a table (the &lt;i&gt;parent's &lt;/i&gt;routing table), the RETURN must also be indirect (through the &lt;i&gt;dispatcher&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Note that DLLs perform the half-hearted version of indirection — indirection for the CALL, but RETURN sends a result(s) back directly.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Other Benefits of Using a Dispatcher&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Software Components&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Distributed Computing (Concurrency)&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Operating System Dispatcher&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Closures&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Closures Are Threads&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Closures are threads. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Closures contain all &quot;local variables&quot; for a function.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(In non-closure based software, threads perform this function).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Operating system threads&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; are just inefficiently-large closures.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Operating system threads &lt;i&gt;could&lt;/i&gt; have been implemented as closures, but weren't.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Early versions of operating systems were developed&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; in the C programming language (and in assembler) which doesn't directly support closures.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Closures&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; &lt;i&gt;were&lt;/i&gt; available, though, as early as 1956 — in the Lisp programming language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Operating system developers shunned Lisp because it was thought to be interpreted.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Ironically, C is also interpreted (by the underlying hardware).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Components - 3 Views&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A Component can be viewed in at least the following dimensions:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Static&lt;/span&gt; - {name,inputs,outputs} description of the externals of a Component&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Implementation&lt;/span&gt; - details that are only needed to describe the operation of the Component as it is loaded and instantiated.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Example of implementation details would be information such as &quot;which language&quot; the Component is implemented in (C, Python, Javascript, Statechart, Drakon, etc.).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Composite components contain a list of components that are &lt;i&gt;used&lt;/i&gt;, along with the input and output signature of each component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Composite components also contain a connection-list, which is a routing table.&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Dynamic&lt;/span&gt; - adding fields needed to instantiate and run the component, e.g. input queue, output queue, parent, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that one Component can be instantiated multiple times.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;dynamic&lt;/i&gt; instance of a component might &lt;i&gt;share&lt;/i&gt; implementation details that do not need to be copied.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example,
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;code can be shared by all instances of the same Component&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;connection lists (or code) can be shared by all instances of the same Component&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;Component &lt;i&gt;name&lt;/i&gt; (a type name) can be shared&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;input queues and output queues cannot be shared and are created on a per-instance basis&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;parent field cannot be shared and are created on a per-instance basis - the parent relationship is a &lt;i&gt;dynamic&lt;/i&gt; relationship that is created as Components are instantiated.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Optimization&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Some optimizations are possible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The most straight-forward optimization is that which affects 1:1 message routing (one sending component, one receiving component).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Many:one, one:many, etc. connections, though, must be handled with care.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;asynchronous&lt;/i&gt; semantics of a component-based system can be compromised by eager optimization, especially on stack-based hardware architectures.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In particular, note that &lt;i&gt;calling &lt;/i&gt;a function is not the same as &lt;i&gt;sending a message&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have found it not necessary to optimize a system in most cases.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Most urges to optimize tend to be based on non-existent data and a over-anxious concern for low-level optimization (e.g. using C, Rust, etc.).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most of our &quot;knowledge&quot; about optimization comes from research in the late 1900's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The ground rules have changed — CPU power was expensive and memory was scarce in the late 1900's, whereas computing power and memory sizes are abundant in today's world.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I feel that it is better to get rid of the operating system (Linux, Windows, Mac) before attempting more detailed optimization strategies.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Context-switching, memory management, caching, etc. are first-order efficiency problems.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Measuring the efficiency of a program is less important than measuring response-time to human users.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;See also https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;JIT&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; compilation was pioneered in the Lisp language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Early Lisp compilers performed linker-like fixups at runtime.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I believe that this mechanism was called &lt;i&gt;fast calls&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Running lisp programs would rewrite branch addresses after the first lookup-and-call to a subroutine.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Smalltalk used a cache of most-recently used methods to alleviate efficiency concerns with duck-typing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Both of the above techniques — address rewriting and caching — are similar to&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;what linking-loaders do with DLLs in operating systems.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;JIT&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Just-in-time_compilation&quot;&gt;https://en.wikipedia.org/wiki/Just-in-time_compilation&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Like Lisp fast-calling.&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Composite Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Composite components are — from the outside — just components with {&lt;i&gt;name, inputs, outputs&lt;/i&gt;} fields.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Composite components act as &lt;i&gt;parents &lt;/i&gt;to &lt;i&gt;child components&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Composite components contain:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;A collection of child components&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;Routing information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Composite components route requests between their children.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;Composite components route responses back to the appropriate children.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;A&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;i&gt; child&lt;/i&gt; component can only invoke — send a request to — its peers by requesting that the parent route the request/response.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Child Components&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Child components are — from the outside — just components with a signature consisting of {&lt;i&gt;name, inputs, outputs&lt;/i&gt;}.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Children can be implemented in a number of ways:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li5&quot;&gt;children can be Composite components (recursively composed of other components)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;children can be Leaf components
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li5&quot;&gt;implemented as pure code (e.g. Javascript, Python, etc.)&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;implemented as Statechart diagrams (which transpile to pure code)&lt;/li&gt;
    &lt;li class=&quot;li5&quot;&gt;implemented in some other way (Bash scripts, Drakon diagrams, etc.)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Send&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Send() api function sends a request from a child to one of its peers (or to its parent's outputs).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The dispatcher/parent performs the appropriate lookup and routes the data delivery.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Send() can be optimized to be roughly equivalent to an indirect call method, i.e. it can be used to replace all CALLs in components.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Return&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is no &lt;span class=&quot;s2&quot;&gt;RETURN&lt;/span&gt; function.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;RETURN&lt;/span&gt; is replaced by Send ().&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Exception&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There is no &lt;span class=&quot;s2&quot;&gt;Exception&lt;/span&gt; function (or syntax).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Exception&lt;/span&gt; is replaced by Send ().&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Stack-Based CALLing and RETURNing&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In current PLs&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt;, CALLs are made directly, but, the CALLing mechanism also modifies a &lt;i&gt;list&lt;/i&gt; to leave a return-breadcrumb. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This &lt;i&gt;list &lt;/i&gt;is called the &lt;i&gt;stack&lt;/i&gt;.&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The stack is a global variable, even in FP.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There is one global stack inside every thread.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &lt;i&gt;stack&lt;/i&gt; records return-breadcrumbs in a &lt;i&gt;dynamic&lt;/i&gt; manner, &lt;i&gt;even in compiled languages&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Originally, there was no stack.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The IBM 360 CPU did not support an automagic stack.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers needed to use the &lt;span class=&quot;s2&quot;&gt;BALR&lt;/span&gt; instruction and link return-breadcrumbs (and &quot;local&quot; data) together manually.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The global stack was added to hardware and has never since been removed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers rely on &lt;i&gt;operating systems&lt;/i&gt; to sandbox their code and give them unique stacks (in &lt;i&gt;threads&lt;/i&gt;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PLs have improved, but the old-fashioned concept of a global stack has not changed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Adding operating systems to the mix does not simplify software design, it only masks one of the elephants in the room, by hiding a global variable.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Note that thread-based software has caused numerous forms of accidental complexity&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; — so much so that most programmers believe that multitasking is &quot;hard&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;State-of-the-Art&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In current PLs, CALL/RETURN uses the Stack to form a dynamic call-chain.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Component-Based&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In Component-based software, there is no need for a stack.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation on Stack-Based Hardware&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;When Components-based software is implemented on top of a stack-based hardware architecture, the Stack is used to CALL from the Dispatcher to a Component and to RETURN back to the Dispatcher — i.e. the Stack needs only be 1-level deep.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Implementation on Stack-Based Operating Systems&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;When Components-based software is implemented on top of a stack-based operating systems (based on stack-based hardware architectures), the Stack is used to CALL from the Dispatcher to a Component and to RETURN back to the Dispatcher — i.e. the Stack needs only be 1-level deep.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;thread aka process&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;We tend to draw an artificial dividing line between closures for data (called closures) and closures for return-breadcrumbs (called continuations).&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Greenspun's 10th Rule https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule#:~:text=Greenspun's%20tenth%20rule%20of%20programming,of%20half%20of%20Common%20Lisp.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;aka Lambdas&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Components can be instantiated recursively, staring with the top-most component downwards.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each instance gets its own queues and record its own parent relationship.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Further: a single Component can be used in many different apps (what Bennett calls multiple-use, vs. reuse) - the parent/child relationships depend on the application and cannot be backed into the static version of the Component.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The chain of ancestry is created on a per-app basis and might be different than any other app.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;JIT means Just In Time.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Greenspun's Tenth Rule, again.&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;PL means Programming Language&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;The stack is usually optimized to use contiguous storage locations.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Further optimizations are based on knowledge of the last-in-first-out nature of the list.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See also https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;I can think of only one real &quot;race condition&quot; - two events arriving so quickly that the hardware/software cannot tell which one came first.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;All other &quot;race conditions&quot; are just accidental complexities caused by the use of a global stack - e.g. thread safety, full preemption, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Parent Routes Events</summary></entry><entry><title type="html">Architectural archaelogy</title><link href="https://computingsimplicity.neocities.org/2021/03/16/Architectural-Archaelogy.html" rel="alternate" type="text/html" title="Architectural archaelogy" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/Architectural%20Archaelogy</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/Architectural-Archaelogy.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Architectural Archaelogy&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T19:47:56Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T19:47:56Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Architectural Archaeology&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;There are two ways to read someone else' code and learn the Architecture of the code:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li3&quot;&gt;reading and understanding&lt;/li&gt;
  &lt;li class=&quot;li3&quot;&gt;using a debugger to watch how the code operates.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Thinking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Thinking usually results in finding and fixing a bug in one's own code.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Thinking also works for maintaining code written by someone else, given that the code is already understood.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Using a Debugger&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Using a debugger helps to find strange behaviour in alpha-code, caused by typos and design blunders.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Debuggers help with Architectural Archaeology — figuring out how code works. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Usually, the subject code has been written by someone else, although, one's own code may seem foreign if enough time has passed between writing and reading/understanding the code.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Maintenance Engineering&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The first task of Maintenance Engineering is to understand the subject code.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DI - Design Intent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is the Architect's responsibility to make a design clear and understandable to the reader.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Comments&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Comments typically become stale and uninformative.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Comments are not automatically tied to the code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Near the rushed end of a project, the code is changed and automatically compiled, but, comments are not upgraded.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Comments tend to be overlooked because they are not on the critical path of making the software system work.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ideally, comments should be automatically transpiled into working code.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is not currently possible, but it is possible to get closer to this goal.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Some&lt;/i&gt; comments can be automatically compiled into executing code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Statecharts are a specific example. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I, also, show that it is possible to compile diagrams to code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;IMO diagrams can express DI better than stale comments.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Current PLs express implementation details.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Theorem provers express relationships that apply to the universe of programming.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Currently, there is no PL for expressing the various forms of Software Architecture and Software Engineering.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Expressing relationships about the Universe of Programming is not the same as creating a Programming Language (PLs are &lt;i&gt;reductions&lt;/i&gt; of the Universe to simple-to-use subsets - parts of the Universe are elided (hidden, but not ignored)).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;Engineering is not coding.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Implementation is coding.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For further discussion, see https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Architectural Archaelogy</summary></entry><entry><title type="html">Triples</title><link href="https://computingsimplicity.neocities.org/2021/03/16/Triples.html" rel="alternate" type="text/html" title="Triples" /><published>2021-03-16T00:00:00-04:00</published><updated>2021-03-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/16/Triples</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/16/Triples.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Triples&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-16T20:35:05Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-16T20:35:05Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    li.li6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {text-decoration: underline}
    span.s2 {font: 11.0px Menlo}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Triples&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Triples are everywhere, albeit optimized into oblivion.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The major simplicity that I have known for years — and unable to express succinctly — is that compiler-people like triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I, also, call this &quot;divide and conquer&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[If you think of a better way to say that, let me know!].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;XML&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;AFAIK, xml started out life as triples.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(This doesn't mean that I am right, it is only what I believe)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example of RDF triples:&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.iro.umontreal.ca/~lapalme/ForestInsteadOfTheTrees/HTML/ch07s01.html&quot;&gt;https://www.iro.umontreal.ca/~lapalme/ForestInsteadOfTheTrees/HTML/ch07s01.html&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An example is given here&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.javatpoint.com/xml-example&quot;&gt;https://www.javatpoint.com/xml-example&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&amp;lt;note&amp;gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;to&amp;gt;Tove&amp;lt;/to&amp;gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;from&amp;gt;Jani&amp;lt;/from&amp;gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;heading&amp;gt;Reminder&amp;lt;/heading&amp;gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;lt;body&amp;gt;Don't forget me this weekend!&amp;lt;/body&amp;gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&amp;lt;/note&amp;gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;As Triples&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;note id234 null&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;from id234 &quot;Jani&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;to id234 &quot;Tove&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;heading id234 &quot;Reminder&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;body id234 &quot;Don't forget me this weekend!&quot;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Computer Science&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;All of CS breaks down into triples — something I call &quot;simple&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All of CS has been about trying to optimize triples to save space and CPU. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Very 1950's. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In 202x's, memory is cheap, CPU's are cheap. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Time to rethink.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Human-time is still expensive. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Waste computer-time, not human-time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Structures&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Data structures are just optimizations of triples&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data structures &lt;span class=&quot;s1&quot;&gt;at&lt;/span&gt; compile-time are&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;1950's notions of how to optimize for CPU usage&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;Design Intent (more human-readable, but hard to automatically optimize)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Curried Functions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Even curried functions are triples&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;fn x y -&amp;gt; (fn x) y&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;(fn x) y&lt;/span&gt; -- looks like a double, but is really a triple — relation=fn, subject=x, object=y. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;&lt;span class=&quot;s2&quot;&gt;(fn x)&lt;/span&gt;&quot; is a double. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;(&lt;span class=&quot;s2&quot;&gt;fn x) y&lt;/span&gt;&quot; is a triple. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;&lt;span class=&quot;s2&quot;&gt;(fn x)&lt;/span&gt;&quot; is an unresolved triple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PROLOG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG allows you to go into feature-itis, creating quadruples, quituples, etc., but they are just optimizations of things that are fundamentally triples.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Anything in PROLOG that is &quot;more than&quot; a triple is a &lt;i&gt;layer&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PROLOG is (can be):&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;describe problem as relations (triples)&lt;/li&gt;
  &lt;li class=&quot;li6&quot;&gt;waste CPU power rebuilding data structures (better than wasting human intellectual power).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Human Readability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Humans shouldn't have to read triples. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;But, if you deconstruct everything into triples, then it becomes easier to write DSLs and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Triples</summary></entry><entry><title type="html">Svg grammar</title><link href="https://computingsimplicity.neocities.org/2021/03/15/SVG-grammar.html" rel="alternate" type="text/html" title="Svg grammar" /><published>2021-03-15T00:00:00-04:00</published><updated>2021-03-15T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/03/15/SVG%20grammar</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/15/SVG-grammar.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;SVG grammar&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-15T22:54:17Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-15T22:54:17Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p5 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 11.0px Menlo}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Menlo}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 7.0px Menlo}
    span.s3 {font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I show a simple grammar for SVG files.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A grammar is a &quot;pattern matcher&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is as easy to use as REGEXP.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG is more powerful (it allows nesting, whereas raw REGEXP does not).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;github&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://github.com/guitarvydas/glue&quot;&gt;https://github.com/guitarvydas/glue&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;repo: glue&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;branch: dev0&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;SVGSwitchAndForeign {&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; EmptyDefs Element+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element = ElementWithSwitch | ElementWithForeign | ElementWithElements | ElementWithoutElements&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; Element Element &quot;&amp;lt;/switch&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; Element &quot;&amp;lt;/foreignObject&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; (Element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1st&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;}&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I am using Ohm-js.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It is a PEG grammar processor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Ohm, you need to surround the grammar with a name, and brace brackets.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I've named this grammar &quot;SVGSwitchAndForeign&lt;span class=&quot;s1&quot;&gt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;I intend to use this grammar for a larger project (but not very large) and this will require breaking out &lt;span class=&quot;s1&quot;&gt;switches&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;foreignObjects&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar is compose of &lt;i&gt;rule&lt;/i&gt;s. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rules are free-form (spaces don't matter).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;There happen to be 16 rules in this grammar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm special-cases rules that have names beginning with capital letters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first rule is&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This rule is called &quot;Svg&quot; and is composed of calls to 3 other rules &lt;span class=&quot;s1&quot;&gt;XMLHeader, DOCTypeHeader &lt;/span&gt;and &lt;span class=&quot;s1&quot;&gt;SvgElement.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Items in double-quotes are &lt;i&gt;constants &lt;/i&gt;and are parsed literally, for example &quot;&amp;lt;svg&quot; parses 4 letters &quot;&amp;lt;&quot;, &quot;s&quot;, &quot;v&quot; and &quot;g&quot;.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Rules and literals can be suffixed with syntax similar to REGEXP, i.e.&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li8&quot;&gt;+ means one-or—more-of&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;* means zero-or-more-of&lt;/li&gt;
  &lt;li class=&quot;li8&quot;&gt;? means optional (0 or 1 of).&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Alternation is written with &quot;|&quot; (in the original PEG thesis, &quot;/&quot; was used).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Negative matching is specified as &quot;~&quot; (whereas in the original PEG thesis &quot;!&quot; was used).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;i&gt;Any&lt;/i&gt; single character is specified with the keyword &quot;any&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In REGEXP, this is &quot;.&quot; and is also &quot;.&quot; in many other PEG libraries.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Character classes are formed with two constants separated by ellipsis, i.e. &quot;A&quot; .. &quot;Z&quot; means capital-A through capital-Z.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is often written as [A-Z] in REGEXP syntax (and some other PEG libraries).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;Ohm-js separates match-variables from the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In Ohm-js, each match has a corresponding variable, i.e. the rule&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;needs a corresponding Javascript function declared as:&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;svg = function (xmlHeader, docTypeHeader, svgElement) { … }&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;(where the parameter names are arbitrary — I tend to use _1, _2, and _3 as parameter names).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;In other PEG parsers, matches are labelled explicitly, e.g.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;Svg = xmlHeader:XMLHeader docTypeHeader:DOCTypeHeader svgElement:SvgElement&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(I favour Ohm-js' choice - it leaves the grammar unadorned and more readable (IMO).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is helpful when one is — as I am — concerned with DI (Design Intent, aka Architecture.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I intend to use PEG as a way to design SCLs (Solution Centric Languages - DSLs, but tighter) — clarity matters to me).&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In Ohm-js, if a rule begins with a capital letter, the rule skips all whitespace.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The builtin rule &lt;span class=&quot;s1&quot;&gt;space&lt;/span&gt; is used.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One can augment the &lt;span class=&quot;s1&quot;&gt;space&lt;/span&gt; rule (see the Ohm documentation).&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Rules can be in any order, except that Ohm-js takes the &lt;i&gt;first&lt;/i&gt; rule as the main rule and starts&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; with it. &lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In other PEG parsing libraries, the main rule is specified in the call to the parser. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lookahead matching is specified with &quot;&amp;amp;&quot;, e.g. &quot;&amp;amp;rule&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lookahead succeeds only if the match succeeds, but lookahead does not consume input characters.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Multiple Matches&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-js returns a Javascript array of matches when ?/*/+ are used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The array has 0 length if there were 0 matches.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A simple call to a rule, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;rule+&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;returns an array of matches as specified by the rule &lt;span class=&quot;s1&quot;&gt;rule&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In parenthesized matches, e.g.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(rule1 rule2)*&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;An array is returned for &lt;i&gt;each &lt;/i&gt;sub-rule.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the above would return two arrays — one for rule1 and the other for rule2.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Constant matches follow the above convention, for example:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(&quot;abc&quot; &quot;def&quot;)*&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;returns two arrays (the first with a bunch of matches for &quot;abc&quot; and the second for &quot;def&quot;).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Negative Lookahead Match&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Negative lookahead is specified by &quot;~&quot;, for example &quot;~rule&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example: to match any character that is not an @, we would write:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;~&quot;@&quot; any&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Negative lookahead does not consume input, but, &lt;i&gt;any&lt;/i&gt; consumes one character.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The end result of this pattern is that we consume one character if it is not @.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The ~rule parse tree does not appear in the CST.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lookahead Match&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lookahead matching is specified with &quot;&amp;amp;&quot;, e.g. &quot;&amp;amp;rule&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lookahead succeeds only if the match succeeds, but lookahead does not consume input characters.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Example: to match any character that is preceded by an @, we would write:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&amp;amp;&quot;@&quot; any&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;(the &lt;i&gt;any &lt;/i&gt;keyword consumes one character, but &amp;amp;&quot;@&quot; consumes no characters).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The &amp;amp;rule creates a parse tree, although it consumes none of the characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &amp;amp;rule tree appears in the CST.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Rule Order&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG — and Ohm-js — matches rules in order of appearance.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, the two similar rules:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Rule = A B C&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Rule = B C A&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;might match differently depending on the input. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PEG creates &lt;i&gt;parsers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;If you desire theoretical detail, see LR(1) theory and YACC.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In fact, some people have been known to &quot;test&quot; their grammar by running YACC on it, then building a TDPL&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; parser.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Generation&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm-js parser generator inputs a grammar and produces a tree — CST (Concrete Syntax Tree — often conflated with AST). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;After a successful parse, the tree can be further annotated with Javascript code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This code is called the &quot;semantics&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Arity Checking&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The Ohm-js parser generator checks that the &lt;i&gt;semantics&lt;/i&gt; object contains a set of functions that correspond to the grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See the Ohm documentation for further detail and exceptions.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Ohm-js checks the number of parameters — called the &lt;i&gt;arity — &lt;/i&gt;of each javascript function to ensure that each function matches the grammar.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Grammar Reading (Detailed Description)&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Below, I explain every line of the grammar:&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Svg = XMLHeader DOCTypeHeader SvgElement&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;Svg&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It consists of calls to 3 other rules.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;XMLHeader = &quot;&amp;lt;?&quot; stuff* &quot;?&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;XMLHeader&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches &quot;&amp;lt;&quot; then &quot;?&quot; then calls the rule&lt;i&gt; &lt;/i&gt;&lt;span class=&quot;s1&quot;&gt;stuff&lt;/span&gt; for zero-or-more matches, then matches &quot;?&quot; then &quot;&amp;gt;&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;DOCTypeHeader = &quot;&amp;lt;!DOCTYPE&quot; stuff* &quot;&amp;gt;&quot; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;DOCTypeHeader&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches the string &quot;&amp;lt;!DOCTYPE&quot;, followed by a call to the rule &lt;span class=&quot;s1&quot;&gt;stuff&lt;/span&gt; (for 0-or-more matches) then matches the string &quot;&amp;gt;&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;SvgElement = &quot;&amp;lt;svg&quot; attribute* &quot;&amp;gt;&quot; EmptyDefs Element+ &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;SvgElement&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule has 6 sub-matches (&lt;span class=&quot;s1&quot;&gt;&quot;&amp;lt;svg&quot;, attribute*, &quot;&amp;gt;&quot;, EmptyDefs, Element+, &quot;&amp;lt;/svg&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Matches #2 and #5 return arrays of matches (&lt;span class=&quot;s1&quot;&gt;attribute*&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;Element+&lt;/span&gt;, resp.)&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;EmptyDefs = &quot;&amp;lt;defs/&amp;gt;&quot;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;EmptyDefs&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches one string &quot;&amp;lt;defs/&amp;gt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We might wish to expand this rule in future projects, but I believe in the YAGNI&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; principle and don't need more than this for my current project.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Element = ElementWithSwitch | ElementWithForeign | ElementWithElements | ElementWithoutElements&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;Element&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is an alternation rule that returns one result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It has 4 possibilities, but matches only one of the possibilities.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithSwitch =&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&quot;&amp;lt;switch&amp;gt;&quot; Element Element &quot;&amp;lt;/switch&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithSwitch&quot; that has 4 sub-matches.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithForeign = &quot;&amp;lt;foreignObject&quot; attribute* &quot;&amp;gt;&quot; Element &quot;&amp;lt;/foreignObject&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithForeign&quot; that has 5 sub-matches.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Match #2 returns an array.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithElements = &quot;&amp;lt;&quot; name stuff* &quot;&amp;gt;&quot; (Element+ | text*) &quot;&amp;lt;/&quot; name &quot;&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithElements&quot; that has 8 sub-matches (&lt;span class=&quot;s1&quot;&gt;&quot;&amp;lt;&quot;, name, stuff*, &quot;&amp;gt;&quot;, (…), &quot;&amp;lt;/&quot;, name, &quot;&amp;gt;&quot;&lt;/span&gt;).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;ElementWithoutElements = &quot;&amp;lt;&quot; name stuff* &quot;/&amp;gt;&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;ElementWithoutElements&quot; that has 4 sub-matches.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;stuff = ~&quot;&amp;gt;&quot; ~&quot;/&amp;gt;&quot; ~&quot;&amp;lt;&quot; ~&quot;?&amp;gt;&quot; any&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;stuff&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rule begins with a lower-case letter (&quot;stuff&quot; not &quot;Stuff&quot;) which tells Ohm to read every character instead of skipping over spaces.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule has 4 negative matches and consumes only one character.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches any character unless the character is &quot;&amp;gt;&quot; or &quot;&amp;lt;&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It also checks for negative matches for the two strings &quot;/&amp;gt;&quot; and &quot;&amp;gt;?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The built-in rule &lt;i&gt;any&lt;/i&gt; consumes one character, if all of the negative matches succeed.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The rule, basically, says &quot;if the next character is not '&amp;gt;' and if the next two characters are not '/&amp;gt;' and if the next character is not '&amp;lt;' and if the next two characters are not '?&amp;gt;', then consume one character.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = stuff&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;text&quot; (lower-case, space-skipping disabled).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This rule calls one other rule stuff and then returns the result.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;This is a useful trick — rules that do nothing but call another rule allow the semantics code to see what context the match occurred in.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, &quot;stuff&quot; is a generic rule, but &quot;stuff&quot; where text is expected might generate different code.&lt;/i&gt;]&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;attribute = stuff&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the first rule called &quot;attribute&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Again, we see the use of the pattern matching trick of&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;calling a more generic rule in a specific context.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In this context, the parser is matching SVG elements.&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name = name1st nameFollow*&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;name&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It consumes a first character followed by zero-or-more follow characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In most PLs, a name must begin with a letter, but the rest of the name might contain digits.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;name1st = &quot;a&quot; .. &quot;z&quot; | &quot;A&quot; .. &quot;Z&quot;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;name1st&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It matches one character, either a lower-case letter (between &quot;a&quot; and &quot;z&quot;) or an upper-case letter.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;nameFollow = &quot;0&quot; .. &quot;9&quot; | name1&lt;span class=&quot;s2&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Creates the rule called &quot;nameFollow&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It says that following characters in a name can contain digits, or any character allowed at the front of a name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;As I'm writing this, I see that I probably wanted to include underscores.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I can fix this later — getting something to work is the most important activity at this early-stage of this project — divide and conquer.&lt;/i&gt;]&lt;i&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;https://github.com/harc/ohm&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;See the Ohm documentation for how to change this assumption.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;TDPL means Top Down Parsing Language - recursive descent parsing.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;YAGNI means &quot;You aren't going to need it&quot;.&lt;/p&gt;
&lt;p class=&quot;p10&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s3&quot;&gt; &lt;/span&gt;Again, due to the use of YAGNI, this rule doesn't perform a very thorough match of attributes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I named this rule to leave room for future detailing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This kind of detail is not needed in this project (hence, I don't waste human intellect on getting it &quot;right&quot;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG parsers let me cut such corners.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result is the ability to build parsers fairly quickly without having to dot all of the i's and cross all of the t's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The grammar is not wrong, but it skips over uninteresting stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">SVG grammar</summary></entry><entry><title type="html">How many inputs vs how many outputs?</title><link href="https://computingsimplicity.neocities.org/2021/03/06/How-Many-Inputs-vs-How-Many-Outputs.html" rel="alternate" type="text/html" title="How many inputs vs how many outputs?" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/How%20Many%20Inputs%20vs%20How%20Many%20Outputs</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/How-Many-Inputs-vs-How-Many-Outputs.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;How Many Inputs vs How Many Outputs?&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T12:44:53Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T12:44:53Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Variations of Inputs vs. Outputs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Mathematical — functional — notation, employs functions that take exactly one input and produce exactly one output.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All inputs come as a block at the same time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;All outputs are produced as a block at the same time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The function begins life when an input block arrives.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The function ends life when an output block is sent.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This paradigm leaves out other possibilities, such as:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;one input, several outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;several inputs arriving at different times&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;several outputs sent at different times&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;zero inputs, one or more outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;several inputs, zero outputs&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;components that run forever (e.g. HTML servers).&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p4&quot;&gt;Functional notation expunges the notion of &lt;i&gt;time&lt;/i&gt;, hence, it is difficult to express sequential behaviours.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Functional notation is hitting a wall.&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Functional notation was invented for pen-and-paper.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We use computers, now.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Computers can be used to express notions that are inconvenient to express using only pen-and-paper.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; The FP notational bottleneck resulted in the creation of callback syntax in Javascript.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;HTML is the only popular language for coordination of distributed computers.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">How Many Inputs vs How Many Outputs?</summary></entry><entry><title type="html">Dynamic anything is bad</title><link href="https://computingsimplicity.neocities.org/2021/03/06/Dynamic-Anything-is-Bad.html" rel="alternate" type="text/html" title="Dynamic anything is bad" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/Dynamic%20Anything%20is%20Bad</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/Dynamic-Anything-is-Bad.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Dynamic Anything is Bad&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T12:42:49Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T12:42:49Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 9.0px Palatino}
    span.s2 {font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic is Self-Modifying&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic anything is the same as saying it is &lt;i&gt;self-modifying&lt;/i&gt;.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Self-Modifying Code&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Self-modifying &lt;/i&gt;code is hard to maintain.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Self-modifying &lt;/i&gt;code is hard to understand by reading only.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;One has to watch its behaviour over time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Flunk&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;My friend got a grade of 0% on an exercise in University because he excelled at doing what the professor wanted.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The professor asked us to write an efficient loop in assembler, that changed its behaviour half-way through.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We would be marked on efficiency of the result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most people wrote an if-then-else block of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;My friend wrote code that poked itself and rewrote the loop instead of writing an if-then-else loop.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;His code was, by far, the fastest (most efficient) code in the class.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;He received a grade of 0% on the assignment.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The professor lectured us about &lt;i&gt;self-modifying code&lt;/i&gt; as an explanation for my friend's low grade.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Other Forms of Self-Modifying Code&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;GOTOs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Static GOTOs are bad because they lead to unmaintainable code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;1&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;st&lt;/sup&gt;&lt;/span&gt;-class functions and closures are GOTOs on steroids.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;CPS is GOTO-full programming. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Unstructured.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Dynamic&lt;/i&gt; GOTOs.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Become&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Become&lt;/i&gt; is a dynamic change in the behaviour of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Dynamic code&lt;/i&gt; sounds better than &lt;i&gt;self-modifying code&lt;/i&gt; but is essentially the same thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Become&lt;/i&gt; can easily be replaced by StateCharts.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Or by a poor-man's version of StateCharts — &lt;span class=&quot;s2&quot;&gt;switch&lt;/span&gt; statements.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Listener/Observer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The&lt;i&gt; Listener/Observer &lt;/i&gt;pattern can lead to dynamic changes in the behaviour of code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;i&gt;Listener/Observer&lt;/i&gt; sounds better than &lt;i&gt;self-modifying code&lt;/i&gt; but is essentially the same thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Listening is a dependency. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Dependencies should not be changed during runtime.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Listening should be made explicit (e.g. a line on a diagram, or, whatever).&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Dynamic Anything is Bad</summary></entry><entry><title type="html">Divide and conquer yagni</title><link href="https://computingsimplicity.neocities.org/2021/03/06/Divide-and-Conquer-YAGNI.html" rel="alternate" type="text/html" title="Divide and conquer yagni" /><published>2021-03-06T00:00:00-05:00</published><updated>2021-03-06T00:00:00-05:00</updated><id>https://computingsimplicity.neocities.org/2021/03/06/Divide%20and%20Conquer%20-%20YAGNI</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/03/06/Divide-and-Conquer-YAGNI.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Divide and Conquer - YAGNI&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-03-06T13:00:44Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-03-06T13:00:44Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 11.0px Menlo}
    span.s2 {font: 13.0px Palatino}
    ol.ol1 {list-style-type: lower-alpha}
    ul.ul1 {list-style-type: disc}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;YAGNI&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;One of the other &quot;tricks&quot; to using Divide and Conquer is that YAGNI principle — You Ain't Gonna Need It.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Don't do more than is required.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;You can&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Build a full-blown DSL (not YAGNI), or,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;You can build just as much of a DSL as is required to solve a specific problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is building an SCL (Solution Centric Language).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Reasons to Hate DSLs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Management hated DSLs, because they were&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;hard to predict and schedule&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;took enormous amounts of time and effort — more effort than would be saved in a specific project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXPs used to be that way. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXPs are DSLs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The canonical reference for building REGEXPs is The Dragon Book.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Theory -- REGEXPs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REGEXP theory is hard to use and hard to understand.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Building a REGEXP compiler/interpreter takes a long time.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Yet, REGEXPs are found even in lowly JavaScript.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If one ignores the theory of REGEXPs and just &lt;i&gt;uses&lt;/i&gt; them, they can be quite simple.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Theory -- PEGs&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG - Parsing Expression Grammars - make it simple to build parsers using familiar REGEXP-like syntax.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is possible to &lt;i&gt;just use&lt;/i&gt; PEGs to build little languages — little pattern matchers that are intended for a single use.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have written essays about creating DSLs in just one day.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;That's the break-through that PEG brings, it makes parsing as easy-to-use as REGEXPing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;PEG parses things that REGEXP can't parse.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Punt&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Building full-blown type-checking is hard.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Punt.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Build little languages that transpile code into other base languages.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Let the base languages carry out the type checking.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of punting was originally explored in the C preprocessor.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This kind of punting is most helpful if one can insert pragmas into the transpiled code.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pragmas, like &quot;#line&quot; and &quot;#file&quot; allow the base language to reports errors that reference the original little-language code.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Incremental Change&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;YAGNI implies &lt;i&gt;layers&lt;/i&gt; and &lt;i&gt;incremental change&lt;/i&gt; laid over existing languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Choke Down on Details&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Numbers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;In a small language, all numbers are just numbers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A small language does not ask the programmer to differentiate between integer, floats, double-floats, etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Leave that kind of differentiation to Optimization Engineers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages like BASIC tried to do this,&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; but got it wrong.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BASIC allowed conversion from strings to numbers, depending on context.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;BASIC tried to hide this kind of detail from programmers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many programmers loved the freedom.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Many programmers got into trouble, later.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp, also, tried this, by introducing bignums.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result overcame some of the pitfalls of BASIC, but did not allow fine-enough control to programmers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;It was essentially impossible to know what kind of code would be emitted by the Lisp compiler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp tried to remedy this problem by adding bandaids, like type pragmas (DECLARE).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What the above approaches lacked is &lt;i&gt;layering&lt;/i&gt; — the ability to defer decisions about details, while still keeping the details (albeit at lower layers).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Collections&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;For programming everything but details, it is enough to have &lt;i&gt;items&lt;/i&gt; and &lt;i&gt;collections&lt;/i&gt; of such &lt;i&gt;items&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In most cases, one doesn't even need to know the details of how &lt;i&gt;items&lt;/i&gt; are structured.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL (Syntax / Semantic Language, see below) is a &lt;i&gt;dataless&lt;/i&gt; language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A programmer can declare the existence of &lt;i&gt;items&lt;/i&gt; but cannot show their implementation (i.e. S/SL does not have any data-oriented operators, such as&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;+&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;cons&lt;/span&gt;()).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers need to implement &lt;i&gt;items&lt;/i&gt; in some other — toolbox — language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[I write more about S/SL in https://guitarvydas.github.io/2021/03/02/Dataless-Programming-Language.html]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Syntax is sugar.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages are &lt;i&gt;skins&lt;/i&gt;.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Languages are &lt;i&gt;layers&lt;/i&gt; on top of toolbox languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Syntax can be automatically checked. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Simple up-front checking guards against a certain class of errors (e.g. typos, naming inconsistencies, nesting inconsistencies).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At present, PLs (Programming Languages) contain syntax that allows for syntax checking, or, avoid such simple syntax and syntax-checking altogether.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There seems to be no choice available to the programmer.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The principle of YAGNI implies that programs should be built in &lt;i&gt;layers&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Very simple layers.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, the top layer could check for syntax mistakes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Once that check has been completed, the rest of the layers do not impose the same kinds of syntactic constraints and check only for bigger-picture errors (e.g. type checking).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;In my opinion, Pascal-derived languages favour syntax checking, whereas Lisp-derived languages skip over the syntax checking preliminaries and deal with other kinds of issues.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Pascal-derived languages use &quot;end&quot; constructs that clearly constrain the syntactic boundaries of code, whereas Lisp uses the same terminator — &quot;)&quot; — to mark the end of all &quot;syntactic&quot; constructs,&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YAGNI implies that a language has more than one layer of syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Each layer is simple on its own.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For example, a top layer can check for typos, and then &quot;gets out of the way&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Smart editors could switch between language syntaxes,&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;i&gt; eliding constructs that pass the syntax checker, but clutter the DI of a program.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A compiler might consist of a syntax checker pass (YAGNI), followed by a de-sugarer, followed by a type-checker, etc.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Smart editors could present programmers with the ability to view code as sub-constructs at each of these layers (eliding not done on the line-level but at a structural level)&lt;/i&gt;].&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We — the programming community — know how to check syntax.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Syntax checking should be included in every language, albeit elide-able.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Macros constitute an attempt to add layers to languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros provide ways to restructure the syntax of the language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp represents programs as lists.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp is a language for list-processing.&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The easiest way to manipulate lisp programs is to use lisp list-manipulation to edit lists which make up programs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros allow programmers to use all of lisp at compile time to edit and restructure programs.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp macros work on lists and atoms — not characters.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Character-Oriented Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Most programming languages are written as characters.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;For such languages to have the flexibility of Lisp, would require building Scanners and Parsers into their compilers. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For examples, see PEG, REBOL, S/SL, TXL, etc.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;M4&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;M4 is a full-featured macro processor, but is a language unto itself.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;M4 can be used with most textual languages (for example, I've used M4 to build Javascript projects).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hygenic Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Scheme defines &quot;hygenic macros&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This complication would not have been needed if Scheme were used to form YAGNI layers instead of attempting to allow macros and the runtime to co-exist.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Likewise, Lisp macros would not be needed if YAGNI layers had been used.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Scheme attempts to fix an accidental complexity — lisp macro variable capture — instead of addressing the elephant in the room (flattening of layered compilation/interpretation &amp;amp; YAGNI)).&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;C Macros&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;C macros, on the other hand, fall far, far short of lisp macros.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The C macro processor is a small language unto itself (it was YAGNI when designed) and does not give the full power of C to programmers at compile time.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Toolbox Language&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;A base language that supports building SCLs easily would impose few restrictions on the transpiler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Anything that is performed solely at compile-time&lt;a id=&quot;fnlink5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn5&quot;&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt; is usually a restriction.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Anything with the word &lt;i&gt;static&lt;/i&gt; in front of it.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Additionally, syntactic sugar and syntax rules makes transpilation more difficult.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The toolbox — the base language — doesn't need to be a &quot;good&quot; language to program in, it simply needs to be a good language to transpile into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Automation can handle all of the &quot;static&quot; stuff.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Solution-specific syntax sugar can be added back in by automation (SCLs, little languages).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I discuss Toolbox languages in my essay&lt;a id=&quot;fnlink6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn6&quot;&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt; &quot;Toolbox Languages&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Issues that relate to toolbox languages include:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;first-class functions&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;expression languages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;static typing vs. dynamic typing&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;syntax&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lisp&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;javascript&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;debuggers&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;pragmas&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;restarts&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;packages&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;paradigms&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;type checking&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;garbage collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Lisp pioneered&lt;a id=&quot;fnlink7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn7&quot;&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/a&gt; many of these ideas, but ultimately failed because it tried to apply the ideas in a flat manner&lt;a id=&quot;fnlink8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn8&quot;&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/a&gt; instead of in a layered manner.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Successful Models of YAGNI&lt;/b&gt;&lt;/h2&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;S/SL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://archive.org/details/technicalreportc118univ&quot;&gt;https://archive.org/details/technicalreportc118univ&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL is a dataless language. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, it is one of the best examples of YAGNI and SCL-design.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;PT Pascal&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PT Pascal is a full-featured Pascal compiler built in S/SL.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;PT Pascal is an example of how much can be expressed in a dataless language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;And, PT is an example of the use of concatenative languages&lt;/i&gt;.]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;REBOL Parse&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;REBOL is a small language that has devoted admirers.&lt;a id=&quot;fnlink9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn9&quot;&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Instead of installing capabilities &lt;i&gt;into&lt;/i&gt; the language, REBOL provides a &lt;i&gt;parse&lt;/i&gt; function that allows the definition and use of many small languages - tailored to specific purposes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;TXL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;http://www.txl.ca/&quot;&gt;http://www.txl.ca/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;TXL is a functional, backtracking parsing language that was originally meant for experimentation with new language syntaxes.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, TXL makes it easier to build incremental SCLs on top of existing languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;YAGNI vs. Denotational Semantics&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At its earliest inception, Denotational Semantics was a way to define new languages.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It defines semantics of languages in a purely functional manner.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics tended to create huge language compilers that were mostly impractical for production work.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Advances in FP mechanics and Peter Lee's work make Denotational Semantics worth another look for SCL building.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Peter Lee&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Peter Lee tamed the concept of Denotational Semantics by adding layers (passes).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Denotational Semantics attempts to define the Universe of Possibilities for language design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Practical work, like Peter Lee's, cut a swath within the Universe of Possibilites and created practical implementations of languages for everyday programming.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;UNIX® Pipelines&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The UNIX® pipeline mentality is YAGNI at its core — every component does only one thing.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® pipelines enable Components and YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Components are completely isolated&lt;a id=&quot;fnlink10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn10&quot;&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/a&gt; from one another.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Isolated Components can be &quot;built and forgotten&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Isolated Components do not change their behavior when new components are added to a system.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;[&lt;i&gt;Note that libraries do not do this - they impose hidden dependencies on the systems that use them&lt;/i&gt;].&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;UNIX® piped systems can be built in layers.&lt;a id=&quot;fnlink11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn11&quot;&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Code Emitters&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Code emitters were designed as back ends for compilers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Code emission technology can be used to create little languages, not just full-blown compilers.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;OCG&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The OCG — Orthogonal Code Generator — showed how to build code emitters in a declarative (and small) manner:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&quot;&gt;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;RTL&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&quot;&gt;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fraser and Davidson create the &lt;i&gt;register transfer language&lt;/i&gt; — RTL — as a way of adding layers to the concepts of code emission.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Gnu's GCC uses RTL at its core.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Data Descriptors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/24039.24051&quot;&gt;https://dl.acm.org/doi/abs/10.1145/24039.24051&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data descriptors are a way to generalize the location of all compiled variables. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;One description fits all variants of data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The data descriptor concept enables YAGNI by eliding details (data allocation) - allowing upper layers to talk &lt;i&gt;about&lt;/i&gt; data without actually supplying the final implementation (location) of the data.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data Descriptors enable portability.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Data Descriptors enabled technologies, such as the OCG.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Structured Architecture&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;It is the Architect's responsibility to make a design readable and understandable to others.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, Architecture embodies the virtues of YAGNI.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A &quot;good&quot; architecture shows only the important aspects of a system and elides all&lt;i&gt; &lt;/i&gt;other details.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At present, we lack popular languages aimed at Architecture and Engineering. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Our current languages are targeted at Implementation and Research/Theorem-proving.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;There are few languages that target YAGNI, Architecture and Engineering&lt;/i&gt;]&lt;a id=&quot;fnlink12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn12&quot;&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;DI - Design Intent&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;S/SL (Syntax / Semantic Language, see below) is a &lt;i&gt;dataless&lt;/i&gt; language.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;A programmer can declare the existence of &lt;i&gt;items&lt;/i&gt; but cannot show their implementation (i.e. S/SL does not have any data-oriented operators, such as&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;+&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;cons&lt;/span&gt;()).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Programmers need to implement &lt;i&gt;items&lt;/i&gt; in some other — toolbox — language.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;OO tries to separate definition from implementation, but most OO languages allow too much detail — detail tarpits that programmers tend to fall into.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Most languages — including assembly language — &lt;i&gt;allow &lt;/i&gt;programmers to defer details, but, most programs tend towards being walls of detail that have little to do the actual Architecture.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Programmers need languages that impose DI (Design Intent).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;We discovered, and re-discovered, this fact in switching from assembler to Structured Programming, from imperative programming to OO and to FP, etc.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Portability&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;At present, most portable code is created by hacking existing code and inserting conditional compilation directives.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Portability is a chimera. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Portability applies incremental fixes to a problem space and ignores the elephant in the room.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;What is needed is a way to tune applications for specific purposes while creating a maintainable result.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;YAGNI.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Frames&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;a href=&quot;https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X&quot;&gt;https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Paul Bassett's Frame technology is a completely different approach to portability and OO.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[I imagine that M4 could be used to implement frame technology].&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Anti-YAGNI&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Portability is generalization.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Generalization is the antithesis of YAGNI.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Unify all numbers under one umbrella.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Two-Syntaxes-For-Every-Language.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;This sounds like what projectional editors can be used for.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/27/Compile-Time-and-Runtime.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink6&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn7&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink7&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Exercise: what are the most-atomic features of Lisp that make for a good toolbox language?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Was this set of features documented in https://mitpress.mit.edu/books/lisp-15-programmers-manual?&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn8&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink8&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[8]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;all-in-one&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn9&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink9&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[9]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Who seem to hold up version 2.7 as the standard.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn10&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink10&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[10]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn11&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink11&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[11]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Sh can call sh components and can pipeline components together.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Bash and zsh are descendants of sh.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;a id=&quot;fn12&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink12&quot;&gt;&lt;span class=&quot;s2&quot;&gt;[12]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Engineering is not coding.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;See https://guitarvydas.github.io/2020/12/10/Software-Development-Roles.html for a discussion of the software development roles, as I see them.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Divide and Conquer - YAGNI</summary></entry></feed>