<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://computingsimplicity.neocities.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://computingsimplicity.neocities.org/" rel="alternate" type="text/html" /><updated>2021-04-23T23:50:04-04:00</updated><id>https://computingsimplicity.neocities.org/feed.xml</id><title type="html">Computing Simplicity</title><subtitle>Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation.  Concurrency is not parallelism and concurrency is not multitasking.</subtitle><entry><title type="html">Scoping rebol</title><link href="https://computingsimplicity.neocities.org/2021/04/23/Scoping-Rebol.html" rel="alternate" type="text/html" title="Scoping rebol" /><published>2021-04-23T00:00:00-04:00</published><updated>2021-04-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/23/Scoping%20Rebol</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/23/Scoping-Rebol.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Scoping Rebol&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;rebolisstaticallyscoped&quot;&gt;Rebol is Statically Scoped&lt;/h1&gt;

&lt;p&gt;Rebol has static scoping,&lt;/p&gt;

&lt;p&gt;but,&lt;/p&gt;

&lt;p&gt;The question is not &amp;#8220;what scoping does Rebol employ?&amp;#8221;, but, &amp;#8220;when is a Rebol scoping determined, when is a Rebol program compiled?&amp;#8221;.&lt;/p&gt;

&lt;h1 id=&quot;rebol-statictypingdynamiccompilation&quot;&gt;Rebol - Static Typing, Dynamic Compilation&lt;/h1&gt;

&lt;p&gt;Rebol has static typing, but dynamic compilation.&lt;/p&gt;

&lt;p&gt;We are accustomed to there being one compilation time and one runtime.&lt;/p&gt;

&lt;p&gt;Rebol has multiple compilation times.&lt;/p&gt;

&lt;p&gt;The compilation of Rebol code depends on the context that exists at the time of compilation.&lt;/p&gt;

&lt;p&gt;Rebol code is compiled at different times, within different contexts. This means that Rebol functions might be compiled differently at different times.&lt;/p&gt;

&lt;h1 id=&quot;appendix-rebolscoping&quot;&gt;Appendix - REBOL Scoping&lt;/h1&gt;

&lt;p&gt;https://stackoverflow.com/questions/21964110/is-there-a-overall-explanation-about-definitional-scoping-in-rebol-and-red&lt;/p&gt;

&lt;p&gt;http://blog.hostilefork.com/rebol-vs-lisp-macros/&lt;/p&gt;

&lt;p&gt;http://blog.hostilefork.com/core-rebol-concept-flexible-series/&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Scoping Rebol</summary></entry><entry><title type="html">Relational programming and the kitchen sink</title><link href="https://computingsimplicity.neocities.org/2021/04/23/Relational-Programming-and-the-Kitchen-Sink.html" rel="alternate" type="text/html" title="Relational programming and the kitchen sink" /><published>2021-04-23T00:00:00-04:00</published><updated>2021-04-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/23/Relational%20Programming%20and%20the%20Kitchen%20Sink</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/23/Relational-Programming-and-the-Kitchen-Sink.html">&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;/&gt;
	&lt;title&gt;Relational Programming and the Kitchen Sink&lt;/title&gt;
	&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1 id=&quot;everythingbutthekitchensink&quot;&gt;Everything But The Kitchen Sink&lt;/h1&gt;

&lt;p&gt;I use the phrase &amp;#8220;everything but the kitchen sink&amp;#8221; as an analogy.&lt;/p&gt;

&lt;p&gt;In my words, the phrase means trying to do everything at once instead of partitioning the work.&lt;/p&gt;

&lt;p&gt;Emacs is everything but the kitchen sink.&lt;/p&gt;

&lt;p&gt;Most PLs are everything but the kitchen sinks.&lt;/p&gt;

&lt;p&gt;IMO, everything is a fractal. Everything can be subdivided into smaller pieces.&lt;/p&gt;

&lt;p&gt;IMO, programming tasks should be subdivided into smaller pieces.&lt;a href=&quot;#fn:1&quot; id=&quot;fnref:1&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;relationalprogramming&quot;&gt;Relational Programming&lt;/h1&gt;

&lt;p&gt;I argue that we can strip &lt;em&gt;relational programming&lt;/em&gt; down to its basics and that this will help us create code that creates code that &amp;#8230;&lt;/p&gt;

&lt;p&gt;The basics of &lt;em&gt;relational programming&lt;/em&gt; are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;exhaustive search&lt;/li&gt;
&lt;li&gt;triples.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Everything else is unnecessary complexity.&lt;/p&gt;

&lt;p&gt;We already know how to express both basics: (a) as loops of loops (but, the syntax is horrible) and (b) functions of exactly two arguments (not 0, not 1, not more than 2).&lt;/p&gt;

&lt;p&gt;PROLOG, also, suggests a concise, human-readable, syntax for exhaustive search.&lt;/p&gt;

&lt;p&gt;The easiest introduction to PROLOG that I have encountered is Nils Holm&amp;#8217;s &amp;#8220;Prolog Control in Six Slides&amp;#8221;.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;In &amp;#8220;Ohm in Small Steps&amp;#8221;, I show one way to transpile Holm&amp;#8217;s Scheme code to Javascript. The transpiler should port easily to other output languages that support anonymous functions.&lt;/em&gt;]&lt;/p&gt;

&lt;h1 id=&quot;thesoftwareatom&quot;&gt;The Software ATOM&lt;/h1&gt;

&lt;p&gt;In &amp;#8220;Everything is a Fractal&amp;#8221;, I mention &lt;em&gt;relational programming&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My interest is in finding the &lt;em&gt;atom&lt;/em&gt; of software.&lt;/p&gt;

&lt;p&gt;Many languages have been invented, and each one purports to be The Answer (to software development).&lt;/p&gt;

&lt;p&gt;Projectional editing consists of research into creating different views on code.&lt;/p&gt;

&lt;p&gt;I believe that if we had an &lt;em&gt;atom&lt;/em&gt; of software, we could create multiple views on the code (and the data) and we could create multiple languages for the same code and data. We could re-skin code at will.&lt;/p&gt;

&lt;p&gt;I call such &lt;em&gt;skins&lt;/em&gt; &amp;#8220;SCNs&amp;#8221; - Solution Centric Notations.&lt;a href=&quot;#fn:2&quot; id=&quot;fnref:2&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;theatomofsoftware&quot;&gt;The ATOM of Software&lt;/h2&gt;

&lt;p&gt;I &amp;#8212; currently &amp;#8212; believe that &lt;em&gt;triples&lt;/em&gt; are the &lt;em&gt;ATOM&lt;/em&gt; of code and that &lt;em&gt;relational programming&lt;/em&gt; shows us how to write low-level code and data in triple format.&lt;/p&gt;

&lt;p&gt;In my words, an &lt;em&gt;Atom&lt;/em&gt; is the smallest indivisible sub-part of a system.&lt;/p&gt;

&lt;p&gt;In my view, everything is a fractal, so I believe that &lt;em&gt;Atoms&lt;/em&gt; can be further subdivided.&lt;/p&gt;

&lt;p&gt;From this perspective, an &lt;em&gt;Atom&lt;/em&gt; is only meaningful in terms of a &lt;em&gt;solution&lt;/em&gt;. An &lt;em&gt;Atom&lt;/em&gt; is a point where the Architect / Engineer chose (&lt;em&gt;v: to choose&lt;/em&gt;) to quit subdividing a sub-problem and chose to implement the solution to the sub-problem.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Corollary: Different Architects might choose different sets of Atoms&lt;/em&gt;.]&lt;/p&gt;

&lt;h2 id=&quot;assembleratoms-isthereahigherlevel&quot;&gt;Assembler ATOMS - Is There a Higher Level?&lt;/h2&gt;

&lt;p&gt;Assembler is a triple-based language.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;p&gt;MOV R1, R0&lt;/p&gt;

&lt;p&gt;is a triple (!).&lt;/p&gt;

&lt;p&gt;Techniques have been devised to write code that writes code, given assembler. Such techniques have been buried in &lt;em&gt;compiler technology&lt;/em&gt; literature. I think that such tools and techniques need to be brought out and made available to all programmers, not just compiler-writers.&lt;/p&gt;

&lt;p&gt;It is &lt;em&gt;much&lt;/em&gt; easier to write code that writes code when the input has been normalized to triple form.&lt;/p&gt;

&lt;p&gt;Some compiler technologies have leaked out to mortal programmers &amp;#8212; e.g. REGEX.&lt;/p&gt;

&lt;p&gt;Most compiler technology, though, remains shrouded in mystery.&lt;/p&gt;

&lt;p&gt;Most programmers recognize and use the technology called &lt;em&gt;gcc&lt;/em&gt;, but few know that it is based on early compiler peepholing techniques explored by Fraser and Davidson. That technology is called RTL.&lt;/p&gt;

&lt;p&gt;Technologies, that look similarly useful, include Cordy&amp;#8217;s &lt;em&gt;OCG&lt;/em&gt; and Holt&amp;#8217;s &lt;em&gt;Data Descriptors&lt;/em&gt;. Holt&amp;#8217;s/Cordy&amp;#8217;s/Wortman&amp;#8217;s &lt;em&gt;S/SL&lt;/em&gt; is a forerunner of PEG-like technologies. Cordy&amp;#8217;s TXL uses backtracking to parse programming languages.&lt;/p&gt;

&lt;p&gt;I believe that compiler parsing technologies&lt;a href=&quot;#fn:3&quot; id=&quot;fnref:3&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; are ripe for picking making available to mortal programmers. Such technology needs to be REGEX&amp;#8217;ed.&lt;/p&gt;

&lt;p&gt;Since inventing assembler, we (the royal we) have found utility in inventing 1&lt;sup&gt;st&lt;/sup&gt;-class functions, and, garbage collection, and, relational programming, and, &amp;#8230;&lt;/p&gt;

&lt;p&gt;Is there a triple-like notation that employs 1&lt;sup&gt;st&lt;/sup&gt;-class functions and garbage collection? Early Lisp&lt;a href=&quot;#fn:4&quot; id=&quot;fnref:4&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; was an early form of this kind of thing. Relational Programming might give us some clues. OO and FP might give us clues. Closures and anonymous functions (found in Lisp, and more recent languages like JavaScript and Python) give us clues. Hierarchical filesystems might give us a clue.&lt;/p&gt;

&lt;p&gt;Of course, assembler can do any of the above, but it needs to be skinned for human readability and complexity management.&lt;/p&gt;

&lt;p&gt;I favour the use of &lt;em&gt;toolbox languages&lt;/em&gt; for building skins. Are there a toolbox languages that make building skins &amp;#8212; SCNs &amp;#8212; easier than using assembler?&lt;/p&gt;

&lt;p&gt;We (the royal we) have spent a great deal of effort developing language skins aimed at human readability, and we have not spent much effort on developing languages for machine readability (Rebol and TXL are different takes on this subject).&lt;/p&gt;

&lt;h1 id=&quot;codethatwritescode&quot;&gt;Code That Writes Code&lt;/h1&gt;

&lt;p&gt;Note that I do not believe that the discovering the &lt;em&gt;software atom&lt;/em&gt; will result in human-readable code.&lt;/p&gt;

&lt;p&gt;I want to write code that writes code.&lt;/p&gt;

&lt;p&gt;Machine-readable code is better than human-readable code, if one is trying to write code that writes code.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;software atom&lt;/em&gt; will result in advances in machine-readable code.&lt;/p&gt;

&lt;h1 id=&quot;fdd-failuredrivendesign&quot;&gt;FDD - Failure Driven Design&lt;/h1&gt;

&lt;p&gt;In another essay, I discuss FDD &amp;#8212; Failure Driven Design.&lt;/p&gt;

&lt;p&gt;When software works, we abandon it (&amp;#8220;release&amp;#8221; it).&lt;/p&gt;

&lt;p&gt;When software doesn&amp;#8217;t work, we work on it.&lt;/p&gt;

&lt;p&gt;Most of the time, we work on failed code (design, code, etc.).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relational programming&lt;/em&gt; ties in with FDD as one of the possible technologies for writing code that writes code.&lt;/p&gt;

&lt;h1 id=&quot;whatsmissingwhattothrowout&quot;&gt;What&amp;#8217;s Missing? What to Throw Out?&lt;/h1&gt;

&lt;p&gt;The current forms of relational programming &amp;#8212; PROLOG and miniKanren &amp;#8212; have &lt;em&gt;nothing&lt;/em&gt; missing.&lt;/p&gt;

&lt;p&gt;I believe that current relational programming languages encourage the use of &lt;em&gt;too much&lt;/em&gt; detail.&lt;/p&gt;

&lt;p&gt;Details kill.&lt;/p&gt;

&lt;p&gt;A programming language, to be useful, needs to elide details (but not ignore them).&lt;/p&gt;

&lt;p&gt;No language can be The One Language to Rule Them All.&lt;/p&gt;

&lt;p&gt;We need multiple skins &amp;#8212; SCLs &amp;#8212; that help us elide details in a problem-specific way.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;good part&lt;/em&gt; of relational programming is the notion that pattern-matching can be done automatically and under-the-hood.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;bad parts&lt;/em&gt; of relational programming are everything else.&lt;/p&gt;

&lt;p&gt;For example, I would rather use &lt;em&gt;printf&lt;/em&gt; to format output strings than trying to fit formatting into the relational paradigm (it is &lt;em&gt;possible&lt;/em&gt;, but it is not pretty).&lt;/p&gt;

&lt;p&gt;Relational programming should stick to triples only. Functors that have more than 2 arguments should not be used. (In fact, functors that have 0 or 1 arguments are questionable, too. Machines like repetitive code. No edge-cases. Everything in the form of &lt;em&gt;relation(subject,object)&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&quot;patternmatching&quot;&gt;Pattern Matching&lt;/h1&gt;

&lt;p&gt;The latest crop of FP (functional programming) skins use &lt;em&gt;pattern matching&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This technology was invented and explored in the 1960&amp;#8217;s under the name of &lt;em&gt;parsers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Is FP the modern manifestation of pattern matching?&lt;/p&gt;

&lt;p&gt;To use FP, you have to expunge &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s a big hit.&lt;/p&gt;

&lt;p&gt;FP, also, is based on a very old skin called &lt;em&gt;mathematics&lt;/em&gt;. Mathematics was invented when all that we had was paper (and pencils and pens). We can build 2D skins using computers. We can build 3D skins using 3D printers (we can &lt;em&gt;model&lt;/em&gt; 3D skins using CAD software).&lt;/p&gt;

&lt;p&gt;IMO, PEG is the modern manifestation of pattern matching.&lt;/p&gt;

&lt;p&gt;You can keep &lt;em&gt;f(t)&lt;/em&gt; using parsers and PEG.&lt;/p&gt;

&lt;p&gt;In fact, S/SL showed how to build &lt;em&gt;f(t)&lt;/em&gt; processors.&lt;/p&gt;

&lt;p&gt;(One can use pipelines to chain FP beads together into &lt;em&gt;f(t)&lt;/em&gt; handlers).&lt;/p&gt;

&lt;h1 id=&quot;isolation-encapsulationisnotenough&quot;&gt;Isolation - Encapsulation is Not Enough&lt;/h1&gt;

&lt;p&gt;We (the royal we) invented &lt;em&gt;isolation&lt;/em&gt; in the form of UNIX® processes and pipelines.&lt;/p&gt;

&lt;p&gt;Then, we threw such &lt;em&gt;isolation&lt;/em&gt; away and settled for &lt;em&gt;encapsulation&lt;/em&gt; in the form of OO, etc.&lt;/p&gt;

&lt;p&gt;We now know that &lt;em&gt;encapsulation&lt;/em&gt; is not enough &amp;#8212; we cannot bolt programs together in a care-free manner using only &lt;em&gt;encapsulation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We want to &lt;em&gt;build-and-forget&lt;/em&gt; programs. We need to expunge inter-program dependencies. In other words, we want &lt;em&gt;isolation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Worse, yet, our present-day hardware creates dynamic dependency chains under-the-hood.&lt;/p&gt;

&lt;p&gt;Our hardware just about forces us to produce CALL/RETURN Spaghetti.&lt;/p&gt;

&lt;p&gt;Relational programming (and FP) gives us a way to talk about solutions that create no dependency chains.&lt;/p&gt;

&lt;p&gt;Is that enough? No. But it&amp;#8217;s a start.&lt;/p&gt;

&lt;p&gt;Do we already have all of the pieces and Atoms that we need to propel programming into the future? Maybe.&lt;/p&gt;

&lt;h1 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h1&gt;

&lt;p&gt;To be able to bolt software components together, we must make use concurrent software components.&lt;/p&gt;

&lt;p&gt;CALL /RETURN Spaghetti encourages edge-cases and thwarts attempts at &lt;em&gt;easy&lt;/em&gt; machine-readability.&lt;/p&gt;

&lt;p&gt;We (the royal we) have been dealing with concurrency in the wrong manner &amp;#8212; optimizing for memory sharing and time-sharing. This approach has generated a multitude of accidental complexities.&lt;/p&gt;

&lt;p&gt;We (the royal we) don&amp;#8217;t need memory sharing and time-sharing built into &lt;em&gt;every&lt;/em&gt; app. Only a few apps need these features (e.g. operating systems,&lt;a href=&quot;#fn:5&quot; id=&quot;fnref:5&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; like Linux, Window and MacOS). Making apps that include concurrency (but don&amp;#8217;t really use it) is asking for trouble.&lt;/p&gt;

&lt;h1 id=&quot;scns-onelanguagedoesnotfitall&quot;&gt;SCNs - One Language Does Not Fit All&lt;/h1&gt;

&lt;p&gt;Languages are skins.&lt;/p&gt;

&lt;p&gt;I have a cavalier attitude towards languages, because I know that we can build notations (languages) in only a few hours.&lt;/p&gt;

&lt;p&gt;I view notations like a bowl of candy sprinkles. Sprinkle several notations on every problem, to make the solution simpler to express, and, to program.&lt;/p&gt;

&lt;h1 id=&quot;humanreadabilityvs.machinereadability&quot;&gt;Human Readability vs. Machine Readability&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;key&lt;/em&gt; to writing code that writes code is to cleave &amp;#8220;Programming Languages&amp;#8221; into two camps (maybe more, recursively):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programming Languages for Humans&lt;/li&gt;
&lt;li&gt;Programming Languages for Machines.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Programming Languages for Machines can lead to code that writes code, to projectional editing, etc.&lt;/p&gt;

&lt;p&gt;A lot of techniques for writing code that writes code were explored in the early days of computing, under the name of &lt;em&gt;compiler technologies&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Lisp &lt;em&gt;macros&lt;/em&gt; are another manifestation of such technology.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;The problem with Lisp macros is that we tried to include compiler technology into the skins. This raised the (accidental) complexity of the problem. Combining technologies &amp;#8212; flattening them &amp;#8212; is almost always a bad idea.&lt;/em&gt;]&lt;/p&gt;

&lt;h1 id=&quot;thegoalofprogramming&quot;&gt;The Goal of Programming&lt;/h1&gt;

&lt;p&gt;The point of programming is to automate processes, using a computer.&lt;/p&gt;

&lt;p&gt;All technologies for programming should strive to answer the question of how to automate a process using a computer.&lt;/p&gt;

&lt;h1 id=&quot;completenesstheoreticalapproachesprogramming&quot;&gt;Completeness, Theoretical Approaches, Programming&lt;/h1&gt;

&lt;p&gt;Many programmers feel that the &amp;#8220;best&amp;#8221; way to automate processes is to delve into all of the details in excruciating detail, in a non-hierarchical (flat) manner. I.E. language theories and skins for &amp;#8220;proving&amp;#8221; language designs.&lt;/p&gt;

&lt;p&gt;We have seen progress on this front, but, it is obvious that this does not result in programming skins that are accessible to mortal programmers.&lt;/p&gt;

&lt;p&gt;Language theory provides a solid description of the &lt;em&gt;universe&lt;/em&gt; of programming languages, but, tends not to address the problems of finding expressible versions of skins that are &amp;#8220;walks&amp;#8221; through the &lt;em&gt;universe&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/2021-04-23-18-38-46-Images/WalkingtheUniverse-Page-1.png&quot; alt=&quot;&quot; id=&quot;walkingtheuniverse-page-1&quot; width=&quot;200&quot; height=&quot;219&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Fig. 1 Walks Through The Language Universe&lt;/p&gt;

&lt;p&gt;Relational programming is (but) one manifestation of language theory.&lt;/p&gt;

&lt;p&gt;Making something simpler is usually begun by starting out simple instead of by adding complexity.&lt;a href=&quot;#fn:6&quot; id=&quot;fnref:6&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;throwingstuffout&quot;&gt;Throwing Stuff Out&lt;/h1&gt;

&lt;p&gt;To make language theory, and relational programming, &lt;em&gt;useful&lt;/em&gt; to mortal programmers, we (the royal we) need to &lt;em&gt;throw stuff out&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I suggest that we remove just about &lt;em&gt;everything&lt;/em&gt; from relational programming, and leave only &lt;em&gt;triples&lt;/em&gt; and exhaustive search.&lt;/p&gt;

&lt;h1 id=&quot;denotationalsemantics-realisticcompilergeneration&quot;&gt;Denotational Semantics - Realistic Compiler Generation&lt;/h1&gt;

&lt;p&gt;Peter Lee&amp;#8217;s book &amp;#8220;Realistic Compiler Generation&amp;#8221; shows how he managed an overtly complex technology &amp;#8212; Denotational Semantics &amp;#8212; by chopping it up into pieces, and pipelining the pieces.&lt;/p&gt;

&lt;p&gt;Further work on this idea was performed by Uwe Pleban.&lt;/p&gt;

&lt;p&gt;There is no need to devolve all of computing to the expression of Natural Numbers. Except in theoretical expressions of the Universe of Programming.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;goal&lt;/em&gt; of creating &lt;em&gt;useful&lt;/em&gt; skins is to build a Component using hierarchies of isolated components and finding notations for the &lt;em&gt;input&lt;/em&gt; and the &lt;em&gt;output&lt;/em&gt; of each subdivision.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Realistic Compiler Generation&amp;#8221; shows but one kind of possible skin for expressing denotational semantics in a &lt;em&gt;useful&lt;/em&gt; form.&lt;/p&gt;

&lt;h1 id=&quot;engineering&quot;&gt;Engineering&lt;/h1&gt;

&lt;p&gt;Engineering is not coding.&lt;/p&gt;

&lt;p&gt;Implementation is coding.&lt;/p&gt;

&lt;p&gt;Engineering is the process of defining the details that lie between the Architecture and the Implementation.&lt;/p&gt;

&lt;p&gt;As such, relational programming might lead to a skin(s) for expressing &lt;em&gt;engineering&lt;/em&gt; concerns (in a hierarchical &amp;#8212; divide-and-conquer &amp;#8212; manner, composing isolated components together into a solution).&lt;/p&gt;

&lt;h1 id=&quot;noneedtowaitforcompleterigour&quot;&gt;No Need To Wait For Complete Rigour&lt;/h1&gt;

&lt;p&gt;Complete Rigour is certainly something to strive for, but, complete rigor is not necessary for delivering product.&lt;/p&gt;

&lt;p&gt;In fact, if we&amp;#8217;d waited for theoretically complete rigour, we would not have an electronics industry.&lt;a href=&quot;#fn:7&quot; id=&quot;fnref:7&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Re-using what we&amp;#8217;ve learned from various forms of Engineering &amp;#8212; Civil, Structural, etc. Engineering &amp;#8212; we see that we &lt;em&gt;can&lt;/em&gt; deliver products without having an overall rigorous theory for the given domain.&lt;/p&gt;

&lt;p&gt;My first full-time job was as a Software Test Engineer with Mitel Corp.&lt;/p&gt;

&lt;p&gt;Mitel is a Telecom company (like Bell and NorTel, etc.). At the time, all Telecoms professed the four-nines principle &amp;#8212; 99.99% uptime. People would telephone each other during power failures and not even notice that the telephone networks were still working, although the power grid had failed.&lt;/p&gt;

&lt;p&gt;All of this was done with early computing technologies, and with software written in assembler and early programming languages &amp;#8212; long before the advent of FP, Haskell, etc.&lt;/p&gt;

&lt;p&gt;Testing. Most theorists look down on testing, but, testing &lt;em&gt;can&lt;/em&gt; be used to create useful, and, saleable, and, guarantee-able products. To deliver products using only testing instead of rigorous theories, one needs to apply many layers of testing. CI/CD is only &lt;em&gt;one&lt;/em&gt; form of testing (regression testing). Mitel used, at least, automated testing, analogue testing, back-to-back testing, trace analysis testing, etc., etc.&lt;/p&gt;

&lt;p&gt;For Telecoms, and for current companies, rigorous theories can only serve to cost-reduce products by reducing testing costs (while increasing development costs and narrowing the kinds of programmers that can perform development tasks).&lt;/p&gt;

&lt;p&gt;Can theories provide order-of-magnitude benefits, like PEG vs. YACC? Maybe, but, we are still waiting.&lt;/p&gt;

&lt;h1 id=&quot;das-diagramsassyntax&quot;&gt;DaS - Diagrams as Syntax&lt;/h1&gt;

&lt;p&gt;Relations make parsing diagrams &amp;#8220;easy&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Parsing a diagram consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;normalizing the elements of a diagram (e.g. rectangles, ellipses, lines, text &amp;#8212; in other words SVG simplified (see &lt;a href=&quot;#throwingstuffout&quot;&gt;Throwing Stuff Out&lt;/a&gt;))&lt;/li&gt;
&lt;li&gt;pattern-matching the elements&lt;/li&gt;
&lt;li&gt;formatting output code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, a rectangle can be described as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a declaration of a unique ID&lt;/li&gt;
&lt;li&gt;4 lines&lt;/li&gt;
&lt;li&gt;x for each line&lt;/li&gt;
&lt;li&gt;y for each line&lt;/li&gt;
&lt;li&gt;width for each line&lt;/li&gt;
&lt;li&gt;height for each line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do this, we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;an editor &amp;#8212; a &lt;em&gt;simple&lt;/em&gt;&lt;a href=&quot;#fn:8&quot; id=&quot;fnref:8&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; diagram editor that allows creation rectangles, ellipses, lines (straight, curvy, arrow-headed), text&lt;/li&gt;
&lt;li&gt;a transpiler that normalizes the output of the editor&lt;/li&gt;
&lt;li&gt;a pattern matcher&lt;/li&gt;
&lt;li&gt;an output code formatter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step (2) converts the editor output into relational triples &amp;#8212; a &lt;em&gt;factbase&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Step (3) uses relational programming &amp;#8212; e.g. PROLOG or miniKanren &amp;#8212; to infer information about the diagram and the programming conventions.&lt;/p&gt;

&lt;p&gt;Using modern-day computers, we can expend CPU power to perform step (3) at runtime, saving head-scratching during design- and compile- times.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Q: Why do I champion triples instead of structured forms? A: Triples are more easily machine-readable than more elaborate data structures.&lt;/em&gt;]&lt;a href=&quot;#fn:9&quot; id=&quot;fnref:9&quot; title=&quot;see footnote&quot; class=&quot;footnote&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-everythingisafractal&quot;&gt;Appendix - Everything is a Fractal&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/23/Everything-is-a-Fractal.html&quot;&gt;https://guitarvydas.github.io/2021/03/23/Everything-is-a-Fractal.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-prologprogrammingforprogrammers&quot;&gt;Appendix - PROLOG Programming for Programmers&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&quot;&gt;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-factbases&quot;&gt;Appendix - Factbases&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/17/Factbases.html&quot;&gt;https://guitarvydas.github.io/2021/01/17/Factbases.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-triples&quot;&gt;Appendix - Triples&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Triples.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Triples.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-languagesareskins&quot;&gt;Appendix - Languages Are Skins&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Programming-Languages-Are-Skins.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-scns-solutioncentricnotations&quot;&gt;Appendix - SCNs - Solution Centric Notations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/10/SCN.html&quot;&gt;https://guitarvydas.github.io/2021/04/10/SCN.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/DSL-Manifesto.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/DSL-Manifesto.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-rtl&quot;&gt;Appendix - RTL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&quot;&gt;https://www.researchgate.net/publication/220404697_The_Design_and_Application_of_a_Retargetable_Peephole_Optimizer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-peg&quot;&gt;Appendix - PEG&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/PEG.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/PEG-vs.-Other-Pattern-Matchers.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/24/REGEX-vs-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&quot;&gt;https://guitarvydas.github.io/2021/04/02/PEG-Cheat-Sheet.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ohm-JS (PEG for Javascript):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/OhmInSmallSteps.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/harc/ohm&quot;&gt;https://github.com/harc/ohm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PEG for Lisp:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&quot;&gt;https://guitarvydas.github.io/2021/03/19/Racket-PEG.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scymtym.github.io/esrap/&quot;&gt;https://scymtym.github.io/esrap/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PEG for JS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pegjs.org/&quot;&gt;https://pegjs.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thesis, etc.:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bford.info/packrat/&quot;&gt;https://bford.info/packrat/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I believe that the Ohm Editor is a breakthrough tool: &lt;a href=&quot;https://ohmlang.github.io/editor/&quot;&gt;https://ohmlang.github.io/editor/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;The Ohm Editor is an IDE for rapidly debugging PEG pattern-matching specs (aka grammars)&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;What I do with Ohm-JS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Glue Tool (a PEG to help writing PEGs):

&lt;ul&gt;
&lt;li&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Recursive Design

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/12/Recursive-Iterative-Design-By-Example.html&quot;&gt;https://guitarvydas.github.io/2021/04/12/Recursive-Iterative-Design-By-Example.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html&quot;&gt;https://guitarvydas.github.io/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ASON parser (most of one):

&lt;ul&gt;
&lt;li&gt;https://guitarvydas.github.io/2021/04/10/ASON-Notation-Pipeline.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GRASEM Tool

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Grasem.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Grasem.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;appendix-ocg&quot;&gt;Appendix - OCG&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&quot;&gt;https://books.google.ca/books?id=X0OaMQEACAAJ&amp;amp;dq=bibliogroup:%22University+of+Toronto+Computer+Systems+Research+Institute+Technical+Report+CSRI%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwig1Legm8bqAhWvlHIEHYzzBYEQ6AEwBHoECAEQAQs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-ssl&quot;&gt;Appendix - S/SL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&quot;&gt;https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-datadescriptors&quot;&gt;Appendix - Data Descriptors&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/24039.24051&quot;&gt;https://dl.acm.org/doi/abs/10.1145/24039.24051&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-minikanren&quot;&gt;Appendix - MiniKanren&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://minikanren.org/&quot;&gt;http://minikanren.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(must see, if you haven&amp;#8217;t already heard about Barliman: &lt;a href=&quot;https://www.youtube.com/watch?v=er_lLvkklsk&quot;&gt;https://www.youtube.com/watch?v=er_lLvkklsk&lt;/a&gt; (&lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;https://github.com/webyrd/Barliman&lt;/a&gt;))&lt;/p&gt;

&lt;h1 id=&quot;appendix-prolog&quot;&gt;Appendix - PROLOG&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=199s&quot;&gt;https://www.youtube.com/watch?v=QOYAHoLiyg0&amp;amp;t=199s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;modern PROLOG:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swi-prolog.org/&quot;&gt;https://www.swi-prolog.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(gprolog uses WAM: &lt;a href=&quot;http://www.gprolog.org/&quot;&gt;http://www.gprolog.org/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(beginnings of a WAM: &lt;a href=&quot;https://github.com/guitarvydas/wam&quot;&gt;https://github.com/guitarvydas/wam&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(WAM tutorial: &lt;a href=&quot;http://wambook.sourceforge.net/&quot;&gt;http://wambook.sourceforge.net/&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&quot;appendix-parsingdiagrams&quot;&gt;Appendix - Parsing Diagrams&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Compiling-Diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Compiling-Diagrams.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/16/Transpiling-Diagrams-to-Code-101.html&quot;&gt;https://guitarvydas.github.io/2021/01/16/Transpiling-Diagrams-to-Code-101.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/24/Compiling-Diagrams-2.html&quot;&gt;https://guitarvydas.github.io/2021/01/24/Compiling-Diagrams-2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/component-diagrams.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&quot;&gt;https://guitarvydas.github.io/2021/01/12/Transpiling-Diagrams-to-Code-101.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/01/10/Transpiling-Diagrams-Overview.html&quot;&gt;https://guitarvydas.github.io/2021/01/10/Transpiling-Diagrams-Overview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Parsing-and-Compiling-Diagrams.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Parsing-and-Compiling-Diagrams.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Editor-for-Gratoms.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Editor-for-Gratoms.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-toolboxlanguages&quot;&gt;Appendix - Toolbox Languages&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-txl&quot;&gt;Appendix - TXL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.txl.ca/&quot;&gt;https://www.txl.ca/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-rebolason&quot;&gt;Appendix - Rebol, ASON&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rebol&quot;&gt;https://en.wikipedia.org/wiki/Rebol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rebol.com/&quot;&gt;http://www.rebol.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rebol/rebol&quot;&gt;https://github.com/rebol/rebol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/red/red/blob/master/README.md#red-programming-language&quot;&gt;https://github.com/red/red/blob/master/README.md#red-programming-language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ASON&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://altscript.com/&quot;&gt;https://altscript.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-detailskill&quot;&gt;Appendix - Details Kill&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&quot;&gt;https://guitarvydas.github.io/2021/03/17/Details-Kill.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-isolation&quot;&gt;Appendix - Isolation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Isolation.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Isolation.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Scalability.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Scalability-II.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-thestack&quot;&gt;Appendix - The Stack&lt;/h1&gt;

&lt;p&gt;ALGOL Bottleneck:&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=NTdA4OljwVE&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-ALGOL-Bottleneck.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Stack:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/27/The-Stack-2.html&quot;&gt;https://guitarvydas.github.io/2020/12/27/The-Stack-2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/25/The-Stack.html&quot;&gt;https://guitarvydas.github.io/2020/12/25/The-Stack.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&quot;&gt;https://guitarvydas.github.io/2021/02/25/The-Stack-is-a-Global-Variable-(again).html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/24/The-Stack-is-a-List.html&quot;&gt;https://guitarvydas.github.io/2020/12/24/The-Stack-is-a-List.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Type-Stacks.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Type-Stacks.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Two-Stacks-For-Every-Type.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Two-Stacks-For-Every-Type.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-realisticcompilergeneration&quot;&gt;Appendix - Realistic Compiler Generation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&quot;&gt;https://www.amazon.ca/Realistic-Compiler-Generation-Peter-Lee/dp/0262121417&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-continuumbetweencompile-timeandrun-time&quot;&gt;Appendix - Continuum Between Compile-time and Run-time&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Efficiency.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Efficiency.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-codethatwritescode&quot;&gt;Appendix - Code That Writes Code&lt;/h1&gt;

&lt;p&gt;[&lt;em&gt;essay to come, for now see examples&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&quot;&gt;https://guitarvydas.github.io/2021/04/11/Glue-Tool.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ref1&quot;&gt;Appendix - Toolbox Languages&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&quot;&gt;https://guitarvydas.github.io/2021/03/16/Toolbox-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-callreturnspaghetti&quot;&gt;Appendix - Call Return Spaghetti&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/CALL-RETURN-Spaghetti.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-fdd-failuredrivendevelopment&quot;&gt;Appendix - FDD - Failure Driven Development&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2021/04/23/Failure-Driven-Design.html&quot;&gt;https://guitarvydas.github.io/2021/04/23/Failure-Driven-Design.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-prologcontrolin6slides&quot;&gt;Appendix - Prolog Control in 6 Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.t3x.org/bits/prolog6.html&quot;&gt;https://www.t3x.org/bits/prolog6.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-concurrency&quot;&gt;Appendix - Concurrency&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-a-Paradigm.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Computing-Then-and-Now.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Computing-Then-and-Now.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Concurrency-is-not-Parallelism.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-diagram-basedvisualprogramming&quot;&gt;Appendix - Diagram-Based Visual Programming&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/Diagram-Based-Languages.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2uw2W0w5oU8&quot;&gt;https://www.youtube.com/watch?v=2uw2W0w5oU8&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;appendix-otherreferences&quot;&gt;Appendix - Other References&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&quot;&gt;https://www.youtube.com/channel/UC2bdO9l84VWGlRdeNy50fIg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/2020/12/09/References.html&quot;&gt;https://guitarvydas.github.io/2020/12/09/References.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FBP (Flow-Based Programming, concurrency, diagrams)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jpaulm.github.io/fbp/&quot;&gt;https://jpaulm.github.io/fbp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;noFlo&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://noflojs.org/&quot;&gt;https://noflojs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;(experimental code, many branches)
&lt;a href=&quot;https://github.com/bmfbp/bmfbp&quot;&gt;https://github.com/bmfbp/bmfbp&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Arrowgrams (experimental code, many branches)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bmfbp/bmfbp&quot;&gt;https://github.com/bmfbp/bmfbp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/guitarvydas/vsh&quot;&gt;https://github.com/guitarvydas/vsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;appendix-everythingbutthekitchensink&quot;&gt;Appendix - Everything but the Kitchen Sink&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theidioms.com/everything-but-the-kitchen-sink/&quot;&gt;https://www.theidioms.com/everything-but-the-kitchen-sink/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;

&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Until the pieces are so small that they can be implemented in only a few hours. (Two weeks is too long &amp;#8211; and indicates that more subdivision is necessary). &lt;a href=&quot;#fnref:1&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;I believe that SCNs are orders&amp;#8211;of&amp;#8211;magnitude cheaper to build than DSLs and PLs (Domain&amp;#8211;Specific Languages and Programming Languages, resp.). I discuss this elsewhere (see appendix). &lt;a href=&quot;#fnref:2&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;I argue that we need PEG with backtracking and tokenizing. &lt;a href=&quot;#fnref:3&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;But, then, Lisp was beat into the ground with complexity&amp;#8211;hammers and became Common Lisp. &lt;a href=&quot;#fnref:4&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;In fact, we don't even need operating systems. Operating systems are just code libraries. &lt;a href=&quot;#fnref:5&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Although simplication is a factor https://en.wikipedia.org/wiki/William_Bushnell_Stout#:~:text=published%20in%201951.&amp;#8211;,Legacy,Colin%20Chapman%20of%20Lotus%20Cars.&lt;/p&gt;

&lt;p&gt;Computers are &amp;#8220;complex&amp;#8221; to begin with. They need to be skinned to allow access to them by mere mortals. Simplication. Likewise, CPUs are complex and are simplicated (from various kinds of rust to ICs by electronics chip manufacturers) for use by programmers. &lt;a href=&quot;#fnref:6&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Aside: Scientists like to talk about a TOE (a Theory of Everything), but, this will not be possible until Science can explain consciousness (among other factors) without hand&amp;#8211;waving arguments like &amp;#8220;emergent properties&amp;#8221;. &lt;a href=&quot;#fnref:7&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:8&quot;&gt;
&lt;p&gt;Most existing diagram editors are much too complex. Details kill. &lt;a href=&quot;#fnref:8&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn:9&quot;&gt;
&lt;p&gt;Machines can structure data for us, at runtime. I think of a continuum between compile&amp;#8211;time and run&amp;#8211;time. In fact, all software is interpreted, anyway (a CPU is an interpreter). The only question is &amp;#8220;when does the interpretation happen?&amp;#8221; &lt;a href=&quot;#fnref:9&quot; title=&quot;return to body&quot; class=&quot;reversefootnote&quot;&gt;&amp;#160;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Relational Programming and the Kitchen Sink</summary></entry><entry><title type="html">Failure Driven Design</title><link href="https://computingsimplicity.neocities.org/2021/04/23/Failure-Driven-Design.html" rel="alternate" type="text/html" title="Failure Driven Design" /><published>2021-04-23T00:00:00-04:00</published><updated>2021-04-23T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/23/Failure-Driven-Design</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/23/Failure-Driven-Design.html">&lt;p&gt;Failure Driven Design&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-23-FDD/index.html&quot;&gt;FDD&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Failure Driven Design</summary></entry><entry><title type="html">Variable names are not good enough</title><link href="https://computingsimplicity.neocities.org/2021/04/22/Variable-Names-Are-Not-Good-Enough.html" rel="alternate" type="text/html" title="Variable names are not good enough" /><published>2021-04-22T00:00:00-04:00</published><updated>2021-04-22T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/22/Variable%20Names%20Are%20Not%20Good%20Enough</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/22/Variable-Names-Are-Not-Good-Enough.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Variable Names Are Not Good Enough&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-22T11:39:14Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-22T11:39:14Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Variable Names Are Not Good Enough&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Variable names are a notational convenience.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;As such, one should be able to explore variable names recursively.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in the formula:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y = mx + b&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;what is &quot;m&quot; and what is &quot;b&quot;?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;If we rewrite the formula as:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;y = slope * x + intercept&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;the equation becomes less readable (at least, for &quot;experts&quot;).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Hierarchical Names&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Our editors should allow us to explore — expand — variable names.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;For example, in the above formula, we should be able to click on &quot;m&quot; and ask for a lengthier name. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;From there, we should be able to push down and get even more detail, e.g. an explanation of the term &quot;slope&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;m —&amp;gt; slope —&amp;gt; description of &lt;i&gt;slope&lt;/i&gt; —&amp;gt; etc.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Tooltips are Not Enough&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Tooltips, as they currently exist — hover over an item to get a longer phrase — are not &quot;enough&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need tooltips for tooltips.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;We need tooltips for tooltips for tooltips for …&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Variable Names Are Not Good Enough</summary></entry><entry><title type="html">Regex</title><link href="https://computingsimplicity.neocities.org/2021/04/20/REGEX.html" rel="alternate" type="text/html" title="Regex" /><published>2021-04-20T00:00:00-04:00</published><updated>2021-04-20T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/20/REGEX</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/20/REGEX.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;REGEX&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-20T18:20:12Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-20T18:20:12Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;p class=&quot;p1&quot;&gt;REGEX is a production version of The Dragon Book DFA's.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Actually, regex goes even further back, but I regress). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Henry Spencer wrote regex.c (while working in the Biology building at UofT, IIRC). &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Kleene opened our eyes to REGEX principles.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Appendix - Henry Spencer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Henry_Spencer&quot;&gt;https://en.wikipedia.org/wiki/Henry_Spencer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">REGEX</summary></entry><entry><title type="html">Git could do more</title><link href="https://computingsimplicity.neocities.org/2021/04/20/Git-Could-Do-More.html" rel="alternate" type="text/html" title="Git could do more" /><published>2021-04-20T00:00:00-04:00</published><updated>2021-04-20T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/20/Git%20Could%20Do%20More</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/20/Git-Could-Do-More.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Git Could Do More&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-20T18:25:15Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-20T18:25:15Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    span.s1 {font: 12.0px Helvetica}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Github, Git, Diff, etc.&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I consider &quot;github&quot; to be a whole gamut of technologies based on &quot;diff&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;githhub
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;git
    &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;diff (a UNIX tool)&lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&quot;Github&quot; is a production version of &quot;diff&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Automated DRY&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Github could use &quot;diff&quot; in a bigger way.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Instead of diff'ing lines of code, it should diff layers of design.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(Which might be blocks of code).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Our PLs&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;are just glorified text editors.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;A lot of what we think about and build into PLs is DRY.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;RY&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; is what we want, but we waste brain power on DRY.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Machines could detect DRY for us.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;And refactor the code/design/etc. for us automagically.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Github could include technology to figure out DRY.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Git-based Editors&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Our editors could figure out repeated lumps of text and make a golden copy for us.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The editor could show repeated lumps of source in gray and automagically update the golden copy when we edit the gray parts.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;[1]&lt;/a&gt; PL means Programming Language&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;[2]&lt;/a&gt; DRY means Don’t Repeat Yourself&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;[3]&lt;/a&gt; &lt;span class=&quot;s1&quot;&gt;RY means Repeat Yourself&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Git Could Do More</summary></entry><entry><title type="html">Recursive design, iterative design by example (2)</title><link href="https://computingsimplicity.neocities.org/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html" rel="alternate" type="text/html" title="Recursive design, iterative design by example (2)" /><published>2021-04-20T00:00:00-04:00</published><updated>2021-04-20T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/20/Recursive%20Design,%20Iterative%20Design%20By%20Example%20(2)</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/20/Recursive-Design,-Iterative-Design-By-Example-(2).html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Recursive Design, Iterative Design By Example (2)&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-20T07:33:29Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-20T07:33:29Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p6 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo}
    p.p7 {margin: 0.0px 0.0px 0.0px 36.0px; font: 11.0px Menlo; min-height: 13.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    li.li5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    span.s1 {font: 9.0px Palatino}
    span.s2 {text-decoration: underline}
    span.s3 {font: 11.0px Menlo}
    span.s4 {font: 13.0px Palatino}
    span.Apple-tab-span {white-space:pre}
    ol.ol1 {list-style-type: lower-alpha}
    ol.ol2 {list-style-type: decimal}
    ul.ul1 {list-style-type: disc}
    ul.ul2 {list-style-type: hyphen}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Part 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;This is a follow-on to part 1 of &quot;Recursive Design, Iterative Design By Example&quot;.]&lt;/i&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Goal: transpile a file of ASON text to Lisp items.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Sub-goal: instead of trying to implement ASON and Rebol, I start by converting ASON text into tokens.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will see, later,&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;how to progress from there…&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In general, the parser inputs a stream of text and outputs a stream of ASON tokens.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Specifically, when emitting a stream of Lisp tokens, the ASON tokens will appear as&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Lisp atoms when there is a direct relationship between ASON and Lisp, e.g. strings, integers, floats, etc.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;or, Lisp function calls,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;
  &lt;ul class=&quot;ul2&quot;&gt;
    &lt;li class=&quot;li4&quot;&gt;e.g. (ason-array &lt;i&gt;items&lt;/i&gt;)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;e.g. (yymmdd &lt;i&gt;int int int&lt;/i&gt;)&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;etc.&lt;/li&gt;
    &lt;li class=&quot;li4&quot;&gt;(see &quot;Lisp Emitter Sample&quot; and &lt;a href=&quot;https://github.com/guitarvydas/ason/blob/master/emitter-lisp.grasem&quot;&gt;https://github.com/guitarvydas/ason/blob/master/emitter-lisp.grasem&lt;/a&gt;).&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;[&lt;i&gt;I am trying to capture my design thoughts as they occur, kind of like a live-stream video.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is not a paper, nor a YouTube video nor a Twitch live-stream.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The result is probably uneven - I will continue to experiment with various thought-capture methodologies.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Discovery&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Discovery / Observation; the 7&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;th&lt;/sup&gt;&lt;/span&gt; pass - called blocks - is unnecessary.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The block tokens [], {}, () simply emit&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;lisp function calls, e.g. &quot;(ason-array-block&quot;, &quot;(ason-object-block&quot; and &quot;(ason-expression-block&quot;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;end of call &quot;)&quot; (in all 3 cases)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The grammar does not need to parse compound blocks, since emitting Lisp lists (function calls) is sufficient.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp will read the emitted compound blocks into its internal (list) format.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The Lisp REPL applies different semantics to lists than the Rebol REPL / compiler.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will deal with interpretation of the stream later. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;For now, I just want to tokenize the input.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;ASON has many basic data types and I want to experiment with tokenizing them using PEG.&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Restructuring Token Layers&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The grammar has become a tokenizer consisting of 2 layers:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;very basic tokens&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;string&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;delimiter&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;integer&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;namedMonth&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hex&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;ws&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;unknown&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;ident&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;compound tokens&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;pair&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;range&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;tuple&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;currency&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;yyyymmddhhmmsstz&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt; yyyymmddhhmmss&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;yyyymmdd&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;mmdd&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hhmmss&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;binaryBase64&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;email&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;url&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;path&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;hypertextTag&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;getUnevalField&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;setfield&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;selectField&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;pathRefinement&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;literal&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;symbol&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;refinement&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;selector&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;getword&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;defineword&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;useword&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lbracket&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rbracket&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lbrace&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rbrace&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;lpar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;rpar&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;float&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;eufloat&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;namedMonth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The 3&lt;span class=&quot;s1&quot;&gt;&lt;sup&gt;rd&lt;/sup&gt;&lt;/span&gt; layer is the emitter.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I built a generic emitter and tested it.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Then, I built a Lisp emitter and tested it.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I RY'ed the generic emitter to create the lisp emitter.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Lisp Emitter Sample&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;The sample input code:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;{ year: 2021&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;tx: [&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;         &lt;/span&gt;[ jul-23 ??? -333.53 pppppp ]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;}&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;is converted into the token stream:&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D{ {&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e! year&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;I 2021&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e! tx&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D[ [&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D[ [&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;cP july 23&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;U&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D- -&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;bF 333 53&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e? pppppp&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D] ]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D] ]&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;D} }&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;which is then converted into Lisp code&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;((ason-object-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word year)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;2021&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word tx)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;(mmdd july 23)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;???&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;#\-&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;333.53&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;(use-word pppppp)))))&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Next Step&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I want to have &quot;define-word&quot; be a function of 2 arguments, e.g. the stream should be&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;((ason-object-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word year 2021)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word tx&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;       &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(mmdd july 23)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;???&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;#\-&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;333.53&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(use-word pppppp))))))&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This could be done in&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;Lisp, or,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;the Grammar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I haven't decided, yet, how to do this.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Step (a) would need to change to grammar.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Lisp would simply read the list of tokens and consume tokens that are needed.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Step (b) would require a change to the grammar, but would make the Lisp code simpler.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This looks like a simple pattern match, which is the domain of the grammar/parser.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I will start there.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Currently, the tokenizer emits something like&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;((ason-object-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word year) 2021&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(define-word tx)&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;     &lt;/span&gt;(ason-array-block&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(mmdd july 23)&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;???&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;#\-&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;333.53&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;(use-word pppppp))))))&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bug&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;PEG allows one to write grammars that are &quot;forgiving&quot;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am choosing to write grammars explicitly, to&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;make the explanations of what is going on more clear, and,&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;to double-check the data in the pipeline (the grammar can be loosened up after most of the passes are working).&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;At the moment, some of the passes are failing on parse errors, due to an extra blank character inserted into some of the tokens.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Unfortunately, the error is caused by an invisible character, which has made it harder to detect the nature of the failure.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It seems that the token&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;bF 333 53&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;has an extra space appended to it (bF is a floating point token containing the two integer parts of a float value).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I currently save the output of each pass in a temp file (&lt;span class=&quot;s3&quot;&gt;_temp[0-9]&lt;/span&gt;).&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This is, of course, inefficient, but helps me debug the current problem.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I see that &lt;span class=&quot;s3&quot;&gt;_temp3&lt;/span&gt; does not contain the extra space, but &lt;span class=&quot;s3&quot;&gt;_temp4&lt;/span&gt; does.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Looking at run.bash, I see that the pass &lt;span class=&quot;s3&quot;&gt;date.grasem&lt;/span&gt; inputs _temp3 and outputs &lt;span class=&quot;s3&quot;&gt;_temp4&lt;/span&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This pass needs to be examined more closely.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The first step in debugging is to grab the grammar (only) from &lt;span class=&quot;s3&quot;&gt;date.grasem&lt;/span&gt; and the file &lt;span class=&quot;s3&quot;&gt;_temp3&lt;/span&gt; and put them into Ohm-editor&lt;a id=&quot;fnlink1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, for a sanity check. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Debugging question #1&lt;/span&gt;: is the token being parsed correctly?&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is immediately obvious that the token is being parsed by the rule &lt;span class=&quot;s3&quot;&gt;numericalToken&lt;/span&gt;, but with only one text field.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The definition of the rule probably allows spaces in the first text field — something I don't intend to allow.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Indeed the rule says&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;numericalToken = ntag nsubtag whiteSpace text text? eol&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;…&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;text = whiteSpace *textChar+&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;textChar = ~eol any&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s3&quot;&gt;TextChar&lt;/span&gt; accepts any character except newline.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I need to tighten this up to exclude whitespace.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;Note to self: check if other passes use this same code snippet.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Fix it, if so.&lt;a id=&quot;fnlink2&quot;&gt;&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;#fn2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Debugging question #2&lt;/span&gt;: does the code emission for rule numericalToken look OK?&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;(&lt;i&gt;A: Yes.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Maybe the extra space was a result of mis-parsing.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Try the test, again.&lt;/i&gt;)&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fixing that parse has made the problem go away.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Groups&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Design Upgrade / Change:&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;While working on this, I see a simplification.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It is not necessary to emit ASON blocks as separate tokens.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I use &quot;G &lt;i&gt;ident&lt;/i&gt;&quot; to denote the beginning of a block.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The &lt;i&gt;ident&lt;/i&gt; supplies information about the block type.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I have &lt;i&gt;ason-arrays, ason-objects &lt;/i&gt;and &lt;i&gt;ason-expressions&lt;/i&gt;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;To this, I add &lt;i&gt;define-word.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/i&gt;This addition makes it easier to parse &lt;i&gt;define-word&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The parser now emits:&lt;/p&gt;
&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;(asonArray nil …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(asonObject nil …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(asonExpression nil …)&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;(define-word &lt;i&gt;name &lt;/i&gt;…)&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;[see &lt;a href=&quot;https://github.com/guitarvydas/ason/blob/master/expr.grasem&quot;&gt;https://github.com/guitarvydas/ason/blob/master/expr.grasem&lt;/a&gt;]&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;	&lt;/span&gt;&lt;/li&gt;
  &lt;li class=&quot;li5&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Negative Integer&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I found that simple integers are not enough — not a surprise, but I didn't catch this requirement earlier.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Fixing this problem is simple — I need to add another pass.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The only tricky part of this problem is that several ASON types require dashes between integers (e.g. dates).&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I want to leave the earlier parser passes alone (they are meant to be &lt;i&gt;isolated&lt;/i&gt;) and insert a new pass near the end of the pipeline.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[see &lt;a href=&quot;https://github.com/guitarvydas/ason/blob/master/negativenum.grasem&quot;&gt;https://github.com/guitarvydas/ason/blob/master/negativenum.grasem&lt;/a&gt;]&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Bug 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;I added the line&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;balance : 1234.56&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;to the small test.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is causing me to flip-flop on what the correct solution is.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;[&lt;i&gt;The grammar as-it-stands — expects no pairs after the list of transactions.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;The above simple addition violates this original assumption.&lt;/i&gt;]&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;I am learning something new about the problem.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;The line causes a pair of tokens to be passed to the emitter&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;e! balance&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;bF 1234 56&lt;/p&gt;
&lt;p class=&quot;p7&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol class=&quot;ol2&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;At first, I thought that e! should be weeded out by the expr pass (which immediately precedes the emitter pass),&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Then, I thought that this sequence of tokens is legal.&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;Then, I thought that this sequence of tokens is illegal and should be weeded out by the expr pass before being passed to the emitter passes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I am going back-and-forth in understanding the details of this problem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This is &quot;nothing special&quot;. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I did not understand all of the details of the problem when I started.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The deeper understanding of the problem does not wreck my earlier design and code.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Layering some of the details — and eliding details — has made it possible for me to see more nuance in the problem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;At first, I thought of setting variables occurring at the beginning of object blocks.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;This new addition shows that it is reasonable to have setting of variables occur.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Now that I see this, I wonder &quot;how could I have missed this?&quot;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Layering — and moving forward with the easy stuff — has revealed more nuance to me.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I've seen such revelations happen in work that took 2 years to build.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;At the point that the revelation was made, the design had been calcified and the new revelation(s) could not be taking into account in the existing code. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The idea of scripting and generating code, makes it easy to incorporate such new revelations into the code base.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Break Down of Bug 2&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;The problem now becomes &quot;why didn't the expr pass capture and rewrite this line and its two tokens?&quot;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Theories:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;the grammar did not catch the pair of tokens that form the defineWord sequence&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;a blunder&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;something else.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Theory (a) might indicate that the rule &lt;span class=&quot;s3&quot;&gt;ident&lt;/span&gt; is picking off &lt;span class=&quot;s3&quot;&gt;tags&lt;/span&gt;, preventing rule &lt;span class=&quot;s3&quot;&gt;defineWord&lt;/span&gt; group from succeeding.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;This leads to an examination of the rules &lt;span class=&quot;s3&quot;&gt;tag&lt;/span&gt; and &lt;span class=&quot;s3&quot;&gt;ident&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In anticipation of needing to tighten up &lt;span class=&quot;s3&quot;&gt;tag&lt;/span&gt; vs. &lt;span class=&quot;s3&quot;&gt;ident&lt;/span&gt; matching in all passes, I have split some of the code (from &lt;span class=&quot;s3&quot;&gt;expr&lt;/span&gt;) into a boilerplate.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;I include this boilerplate into the &lt;span class=&quot;s3&quot;&gt;expr&lt;/span&gt; pass using the &lt;span class=&quot;s3&quot;&gt;m4&lt;a id=&quot;fnlink3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; tool.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;First, I test the file split and the use of &lt;span class=&quot;s3&quot;&gt;m4&lt;/span&gt; to see that I get the same result (the result, at this point, is an error message).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Indeed — the two tokens are being parsed as two separate tokens and the defineWordGroup rule is not matching.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The rule defineWordToken is defined as&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;defineWordGroup = defineWordToken expr expr&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;whereas it should be&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;defineWordGroup = defineWordToken expr&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;(There are one too many expr's in the rule).&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Layering Solutions&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p4&quot;&gt;One needs to roll the problem around in one's mind to fully understand it. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Some people &quot;see&quot; the details of the problem more rapidly than others, but, at some point this &quot;seeing&quot; is overwhelmed by masses of detail. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I theorize that this &lt;i&gt;always&lt;/i&gt; happens, but at different degrees of detail for different people.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;At some point, the details overwhelm one's ability to reason about a problem.&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The point of Recursive Design and FDD&lt;a id=&quot;fnlink4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fn4&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; is to create layers for details and to make it possible to reason about larger-and-larger problems, regardless of one's ability to cut through details at any level. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I may need more layers, whereas others may need fewer layers for the same problem. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The goal is to allow anyone to chunk a problem into layers and to address more interesting problems. &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;In the hands of those who require fewer layers, further chunking and layering should make it possible to address more-and-more interesting problems.&lt;/p&gt;
&lt;p class=&quot;p8&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink1&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;https://ohmlang.github.io/editor/&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink2&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Same code found in stringsAndBinary.grasem and words.grasem.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;A standard UNIX® command-line tool.&lt;/p&gt;
&lt;p class=&quot;p9&quot;&gt;&lt;a id=&quot;fn4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#fnlink4&quot;&gt;&lt;span class=&quot;s4&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s4&quot;&gt; &lt;/span&gt;Failure-Driven Design&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Recursive Design, Iterative Design By Example (2)</summary></entry><entry><title type="html">Scoping static vs dynamic</title><link href="https://computingsimplicity.neocities.org/2021/04/16/Scoping-Static-vs-Dynamic.html" rel="alternate" type="text/html" title="Scoping static vs dynamic" /><published>2021-04-16T00:00:00-04:00</published><updated>2021-04-16T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/16/Scoping%20Static%20vs%20Dynamic</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/16/Scoping-Static-vs-Dynamic.html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;
  &lt;title&gt;Scoping Static vs Dynamic&lt;/title&gt;
  &lt;meta name=&quot;CreationTime&quot; content=&quot;2021-04-16T23:58:00Z&quot;&gt;
  &lt;meta name=&quot;ModificationTime&quot; content=&quot;2021-04-16T23:58:00Z&quot;&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;
  &lt;meta name=&quot;CocoaVersion&quot; content=&quot;1894.6&quot;&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; text-indent: 18.0px; font: 13.0px Palatino; min-height: 18.0px}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino; min-height: 18.0px}
    li.li4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Palatino}
    ol.ol1 {list-style-type: decimal}
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style=&quot;width: 600px; margin: 0 auto&quot;&gt;

&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Dynamic Scoping&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Dynamic scoping — the name is looked up at &lt;i&gt;runtime&lt;/i&gt;.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;img src=&quot;/assets/2021-04-16-23-58-00-Images/scoping-Dynamic Scoping.png&quot; width=&quot;300px&quot; height=&quot;82px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;Values are placed in stacks, with one value stack per name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Only the top-most value is visible.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 style=&quot;margin: 24.0px 0.0px 12.0px 0.0px; font: 20.0px Helvetica&quot;&gt;&lt;b&gt;Static Scoping&lt;/b&gt;&lt;/h2&gt;
&lt;p class=&quot;p2&quot;&gt;Static scoping — the compiler looks up the names and assigns absolute locations for them at &lt;i&gt;compile time&lt;/i&gt;.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;After compilation, the names are discarded.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;In most languages, there are two places that variables can reside:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;global memory&lt;/li&gt;
  &lt;li class=&quot;li4&quot;&gt;stack.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;&lt;img src=&quot;/assets/2021-04-16-23-58-00-Images/scoping-Static Scoping.png&quot; width=&quot;300px&quot; height=&quot;264px&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;p5&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The compiler assigns an absolute index for each name.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;Names are stripped away after compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;script src=&quot;https://utteranc.es/client.js&quot; 
        repo=&quot;guitarvydas/guitarvydas.github.io&quot; 
        issue-term=&quot;pathname&quot; 
        theme=&quot;github-light&quot; 
        crossorigin=&quot;anonymous&quot; 
        async&gt; 
&lt;/script&gt; 
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Scoping Static vs Dynamic</summary></entry><entry><title type="html">Recursive Design, Iterative Design By Example</title><link href="https://computingsimplicity.neocities.org/2021/04/12/Recursive-Iterative-Design-By-Example.html" rel="alternate" type="text/html" title="Recursive Design, Iterative Design By Example" /><published>2021-04-12T00:00:00-04:00</published><updated>2021-04-12T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/12/Recursive%20Iterative%20Design%20By%20Example</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/12/Recursive-Iterative-Design-By-Example.html">&lt;p&gt;Recursive Design, Iterative Design By Example&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-12-Recursive Iterative Design By Example/index.html&quot;&gt;Recursive Design Iterative Design&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Recursive Design, Iterative Design By Example</summary></entry><entry><title type="html">Various Playlists</title><link href="https://computingsimplicity.neocities.org/2021/04/11/Playlists.html" rel="alternate" type="text/html" title="Various Playlists" /><published>2021-04-11T00:00:00-04:00</published><updated>2021-04-11T00:00:00-04:00</updated><id>https://computingsimplicity.neocities.org/2021/04/11/Playlists</id><content type="html" xml:base="https://computingsimplicity.neocities.org/2021/04/11/Playlists.html">&lt;p&gt;Playlists&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PROLOG for Programmers&lt;/li&gt;
  &lt;li&gt;Control Flow&lt;/li&gt;
  &lt;li&gt;Divide and Conquer (extreme)&lt;/li&gt;
  &lt;li&gt;Visual Programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://guitarvydas.github.io/assets/2021-04-11-Playlists/index.html&quot;&gt;Playlists&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;guitarvydas/guitarvydas.github.io&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async=&quot;&quot;&gt; 
&lt;/script&gt;</content><author><name></name></author><summary type="html">Playlists PROLOG for Programmers Control Flow Divide and Conquer (extreme) Visual Programming</summary></entry></feed>